
Module2_Final.elf:     file format elf32-littlenios2
Module2_Final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001cfa4 memsz 0x0001cfa4 flags r-x
    LOAD off    0x0001dfc4 vaddr 0x0801cfc4 paddr 0x0801eab4 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x000205a4 vaddr 0x080205a4 paddr 0x080205a4 align 2**12
         filesz 0x00000000 memsz 0x00000200 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012020  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000ade8  080121dc  080121dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  0801cfc4  0801eab4  0001dfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000200  080205a4  080205a4  000205a4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  080207a4  080207a4  0001fab4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001fab4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d80  00000000  00000000  0001fad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002599f  00000000  00000000  00020858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009572  00000000  00000000  000461f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ba9a  00000000  00000000  0004f769  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002920  00000000  00000000  0005b204  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003781  00000000  00000000  0005db24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017264  00000000  00000000  000612a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0007850c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  00078560  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007d14b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007d14e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007d15a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007d15b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007d15c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007d167  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007d172  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0007d17d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004c  00000000  00000000  0007d188  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0007d1d4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00069d2c  00000000  00000000  00081d20  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080121dc l    d  .rodata	00000000 .rodata
0801cfc4 l    d  .rwdata	00000000 .rwdata
080205a4 l    d  .bss	00000000 .bss
080207a4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Module2_Final_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801ca8a l     O .rodata	00000010 zeroes.4181
0801ca9a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0801cbab l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
080059d0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08007550 l     F .text	00000008 __fp_lock
08007558 l     F .text	00000008 __fp_unlock
0800756c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801cfc4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0801d408 l     O .rwdata	00000020 lc_ctype_charset
0801d3e8 l     O .rwdata	00000020 lc_message_charset
0801d428 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0801cd4c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a894 l     F .text	000000fc __sprint_r.part.0
0801ce80 l     O .rodata	00000010 blanks.4125
0801ce70 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800d1b0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800f8dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800f9fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800fa28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800fb28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800fc1c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800fd00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800fedc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801eaa4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08010168 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080102b0 l     F .text	00000038 alt_dev_reg
0801da10 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801059c l     F .text	00000204 altera_avalon_jtag_uart_irq
080107a0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08010dc0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08011140 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080115ec l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08011724 l     F .text	00000050 alt_get_errno
08011774 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08009ed4 g     F .text	00000074 _mprec_log10
08009fc0 g     F .text	0000008c __any_on
0800c1e4 g     F .text	00000054 _isatty_r
0801cd58 g     O .rodata	00000028 __mprec_tinytens
0800fe24 g     F .text	00000078 alt_main
080034d4 g     F .text	00000090 strcpy
08003408 g     F .text	000000b8 _puts_r
080206a4 g     O .bss	00000100 alt_irq
0800c238 g     F .text	0000005c _lseek_r
0801eab4 g       *ABS*	00000000 __flash_rwdata_start
0800e444 g     F .text	00000084 .hidden __eqdf2
08000324 g     F .text	0000008c ProgramPalette
080207a4 g       *ABS*	00000000 __alt_heap_start
08000d88 g     F .text	000000e4 drawFilledRectangle
080033cc g     F .text	0000003c printf
08012476 g     O .rodata	00000a64 Font10x14
0800c460 g     F .text	0000009c _wcrtomb_r
080010f0 g     F .text	00000108 GetPress
0800a78c g     F .text	0000005c __sseek
080078a0 g     F .text	00000010 __sinit
0800c2f0 g     F .text	00000154 __swbuf_r
08008318 g     F .text	0000007c _setlocale_r
080010c0 g     F .text	00000030 WaitForTouch
0800770c g     F .text	00000064 __sfmoreglue
0800febc g     F .text	00000020 __malloc_unlock
0800242c g     F .text	00000044 dongle_reset
08008e40 g     F .text	0000015c memmove
08007888 g     F .text	00000018 _cleanup
080090c0 g     F .text	000000a8 _Balloc
0800e4c8 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
080021dc g     F .text	00000058 putChar_Bluetooth
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080008e4 g     F .text	000001e4 drawcircle
0800c18c g     F .text	00000058 _fstat_r
080205c0 g     O .bss	00000004 errno
0800a708 g     F .text	00000008 __seofread
080205c8 g     O .bss	00000004 alt_argv
08026a70 g       *ABS*	00000000 _gp
08010138 g     F .text	00000030 usleep
0801d890 g     O .rwdata	00000180 alt_fd_list
080011f8 g     F .text	00000108 GetRelease
08000844 g     F .text	000000a0 DrawLineHardware
08011b54 g     F .text	00000090 alt_find_dev
08003268 g     F .text	00000138 memcpy
080014e8 g     F .text	0000049c draw_page
080024ec g     F .text	00000070 change_password
080003b0 g     F .text	00000190 OutGraphicsCharFont2a
08007560 g     F .text	0000000c _cleanup_r
0800f704 g     F .text	000000d0 .hidden __floatsidf
080116ac g     F .text	00000078 alt_io_redirect
0800e5a8 g     F .text	000000e0 .hidden __ltdf2
080121dc g       *ABS*	00000000 __DTOR_END__
080034c0 g     F .text	00000014 puts
0800a5ec g     F .text	00000074 __fpclassifyd
080026bc g     F .text	0000004c getcharGPS
08009e30 g     F .text	000000a4 __ratio
0800bd04 g     F .text	00000024 __vfiprintf_internal
0801099c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080033a0 g     F .text	0000002c _printf_r
0800d2cc g     F .text	00000008 .hidden __udivsi3
0800fb78 g     F .text	000000a4 isatty
08002310 g     F .text	00000058 start_command
0801cda8 g     O .rodata	000000c8 __mprec_tens
08016f6c g     O .rodata	00005794 Font38x59
08008394 g     F .text	0000000c __locale_charset
08011dac g     F .text	0000008c alt_icache_flush
080205bc g     O .bss	00000004 __malloc_top_pad
08002cb8 g     F .text	00000320 GPS_Real_Time
0801ea7c g     O .rwdata	00000004 __mb_cur_max
080083c4 g     F .text	0000000c _localeconv_r
080094c0 g     F .text	0000003c __i2b
08007d04 g     F .text	000004a4 __sfvwrite_r
0800a660 g     F .text	00000054 _sbrk_r
0800c294 g     F .text	0000005c _read_r
0801ea9c g     O .rwdata	00000004 alt_max_fd
0800be9c g     F .text	00000100 _fclose_r
08007520 g     F .text	00000030 fflush
080205b8 g     O .bss	00000004 __malloc_max_sbrked_mem
0800d2dc g     F .text	0000089c .hidden __adddf3
08009bd8 g     F .text	0000011c __b2d
0800cc20 g     F .text	00000590 .hidden __umoddi3
0800fd50 g     F .text	000000d4 lseek
0801ea74 g     O .rwdata	00000004 _global_impure_ptr
0800a04c g     F .text	000005a0 _realloc_r
080207a4 g       *ABS*	00000000 __bss_end
080114fc g     F .text	000000f0 alt_iic_isr_register
08011a30 g     F .text	00000104 alt_tick
0800255c g     F .text	0000010c getStringBluetooth
08002668 g     F .text	00000054 putchar_GPS
0800c660 g     F .text	000005c0 .hidden __udivdi3
0800bfb0 g     F .text	00000184 _fputwc_r
0801cd80 g     O .rodata	00000028 __mprec_bigtens
080092a4 g     F .text	00000104 __s2b
08002078 g     F .text	000000fc demo_page
0800f7d4 g     F .text	000000a4 .hidden __floatunsidf
08009980 g     F .text	00000060 __mcmp
0800102c g     F .text	00000060 Init_Touch
080078c0 g     F .text	00000018 __fp_lock_all
080114b0 g     F .text	0000004c alt_ic_irq_enabled
08001d4c g     F .text	000002d4 shuffle_names
08011998 g     F .text	00000098 alt_alarm_stop
08012eda g     O .rodata	0000140a Font16x27
0800385c g     F .text	00000024 strtol
080205d0 g     O .bss	00000004 alt_irq_active
080006ec g     F .text	000000ac DrawHLineHardware
080000ec g     F .exceptions	000000d0 alt_irq_handler
0801d868 g     O .rwdata	00000028 alt_dev_null
08001984 g     F .text	000003c8 multiple_qn
08000540 g     F .text	000001ac OutGraphicsCharFont1
08011124 g     F .text	0000001c alt_dcache_flush_all
080093a8 g     F .text	00000068 __hi0bits
0800f67c g     F .text	00000088 .hidden __fixdfsi
0801eab4 g       *ABS*	00000000 __ram_rwdata_end
0801ea94 g     O .rwdata	00000008 alt_dev_list
080101b8 g     F .text	000000f8 write
08000c1c g     F .text	000000f8 DrawCircleFill
0801cfc4 g       *ABS*	00000000 __ram_rodata_end
0800fa78 g     F .text	000000b0 fstat
08002778 g     F .text	00000038 StopLogging
0800e5a8 g     F .text	000000e0 .hidden __ledf2
0800108c g     F .text	00000034 ScreenTouched
080096f8 g     F .text	00000140 __pow5mult
0800a9a8 g     F .text	0000135c ___vfiprintf_internal_r
080205b0 g     O .bss	00000004 __nlocale_changed
0800d2d4 g     F .text	00000008 .hidden __umodsi3
080207a4 g       *ABS*	00000000 end
08000d14 g     F .text	00000074 drawTriangle
0800325c g     F .text	0000000c _atoi_r
08002020 g     F .text	00000058 handle_touch
080029f8 g     F .text	000002c0 getGpsInfo
080104d8 g     F .text	000000c4 altera_avalon_jtag_uart_init
080121dc g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08010e34 g     F .text	00000088 alt_avalon_timer_sc_init
0800f878 g     F .text	00000064 .hidden __clzsi2
08010ba8 g     F .text	00000218 altera_avalon_jtag_uart_write
08020604 g     O .bss	000000a0 dataAscii
080078b0 g     F .text	00000004 __sfp_lock_acquire
08008d58 g     F .text	000000e8 memchr
08003880 g     F .text	00001ffc ___vfprintf_internal_r
08007a14 g     F .text	000002f0 _free_r
080083a0 g     F .text	00000010 __locale_mb_cur_max
08012014 g     F .text	00000194 __call_exitprocs
080205ac g     O .bss	00000004 __mlocale_changed
0801ea80 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
080205d4 g     O .bss	00000004 _alt_tick_rate
080205a4 g     O .bss	00000004 temp_color
08009838 g     F .text	00000148 __lshift
08002368 g     F .text	00000058 end_command
080205d8 g     O .bss	00000004 _alt_nticks
0800ff2c g     F .text	000000fc read
0801031c g     F .text	00000058 alt_sys_init
08011f00 g     F .text	00000114 __register_exitproc
080094fc g     F .text	000001fc __multiply
08010848 g     F .text	00000068 altera_avalon_jtag_uart_close
0801cfc4 g       *ABS*	00000000 __ram_rwdata_start
080121dc g       *ABS*	00000000 __ram_rodata_start
080205dc g     O .bss	00000028 __malloc_current_mallinfo
08009cf4 g     F .text	0000013c __d2b
080023c0 g     F .text	0000006c putStringBluetooth
08010374 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08011cf8 g     F .text	000000b4 alt_get_fd
08010ffc g     F .text	00000128 alt_busy_sleep
0800bd84 g     F .text	00000054 _close_r
08000fdc g     F .text	00000050 getcharTouch_Screen
08011e84 g     F .text	0000007c memcmp
08010434 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080207a4 g       *ABS*	00000000 __alt_stack_base
08010484 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08001300 g     F .text	00000114 GetPressNoWait
080058a0 g     F .text	00000130 __swsetup_r
08002860 g     F .text	00000078 printTo7Seg
0800db78 g     F .text	000008cc .hidden __divdf3
08007770 g     F .text	00000118 __sfp
08009f48 g     F .text	00000078 __copybits
0801d460 g     O .rwdata	00000408 __malloc_av_
080078bc g     F .text	00000004 __sinit_lock_release
0800e688 g     F .text	00000724 .hidden __muldf3
0800a6b4 g     F .text	00000054 __sread
080027b0 g     F .text	00000038 ClearLogging
08011be4 g     F .text	00000114 alt_find_file
08011190 g     F .text	000000a4 alt_dev_llist_insert
0800fe9c g     F .text	00000020 __malloc_lock
08002fd8 g     F .text	000000d8 tostring
08010088 g     F .text	000000b0 sbrk
080072f8 g     F .text	00000228 _fflush_r
0800bdd8 g     F .text	000000c4 _calloc_r
0800227c g     F .text	00000094 send_command
08000798 g     F .text	000000ac DrawVLineHardware
080205a4 g       *ABS*	00000000 __bss_start
08008f9c g     F .text	00000124 memset
080030b0 g     F .text	000001a0 main
080205cc g     O .bss	00000004 alt_envp
080205b4 g     O .bss	00000004 __malloc_max_total_mem
080103d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800c444 g     F .text	0000001c __swbuf
08000284 g     F .text	000000a0 ReadAPixel
0800a7e8 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800bf9c g     F .text	00000014 fclose
080035fc g     F .text	00000260 _strtol_r
08005bd0 g     F .text	00001728 _dtoa_r
080085b0 g     F .text	000007a8 _malloc_r
0800c5d4 g     F .text	00000030 __ascii_wctomb
0801eaa0 g     O .rwdata	00000004 alt_errno
080081a8 g     F .text	000000b8 _fwalk
08002234 g     F .text	00000048 getChar_Bluetooth
0800d21c g     F .text	00000054 .hidden __divsi3
080078f0 g     F .text	00000124 _malloc_trim_r
080121dc g       *ABS*	00000000 __CTOR_END__
0800a7f0 g     F .text	000000a4 strcmp
080121dc g       *ABS*	00000000 __flash_rodata_start
080027e8 g     F .text	00000038 StartLogger
08000e6c g     F .text	000000a4 drawRectangle
080121dc g       *ABS*	00000000 __DTOR_LIST__
0800e444 g     F .text	00000084 .hidden __nedf2
08000f80 g     F .text	0000005c putcharTouch_Screen
080102e8 g     F .text	00000034 alt_irq_init
08001414 g     F .text	000000d4 polling_Status
08010028 g     F .text	00000060 alt_release_fd
0801ce90 g     O .rodata	00000100 .hidden __clz_tab
080205a8 g     O .bss	00000004 _PathLocale
08011e38 g     F .text	00000014 atexit
0800bd28 g     F .text	0000005c _write_r
080083d0 g     F .text	0000001c setlocale
0801ea78 g     O .rwdata	00000004 _impure_ptr
080205c4 g     O .bss	00000004 alt_argc
080001f8 g     F .text	0000008c WriteAPixel
08011290 g     F .text	0000005c _do_dtors
080083bc g     F .text	00000008 __locale_cjk_lang
08000ac8 g     F .text	00000154 DrawArc
080121dc g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
08009b78 g     F .text	00000060 __ulp
080078d8 g     F .text	00000018 __fp_unlock_all
0801ea8c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
080083ec g     F .text	0000000c localeconv
0801131c g     F .text	00000050 alt_ic_isr_register
0801eab4 g       *ABS*	00000000 _edata
080207a4 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
080108b0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0801140c g     F .text	000000a4 alt_ic_irq_disable
08002470 g     F .text	0000007c change_name
0800a710 g     F .text	0000007c __swrite
0801ea84 g     O .rwdata	00000004 __malloc_trim_threshold
08011b34 g     F .text	00000020 altera_nios2_qsys_irq_init
080083b0 g     F .text	0000000c __locale_msgcharset
08011e4c g     F .text	00000038 exit
08008260 g     F .text	000000b8 _fwalk_reent
080099e0 g     F .text	00000198 __mdiff
0800d270 g     F .text	0000005c .hidden __modsi3
0801ea70 g     O .rwdata	00000004 __ctype_ptr__
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080078b4 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08003250 g     F .text	0000000c atoi
0801caaa g     O .rodata	00000101 _ctype_
080142e4 g     O .rodata	00002c88 Font22x40
08002820 g     F .text	00000040 Init_GPS
080121a8 g     F .text	00000034 _exit
08010ebc g     F .text	00000140 alt_alarm_start
08002708 g     F .text	00000070 putString
080083f8 g     F .text	000001b8 __smakebuf_r
08003564 g     F .text	00000098 strlen
08011840 g     F .text	00000158 open
0800e4c8 g     F .text	000000e0 .hidden __gedf2
080028d8 g     F .text	00000120 printGpsData
0801ea88 g     O .rwdata	00000004 __wctomb
0800a990 g     F .text	00000018 __sprint_r
080112ec g     F .text	00000030 alt_icache_flush_all
0801eaa8 g     O .rwdata	00000004 alt_priority_mask
0801136c g     F .text	000000a0 alt_ic_irq_enable
0800587c g     F .text	00000024 __vfprintf_internal
0800c604 g     F .text	0000005c _wctomb_r
08000f10 g     F .text	00000070 clear_screen
0800edac g     F .text	000008d0 .hidden __subdf3
08009410 g     F .text	000000b0 __lo0bits
0801eaac g     O .rwdata	00000008 alt_alarm_list
08011234 g     F .text	0000005c _do_ctors
0800c4fc g     F .text	000000d8 wcrtomb
0800f92c g     F .text	000000d0 close
0800fc80 g     F .text	00000080 alt_load
0800c134 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080078b8 g     F .text	00000004 __sinit_lock_acquire
08009190 g     F .text	00000114 __multadd
08002174 g     F .text	00000068 init_Bluetooth
08009168 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__reset-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	1081a904 	addi	r2,r2,1700
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	1081a904 	addi	r2,r2,1700
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d69a9c14 	ori	gp,gp,27248
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	10816914 	ori	r2,r2,1444

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18c1e914 	ori	r3,r3,1956

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800fc800 	call	800fc80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800fe240 	call	800fe24 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <WriteAPixel>:

 * This function writes a single pixel to the x,y coords specified in the specified colour

 * Note colour is a palette number (0-255) not a 24 bit RGB value
 **********************************************************************/
void WriteAPixel(int x, int y, int Colour) {
 80001f8:	defffc04 	addi	sp,sp,-16
 80001fc:	df000315 	stw	fp,12(sp)
 8000200:	df000304 	addi	fp,sp,12
 8000204:	e13ffd15 	stw	r4,-12(fp)
 8000208:	e17ffe15 	stw	r5,-8(fp)
 800020c:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS
 8000210:	0001883a 	nop
 8000214:	00a10034 	movhi	r2,33792
 8000218:	1080000b 	ldhu	r2,0(r2)
 800021c:	10bfffcc 	andi	r2,r2,65535
 8000220:	1080004c 	andi	r2,r2,1
 8000224:	103ffb26 	beq	r2,zero,8000214 <__alt_data_end+0xfc000214>
	;			// is graphics ready for new command

	GraphicsX1Reg = x;			// write coords to x1, y1
 8000228:	00a10034 	movhi	r2,33792
 800022c:	10800084 	addi	r2,r2,2
 8000230:	e0fffd17 	ldw	r3,-12(fp)
 8000234:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000238:	00a10034 	movhi	r2,33792
 800023c:	10800104 	addi	r2,r2,4
 8000240:	e0fffe17 	ldw	r3,-8(fp)
 8000244:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 8000248:	00a10034 	movhi	r2,33792
 800024c:	10800384 	addi	r2,r2,14
 8000250:	e0ffff17 	ldw	r3,-4(fp)
 8000254:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
 8000258:	00a10034 	movhi	r2,33792
 800025c:	00c00284 	movi	r3,10
 8000260:	10c0000d 	sth	r3,0(r2)
	GraphicsBackGroundColourReg = Colour; //set the background color to white
 8000264:	00a10034 	movhi	r2,33792
 8000268:	10800404 	addi	r2,r2,16
 800026c:	e0ffff17 	ldw	r3,-4(fp)
 8000270:	10c0000d 	sth	r3,0(r2)

}
 8000274:	e037883a 	mov	sp,fp
 8000278:	df000017 	ldw	fp,0(sp)
 800027c:	dec00104 	addi	sp,sp,4
 8000280:	f800283a 	ret

08000284 <ReadAPixel>:

/*****************************************************************************************
 * This function read a single pixel from x,y coords specified and returns its colour
 * Note returned colour is a palette number (0-255) not a 24 bit RGB value
 ******************************************************************************************/
int ReadAPixel(int x, int y) {
 8000284:	defffd04 	addi	sp,sp,-12
 8000288:	df000215 	stw	fp,8(sp)
 800028c:	df000204 	addi	fp,sp,8
 8000290:	e13ffe15 	stw	r4,-8(fp)
 8000294:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS
 8000298:	0001883a 	nop
 800029c:	00a10034 	movhi	r2,33792
 80002a0:	1080000b 	ldhu	r2,0(r2)
 80002a4:	10bfffcc 	andi	r2,r2,65535
 80002a8:	1080004c 	andi	r2,r2,1
 80002ac:	103ffb26 	beq	r2,zero,800029c <__alt_data_end+0xfc00029c>
	;			// is graphics ready for new command

	GraphicsX1Reg = x;			// write coords to x1, y1
 80002b0:	00a10034 	movhi	r2,33792
 80002b4:	10800084 	addi	r2,r2,2
 80002b8:	e0fffe17 	ldw	r3,-8(fp)
 80002bc:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80002c0:	00a10034 	movhi	r2,33792
 80002c4:	10800104 	addi	r2,r2,4
 80002c8:	e0ffff17 	ldw	r3,-4(fp)
 80002cc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 80002d0:	00a10034 	movhi	r2,33792
 80002d4:	00c002c4 	movi	r3,11
 80002d8:	10c0000d 	sth	r3,0(r2)
	GraphicsBackGroundColourReg = 1;
 80002dc:	00a10034 	movhi	r2,33792
 80002e0:	10800404 	addi	r2,r2,16
 80002e4:	00c00044 	movi	r3,1
 80002e8:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS
 80002ec:	0001883a 	nop
 80002f0:	00a10034 	movhi	r2,33792
 80002f4:	1080000b 	ldhu	r2,0(r2)
 80002f8:	10bfffcc 	andi	r2,r2,65535
 80002fc:	1080004c 	andi	r2,r2,1
 8000300:	103ffb26 	beq	r2,zero,80002f0 <__alt_data_end+0xfc0002f0>
	;			// is graphics done reading pixel
	return (int) (GraphicsColourReg);	// return the palette number (colour)
 8000304:	00a10034 	movhi	r2,33792
 8000308:	10800384 	addi	r2,r2,14
 800030c:	1080000b 	ldhu	r2,0(r2)
 8000310:	10bfffcc 	andi	r2,r2,65535
}
 8000314:	e037883a 	mov	sp,fp
 8000318:	df000017 	ldw	fp,0(sp)
 800031c:	dec00104 	addi	sp,sp,4
 8000320:	f800283a 	ret

08000324 <ProgramPalette>:
/****************************************************************************************************
 ** subroutine to program a hardware (graphics chip) palette number with an RGB value
 ** e.g. ProgramPalette(RED, 0x00FF0000) ;
 ****************************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB) {
 8000324:	defffd04 	addi	sp,sp,-12
 8000328:	df000215 	stw	fp,8(sp)
 800032c:	df000204 	addi	fp,sp,8
 8000330:	e13ffe15 	stw	r4,-8(fp)
 8000334:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS
 8000338:	0001883a 	nop
 800033c:	00a10034 	movhi	r2,33792
 8000340:	1080000b 	ldhu	r2,0(r2)
 8000344:	10bfffcc 	andi	r2,r2,65535
 8000348:	1080004c 	andi	r2,r2,1
 800034c:	103ffb26 	beq	r2,zero,800033c <__alt_data_end+0xfc00033c>
	;
	GraphicsColourReg = PaletteNumber;
 8000350:	00a10034 	movhi	r2,33792
 8000354:	10800384 	addi	r2,r2,14
 8000358:	e0fffe17 	ldw	r3,-8(fp)
 800035c:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = RGB >> 16;        // program red value in ls.8 bit of X1 reg
 8000360:	00a10034 	movhi	r2,33792
 8000364:	10800084 	addi	r2,r2,2
 8000368:	e0ffff17 	ldw	r3,-4(fp)
 800036c:	1807d43a 	srai	r3,r3,16
 8000370:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = RGB;         // program green and blue into 16 bit of Y1 reg
 8000374:	00a10034 	movhi	r2,33792
 8000378:	10800104 	addi	r2,r2,4
 800037c:	e0ffff17 	ldw	r3,-4(fp)
 8000380:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = ProgramPaletteColour;	// issue command
 8000384:	00a10034 	movhi	r2,33792
 8000388:	00c00404 	movi	r3,16
 800038c:	10c0000d 	sth	r3,0(r2)
	GraphicsBackGroundColourReg = 1;
 8000390:	00a10034 	movhi	r2,33792
 8000394:	10800404 	addi	r2,r2,16
 8000398:	00c00044 	movi	r3,1
 800039c:	10c0000d 	sth	r3,0(r2)
}
 80003a0:	e037883a 	mov	sp,fp
 80003a4:	df000017 	ldw	fp,0(sp)
 80003a8:	dec00104 	addi	sp,sp,4
 80003ac:	f800283a 	ret

080003b0 <OutGraphicsCharFont2a>:
 ** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
 ** no scroll, scale x,y= 1,1
 **
 ******************************************************************************************************************************/
void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour,
		int c, int Erase) {
 80003b0:	defff004 	addi	sp,sp,-64
 80003b4:	dfc00f15 	stw	ra,60(sp)
 80003b8:	df000e15 	stw	fp,56(sp)
 80003bc:	ddc00d15 	stw	r23,52(sp)
 80003c0:	dd800c15 	stw	r22,48(sp)
 80003c4:	dd400b15 	stw	r21,44(sp)
 80003c8:	dd000a15 	stw	r20,40(sp)
 80003cc:	dcc00915 	stw	r19,36(sp)
 80003d0:	dc800815 	stw	r18,32(sp)
 80003d4:	dc400715 	stw	r17,28(sp)
 80003d8:	dc000615 	stw	r16,24(sp)
 80003dc:	df000e04 	addi	fp,sp,56
 80003e0:	e13ff215 	stw	r4,-56(fp)
 80003e4:	e17ff315 	stw	r5,-52(fp)
 80003e8:	e1bff415 	stw	r6,-48(fp)
 80003ec:	e1fff515 	stw	r7,-44(fp)
	register int row, column, theX = x, theY = y;
 80003f0:	e53ff217 	ldw	r20,-56(fp)
 80003f4:	e57ff317 	ldw	r21,-52(fp)
	register int pixels;
	register char theColour = colour;
 80003f8:	e0bff417 	ldw	r2,-48(fp)
 80003fc:	e0bff605 	stb	r2,-40(fp)
	register int BitMask, theCharacter = c, theRow, theColumn;
 8000400:	e4800217 	ldw	r18,8(fp)

	if (((short) (x) > (short) (XRES - 1))
 8000404:	e0bff217 	ldw	r2,-56(fp)
 8000408:	10bfffcc 	andi	r2,r2,65535
 800040c:	10a0001c 	xori	r2,r2,32768
 8000410:	10a00004 	addi	r2,r2,-32768
 8000414:	1080c808 	cmpgei	r2,r2,800
 8000418:	1000061e 	bne	r2,zero,8000434 <OutGraphicsCharFont2a+0x84>
			|| ((short) (y) > (short) (YRES - 1))) // if start off edge of screen don't bother
 800041c:	e0bff317 	ldw	r2,-52(fp)
 8000420:	10bfffcc 	andi	r2,r2,65535
 8000424:	10a0001c 	xori	r2,r2,32768
 8000428:	10a00004 	addi	r2,r2,-32768
 800042c:	10807810 	cmplti	r2,r2,480
 8000430:	1000011e 	bne	r2,zero,8000438 <OutGraphicsCharFont2a+0x88>
		return;
 8000434:	00003506 	br	800050c <OutGraphicsCharFont2a+0x15c>

	if (((short) (theCharacter) >= (short) (' '))
 8000438:	9005883a 	mov	r2,r18
 800043c:	10bfffcc 	andi	r2,r2,65535
 8000440:	10a0001c 	xori	r2,r2,32768
 8000444:	10a00004 	addi	r2,r2,-32768
 8000448:	10800810 	cmplti	r2,r2,32
 800044c:	10002f1e 	bne	r2,zero,800050c <OutGraphicsCharFont2a+0x15c>
			&& ((short) (theCharacter) <= (short) ('~'))) {	// if printable character
 8000450:	9005883a 	mov	r2,r18
 8000454:	10bfffcc 	andi	r2,r2,65535
 8000458:	10a0001c 	xori	r2,r2,32768
 800045c:	10a00004 	addi	r2,r2,-32768
 8000460:	10801fc8 	cmpgei	r2,r2,127
 8000464:	1000291e 	bne	r2,zero,800050c <OutGraphicsCharFont2a+0x15c>
		theCharacter -= 0x20;// subtract hex 20 to get index of first printable character (the space character)
 8000468:	94bff804 	addi	r18,r18,-32
		theRow = FONT2_YPIXELS;
 800046c:	05800384 	movi	r22,14

		theColumn = FONT2_XPIXELS;
 8000470:	05c00284 	movi	r23,10

		for (row = 0; row < theRow; row++) {
 8000474:	0021883a 	mov	r16,zero
 8000478:	00002306 	br	8000508 <OutGraphicsCharFont2a+0x158>
			pixels = Font10x14[theCharacter][row];// get the pixels for row 0 of the character to be displayed
 800047c:	00820074 	movhi	r2,2049
 8000480:	10891d84 	addi	r2,r2,9334
 8000484:	90c003a4 	muli	r3,r18,14
 8000488:	1c07883a 	add	r3,r3,r16
 800048c:	18c7883a 	add	r3,r3,r3
 8000490:	10c5883a 	add	r2,r2,r3
 8000494:	1080000b 	ldhu	r2,0(r2)
 8000498:	10bfffcc 	andi	r2,r2,65535
 800049c:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512;		// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 80004a0:	04c08004 	movi	r19,512
			for (column = 0; column < theColumn;) {
 80004a4:	0023883a 	mov	r17,zero
 80004a8:	00001506 	br	8000500 <OutGraphicsCharFont2a+0x150>
				if ((pixels & BitMask))			// if valid pixel, then write it
 80004ac:	e0fff717 	ldw	r3,-36(fp)
 80004b0:	1cc4703a 	and	r2,r3,r19
 80004b4:	10000726 	beq	r2,zero,80004d4 <OutGraphicsCharFont2a+0x124>
					WriteAPixel(theX + column, theY + row, theColour);
 80004b8:	a449883a 	add	r4,r20,r17
 80004bc:	ac07883a 	add	r3,r21,r16
 80004c0:	e0bff607 	ldb	r2,-40(fp)
 80004c4:	180b883a 	mov	r5,r3
 80004c8:	100d883a 	mov	r6,r2
 80004cc:	80001f80 	call	80001f8 <WriteAPixel>
 80004d0:	00000906 	br	80004f8 <OutGraphicsCharFont2a+0x148>
				else {// if not a valid pixel, do we erase or leave it along (no erase)
					if (Erase == TRUE)
 80004d4:	e0800317 	ldw	r2,12(fp)
 80004d8:	10800058 	cmpnei	r2,r2,1
 80004dc:	1000061e 	bne	r2,zero,80004f8 <OutGraphicsCharFont2a+0x148>
						WriteAPixel(theX + column, theY + row,
 80004e0:	a447883a 	add	r3,r20,r17
 80004e4:	ac05883a 	add	r2,r21,r16
 80004e8:	1809883a 	mov	r4,r3
 80004ec:	100b883a 	mov	r5,r2
 80004f0:	e1bff517 	ldw	r6,-44(fp)
 80004f4:	80001f80 	call	80001f8 <WriteAPixel>
								backgroundcolour);
					// else leave it alone
				}
				column++;
 80004f8:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1;
 80004fc:	9827d07a 	srai	r19,r19,1
		theColumn = FONT2_XPIXELS;

		for (row = 0; row < theRow; row++) {
			pixels = Font10x14[theCharacter][row];// get the pixels for row 0 of the character to be displayed
			BitMask = 512;		// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for (column = 0; column < theColumn;) {
 8000500:	8dffea16 	blt	r17,r23,80004ac <__alt_data_end+0xfc0004ac>
		theCharacter -= 0x20;// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;

		theColumn = FONT2_XPIXELS;

		for (row = 0; row < theRow; row++) {
 8000504:	84000044 	addi	r16,r16,1
 8000508:	85bfdc16 	blt	r16,r22,800047c <__alt_data_end+0xfc00047c>
				column++;
				BitMask = BitMask >> 1;
			}
		}
	}
}
 800050c:	e6fff804 	addi	sp,fp,-32
 8000510:	dfc00917 	ldw	ra,36(sp)
 8000514:	df000817 	ldw	fp,32(sp)
 8000518:	ddc00717 	ldw	r23,28(sp)
 800051c:	dd800617 	ldw	r22,24(sp)
 8000520:	dd400517 	ldw	r21,20(sp)
 8000524:	dd000417 	ldw	r20,16(sp)
 8000528:	dcc00317 	ldw	r19,12(sp)
 800052c:	dc800217 	ldw	r18,8(sp)
 8000530:	dc400117 	ldw	r17,4(sp)
 8000534:	dc000017 	ldw	r16,0(sp)
 8000538:	dec00a04 	addi	sp,sp,40
 800053c:	f800283a 	ret

08000540 <OutGraphicsCharFont1>:
 ** character to the background colour
 **
 *************************************************************************************************/

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour,
		int c, int Erase) {
 8000540:	defff204 	addi	sp,sp,-56
 8000544:	dfc00d15 	stw	ra,52(sp)
 8000548:	df000c15 	stw	fp,48(sp)
 800054c:	ddc00b15 	stw	r23,44(sp)
 8000550:	dd800a15 	stw	r22,40(sp)
 8000554:	dd400915 	stw	r21,36(sp)
 8000558:	dd000815 	stw	r20,32(sp)
 800055c:	dcc00715 	stw	r19,28(sp)
 8000560:	dc800615 	stw	r18,24(sp)
 8000564:	dc400515 	stw	r17,20(sp)
 8000568:	dc000415 	stw	r16,16(sp)
 800056c:	df000c04 	addi	fp,sp,48
 8000570:	e13ff415 	stw	r4,-48(fp)
 8000574:	e17ff515 	stw	r5,-44(fp)
 8000578:	e1bff615 	stw	r6,-40(fp)
 800057c:	e1fff715 	stw	r7,-36(fp)
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y;
 8000580:	e53ff417 	ldw	r20,-48(fp)
 8000584:	e57ff517 	ldw	r21,-44(fp)
	register int pixels;
	register char theColour = fontcolour;
 8000588:	e0bff617 	ldw	r2,-40(fp)
 800058c:	102f883a 	mov	r23,r2
	register int BitMask, theC = c;
 8000590:	e4400217 	ldw	r17,8(fp)

// if x,y coord off edge of screen don't bother
// XRES and YRES are #defined to be 800 and 480 respectively
	if (((short) (x) > (short) (XRES - 1))
 8000594:	e0bff417 	ldw	r2,-48(fp)
 8000598:	10bfffcc 	andi	r2,r2,65535
 800059c:	10a0001c 	xori	r2,r2,32768
 80005a0:	10a00004 	addi	r2,r2,-32768
 80005a4:	1080c808 	cmpgei	r2,r2,800
 80005a8:	1000061e 	bne	r2,zero,80005c4 <OutGraphicsCharFont1+0x84>
			|| ((short) (y) > (short) (YRES - 1)))
 80005ac:	e0bff517 	ldw	r2,-44(fp)
 80005b0:	10bfffcc 	andi	r2,r2,65535
 80005b4:	10a0001c 	xori	r2,r2,32768
 80005b8:	10a00004 	addi	r2,r2,-32768
 80005bc:	10807810 	cmplti	r2,r2,480
 80005c0:	1000011e 	bne	r2,zero,80005c8 <OutGraphicsCharFont1+0x88>
		return;
 80005c4:	00003c06 	br	80006b8 <OutGraphicsCharFont1+0x178>

// if printable character subtract hex 20
	if (((short) (theC) >= (short) (' '))
 80005c8:	8805883a 	mov	r2,r17
 80005cc:	10bfffcc 	andi	r2,r2,65535
 80005d0:	10a0001c 	xori	r2,r2,32768
 80005d4:	10a00004 	addi	r2,r2,-32768
 80005d8:	10800810 	cmplti	r2,r2,32
 80005dc:	1000361e 	bne	r2,zero,80006b8 <OutGraphicsCharFont1+0x178>
			&& ((short) (theC) <= (short) ('~'))) {
 80005e0:	8805883a 	mov	r2,r17
 80005e4:	10bfffcc 	andi	r2,r2,65535
 80005e8:	10a0001c 	xori	r2,r2,32768
 80005ec:	10a00004 	addi	r2,r2,-32768
 80005f0:	10801fc8 	cmpgei	r2,r2,127
 80005f4:	1000301e 	bne	r2,zero,80006b8 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20;
 80005f8:	8c7ff804 	addi	r17,r17,-32
		for (row = 0; (char) (row) < (char) (7); row++) {
 80005fc:	0021883a 	mov	r16,zero
 8000600:	00002706 	br	80006a0 <OutGraphicsCharFont1+0x160>

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
 8000604:	00820074 	movhi	r2,2049
 8000608:	10887704 	addi	r2,r2,8668
 800060c:	88c001e4 	muli	r3,r17,7
 8000610:	1c07883a 	add	r3,r3,r16
 8000614:	10c5883a 	add	r2,r2,r3
 8000618:	10800003 	ldbu	r2,0(r2)
 800061c:	15803fcc 	andi	r22,r2,255
			BitMask = 16;
 8000620:	04c00404 	movi	r19,16

			for (column = 0; (char) (column) < (char) (5); column++) {
 8000624:	0025883a 	mov	r18,zero
 8000628:	00001606 	br	8000684 <OutGraphicsCharFont1+0x144>

// if a pixel in the character display it
				if ((pixels & BitMask))
 800062c:	b4c4703a 	and	r2,r22,r19
 8000630:	10000926 	beq	r2,zero,8000658 <OutGraphicsCharFont1+0x118>
					WriteAPixel(theX + column, theY + row, theColour);
 8000634:	a489883a 	add	r4,r20,r18
 8000638:	ac07883a 	add	r3,r21,r16
 800063c:	b8803fcc 	andi	r2,r23,255
 8000640:	1080201c 	xori	r2,r2,128
 8000644:	10bfe004 	addi	r2,r2,-128
 8000648:	180b883a 	mov	r5,r3
 800064c:	100d883a 	mov	r6,r2
 8000650:	80001f80 	call	80001f8 <WriteAPixel>
 8000654:	00000906 	br	800067c <OutGraphicsCharFont1+0x13c>

				else {
					if (Erase == TRUE)
 8000658:	e0800317 	ldw	r2,12(fp)
 800065c:	10800058 	cmpnei	r2,r2,1
 8000660:	1000061e 	bne	r2,zero,800067c <OutGraphicsCharFont1+0x13c>

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						WriteAPixel(theX + column, theY + row,
 8000664:	a487883a 	add	r3,r20,r18
 8000668:	ac05883a 	add	r2,r21,r16
 800066c:	1809883a 	mov	r4,r3
 8000670:	100b883a 	mov	r5,r2
 8000674:	e1bff717 	ldw	r6,-36(fp)
 8000678:	80001f80 	call	80001f8 <WriteAPixel>
								backgroundcolour);
				}
				BitMask = BitMask >> 1;
 800067c:	9827d07a 	srai	r19,r19,1

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
			BitMask = 16;

			for (column = 0; (char) (column) < (char) (5); column++) {
 8000680:	94800044 	addi	r18,r18,1
 8000684:	9005883a 	mov	r2,r18
 8000688:	10803fcc 	andi	r2,r2,255
 800068c:	1080201c 	xori	r2,r2,128
 8000690:	10bfe004 	addi	r2,r2,-128
 8000694:	10800150 	cmplti	r2,r2,5
 8000698:	103fe41e 	bne	r2,zero,800062c <__alt_data_end+0xfc00062c>

// if printable character subtract hex 20
	if (((short) (theC) >= (short) (' '))
			&& ((short) (theC) <= (short) ('~'))) {
		theC = theC - 0x20;
		for (row = 0; (char) (row) < (char) (7); row++) {
 800069c:	84000044 	addi	r16,r16,1
 80006a0:	8005883a 	mov	r2,r16
 80006a4:	10803fcc 	andi	r2,r2,255
 80006a8:	1080201c 	xori	r2,r2,128
 80006ac:	10bfe004 	addi	r2,r2,-128
 80006b0:	108001d0 	cmplti	r2,r2,7
 80006b4:	103fd31e 	bne	r2,zero,8000604 <__alt_data_end+0xfc000604>
				}
				BitMask = BitMask >> 1;
			}
		}
	}
}
 80006b8:	e6fff804 	addi	sp,fp,-32
 80006bc:	dfc00917 	ldw	ra,36(sp)
 80006c0:	df000817 	ldw	fp,32(sp)
 80006c4:	ddc00717 	ldw	r23,28(sp)
 80006c8:	dd800617 	ldw	r22,24(sp)
 80006cc:	dd400517 	ldw	r21,20(sp)
 80006d0:	dd000417 	ldw	r20,16(sp)
 80006d4:	dcc00317 	ldw	r19,12(sp)
 80006d8:	dc800217 	ldw	r18,8(sp)
 80006dc:	dc400117 	ldw	r17,4(sp)
 80006e0:	dc000017 	ldw	r16,0(sp)
 80006e4:	dec00a04 	addi	sp,sp,40
 80006e8:	f800283a 	ret

080006ec <DrawHLineHardware>:
/**********************************************************************
 * This function draws a vertical or horizontal line on the screen depending on the command sent

 * Note colour is a palette number (0-255) not a 24 bit RGB value
 **********************************************************************/
void DrawHLineHardware(int x1, int y1, int length, int Colour) {
 80006ec:	defffb04 	addi	sp,sp,-20
 80006f0:	df000415 	stw	fp,16(sp)
 80006f4:	df000404 	addi	fp,sp,16
 80006f8:	e13ffc15 	stw	r4,-16(fp)
 80006fc:	e17ffd15 	stw	r5,-12(fp)
 8000700:	e1bffe15 	stw	r6,-8(fp)
 8000704:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000708:	0001883a 	nop
 800070c:	00a10034 	movhi	r2,33792
 8000710:	1080000b 	ldhu	r2,0(r2)
 8000714:	10bfffcc 	andi	r2,r2,65535
 8000718:	1080004c 	andi	r2,r2,1
 800071c:	103ffb26 	beq	r2,zero,800070c <__alt_data_end+0xfc00070c>
	GraphicsX1Reg = x1;
 8000720:	00a10034 	movhi	r2,33792
 8000724:	10800084 	addi	r2,r2,2
 8000728:	e0fffc17 	ldw	r3,-16(fp)
 800072c:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000730:	00a10034 	movhi	r2,33792
 8000734:	10800104 	addi	r2,r2,4
 8000738:	e0fffd17 	ldw	r3,-12(fp)
 800073c:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x1 + length;
 8000740:	00a10034 	movhi	r2,33792
 8000744:	10800184 	addi	r2,r2,6
 8000748:	e0fffc17 	ldw	r3,-16(fp)
 800074c:	1809883a 	mov	r4,r3
 8000750:	e0fffe17 	ldw	r3,-8(fp)
 8000754:	20c7883a 	add	r3,r4,r3
 8000758:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y1;
 800075c:	00a10034 	movhi	r2,33792
 8000760:	10800204 	addi	r2,r2,8
 8000764:	e0fffd17 	ldw	r3,-12(fp)
 8000768:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 800076c:	00a10034 	movhi	r2,33792
 8000770:	10800384 	addi	r2,r2,14
 8000774:	e0ffff17 	ldw	r3,-4(fp)
 8000778:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;
 800077c:	00a10034 	movhi	r2,33792
 8000780:	00c00044 	movi	r3,1
 8000784:	10c0000d 	sth	r3,0(r2)

}
 8000788:	e037883a 	mov	sp,fp
 800078c:	df000017 	ldw	fp,0(sp)
 8000790:	dec00104 	addi	sp,sp,4
 8000794:	f800283a 	ret

08000798 <DrawVLineHardware>:

void DrawVLineHardware(int x1, int y1, int length, int Colour) {
 8000798:	defffb04 	addi	sp,sp,-20
 800079c:	df000415 	stw	fp,16(sp)
 80007a0:	df000404 	addi	fp,sp,16
 80007a4:	e13ffc15 	stw	r4,-16(fp)
 80007a8:	e17ffd15 	stw	r5,-12(fp)
 80007ac:	e1bffe15 	stw	r6,-8(fp)
 80007b0:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 80007b4:	0001883a 	nop
 80007b8:	00a10034 	movhi	r2,33792
 80007bc:	1080000b 	ldhu	r2,0(r2)
 80007c0:	10bfffcc 	andi	r2,r2,65535
 80007c4:	1080004c 	andi	r2,r2,1
 80007c8:	103ffb26 	beq	r2,zero,80007b8 <__alt_data_end+0xfc0007b8>
	GraphicsX1Reg = x1;
 80007cc:	00a10034 	movhi	r2,33792
 80007d0:	10800084 	addi	r2,r2,2
 80007d4:	e0fffc17 	ldw	r3,-16(fp)
 80007d8:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80007dc:	00a10034 	movhi	r2,33792
 80007e0:	10800104 	addi	r2,r2,4
 80007e4:	e0fffd17 	ldw	r3,-12(fp)
 80007e8:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x1;
 80007ec:	00a10034 	movhi	r2,33792
 80007f0:	10800184 	addi	r2,r2,6
 80007f4:	e0fffc17 	ldw	r3,-16(fp)
 80007f8:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y1 + length;
 80007fc:	00a10034 	movhi	r2,33792
 8000800:	10800204 	addi	r2,r2,8
 8000804:	e0fffd17 	ldw	r3,-12(fp)
 8000808:	1809883a 	mov	r4,r3
 800080c:	e0fffe17 	ldw	r3,-8(fp)
 8000810:	20c7883a 	add	r3,r4,r3
 8000814:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000818:	00a10034 	movhi	r2,33792
 800081c:	10800384 	addi	r2,r2,14
 8000820:	e0ffff17 	ldw	r3,-4(fp)
 8000824:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;
 8000828:	00a10034 	movhi	r2,33792
 800082c:	00c00084 	movi	r3,2
 8000830:	10c0000d 	sth	r3,0(r2)

}
 8000834:	e037883a 	mov	sp,fp
 8000838:	df000017 	ldw	fp,0(sp)
 800083c:	dec00104 	addi	sp,sp,4
 8000840:	f800283a 	ret

08000844 <DrawLineHardware>:

void DrawLineHardware(int x1, int y1, int x2, int y2, int Colour) {
 8000844:	defffb04 	addi	sp,sp,-20
 8000848:	df000415 	stw	fp,16(sp)
 800084c:	df000404 	addi	fp,sp,16
 8000850:	e13ffc15 	stw	r4,-16(fp)
 8000854:	e17ffd15 	stw	r5,-12(fp)
 8000858:	e1bffe15 	stw	r6,-8(fp)
 800085c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000860:	0001883a 	nop
 8000864:	00a10034 	movhi	r2,33792
 8000868:	1080000b 	ldhu	r2,0(r2)
 800086c:	10bfffcc 	andi	r2,r2,65535
 8000870:	1080004c 	andi	r2,r2,1
 8000874:	103ffb26 	beq	r2,zero,8000864 <__alt_data_end+0xfc000864>
	GraphicsX1Reg = x1;
 8000878:	00a10034 	movhi	r2,33792
 800087c:	10800084 	addi	r2,r2,2
 8000880:	e0fffc17 	ldw	r3,-16(fp)
 8000884:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000888:	00a10034 	movhi	r2,33792
 800088c:	10800104 	addi	r2,r2,4
 8000890:	e0fffd17 	ldw	r3,-12(fp)
 8000894:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000898:	00a10034 	movhi	r2,33792
 800089c:	10800184 	addi	r2,r2,6
 80008a0:	e0fffe17 	ldw	r3,-8(fp)
 80008a4:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 80008a8:	00a10034 	movhi	r2,33792
 80008ac:	10800204 	addi	r2,r2,8
 80008b0:	e0ffff17 	ldw	r3,-4(fp)
 80008b4:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 80008b8:	00a10034 	movhi	r2,33792
 80008bc:	10800384 	addi	r2,r2,14
 80008c0:	e0c00117 	ldw	r3,4(fp)
 80008c4:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;
 80008c8:	00a10034 	movhi	r2,33792
 80008cc:	00c000c4 	movi	r3,3
 80008d0:	10c0000d 	sth	r3,0(r2)

}
 80008d4:	e037883a 	mov	sp,fp
 80008d8:	df000017 	ldw	fp,0(sp)
 80008dc:	dec00104 	addi	sp,sp,4
 80008e0:	f800283a 	ret

080008e4 <drawcircle>:
/********************************************************
 *Implementation of circle drawing algorithm
 *
 ********************************************************/

void drawcircle(int x0, int y0, int radius, int Colour) {
 80008e4:	defff704 	addi	sp,sp,-36
 80008e8:	dfc00815 	stw	ra,32(sp)
 80008ec:	df000715 	stw	fp,28(sp)
 80008f0:	df000704 	addi	fp,sp,28
 80008f4:	e13ffc15 	stw	r4,-16(fp)
 80008f8:	e17ffd15 	stw	r5,-12(fp)
 80008fc:	e1bffe15 	stw	r6,-8(fp)
 8000900:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 8000904:	e0bffe17 	ldw	r2,-8(fp)
 8000908:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
 800090c:	e03ffa15 	stw	zero,-24(fp)
	int err = 0;
 8000910:	e03ffb15 	stw	zero,-20(fp)

	WAIT_FOR_GRAPHICS;
 8000914:	0001883a 	nop
 8000918:	00a10034 	movhi	r2,33792
 800091c:	1080000b 	ldhu	r2,0(r2)
 8000920:	10bfffcc 	andi	r2,r2,65535
 8000924:	1080004c 	andi	r2,r2,1
 8000928:	103ffb26 	beq	r2,zero,8000918 <__alt_data_end+0xfc000918>

	while (x >= y) {
 800092c:	00005e06 	br	8000aa8 <drawcircle+0x1c4>
		WriteAPixel(x0 + x, y0 + y, Colour);
 8000930:	e0fffc17 	ldw	r3,-16(fp)
 8000934:	e0bff917 	ldw	r2,-28(fp)
 8000938:	1889883a 	add	r4,r3,r2
 800093c:	e0fffd17 	ldw	r3,-12(fp)
 8000940:	e0bffa17 	ldw	r2,-24(fp)
 8000944:	1885883a 	add	r2,r3,r2
 8000948:	100b883a 	mov	r5,r2
 800094c:	e1bfff17 	ldw	r6,-4(fp)
 8000950:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 + y, y0 + x, Colour);
 8000954:	e0fffc17 	ldw	r3,-16(fp)
 8000958:	e0bffa17 	ldw	r2,-24(fp)
 800095c:	1889883a 	add	r4,r3,r2
 8000960:	e0fffd17 	ldw	r3,-12(fp)
 8000964:	e0bff917 	ldw	r2,-28(fp)
 8000968:	1885883a 	add	r2,r3,r2
 800096c:	100b883a 	mov	r5,r2
 8000970:	e1bfff17 	ldw	r6,-4(fp)
 8000974:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - y, y0 + x, Colour);
 8000978:	e0fffc17 	ldw	r3,-16(fp)
 800097c:	e0bffa17 	ldw	r2,-24(fp)
 8000980:	1889c83a 	sub	r4,r3,r2
 8000984:	e0fffd17 	ldw	r3,-12(fp)
 8000988:	e0bff917 	ldw	r2,-28(fp)
 800098c:	1885883a 	add	r2,r3,r2
 8000990:	100b883a 	mov	r5,r2
 8000994:	e1bfff17 	ldw	r6,-4(fp)
 8000998:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - x, y0 + y, Colour);
 800099c:	e0fffc17 	ldw	r3,-16(fp)
 80009a0:	e0bff917 	ldw	r2,-28(fp)
 80009a4:	1889c83a 	sub	r4,r3,r2
 80009a8:	e0fffd17 	ldw	r3,-12(fp)
 80009ac:	e0bffa17 	ldw	r2,-24(fp)
 80009b0:	1885883a 	add	r2,r3,r2
 80009b4:	100b883a 	mov	r5,r2
 80009b8:	e1bfff17 	ldw	r6,-4(fp)
 80009bc:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - x, y0 - y, Colour);
 80009c0:	e0fffc17 	ldw	r3,-16(fp)
 80009c4:	e0bff917 	ldw	r2,-28(fp)
 80009c8:	1889c83a 	sub	r4,r3,r2
 80009cc:	e0fffd17 	ldw	r3,-12(fp)
 80009d0:	e0bffa17 	ldw	r2,-24(fp)
 80009d4:	1885c83a 	sub	r2,r3,r2
 80009d8:	100b883a 	mov	r5,r2
 80009dc:	e1bfff17 	ldw	r6,-4(fp)
 80009e0:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - y, y0 - x, Colour);
 80009e4:	e0fffc17 	ldw	r3,-16(fp)
 80009e8:	e0bffa17 	ldw	r2,-24(fp)
 80009ec:	1889c83a 	sub	r4,r3,r2
 80009f0:	e0fffd17 	ldw	r3,-12(fp)
 80009f4:	e0bff917 	ldw	r2,-28(fp)
 80009f8:	1885c83a 	sub	r2,r3,r2
 80009fc:	100b883a 	mov	r5,r2
 8000a00:	e1bfff17 	ldw	r6,-4(fp)
 8000a04:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 + y, y0 - x, Colour);
 8000a08:	e0fffc17 	ldw	r3,-16(fp)
 8000a0c:	e0bffa17 	ldw	r2,-24(fp)
 8000a10:	1889883a 	add	r4,r3,r2
 8000a14:	e0fffd17 	ldw	r3,-12(fp)
 8000a18:	e0bff917 	ldw	r2,-28(fp)
 8000a1c:	1885c83a 	sub	r2,r3,r2
 8000a20:	100b883a 	mov	r5,r2
 8000a24:	e1bfff17 	ldw	r6,-4(fp)
 8000a28:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 + x, y0 - y, Colour);
 8000a2c:	e0fffc17 	ldw	r3,-16(fp)
 8000a30:	e0bff917 	ldw	r2,-28(fp)
 8000a34:	1889883a 	add	r4,r3,r2
 8000a38:	e0fffd17 	ldw	r3,-12(fp)
 8000a3c:	e0bffa17 	ldw	r2,-24(fp)
 8000a40:	1885c83a 	sub	r2,r3,r2
 8000a44:	100b883a 	mov	r5,r2
 8000a48:	e1bfff17 	ldw	r6,-4(fp)
 8000a4c:	80001f80 	call	80001f8 <WriteAPixel>

		if (err <= 0) {
 8000a50:	e0bffb17 	ldw	r2,-20(fp)
 8000a54:	00800916 	blt	zero,r2,8000a7c <drawcircle+0x198>
			y += 1;
 8000a58:	e0bffa17 	ldw	r2,-24(fp)
 8000a5c:	10800044 	addi	r2,r2,1
 8000a60:	e0bffa15 	stw	r2,-24(fp)
			err += 2 * y + 1;
 8000a64:	e0bffa17 	ldw	r2,-24(fp)
 8000a68:	1085883a 	add	r2,r2,r2
 8000a6c:	10800044 	addi	r2,r2,1
 8000a70:	e0fffb17 	ldw	r3,-20(fp)
 8000a74:	1885883a 	add	r2,r3,r2
 8000a78:	e0bffb15 	stw	r2,-20(fp)
		}
		if (err > 0) {
 8000a7c:	e0bffb17 	ldw	r2,-20(fp)
 8000a80:	0080090e 	bge	zero,r2,8000aa8 <drawcircle+0x1c4>
			x -= 1;
 8000a84:	e0bff917 	ldw	r2,-28(fp)
 8000a88:	10bfffc4 	addi	r2,r2,-1
 8000a8c:	e0bff915 	stw	r2,-28(fp)
			err -= 2 * x + 1;
 8000a90:	e0bff917 	ldw	r2,-28(fp)
 8000a94:	1085883a 	add	r2,r2,r2
 8000a98:	0084303a 	nor	r2,zero,r2
 8000a9c:	e0fffb17 	ldw	r3,-20(fp)
 8000aa0:	1885883a 	add	r2,r3,r2
 8000aa4:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
	int err = 0;

	WAIT_FOR_GRAPHICS;

	while (x >= y) {
 8000aa8:	e0fff917 	ldw	r3,-28(fp)
 8000aac:	e0bffa17 	ldw	r2,-24(fp)
 8000ab0:	18bf9f0e 	bge	r3,r2,8000930 <__alt_data_end+0xfc000930>
		}
	}



}
 8000ab4:	e037883a 	mov	sp,fp
 8000ab8:	dfc00117 	ldw	ra,4(sp)
 8000abc:	df000017 	ldw	fp,0(sp)
 8000ac0:	dec00204 	addi	sp,sp,8
 8000ac4:	f800283a 	ret

08000ac8 <DrawArc>:

/***********************
 * Function that draws an arc or half a circle
 */
void DrawArc(int x0, int y0, int radius, int Colour) {
 8000ac8:	defff704 	addi	sp,sp,-36
 8000acc:	dfc00815 	stw	ra,32(sp)
 8000ad0:	df000715 	stw	fp,28(sp)
 8000ad4:	df000704 	addi	fp,sp,28
 8000ad8:	e13ffc15 	stw	r4,-16(fp)
 8000adc:	e17ffd15 	stw	r5,-12(fp)
 8000ae0:	e1bffe15 	stw	r6,-8(fp)
 8000ae4:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 8000ae8:	e0bffe17 	ldw	r2,-8(fp)
 8000aec:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
 8000af0:	e03ffa15 	stw	zero,-24(fp)
	int err = 0;
 8000af4:	e03ffb15 	stw	zero,-20(fp)

	WAIT_FOR_GRAPHICS;
 8000af8:	0001883a 	nop
 8000afc:	00a10034 	movhi	r2,33792
 8000b00:	1080000b 	ldhu	r2,0(r2)
 8000b04:	10bfffcc 	andi	r2,r2,65535
 8000b08:	1080004c 	andi	r2,r2,1
 8000b0c:	103ffb26 	beq	r2,zero,8000afc <__alt_data_end+0xfc000afc>

	while (x >= y) {
 8000b10:	00003a06 	br	8000bfc <DrawArc+0x134>
		WriteAPixel(x0 + x, y0 + y, Colour);
 8000b14:	e0fffc17 	ldw	r3,-16(fp)
 8000b18:	e0bff917 	ldw	r2,-28(fp)
 8000b1c:	1889883a 	add	r4,r3,r2
 8000b20:	e0fffd17 	ldw	r3,-12(fp)
 8000b24:	e0bffa17 	ldw	r2,-24(fp)
 8000b28:	1885883a 	add	r2,r3,r2
 8000b2c:	100b883a 	mov	r5,r2
 8000b30:	e1bfff17 	ldw	r6,-4(fp)
 8000b34:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 + y, y0 + x, Colour);
 8000b38:	e0fffc17 	ldw	r3,-16(fp)
 8000b3c:	e0bffa17 	ldw	r2,-24(fp)
 8000b40:	1889883a 	add	r4,r3,r2
 8000b44:	e0fffd17 	ldw	r3,-12(fp)
 8000b48:	e0bff917 	ldw	r2,-28(fp)
 8000b4c:	1885883a 	add	r2,r3,r2
 8000b50:	100b883a 	mov	r5,r2
 8000b54:	e1bfff17 	ldw	r6,-4(fp)
 8000b58:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - y, y0 + x, Colour);
 8000b5c:	e0fffc17 	ldw	r3,-16(fp)
 8000b60:	e0bffa17 	ldw	r2,-24(fp)
 8000b64:	1889c83a 	sub	r4,r3,r2
 8000b68:	e0fffd17 	ldw	r3,-12(fp)
 8000b6c:	e0bff917 	ldw	r2,-28(fp)
 8000b70:	1885883a 	add	r2,r3,r2
 8000b74:	100b883a 	mov	r5,r2
 8000b78:	e1bfff17 	ldw	r6,-4(fp)
 8000b7c:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - x, y0 + y, Colour);
 8000b80:	e0fffc17 	ldw	r3,-16(fp)
 8000b84:	e0bff917 	ldw	r2,-28(fp)
 8000b88:	1889c83a 	sub	r4,r3,r2
 8000b8c:	e0fffd17 	ldw	r3,-12(fp)
 8000b90:	e0bffa17 	ldw	r2,-24(fp)
 8000b94:	1885883a 	add	r2,r3,r2
 8000b98:	100b883a 	mov	r5,r2
 8000b9c:	e1bfff17 	ldw	r6,-4(fp)
 8000ba0:	80001f80 	call	80001f8 <WriteAPixel>

		if (err <= 0) {
 8000ba4:	e0bffb17 	ldw	r2,-20(fp)
 8000ba8:	00800916 	blt	zero,r2,8000bd0 <DrawArc+0x108>
			y += 1;
 8000bac:	e0bffa17 	ldw	r2,-24(fp)
 8000bb0:	10800044 	addi	r2,r2,1
 8000bb4:	e0bffa15 	stw	r2,-24(fp)
			err += 2 * y + 1;
 8000bb8:	e0bffa17 	ldw	r2,-24(fp)
 8000bbc:	1085883a 	add	r2,r2,r2
 8000bc0:	10800044 	addi	r2,r2,1
 8000bc4:	e0fffb17 	ldw	r3,-20(fp)
 8000bc8:	1885883a 	add	r2,r3,r2
 8000bcc:	e0bffb15 	stw	r2,-20(fp)
		}
		if (err > 0) {
 8000bd0:	e0bffb17 	ldw	r2,-20(fp)
 8000bd4:	0080090e 	bge	zero,r2,8000bfc <DrawArc+0x134>
			x -= 1;
 8000bd8:	e0bff917 	ldw	r2,-28(fp)
 8000bdc:	10bfffc4 	addi	r2,r2,-1
 8000be0:	e0bff915 	stw	r2,-28(fp)
			err -= 2 * x + 1;
 8000be4:	e0bff917 	ldw	r2,-28(fp)
 8000be8:	1085883a 	add	r2,r2,r2
 8000bec:	0084303a 	nor	r2,zero,r2
 8000bf0:	e0fffb17 	ldw	r3,-20(fp)
 8000bf4:	1885883a 	add	r2,r3,r2
 8000bf8:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
	int err = 0;

	WAIT_FOR_GRAPHICS;

	while (x >= y) {
 8000bfc:	e0fff917 	ldw	r3,-28(fp)
 8000c00:	e0bffa17 	ldw	r2,-24(fp)
 8000c04:	18bfc30e 	bge	r3,r2,8000b14 <__alt_data_end+0xfc000b14>
		if (err > 0) {
			x -= 1;
			err -= 2 * x + 1;
		}
	}
}
 8000c08:	e037883a 	mov	sp,fp
 8000c0c:	dfc00117 	ldw	ra,4(sp)
 8000c10:	df000017 	ldw	fp,0(sp)
 8000c14:	dec00204 	addi	sp,sp,8
 8000c18:	f800283a 	ret

08000c1c <DrawCircleFill>:

/************************************************************
 * Function to draw a filled circle
 */
void DrawCircleFill(int x0, int y0, int radius, int COLOUR) {
 8000c1c:	defff804 	addi	sp,sp,-32
 8000c20:	dfc00715 	stw	ra,28(sp)
 8000c24:	df000615 	stw	fp,24(sp)
 8000c28:	df000604 	addi	fp,sp,24
 8000c2c:	e13ffc15 	stw	r4,-16(fp)
 8000c30:	e17ffd15 	stw	r5,-12(fp)
 8000c34:	e1bffe15 	stw	r6,-8(fp)
 8000c38:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 8000c3c:	e0bffe17 	ldw	r2,-8(fp)
 8000c40:	e0bffa15 	stw	r2,-24(fp)
	int y = 0;
 8000c44:	e03ffb15 	stw	zero,-20(fp)


	WAIT_FOR_GRAPHICS;
 8000c48:	0001883a 	nop
 8000c4c:	00a10034 	movhi	r2,33792
 8000c50:	1080000b 	ldhu	r2,0(r2)
 8000c54:	10bfffcc 	andi	r2,r2,65535
 8000c58:	1080004c 	andi	r2,r2,1
 8000c5c:	103ffb26 	beq	r2,zero,8000c4c <__alt_data_end+0xfc000c4c>

	//alternative algorithm
		for( y=-radius; y<=radius; y++)
 8000c60:	e0bffe17 	ldw	r2,-8(fp)
 8000c64:	0085c83a 	sub	r2,zero,r2
 8000c68:	e0bffb15 	stw	r2,-20(fp)
 8000c6c:	00002106 	br	8000cf4 <DrawCircleFill+0xd8>
		    for( x=-radius; x<=radius; x++)
 8000c70:	e0bffe17 	ldw	r2,-8(fp)
 8000c74:	0085c83a 	sub	r2,zero,r2
 8000c78:	e0bffa15 	stw	r2,-24(fp)
 8000c7c:	00001706 	br	8000cdc <DrawCircleFill+0xc0>
		        if(x*x+y*y <= radius*radius)
 8000c80:	e0fffa17 	ldw	r3,-24(fp)
 8000c84:	e0bffa17 	ldw	r2,-24(fp)
 8000c88:	1887383a 	mul	r3,r3,r2
 8000c8c:	e13ffb17 	ldw	r4,-20(fp)
 8000c90:	e0bffb17 	ldw	r2,-20(fp)
 8000c94:	2085383a 	mul	r2,r4,r2
 8000c98:	1885883a 	add	r2,r3,r2
 8000c9c:	e13ffe17 	ldw	r4,-8(fp)
 8000ca0:	e0fffe17 	ldw	r3,-8(fp)
 8000ca4:	20c7383a 	mul	r3,r4,r3
 8000ca8:	18800916 	blt	r3,r2,8000cd0 <DrawCircleFill+0xb4>
		            WriteAPixel(x0+x, y0+y, COLOUR);
 8000cac:	e0fffc17 	ldw	r3,-16(fp)
 8000cb0:	e0bffa17 	ldw	r2,-24(fp)
 8000cb4:	1889883a 	add	r4,r3,r2
 8000cb8:	e0fffd17 	ldw	r3,-12(fp)
 8000cbc:	e0bffb17 	ldw	r2,-20(fp)
 8000cc0:	1885883a 	add	r2,r3,r2
 8000cc4:	100b883a 	mov	r5,r2
 8000cc8:	e1bfff17 	ldw	r6,-4(fp)
 8000ccc:	80001f80 	call	80001f8 <WriteAPixel>

	WAIT_FOR_GRAPHICS;

	//alternative algorithm
		for( y=-radius; y<=radius; y++)
		    for( x=-radius; x<=radius; x++)
 8000cd0:	e0bffa17 	ldw	r2,-24(fp)
 8000cd4:	10800044 	addi	r2,r2,1
 8000cd8:	e0bffa15 	stw	r2,-24(fp)
 8000cdc:	e0bffa17 	ldw	r2,-24(fp)
 8000ce0:	e0fffe17 	ldw	r3,-8(fp)
 8000ce4:	18bfe60e 	bge	r3,r2,8000c80 <__alt_data_end+0xfc000c80>


	WAIT_FOR_GRAPHICS;

	//alternative algorithm
		for( y=-radius; y<=radius; y++)
 8000ce8:	e0bffb17 	ldw	r2,-20(fp)
 8000cec:	10800044 	addi	r2,r2,1
 8000cf0:	e0bffb15 	stw	r2,-20(fp)
 8000cf4:	e0bffb17 	ldw	r2,-20(fp)
 8000cf8:	e0fffe17 	ldw	r3,-8(fp)
 8000cfc:	18bfdc0e 	bge	r3,r2,8000c70 <__alt_data_end+0xfc000c70>
		    for( x=-radius; x<=radius; x++)
		        if(x*x+y*y <= radius*radius)
		            WriteAPixel(x0+x, y0+y, COLOUR);

}
 8000d00:	e037883a 	mov	sp,fp
 8000d04:	dfc00117 	ldw	ra,4(sp)
 8000d08:	df000017 	ldw	fp,0(sp)
 8000d0c:	dec00204 	addi	sp,sp,8
 8000d10:	f800283a 	ret

08000d14 <drawTriangle>:

/*******************************************************************************
 ** Function that draws a triangle on the screen
 *******************************************************************************/
void drawTriangle() {
 8000d14:	defffd04 	addi	sp,sp,-12
 8000d18:	dfc00215 	stw	ra,8(sp)
 8000d1c:	df000115 	stw	fp,4(sp)
 8000d20:	df000104 	addi	fp,sp,4
	DrawLineHardware(200, 200, 100, 400, 2);
 8000d24:	00800084 	movi	r2,2
 8000d28:	d8800015 	stw	r2,0(sp)
 8000d2c:	01003204 	movi	r4,200
 8000d30:	01403204 	movi	r5,200
 8000d34:	01801904 	movi	r6,100
 8000d38:	01c06404 	movi	r7,400
 8000d3c:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(100, 400, 300, 400, 4);
 8000d40:	00800104 	movi	r2,4
 8000d44:	d8800015 	stw	r2,0(sp)
 8000d48:	01001904 	movi	r4,100
 8000d4c:	01406404 	movi	r5,400
 8000d50:	01804b04 	movi	r6,300
 8000d54:	01c06404 	movi	r7,400
 8000d58:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(300, 400, 200, 200, 0);
 8000d5c:	d8000015 	stw	zero,0(sp)
 8000d60:	01004b04 	movi	r4,300
 8000d64:	01406404 	movi	r5,400
 8000d68:	01803204 	movi	r6,200
 8000d6c:	01c03204 	movi	r7,200
 8000d70:	80008440 	call	8000844 <DrawLineHardware>
}
 8000d74:	e037883a 	mov	sp,fp
 8000d78:	dfc00117 	ldw	ra,4(sp)
 8000d7c:	df000017 	ldw	fp,0(sp)
 8000d80:	dec00204 	addi	sp,sp,8
 8000d84:	f800283a 	ret

08000d88 <drawFilledRectangle>:

/*******************************************************************************
 **Function that draws a filled rectangle on the screen
 *******************************************************************************/
void drawFilledRectangle(int y1, int y2, int x1, int x2, int Colour) {
 8000d88:	defff804 	addi	sp,sp,-32
 8000d8c:	dfc00715 	stw	ra,28(sp)
 8000d90:	df000615 	stw	fp,24(sp)
 8000d94:	df000604 	addi	fp,sp,24
 8000d98:	e13ffc15 	stw	r4,-16(fp)
 8000d9c:	e17ffd15 	stw	r5,-12(fp)
 8000da0:	e1bffe15 	stw	r6,-8(fp)
 8000da4:	e1ffff15 	stw	r7,-4(fp)
	int YVALUE;
	DrawLineHardware(x1, y1, x2, y1, Colour);
 8000da8:	e0800217 	ldw	r2,8(fp)
 8000dac:	d8800015 	stw	r2,0(sp)
 8000db0:	e13ffe17 	ldw	r4,-8(fp)
 8000db4:	e17ffc17 	ldw	r5,-16(fp)
 8000db8:	e1bfff17 	ldw	r6,-4(fp)
 8000dbc:	e1fffc17 	ldw	r7,-16(fp)
 8000dc0:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x2, y1, x2, y2, Colour);
 8000dc4:	e0800217 	ldw	r2,8(fp)
 8000dc8:	d8800015 	stw	r2,0(sp)
 8000dcc:	e13fff17 	ldw	r4,-4(fp)
 8000dd0:	e17ffc17 	ldw	r5,-16(fp)
 8000dd4:	e1bfff17 	ldw	r6,-4(fp)
 8000dd8:	e1fffd17 	ldw	r7,-12(fp)
 8000ddc:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x2, y2, x1, y2, Colour);
 8000de0:	e0800217 	ldw	r2,8(fp)
 8000de4:	d8800015 	stw	r2,0(sp)
 8000de8:	e13fff17 	ldw	r4,-4(fp)
 8000dec:	e17ffd17 	ldw	r5,-12(fp)
 8000df0:	e1bffe17 	ldw	r6,-8(fp)
 8000df4:	e1fffd17 	ldw	r7,-12(fp)
 8000df8:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x1, y2, x1, y1, Colour);
 8000dfc:	e0800217 	ldw	r2,8(fp)
 8000e00:	d8800015 	stw	r2,0(sp)
 8000e04:	e13ffe17 	ldw	r4,-8(fp)
 8000e08:	e17ffd17 	ldw	r5,-12(fp)
 8000e0c:	e1bffe17 	ldw	r6,-8(fp)
 8000e10:	e1fffc17 	ldw	r7,-16(fp)
 8000e14:	80008440 	call	8000844 <DrawLineHardware>

	for (YVALUE = y1; YVALUE <= y2; YVALUE++) { //FILL THE RECTANGLE WITH color 6== cyan
 8000e18:	e0bffc17 	ldw	r2,-16(fp)
 8000e1c:	e0bffb15 	stw	r2,-20(fp)
 8000e20:	00000a06 	br	8000e4c <drawFilledRectangle+0xc4>
		DrawLineHardware(x1, YVALUE, x2, YVALUE, Colour);
 8000e24:	e0800217 	ldw	r2,8(fp)
 8000e28:	d8800015 	stw	r2,0(sp)
 8000e2c:	e13ffe17 	ldw	r4,-8(fp)
 8000e30:	e17ffb17 	ldw	r5,-20(fp)
 8000e34:	e1bfff17 	ldw	r6,-4(fp)
 8000e38:	e1fffb17 	ldw	r7,-20(fp)
 8000e3c:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x1, y1, x2, y1, Colour);
	DrawLineHardware(x2, y1, x2, y2, Colour);
	DrawLineHardware(x2, y2, x1, y2, Colour);
	DrawLineHardware(x1, y2, x1, y1, Colour);

	for (YVALUE = y1; YVALUE <= y2; YVALUE++) { //FILL THE RECTANGLE WITH color 6== cyan
 8000e40:	e0bffb17 	ldw	r2,-20(fp)
 8000e44:	10800044 	addi	r2,r2,1
 8000e48:	e0bffb15 	stw	r2,-20(fp)
 8000e4c:	e0bffb17 	ldw	r2,-20(fp)
 8000e50:	e0fffd17 	ldw	r3,-12(fp)
 8000e54:	18bff30e 	bge	r3,r2,8000e24 <__alt_data_end+0xfc000e24>
		DrawLineHardware(x1, YVALUE, x2, YVALUE, Colour);
	}
}
 8000e58:	e037883a 	mov	sp,fp
 8000e5c:	dfc00117 	ldw	ra,4(sp)
 8000e60:	df000017 	ldw	fp,0(sp)
 8000e64:	dec00204 	addi	sp,sp,8
 8000e68:	f800283a 	ret

08000e6c <drawRectangle>:

void drawRectangle(int y1, int y2, int x1, int x2, int Colour) {
 8000e6c:	defff904 	addi	sp,sp,-28
 8000e70:	dfc00615 	stw	ra,24(sp)
 8000e74:	df000515 	stw	fp,20(sp)
 8000e78:	df000504 	addi	fp,sp,20
 8000e7c:	e13ffc15 	stw	r4,-16(fp)
 8000e80:	e17ffd15 	stw	r5,-12(fp)
 8000e84:	e1bffe15 	stw	r6,-8(fp)
 8000e88:	e1ffff15 	stw	r7,-4(fp)
	DrawLineHardware(x1, y1, x2, y1, Colour);
 8000e8c:	e0800217 	ldw	r2,8(fp)
 8000e90:	d8800015 	stw	r2,0(sp)
 8000e94:	e13ffe17 	ldw	r4,-8(fp)
 8000e98:	e17ffc17 	ldw	r5,-16(fp)
 8000e9c:	e1bfff17 	ldw	r6,-4(fp)
 8000ea0:	e1fffc17 	ldw	r7,-16(fp)
 8000ea4:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x2, y1, x2, y2, Colour);
 8000ea8:	e0800217 	ldw	r2,8(fp)
 8000eac:	d8800015 	stw	r2,0(sp)
 8000eb0:	e13fff17 	ldw	r4,-4(fp)
 8000eb4:	e17ffc17 	ldw	r5,-16(fp)
 8000eb8:	e1bfff17 	ldw	r6,-4(fp)
 8000ebc:	e1fffd17 	ldw	r7,-12(fp)
 8000ec0:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x2, y2, x1, y2, Colour);
 8000ec4:	e0800217 	ldw	r2,8(fp)
 8000ec8:	d8800015 	stw	r2,0(sp)
 8000ecc:	e13fff17 	ldw	r4,-4(fp)
 8000ed0:	e17ffd17 	ldw	r5,-12(fp)
 8000ed4:	e1bffe17 	ldw	r6,-8(fp)
 8000ed8:	e1fffd17 	ldw	r7,-12(fp)
 8000edc:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x1, y2, x1, y1, Colour);
 8000ee0:	e0800217 	ldw	r2,8(fp)
 8000ee4:	d8800015 	stw	r2,0(sp)
 8000ee8:	e13ffe17 	ldw	r4,-8(fp)
 8000eec:	e17ffd17 	ldw	r5,-12(fp)
 8000ef0:	e1bffe17 	ldw	r6,-8(fp)
 8000ef4:	e1fffc17 	ldw	r7,-16(fp)
 8000ef8:	80008440 	call	8000844 <DrawLineHardware>
}
 8000efc:	e037883a 	mov	sp,fp
 8000f00:	dfc00117 	ldw	ra,4(sp)
 8000f04:	df000017 	ldw	fp,0(sp)
 8000f08:	dec00204 	addi	sp,sp,8
 8000f0c:	f800283a 	ret

08000f10 <clear_screen>:


/*******************************************************************************
 ** Function that clears screen and makes it white
 *******************************************************************************/
void clear_screen(int Colour) {
 8000f10:	defffb04 	addi	sp,sp,-20
 8000f14:	dfc00415 	stw	ra,16(sp)
 8000f18:	df000315 	stw	fp,12(sp)
 8000f1c:	df000304 	addi	fp,sp,12
 8000f20:	e13fff15 	stw	r4,-4(fp)

	printf("Clearing the screen\n");
 8000f24:	010200b4 	movhi	r4,2050
 8000f28:	2131c004 	addi	r4,r4,-14592
 8000f2c:	80034c00 	call	80034c0 <puts>

	int y1;
	for (y1 = 0; y1 <= 600; y1++) {
 8000f30:	e03ffe15 	stw	zero,-8(fp)
 8000f34:	00000a06 	br	8000f60 <clear_screen+0x50>
		DrawLineHardware(0, y1, 820, y1, Colour);
 8000f38:	e0bfff17 	ldw	r2,-4(fp)
 8000f3c:	d8800015 	stw	r2,0(sp)
 8000f40:	0009883a 	mov	r4,zero
 8000f44:	e17ffe17 	ldw	r5,-8(fp)
 8000f48:	0180cd04 	movi	r6,820
 8000f4c:	e1fffe17 	ldw	r7,-8(fp)
 8000f50:	80008440 	call	8000844 <DrawLineHardware>
void clear_screen(int Colour) {

	printf("Clearing the screen\n");

	int y1;
	for (y1 = 0; y1 <= 600; y1++) {
 8000f54:	e0bffe17 	ldw	r2,-8(fp)
 8000f58:	10800044 	addi	r2,r2,1
 8000f5c:	e0bffe15 	stw	r2,-8(fp)
 8000f60:	e0bffe17 	ldw	r2,-8(fp)
 8000f64:	10809650 	cmplti	r2,r2,601
 8000f68:	103ff31e 	bne	r2,zero,8000f38 <__alt_data_end+0xfc000f38>
		DrawLineHardware(0, y1, 820, y1, Colour);
	}
}
 8000f6c:	e037883a 	mov	sp,fp
 8000f70:	dfc00117 	ldw	ra,4(sp)
 8000f74:	df000017 	ldw	fp,0(sp)
 8000f78:	dec00204 	addi	sp,sp,8
 8000f7c:	f800283a 	ret

08000f80 <putcharTouch_Screen>:
*****************************************************************************/

/****              putcharTouch_Screen      *******/

int putcharTouch_Screen(int c)
{
 8000f80:	defffe04 	addi	sp,sp,-8
 8000f84:	df000115 	stw	fp,4(sp)
 8000f88:	df000104 	addi	fp,sp,4
 8000f8c:	e13fff15 	stw	r4,-4(fp)
 /// poll Tx bit in 6850 status register. Wait for it to become '1'
	// write 'c' to the 6850 TxData register to output the character
		while ((Touch_Status & 0x02) != 0x02)
 8000f90:	0001883a 	nop
 8000f94:	00a10034 	movhi	r2,33792
 8000f98:	10808c04 	addi	r2,r2,560
 8000f9c:	10800003 	ldbu	r2,0(r2)
 8000fa0:	10803fcc 	andi	r2,r2,255
 8000fa4:	1080008c 	andi	r2,r2,2
 8000fa8:	103ffa26 	beq	r2,zero,8000f94 <__alt_data_end+0xfc000f94>
		{}	;
		//printf (" after while loooop ");
		Touch_Transmit = c & 0xFF;
 8000fac:	00a10034 	movhi	r2,33792
 8000fb0:	10808c84 	addi	r2,r2,562
 8000fb4:	e0ffff17 	ldw	r3,-4(fp)
 8000fb8:	10c00005 	stb	r3,0(r2)
		return Touch_Transmit; // return c
 8000fbc:	00a10034 	movhi	r2,33792
 8000fc0:	10808c84 	addi	r2,r2,562
 8000fc4:	10800003 	ldbu	r2,0(r2)
 8000fc8:	10803fcc 	andi	r2,r2,255

}
 8000fcc:	e037883a 	mov	sp,fp
 8000fd0:	df000017 	ldw	fp,0(sp)
 8000fd4:	dec00104 	addi	sp,sp,4
 8000fd8:	f800283a 	ret

08000fdc <getcharTouch_Screen>:

/******           getcharTouch_Screen             *************/

int getcharTouch_Screen( void )
{
 8000fdc:	defffe04 	addi	sp,sp,-8
 8000fe0:	df000115 	stw	fp,4(sp)
 8000fe4:	df000104 	addi	fp,sp,4
	int rx;
		// poll Rx bit in 6850 status register. Wait for it to become '1'
		// read received character from 6850 RxData register.
		while ((Touch_Status & 0x01) != 0x01)
 8000fe8:	0001883a 	nop
 8000fec:	00a10034 	movhi	r2,33792
 8000ff0:	10808c04 	addi	r2,r2,560
 8000ff4:	10800003 	ldbu	r2,0(r2)
 8000ff8:	10803fcc 	andi	r2,r2,255
 8000ffc:	1080004c 	andi	r2,r2,1
 8001000:	103ffa26 	beq	r2,zero,8000fec <__alt_data_end+0xfc000fec>
			;
		rx = Touch_Recieve;
 8001004:	00a10034 	movhi	r2,33792
 8001008:	10808c84 	addi	r2,r2,562
 800100c:	10800003 	ldbu	r2,0(r2)
 8001010:	10803fcc 	andi	r2,r2,255
 8001014:	e0bfff15 	stw	r2,-4(fp)
		return rx;
 8001018:	e0bfff17 	ldw	r2,-4(fp)

}
 800101c:	e037883a 	mov	sp,fp
 8001020:	df000017 	ldw	fp,0(sp)
 8001024:	dec00104 	addi	sp,sp,4
 8001028:	f800283a 	ret

0800102c <Init_Touch>:

/***********      Init_Touch           *********/
void Init_Touch(void)
{
 800102c:	defffe04 	addi	sp,sp,-8
 8001030:	dfc00115 	stw	ra,4(sp)
 8001034:	df000015 	stw	fp,0(sp)
 8001038:	d839883a 	mov	fp,sp
	// Program 6850 and baud rate generator to communicate with touchscreen
	// send touchscreen controller an "enable touch" command
	Touch_Control = 0x15;
 800103c:	00a10034 	movhi	r2,33792
 8001040:	10808c04 	addi	r2,r2,560
 8001044:	00c00544 	movi	r3,21
 8001048:	10c00005 	stb	r3,0(r2)
	Touch_Baud = 0x05;
 800104c:	00a10034 	movhi	r2,33792
 8001050:	10808d04 	addi	r2,r2,564
 8001054:	00c00144 	movi	r3,5
 8001058:	10c00005 	stb	r3,0(r2)
		
	// enable touch
	putcharTouch_Screen(0x55);
 800105c:	01001544 	movi	r4,85
 8001060:	8000f800 	call	8000f80 <putcharTouch_Screen>
	putcharTouch_Screen(0x01);
 8001064:	01000044 	movi	r4,1
 8001068:	8000f800 	call	8000f80 <putcharTouch_Screen>
	putcharTouch_Screen(0x12);
 800106c:	01000484 	movi	r4,18
 8001070:	8000f800 	call	8000f80 <putcharTouch_Screen>
		
	return;
 8001074:	0001883a 	nop
}
 8001078:	e037883a 	mov	sp,fp
 800107c:	dfc00117 	ldw	ra,4(sp)
 8001080:	df000017 	ldw	fp,0(sp)
 8001084:	dec00204 	addi	sp,sp,8
 8001088:	f800283a 	ret

0800108c <ScreenTouched>:

/*********   test if screen touched   *************************************/
int ScreenTouched( void )
{
 800108c:	deffff04 	addi	sp,sp,-4
 8001090:	df000015 	stw	fp,0(sp)
 8001094:	d839883a 	mov	fp,sp
 
	return ((Touch_Recieve &0x80) == 0x80);
 8001098:	00a10034 	movhi	r2,33792
 800109c:	10808c84 	addi	r2,r2,562
 80010a0:	10800003 	ldbu	r2,0(r2)
 80010a4:	10803fcc 	andi	r2,r2,255
 80010a8:	1004d1fa 	srli	r2,r2,7
 80010ac:	10803fcc 	andi	r2,r2,255
}
 80010b0:	e037883a 	mov	sp,fp
 80010b4:	df000017 	ldw	fp,0(sp)
 80010b8:	dec00104 	addi	sp,sp,4
 80010bc:	f800283a 	ret

080010c0 <WaitForTouch>:

/******** wait for screen to be touched ****************************************/
void WaitForTouch()
{
 80010c0:	defffe04 	addi	sp,sp,-8
 80010c4:	dfc00115 	stw	ra,4(sp)
 80010c8:	df000015 	stw	fp,0(sp)
 80010cc:	d839883a 	mov	fp,sp
while(!ScreenTouched())
 80010d0:	0001883a 	nop
 80010d4:	800108c0 	call	800108c <ScreenTouched>
 80010d8:	103ffe26 	beq	r2,zero,80010d4 <__alt_data_end+0xfc0010d4>
 ;
}
 80010dc:	e037883a 	mov	sp,fp
 80010e0:	dfc00117 	ldw	ra,4(sp)
 80010e4:	df000017 	ldw	fp,0(sp)
 80010e8:	dec00204 	addi	sp,sp,8
 80010ec:	f800283a 	ret

080010f0 <GetPress>:
//typedef struct { int x, y; } Point ;

/**** This function waits for a touch screen press event and returns X,Y coord **************/

Point GetPress(void)
{
 80010f0:	defff604 	addi	sp,sp,-40
 80010f4:	dfc00915 	stw	ra,36(sp)
 80010f8:	df000815 	stw	fp,32(sp)
 80010fc:	df000804 	addi	fp,sp,32
	Point p1;
	int buf[4];
 	int i;
 	int yOffset = 100;
 8001100:	00801904 	movi	r2,100
 8001104:	e0bff915 	stw	r2,-28(fp)
 	// wait for a pen down command then return the X,Y coord of the point
 	// calibrated correctly so that it maps to a pixel on screen
 	WaitForTouch();
 8001108:	80010c00 	call	80010c0 <WaitForTouch>
 	// pick up reponse packets
 	for (i = 0; i < 4; i++) {
 800110c:	e03ff815 	stw	zero,-32(fp)
 8001110:	00000c06 	br	8001144 <GetPress+0x54>
 		buf[i] = getcharTouch_Screen();
 8001114:	8000fdc0 	call	8000fdc <getcharTouch_Screen>
 8001118:	1007883a 	mov	r3,r2
 800111c:	e0bff817 	ldw	r2,-32(fp)
 8001120:	1085883a 	add	r2,r2,r2
 8001124:	1085883a 	add	r2,r2,r2
 8001128:	e13ff804 	addi	r4,fp,-32
 800112c:	2085883a 	add	r2,r4,r2
 8001130:	10800404 	addi	r2,r2,16
 8001134:	10c00015 	stw	r3,0(r2)
 	int yOffset = 100;
 	// wait for a pen down command then return the X,Y coord of the point
 	// calibrated correctly so that it maps to a pixel on screen
 	WaitForTouch();
 	// pick up reponse packets
 	for (i = 0; i < 4; i++) {
 8001138:	e0bff817 	ldw	r2,-32(fp)
 800113c:	10800044 	addi	r2,r2,1
 8001140:	e0bff815 	stw	r2,-32(fp)
 8001144:	e0bff817 	ldw	r2,-32(fp)
 8001148:	10800110 	cmplti	r2,r2,4
 800114c:	103ff11e 	bne	r2,zero,8001114 <__alt_data_end+0xfc001114>
 		buf[i] = getcharTouch_Screen();
 	}
 	// parse x and y coordinates
 	p1.x = (buf[1] << 7) | buf[0];
 8001150:	e0bffd17 	ldw	r2,-12(fp)
 8001154:	100691fa 	slli	r3,r2,7
 8001158:	e0bffc17 	ldw	r2,-16(fp)
 800115c:	1884b03a 	or	r2,r3,r2
 8001160:	e0bffa15 	stw	r2,-24(fp)
 	p1.y = (buf[3] << 7) | buf[2];
 8001164:	e0bfff17 	ldw	r2,-4(fp)
 8001168:	100691fa 	slli	r3,r2,7
 800116c:	e0bffe17 	ldw	r2,-8(fp)
 8001170:	1884b03a 	or	r2,r3,r2
 8001174:	e0bffb15 	stw	r2,-20(fp)
 	// compute screen coordinates
 	p1.x = p1.x * 799 / 4095;
 8001178:	e0bffa17 	ldw	r2,-24(fp)
 800117c:	10c0c7e4 	muli	r3,r2,799
 8001180:	0083ffc4 	movi	r2,4095
 8001184:	1885283a 	div	r2,r3,r2
 8001188:	e0bffa15 	stw	r2,-24(fp)
 	p1.y = (p1.y - yOffset) * 479 / (4095 - yOffset);
 800118c:	e0fffb17 	ldw	r3,-20(fp)
 8001190:	e0bff917 	ldw	r2,-28(fp)
 8001194:	1885c83a 	sub	r2,r3,r2
 8001198:	10c077e4 	muli	r3,r2,479
 800119c:	0103ffc4 	movi	r4,4095
 80011a0:	e0bff917 	ldw	r2,-28(fp)
 80011a4:	2085c83a 	sub	r2,r4,r2
 80011a8:	1885283a 	div	r2,r3,r2
 80011ac:	e0bffb15 	stw	r2,-20(fp)
	printf (" GetPress: X coord =  %d \t Y coord =  %d  \n" , p1.x, p1.y);
 80011b0:	e0fffa17 	ldw	r3,-24(fp)
 80011b4:	e0bffb17 	ldw	r2,-20(fp)
 80011b8:	010200b4 	movhi	r4,2050
 80011bc:	2131c504 	addi	r4,r4,-14572
 80011c0:	180b883a 	mov	r5,r3
 80011c4:	100d883a 	mov	r6,r2
 80011c8:	80033cc0 	call	80033cc <printf>
 	
	return p1;
 80011cc:	e0bffa17 	ldw	r2,-24(fp)
 80011d0:	e0fffb17 	ldw	r3,-20(fp)
 80011d4:	1009883a 	mov	r4,r2
 80011d8:	180b883a 	mov	r5,r3

}
 80011dc:	2005883a 	mov	r2,r4
 80011e0:	2807883a 	mov	r3,r5
 80011e4:	e037883a 	mov	sp,fp
 80011e8:	dfc00117 	ldw	ra,4(sp)
 80011ec:	df000017 	ldw	fp,0(sp)
 80011f0:	dec00204 	addi	sp,sp,8
 80011f4:	f800283a 	ret

080011f8 <GetRelease>:

/********* This function waits for a touch screen release event and returns X,Y coord *************/

Point GetRelease(void)
{
 80011f8:	defff604 	addi	sp,sp,-40
 80011fc:	dfc00915 	stw	ra,36(sp)
 8001200:	df000815 	stw	fp,32(sp)
 8001204:	df000804 	addi	fp,sp,32
 Point p1;
 int buf[4];
 	int i;
 	int yOffset = 100;
 8001208:	00801904 	movi	r2,100
 800120c:	e0bff915 	stw	r2,-28(fp)
 	// wait for a pen down command then return the X,Y coord of the point
 	// calibrated correctly so that it maps to a pixel on screen
 	WaitForTouch();
 8001210:	80010c00 	call	80010c0 <WaitForTouch>
 	// pick up reponse packets
 	for (i = 0; i < 4; i++) {
 8001214:	e03ff815 	stw	zero,-32(fp)
 8001218:	00000c06 	br	800124c <GetRelease+0x54>
 		buf[i] = getcharTouch_Screen();
 800121c:	8000fdc0 	call	8000fdc <getcharTouch_Screen>
 8001220:	1007883a 	mov	r3,r2
 8001224:	e0bff817 	ldw	r2,-32(fp)
 8001228:	1085883a 	add	r2,r2,r2
 800122c:	1085883a 	add	r2,r2,r2
 8001230:	e13ff804 	addi	r4,fp,-32
 8001234:	2085883a 	add	r2,r4,r2
 8001238:	10800404 	addi	r2,r2,16
 800123c:	10c00015 	stw	r3,0(r2)
 	int yOffset = 100;
 	// wait for a pen down command then return the X,Y coord of the point
 	// calibrated correctly so that it maps to a pixel on screen
 	WaitForTouch();
 	// pick up reponse packets
 	for (i = 0; i < 4; i++) {
 8001240:	e0bff817 	ldw	r2,-32(fp)
 8001244:	10800044 	addi	r2,r2,1
 8001248:	e0bff815 	stw	r2,-32(fp)
 800124c:	e0bff817 	ldw	r2,-32(fp)
 8001250:	10800110 	cmplti	r2,r2,4
 8001254:	103ff11e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 		buf[i] = getcharTouch_Screen();
 	}
 	// parse x and y coordinates
 	p1.x = (buf[1] << 7) | buf[0];
 8001258:	e0bffd17 	ldw	r2,-12(fp)
 800125c:	100691fa 	slli	r3,r2,7
 8001260:	e0bffc17 	ldw	r2,-16(fp)
 8001264:	1884b03a 	or	r2,r3,r2
 8001268:	e0bffa15 	stw	r2,-24(fp)
 	p1.y = (buf[3] << 7) | buf[2];
 800126c:	e0bfff17 	ldw	r2,-4(fp)
 8001270:	100691fa 	slli	r3,r2,7
 8001274:	e0bffe17 	ldw	r2,-8(fp)
 8001278:	1884b03a 	or	r2,r3,r2
 800127c:	e0bffb15 	stw	r2,-20(fp)
 	// compute screen coordinates
 	p1.x = p1.x * 799 / 4095;
 8001280:	e0bffa17 	ldw	r2,-24(fp)
 8001284:	10c0c7e4 	muli	r3,r2,799
 8001288:	0083ffc4 	movi	r2,4095
 800128c:	1885283a 	div	r2,r3,r2
 8001290:	e0bffa15 	stw	r2,-24(fp)
 	p1.y = (p1.y - yOffset) * 479 / (4095 - yOffset);
 8001294:	e0fffb17 	ldw	r3,-20(fp)
 8001298:	e0bff917 	ldw	r2,-28(fp)
 800129c:	1885c83a 	sub	r2,r3,r2
 80012a0:	10c077e4 	muli	r3,r2,479
 80012a4:	0103ffc4 	movi	r4,4095
 80012a8:	e0bff917 	ldw	r2,-28(fp)
 80012ac:	2085c83a 	sub	r2,r4,r2
 80012b0:	1885283a 	div	r2,r3,r2
 80012b4:	e0bffb15 	stw	r2,-20(fp)

	printf ( " GetRelease: X coord =  %d \t Y coord =  %d\n " , p1.x, p1.y);
 80012b8:	e0fffa17 	ldw	r3,-24(fp)
 80012bc:	e0bffb17 	ldw	r2,-20(fp)
 80012c0:	010200b4 	movhi	r4,2050
 80012c4:	2131d004 	addi	r4,r4,-14528
 80012c8:	180b883a 	mov	r5,r3
 80012cc:	100d883a 	mov	r6,r2
 80012d0:	80033cc0 	call	80033cc <printf>

	return p1;
 80012d4:	e0bffa17 	ldw	r2,-24(fp)
 80012d8:	e0fffb17 	ldw	r3,-20(fp)
 80012dc:	1009883a 	mov	r4,r2
 80012e0:	180b883a 	mov	r5,r3

}
 80012e4:	2005883a 	mov	r2,r4
 80012e8:	2807883a 	mov	r3,r5
 80012ec:	e037883a 	mov	sp,fp
 80012f0:	dfc00117 	ldw	ra,4(sp)
 80012f4:	df000017 	ldw	fp,0(sp)
 80012f8:	dec00204 	addi	sp,sp,8
 80012fc:	f800283a 	ret

08001300 <GetPressNoWait>:

//////////////////////////////////////////////////////
Point GetPressNoWait(void) {
 8001300:	defff604 	addi	sp,sp,-40
 8001304:	dfc00915 	stw	ra,36(sp)
 8001308:	df000815 	stw	fp,32(sp)
 800130c:	df000804 	addi	fp,sp,32
	Point p1;
	int buf[4];
	int i;
	int yOffset = 100;
 8001310:	00801904 	movi	r2,100
 8001314:	e0bff915 	stw	r2,-28(fp)
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
 8001318:	80010c00 	call	80010c0 <WaitForTouch>
	printf("Outof wait Touch\n");
 800131c:	010200b4 	movhi	r4,2050
 8001320:	2131dc04 	addi	r4,r4,-14480
 8001324:	80034c00 	call	80034c0 <puts>
	// pick up reponse packets
	for (i = 0; i < 4; i++) {
 8001328:	e03ff815 	stw	zero,-32(fp)
 800132c:	00000c06 	br	8001360 <GetPressNoWait+0x60>
		buf[i] = getcharTouch_Screen();
 8001330:	8000fdc0 	call	8000fdc <getcharTouch_Screen>
 8001334:	1007883a 	mov	r3,r2
 8001338:	e0bff817 	ldw	r2,-32(fp)
 800133c:	1085883a 	add	r2,r2,r2
 8001340:	1085883a 	add	r2,r2,r2
 8001344:	e13ff804 	addi	r4,fp,-32
 8001348:	2085883a 	add	r2,r4,r2
 800134c:	10800404 	addi	r2,r2,16
 8001350:	10c00015 	stw	r3,0(r2)
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
	printf("Outof wait Touch\n");
	// pick up reponse packets
	for (i = 0; i < 4; i++) {
 8001354:	e0bff817 	ldw	r2,-32(fp)
 8001358:	10800044 	addi	r2,r2,1
 800135c:	e0bff815 	stw	r2,-32(fp)
 8001360:	e0bff817 	ldw	r2,-32(fp)
 8001364:	10800110 	cmplti	r2,r2,4
 8001368:	103ff11e 	bne	r2,zero,8001330 <__alt_data_end+0xfc001330>
		buf[i] = getcharTouch_Screen();
	}
	// parse x and y coordinates
	p1.x = (buf[1] << 7) | buf[0];
 800136c:	e0bffd17 	ldw	r2,-12(fp)
 8001370:	100691fa 	slli	r3,r2,7
 8001374:	e0bffc17 	ldw	r2,-16(fp)
 8001378:	1884b03a 	or	r2,r3,r2
 800137c:	e0bffa15 	stw	r2,-24(fp)
	p1.y = (buf[3] << 7) | buf[2];
 8001380:	e0bfff17 	ldw	r2,-4(fp)
 8001384:	100691fa 	slli	r3,r2,7
 8001388:	e0bffe17 	ldw	r2,-8(fp)
 800138c:	1884b03a 	or	r2,r3,r2
 8001390:	e0bffb15 	stw	r2,-20(fp)
	// compute screen coordinates
	p1.x = p1.x * 799 / 4095;
 8001394:	e0bffa17 	ldw	r2,-24(fp)
 8001398:	10c0c7e4 	muli	r3,r2,799
 800139c:	0083ffc4 	movi	r2,4095
 80013a0:	1885283a 	div	r2,r3,r2
 80013a4:	e0bffa15 	stw	r2,-24(fp)
	p1.y = (p1.y - yOffset) * 479 / (4095 - yOffset);
 80013a8:	e0fffb17 	ldw	r3,-20(fp)
 80013ac:	e0bff917 	ldw	r2,-28(fp)
 80013b0:	1885c83a 	sub	r2,r3,r2
 80013b4:	10c077e4 	muli	r3,r2,479
 80013b8:	0103ffc4 	movi	r4,4095
 80013bc:	e0bff917 	ldw	r2,-28(fp)
 80013c0:	2085c83a 	sub	r2,r4,r2
 80013c4:	1885283a 	div	r2,r3,r2
 80013c8:	e0bffb15 	stw	r2,-20(fp)
	printf(" GetPressFromNoWait: X coord =  %d \t Y coord =  %d  \n", p1.x,
 80013cc:	e0fffa17 	ldw	r3,-24(fp)
 80013d0:	e0bffb17 	ldw	r2,-20(fp)
 80013d4:	010200b4 	movhi	r4,2050
 80013d8:	2131e104 	addi	r4,r4,-14460
 80013dc:	180b883a 	mov	r5,r3
 80013e0:	100d883a 	mov	r6,r2
 80013e4:	80033cc0 	call	80033cc <printf>
			p1.y);

	return p1;
 80013e8:	e0bffa17 	ldw	r2,-24(fp)
 80013ec:	e0fffb17 	ldw	r3,-20(fp)
 80013f0:	1009883a 	mov	r4,r2
 80013f4:	180b883a 	mov	r5,r3

}
 80013f8:	2005883a 	mov	r2,r4
 80013fc:	2807883a 	mov	r3,r5
 8001400:	e037883a 	mov	sp,fp
 8001404:	dfc00117 	ldw	ra,4(sp)
 8001408:	df000017 	ldw	fp,0(sp)
 800140c:	dec00204 	addi	sp,sp,8
 8001410:	f800283a 	ret

08001414 <polling_Status>:
#include <Instantiate.h>
#include "Draw_Functions.c"
#include "TouchScreen.c"

int temp_color;
void polling_Status(int Colour){
 8001414:	defff604 	addi	sp,sp,-40
 8001418:	dfc00915 	stw	ra,36(sp)
 800141c:	df000815 	stw	fp,32(sp)
 8001420:	df000804 	addi	fp,sp,32
 8001424:	e13fff15 	stw	r4,-4(fp)
	char polling[] = "START POLLING";
 8001428:	00949074 	movhi	r2,21057
 800142c:	109514c4 	addi	r2,r2,21587
 8001430:	e0bffb15 	stw	r2,-20(fp)
 8001434:	0093d434 	movhi	r2,20304
 8001438:	10881504 	addi	r2,r2,8276
 800143c:	e0bffc15 	stw	r2,-16(fp)
 8001440:	00939274 	movhi	r2,20041
 8001444:	10931304 	addi	r2,r2,19532
 8001448:	e0bffd15 	stw	r2,-12(fp)
 800144c:	008011c4 	movi	r2,71
 8001450:	e0bffe0d 	sth	r2,-8(fp)
	drawFilledRectangle(419, 465, 320, 450, Colour); //change color to green
 8001454:	e0bfff17 	ldw	r2,-4(fp)
 8001458:	d8800015 	stw	r2,0(sp)
 800145c:	010068c4 	movi	r4,419
 8001460:	01407444 	movi	r5,465
 8001464:	01805004 	movi	r6,320
 8001468:	01c07084 	movi	r7,450
 800146c:	8000d880 	call	8000d88 <drawFilledRectangle>
	int i;
	for (i = 0; i < sizeof(polling); i++)
 8001470:	e03ffa15 	stw	zero,-24(fp)
 8001474:	00001406 	br	80014c8 <polling_Status+0xb4>
	OutGraphicsCharFont1((327 + 9 * i), 438, 15, 1, polling[i], 2);
 8001478:	e0bffa17 	ldw	r2,-24(fp)
 800147c:	10800264 	muli	r2,r2,9
 8001480:	110051c4 	addi	r4,r2,327
 8001484:	e0fffb04 	addi	r3,fp,-20
 8001488:	e0bffa17 	ldw	r2,-24(fp)
 800148c:	1885883a 	add	r2,r3,r2
 8001490:	10800003 	ldbu	r2,0(r2)
 8001494:	10803fcc 	andi	r2,r2,255
 8001498:	1080201c 	xori	r2,r2,128
 800149c:	10bfe004 	addi	r2,r2,-128
 80014a0:	d8800015 	stw	r2,0(sp)
 80014a4:	00800084 	movi	r2,2
 80014a8:	d8800115 	stw	r2,4(sp)
 80014ac:	01406d84 	movi	r5,438
 80014b0:	018003c4 	movi	r6,15
 80014b4:	01c00044 	movi	r7,1
 80014b8:	80005400 	call	8000540 <OutGraphicsCharFont1>
int temp_color;
void polling_Status(int Colour){
	char polling[] = "START POLLING";
	drawFilledRectangle(419, 465, 320, 450, Colour); //change color to green
	int i;
	for (i = 0; i < sizeof(polling); i++)
 80014bc:	e0bffa17 	ldw	r2,-24(fp)
 80014c0:	10800044 	addi	r2,r2,1
 80014c4:	e0bffa15 	stw	r2,-24(fp)
 80014c8:	e0bffa17 	ldw	r2,-24(fp)
 80014cc:	108003b0 	cmpltui	r2,r2,14
 80014d0:	103fe91e 	bne	r2,zero,8001478 <__alt_data_end+0xfc001478>
	OutGraphicsCharFont1((327 + 9 * i), 438, 15, 1, polling[i], 2);

}
 80014d4:	e037883a 	mov	sp,fp
 80014d8:	dfc00117 	ldw	ra,4(sp)
 80014dc:	df000017 	ldw	fp,0(sp)
 80014e0:	dec00204 	addi	sp,sp,8
 80014e4:	f800283a 	ret

080014e8 <draw_page>:

void draw_page() {
 80014e8:	deffec04 	addi	sp,sp,-80
 80014ec:	dfc01315 	stw	ra,76(sp)
 80014f0:	df001215 	stw	fp,72(sp)
 80014f4:	df001204 	addi	fp,sp,72
	//draw the background color
	clear_screen(1); //some kind of dirty blue 119 //250 gray
 80014f8:	01000044 	movi	r4,1
 80014fc:	8000f100 	call	8000f10 <clear_screen>
	polling_Status(3);
 8001500:	010000c4 	movi	r4,3
 8001504:	80014140 	call	8001414 <polling_Status>
	drawFilledRectangle(0, 100, 0, 800, 50); //insert the top bar
 8001508:	00800c84 	movi	r2,50
 800150c:	d8800015 	stw	r2,0(sp)
 8001510:	0009883a 	mov	r4,zero
 8001514:	01401904 	movi	r5,100
 8001518:	000d883a 	mov	r6,zero
 800151c:	01c0c804 	movi	r7,800
 8001520:	8000d880 	call	8000d88 <drawFilledRectangle>

	char class_name[] = "CPEN 391";
 8001524:	00939174 	movhi	r2,20037
 8001528:	109410c4 	addi	r2,r2,20547
 800152c:	e0bff115 	stw	r2,-60(fp)
 8001530:	008c4e74 	movhi	r2,12601
 8001534:	108cc804 	addi	r2,r2,13088
 8001538:	e0bff215 	stw	r2,-56(fp)
 800153c:	e03ff305 	stb	zero,-52(fp)
	char next[] = "NEXT";
 8001540:	00801384 	movi	r2,78
 8001544:	e0bff345 	stb	r2,-51(fp)
 8001548:	00801144 	movi	r2,69
 800154c:	e0bff385 	stb	r2,-50(fp)
 8001550:	00801604 	movi	r2,88
 8001554:	e0bff3c5 	stb	r2,-49(fp)
 8001558:	00801504 	movi	r2,84
 800155c:	e0bff405 	stb	r2,-48(fp)
 8001560:	e03ff445 	stb	zero,-47(fp)
	char last[] = "BACK";
 8001564:	00905084 	movi	r2,16706
 8001568:	e0bff48d 	sth	r2,-46(fp)
 800156c:	0092d0c4 	movi	r2,19267
 8001570:	e0bff50d 	sth	r2,-44(fp)
 8001574:	e03ff585 	stb	zero,-42(fp)
	char show_ans[] = "SHOW ANSWER";
 8001578:	008014c4 	movi	r2,83
 800157c:	e0bff5c5 	stb	r2,-41(fp)
 8001580:	00801204 	movi	r2,72
 8001584:	e0bff605 	stb	r2,-40(fp)
 8001588:	008013c4 	movi	r2,79
 800158c:	e0bff645 	stb	r2,-39(fp)
 8001590:	008015c4 	movi	r2,87
 8001594:	e0bff685 	stb	r2,-38(fp)
 8001598:	00800804 	movi	r2,32
 800159c:	e0bff6c5 	stb	r2,-37(fp)
 80015a0:	00801044 	movi	r2,65
 80015a4:	e0bff705 	stb	r2,-36(fp)
 80015a8:	00801384 	movi	r2,78
 80015ac:	e0bff745 	stb	r2,-35(fp)
 80015b0:	008014c4 	movi	r2,83
 80015b4:	e0bff785 	stb	r2,-34(fp)
 80015b8:	008015c4 	movi	r2,87
 80015bc:	e0bff7c5 	stb	r2,-33(fp)
 80015c0:	00801144 	movi	r2,69
 80015c4:	e0bff805 	stb	r2,-32(fp)
 80015c8:	00801484 	movi	r2,82
 80015cc:	e0bff845 	stb	r2,-31(fp)
 80015d0:	e03ff885 	stb	zero,-30(fp)
	char activity[] = "ACTIVITY";
 80015d4:	00801044 	movi	r2,65
 80015d8:	e0bff8c5 	stb	r2,-29(fp)
 80015dc:	008010c4 	movi	r2,67
 80015e0:	e0bff905 	stb	r2,-28(fp)
 80015e4:	00801504 	movi	r2,84
 80015e8:	e0bff945 	stb	r2,-27(fp)
 80015ec:	00801244 	movi	r2,73
 80015f0:	e0bff985 	stb	r2,-26(fp)
 80015f4:	00801584 	movi	r2,86
 80015f8:	e0bff9c5 	stb	r2,-25(fp)
 80015fc:	00801244 	movi	r2,73
 8001600:	e0bffa05 	stb	r2,-24(fp)
 8001604:	00801504 	movi	r2,84
 8001608:	e0bffa45 	stb	r2,-23(fp)
 800160c:	00801644 	movi	r2,89
 8001610:	e0bffa85 	stb	r2,-22(fp)
 8001614:	e03ffac5 	stb	zero,-21(fp)
	char answer[] = "Correct Answer: ";
 8001618:	009c9cb4 	movhi	r2,29298
 800161c:	109bd0c4 	addi	r2,r2,28483
 8001620:	e0bffb15 	stw	r2,-20(fp)
 8001624:	00881d34 	movhi	r2,8308
 8001628:	1098d944 	addi	r2,r2,25445
 800162c:	e0bffc15 	stw	r2,-16(fp)
 8001630:	009ddcf4 	movhi	r2,30579
 8001634:	109b9044 	addi	r2,r2,28225
 8001638:	e0bffd15 	stw	r2,-12(fp)
 800163c:	00880eb4 	movhi	r2,8250
 8001640:	109c9944 	addi	r2,r2,29285
 8001644:	e0bffe15 	stw	r2,-8(fp)
 8001648:	e03fff05 	stb	zero,-4(fp)

	int i;
	for (i = 0; i < sizeof(class_name); i++)
 800164c:	e03ff015 	stw	zero,-64(fp)
 8001650:	00001406 	br	80016a4 <draw_page+0x1bc>
		OutGraphicsCharFont2a((350 + 13 * i), 50, 0, 1, class_name[i], 2); //display the name of class in progress
 8001654:	e0bff017 	ldw	r2,-64(fp)
 8001658:	10800364 	muli	r2,r2,13
 800165c:	11005784 	addi	r4,r2,350
 8001660:	e0fff104 	addi	r3,fp,-60
 8001664:	e0bff017 	ldw	r2,-64(fp)
 8001668:	1885883a 	add	r2,r3,r2
 800166c:	10800003 	ldbu	r2,0(r2)
 8001670:	10803fcc 	andi	r2,r2,255
 8001674:	1080201c 	xori	r2,r2,128
 8001678:	10bfe004 	addi	r2,r2,-128
 800167c:	d8800015 	stw	r2,0(sp)
 8001680:	00800084 	movi	r2,2
 8001684:	d8800115 	stw	r2,4(sp)
 8001688:	01400c84 	movi	r5,50
 800168c:	000d883a 	mov	r6,zero
 8001690:	01c00044 	movi	r7,1
 8001694:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	char show_ans[] = "SHOW ANSWER";
	char activity[] = "ACTIVITY";
	char answer[] = "Correct Answer: ";

	int i;
	for (i = 0; i < sizeof(class_name); i++)
 8001698:	e0bff017 	ldw	r2,-64(fp)
 800169c:	10800044 	addi	r2,r2,1
 80016a0:	e0bff015 	stw	r2,-64(fp)
 80016a4:	e0bff017 	ldw	r2,-64(fp)
 80016a8:	10800270 	cmpltui	r2,r2,9
 80016ac:	103fe91e 	bne	r2,zero,8001654 <__alt_data_end+0xfc001654>
		OutGraphicsCharFont2a((350 + 13 * i), 50, 0, 1, class_name[i], 2); //display the name of class in progress

	//frame for the question
	drawFilledRectangle(150, 370, 280, 770, 1);
 80016b0:	00800044 	movi	r2,1
 80016b4:	d8800015 	stw	r2,0(sp)
 80016b8:	01002584 	movi	r4,150
 80016bc:	01405c84 	movi	r5,370
 80016c0:	01804604 	movi	r6,280
 80016c4:	01c0c084 	movi	r7,770
 80016c8:	8000d880 	call	8000d88 <drawFilledRectangle>
	DrawHLineHardware(282, 371, 488, 15);
 80016cc:	01004684 	movi	r4,282
 80016d0:	01405cc4 	movi	r5,371
 80016d4:	01807a04 	movi	r6,488
 80016d8:	01c003c4 	movi	r7,15
 80016dc:	80006ec0 	call	80006ec <DrawHLineHardware>
	DrawHLineHardware(282, 372, 488, 15);
 80016e0:	01004684 	movi	r4,282
 80016e4:	01405d04 	movi	r5,372
 80016e8:	01807a04 	movi	r6,488
 80016ec:	01c003c4 	movi	r7,15
 80016f0:	80006ec0 	call	80006ec <DrawHLineHardware>
	DrawVLineHardware(771, 152, 217, 15);
 80016f4:	0100c0c4 	movi	r4,771
 80016f8:	01402604 	movi	r5,152
 80016fc:	01803644 	movi	r6,217
 8001700:	01c003c4 	movi	r7,15
 8001704:	80007980 	call	8000798 <DrawVLineHardware>
	DrawVLineHardware(772, 152, 218, 15);
 8001708:	0100c104 	movi	r4,772
 800170c:	01402604 	movi	r5,152
 8001710:	01803684 	movi	r6,218
 8001714:	01c003c4 	movi	r7,15
 8001718:	80007980 	call	8000798 <DrawVLineHardware>

	//Rectangle to start polling


	DrawCircleFill(100, 440, 25, 50);  //for the previous button
 800171c:	01001904 	movi	r4,100
 8001720:	01406e04 	movi	r5,440
 8001724:	01800644 	movi	r6,25
 8001728:	01c00c84 	movi	r7,50
 800172c:	8000c1c0 	call	8000c1c <DrawCircleFill>
	DrawCircleFill(690, 440, 25, 50);  //for the next button
 8001730:	0100ac84 	movi	r4,690
 8001734:	01406e04 	movi	r5,440
 8001738:	01800644 	movi	r6,25
 800173c:	01c00c84 	movi	r7,50
 8001740:	8000c1c0 	call	8000c1c <DrawCircleFill>
	//DrawLineHardware(680, 430, 700, 440, 15);
	//DrawLineHardware(700, 440, 680, 450, 15);

	for (i = 0; i < sizeof(next); i++)
 8001744:	e03ff015 	stw	zero,-64(fp)
 8001748:	00001406 	br	800179c <draw_page+0x2b4>
		OutGraphicsCharFont1((675 + 9 * i), 438, 15, 1, next[i], 2);
 800174c:	e0bff017 	ldw	r2,-64(fp)
 8001750:	10800264 	muli	r2,r2,9
 8001754:	1100a8c4 	addi	r4,r2,675
 8001758:	e0fff344 	addi	r3,fp,-51
 800175c:	e0bff017 	ldw	r2,-64(fp)
 8001760:	1885883a 	add	r2,r3,r2
 8001764:	10800003 	ldbu	r2,0(r2)
 8001768:	10803fcc 	andi	r2,r2,255
 800176c:	1080201c 	xori	r2,r2,128
 8001770:	10bfe004 	addi	r2,r2,-128
 8001774:	d8800015 	stw	r2,0(sp)
 8001778:	00800084 	movi	r2,2
 800177c:	d8800115 	stw	r2,4(sp)
 8001780:	01406d84 	movi	r5,438
 8001784:	018003c4 	movi	r6,15
 8001788:	01c00044 	movi	r7,1
 800178c:	80005400 	call	8000540 <OutGraphicsCharFont1>
	DrawCircleFill(100, 440, 25, 50);  //for the previous button
	DrawCircleFill(690, 440, 25, 50);  //for the next button
	//DrawLineHardware(680, 430, 700, 440, 15);
	//DrawLineHardware(700, 440, 680, 450, 15);

	for (i = 0; i < sizeof(next); i++)
 8001790:	e0bff017 	ldw	r2,-64(fp)
 8001794:	10800044 	addi	r2,r2,1
 8001798:	e0bff015 	stw	r2,-64(fp)
 800179c:	e0bff017 	ldw	r2,-64(fp)
 80017a0:	10800170 	cmpltui	r2,r2,5
 80017a4:	103fe91e 	bne	r2,zero,800174c <__alt_data_end+0xfc00174c>
		OutGraphicsCharFont1((675 + 9 * i), 438, 15, 1, next[i], 2);
	for (i = 0; i < sizeof(last); i++)
 80017a8:	e03ff015 	stw	zero,-64(fp)
 80017ac:	00001406 	br	8001800 <draw_page+0x318>
		OutGraphicsCharFont1((85 + 8 * i), 438, 15, 1, last[i], 2);
 80017b0:	e0bff017 	ldw	r2,-64(fp)
 80017b4:	100490fa 	slli	r2,r2,3
 80017b8:	11001544 	addi	r4,r2,85
 80017bc:	e0fff484 	addi	r3,fp,-46
 80017c0:	e0bff017 	ldw	r2,-64(fp)
 80017c4:	1885883a 	add	r2,r3,r2
 80017c8:	10800003 	ldbu	r2,0(r2)
 80017cc:	10803fcc 	andi	r2,r2,255
 80017d0:	1080201c 	xori	r2,r2,128
 80017d4:	10bfe004 	addi	r2,r2,-128
 80017d8:	d8800015 	stw	r2,0(sp)
 80017dc:	00800084 	movi	r2,2
 80017e0:	d8800115 	stw	r2,4(sp)
 80017e4:	01406d84 	movi	r5,438
 80017e8:	018003c4 	movi	r6,15
 80017ec:	01c00044 	movi	r7,1
 80017f0:	80005400 	call	8000540 <OutGraphicsCharFont1>
	//DrawLineHardware(680, 430, 700, 440, 15);
	//DrawLineHardware(700, 440, 680, 450, 15);

	for (i = 0; i < sizeof(next); i++)
		OutGraphicsCharFont1((675 + 9 * i), 438, 15, 1, next[i], 2);
	for (i = 0; i < sizeof(last); i++)
 80017f4:	e0bff017 	ldw	r2,-64(fp)
 80017f8:	10800044 	addi	r2,r2,1
 80017fc:	e0bff015 	stw	r2,-64(fp)
 8001800:	e0bff017 	ldw	r2,-64(fp)
 8001804:	10800170 	cmpltui	r2,r2,5
 8001808:	103fe91e 	bne	r2,zero,80017b0 <__alt_data_end+0xfc0017b0>
		OutGraphicsCharFont1((85 + 8 * i), 438, 15, 1, last[i], 2);

	//side bar for activity and answer button
	drawFilledRectangle(150, 200, 50, 147, 50);  //show answer box
 800180c:	00800c84 	movi	r2,50
 8001810:	d8800015 	stw	r2,0(sp)
 8001814:	01002584 	movi	r4,150
 8001818:	01403204 	movi	r5,200
 800181c:	01800c84 	movi	r6,50
 8001820:	01c024c4 	movi	r7,147
 8001824:	8000d880 	call	8000d88 <drawFilledRectangle>
	for (i = 0; i < sizeof(show_ans); i++)
 8001828:	e03ff015 	stw	zero,-64(fp)
 800182c:	00001406 	br	8001880 <draw_page+0x398>
		OutGraphicsCharFont1((55 + 8 * i), 175, 15, 1, show_ans[i], 2);
 8001830:	e0bff017 	ldw	r2,-64(fp)
 8001834:	100490fa 	slli	r2,r2,3
 8001838:	11000dc4 	addi	r4,r2,55
 800183c:	e0fff5c4 	addi	r3,fp,-41
 8001840:	e0bff017 	ldw	r2,-64(fp)
 8001844:	1885883a 	add	r2,r3,r2
 8001848:	10800003 	ldbu	r2,0(r2)
 800184c:	10803fcc 	andi	r2,r2,255
 8001850:	1080201c 	xori	r2,r2,128
 8001854:	10bfe004 	addi	r2,r2,-128
 8001858:	d8800015 	stw	r2,0(sp)
 800185c:	00800084 	movi	r2,2
 8001860:	d8800115 	stw	r2,4(sp)
 8001864:	01402bc4 	movi	r5,175
 8001868:	018003c4 	movi	r6,15
 800186c:	01c00044 	movi	r7,1
 8001870:	80005400 	call	8000540 <OutGraphicsCharFont1>
	for (i = 0; i < sizeof(last); i++)
		OutGraphicsCharFont1((85 + 8 * i), 438, 15, 1, last[i], 2);

	//side bar for activity and answer button
	drawFilledRectangle(150, 200, 50, 147, 50);  //show answer box
	for (i = 0; i < sizeof(show_ans); i++)
 8001874:	e0bff017 	ldw	r2,-64(fp)
 8001878:	10800044 	addi	r2,r2,1
 800187c:	e0bff015 	stw	r2,-64(fp)
 8001880:	e0bff017 	ldw	r2,-64(fp)
 8001884:	10800330 	cmpltui	r2,r2,12
 8001888:	103fe91e 	bne	r2,zero,8001830 <__alt_data_end+0xfc001830>
		OutGraphicsCharFont1((55 + 8 * i), 175, 15, 1, show_ans[i], 2);

	drawFilledRectangle(230, 280, 50, 147, 50);  //activity box
 800188c:	00800c84 	movi	r2,50
 8001890:	d8800015 	stw	r2,0(sp)
 8001894:	01003984 	movi	r4,230
 8001898:	01404604 	movi	r5,280
 800189c:	01800c84 	movi	r6,50
 80018a0:	01c024c4 	movi	r7,147
 80018a4:	8000d880 	call	8000d88 <drawFilledRectangle>
	for (i = 0; i < sizeof(activity); i++)
 80018a8:	e03ff015 	stw	zero,-64(fp)
 80018ac:	00001406 	br	8001900 <draw_page+0x418>
		OutGraphicsCharFont1((65 + 8 * i), 255, 15, 1, activity[i], 2);
 80018b0:	e0bff017 	ldw	r2,-64(fp)
 80018b4:	100490fa 	slli	r2,r2,3
 80018b8:	11001044 	addi	r4,r2,65
 80018bc:	e0fff8c4 	addi	r3,fp,-29
 80018c0:	e0bff017 	ldw	r2,-64(fp)
 80018c4:	1885883a 	add	r2,r3,r2
 80018c8:	10800003 	ldbu	r2,0(r2)
 80018cc:	10803fcc 	andi	r2,r2,255
 80018d0:	1080201c 	xori	r2,r2,128
 80018d4:	10bfe004 	addi	r2,r2,-128
 80018d8:	d8800015 	stw	r2,0(sp)
 80018dc:	00800084 	movi	r2,2
 80018e0:	d8800115 	stw	r2,4(sp)
 80018e4:	01403fc4 	movi	r5,255
 80018e8:	018003c4 	movi	r6,15
 80018ec:	01c00044 	movi	r7,1
 80018f0:	80005400 	call	8000540 <OutGraphicsCharFont1>
	drawFilledRectangle(150, 200, 50, 147, 50);  //show answer box
	for (i = 0; i < sizeof(show_ans); i++)
		OutGraphicsCharFont1((55 + 8 * i), 175, 15, 1, show_ans[i], 2);

	drawFilledRectangle(230, 280, 50, 147, 50);  //activity box
	for (i = 0; i < sizeof(activity); i++)
 80018f4:	e0bff017 	ldw	r2,-64(fp)
 80018f8:	10800044 	addi	r2,r2,1
 80018fc:	e0bff015 	stw	r2,-64(fp)
 8001900:	e0bff017 	ldw	r2,-64(fp)
 8001904:	10800270 	cmpltui	r2,r2,9
 8001908:	103fe91e 	bne	r2,zero,80018b0 <__alt_data_end+0xfc0018b0>
		OutGraphicsCharFont1((65 + 8 * i), 255, 15, 1, activity[i], 2);

	for (i = 0; i < sizeof(answer); i++)
 800190c:	e03ff015 	stw	zero,-64(fp)
 8001910:	00001406 	br	8001964 <draw_page+0x47c>
		OutGraphicsCharFont2a((38 + 11 * i), 300, 0, 1, answer[i], 2);
 8001914:	e0bff017 	ldw	r2,-64(fp)
 8001918:	108002e4 	muli	r2,r2,11
 800191c:	11000984 	addi	r4,r2,38
 8001920:	e0fffb04 	addi	r3,fp,-20
 8001924:	e0bff017 	ldw	r2,-64(fp)
 8001928:	1885883a 	add	r2,r3,r2
 800192c:	10800003 	ldbu	r2,0(r2)
 8001930:	10803fcc 	andi	r2,r2,255
 8001934:	1080201c 	xori	r2,r2,128
 8001938:	10bfe004 	addi	r2,r2,-128
 800193c:	d8800015 	stw	r2,0(sp)
 8001940:	00800084 	movi	r2,2
 8001944:	d8800115 	stw	r2,4(sp)
 8001948:	01404b04 	movi	r5,300
 800194c:	000d883a 	mov	r6,zero
 8001950:	01c00044 	movi	r7,1
 8001954:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>

	drawFilledRectangle(230, 280, 50, 147, 50);  //activity box
	for (i = 0; i < sizeof(activity); i++)
		OutGraphicsCharFont1((65 + 8 * i), 255, 15, 1, activity[i], 2);

	for (i = 0; i < sizeof(answer); i++)
 8001958:	e0bff017 	ldw	r2,-64(fp)
 800195c:	10800044 	addi	r2,r2,1
 8001960:	e0bff015 	stw	r2,-64(fp)
 8001964:	e0bff017 	ldw	r2,-64(fp)
 8001968:	10800470 	cmpltui	r2,r2,17
 800196c:	103fe91e 	bne	r2,zero,8001914 <__alt_data_end+0xfc001914>
		OutGraphicsCharFont2a((38 + 11 * i), 300, 0, 1, answer[i], 2);

}
 8001970:	e037883a 	mov	sp,fp
 8001974:	dfc00117 	ldw	ra,4(sp)
 8001978:	df000017 	ldw	fp,0(sp)
 800197c:	dec00204 	addi	sp,sp,8
 8001980:	f800283a 	ret

08001984 <multiple_qn>:

void multiple_qn() {
 8001984:	deffd704 	addi	sp,sp,-164
 8001988:	dfc02815 	stw	ra,160(sp)
 800198c:	df002715 	stw	fp,156(sp)
 8001990:	df002704 	addi	fp,sp,156
	char question[] = "How are you finding CPEN 391 ?";
 8001994:	00881df4 	movhi	r2,8311
 8001998:	109bd204 	addi	r2,r2,28488
 800199c:	e0bfdc15 	stw	r2,-144(fp)
 80019a0:	00881974 	movhi	r2,8293
 80019a4:	109c9844 	addi	r2,r2,29281
 80019a8:	e0bfdd15 	stw	r2,-140(fp)
 80019ac:	00881d74 	movhi	r2,8309
 80019b0:	109bde44 	addi	r2,r2,28537
 80019b4:	e0bfde15 	stw	r2,-136(fp)
 80019b8:	00991bb4 	movhi	r2,25710
 80019bc:	109a5984 	addi	r2,r2,26982
 80019c0:	e0bfdf15 	stw	r2,-132(fp)
 80019c4:	008819f4 	movhi	r2,8295
 80019c8:	109b9a44 	addi	r2,r2,28265
 80019cc:	e0bfe015 	stw	r2,-128(fp)
 80019d0:	00939174 	movhi	r2,20037
 80019d4:	109410c4 	addi	r2,r2,20547
 80019d8:	e0bfe115 	stw	r2,-124(fp)
 80019dc:	008c4e74 	movhi	r2,12601
 80019e0:	108cc804 	addi	r2,r2,13088
 80019e4:	e0bfe215 	stw	r2,-120(fp)
 80019e8:	008fc804 	movi	r2,16160
 80019ec:	e0bfe30d 	sth	r2,-116(fp)
 80019f0:	e03fe385 	stb	zero,-114(fp)
	char choiceA[] = "A. A walk in the park!";
 80019f4:	008200b4 	movhi	r2,2050
 80019f8:	10b1ef04 	addi	r2,r2,-14404
 80019fc:	e0ffe3c4 	addi	r3,fp,-113
 8001a00:	100b883a 	mov	r5,r2
 8001a04:	008005c4 	movi	r2,23
 8001a08:	1809883a 	mov	r4,r3
 8001a0c:	100d883a 	mov	r6,r2
 8001a10:	80032680 	call	8003268 <memcpy>
	char choiceB[] = "B. What's CPEN 391?";
 8001a14:	008b9084 	movi	r2,11842
 8001a18:	e0bfe98d 	sth	r2,-90(fp)
 8001a1c:	0095c804 	movi	r2,22304
 8001a20:	e0bfea0d 	sth	r2,-88(fp)
 8001a24:	00985a04 	movi	r2,24936
 8001a28:	e0bfea8d 	sth	r2,-86(fp)
 8001a2c:	0089dd04 	movi	r2,10100
 8001a30:	e0bfeb0d 	sth	r2,-84(fp)
 8001a34:	00881cc4 	movi	r2,8307
 8001a38:	e0bfeb8d 	sth	r2,-82(fp)
 8001a3c:	009410c4 	movi	r2,20547
 8001a40:	e0bfec0d 	sth	r2,-80(fp)
 8001a44:	00939144 	movi	r2,20037
 8001a48:	e0bfec8d 	sth	r2,-78(fp)
 8001a4c:	008cc804 	movi	r2,13088
 8001a50:	e0bfed0d 	sth	r2,-76(fp)
 8001a54:	008c4e44 	movi	r2,12601
 8001a58:	e0bfed8d 	sth	r2,-74(fp)
 8001a5c:	00800fc4 	movi	r2,63
 8001a60:	e0bfee0d 	sth	r2,-72(fp)
	char choiceC[] = "C. It's a joke";
 8001a64:	008b90c4 	movi	r2,11843
 8001a68:	e0bfee8d 	sth	r2,-70(fp)
 8001a6c:	00924804 	movi	r2,18720
 8001a70:	e0bfef0d 	sth	r2,-68(fp)
 8001a74:	0089dd04 	movi	r2,10100
 8001a78:	e0bfef8d 	sth	r2,-66(fp)
 8001a7c:	00881cc4 	movi	r2,8307
 8001a80:	e0bff00d 	sth	r2,-64(fp)
 8001a84:	00881844 	movi	r2,8289
 8001a88:	e0bff08d 	sth	r2,-62(fp)
 8001a8c:	009bda84 	movi	r2,28522
 8001a90:	e0bff10d 	sth	r2,-60(fp)
 8001a94:	00995ac4 	movi	r2,25963
 8001a98:	e0bff18d 	sth	r2,-58(fp)
 8001a9c:	e03ff205 	stb	zero,-56(fp)
	char choiceD[] = "D. I don't know what i'm doing ";
 8001aa0:	008200b4 	movhi	r2,2050
 8001aa4:	10b1f504 	addi	r2,r2,-14380
 8001aa8:	e0fff244 	addi	r3,fp,-55
 8001aac:	100b883a 	mov	r5,r2
 8001ab0:	00800804 	movi	r2,32
 8001ab4:	1809883a 	mov	r4,r3
 8001ab8:	100d883a 	mov	r6,r2
 8001abc:	80032680 	call	8003268 <memcpy>
	char choiceE[] = "E. None of the above";
 8001ac0:	008200b4 	movhi	r2,2050
 8001ac4:	10b1fd04 	addi	r2,r2,-14348
 8001ac8:	e0fffa44 	addi	r3,fp,-23
 8001acc:	100b883a 	mov	r5,r2
 8001ad0:	00800544 	movi	r2,21
 8001ad4:	1809883a 	mov	r4,r3
 8001ad8:	100d883a 	mov	r6,r2
 8001adc:	80032680 	call	8003268 <memcpy>
	int i;
	for (i = 0; i < sizeof(question); i++)
 8001ae0:	e03fdb15 	stw	zero,-148(fp)
 8001ae4:	00001406 	br	8001b38 <multiple_qn+0x1b4>
		OutGraphicsCharFont2a((350 + 11 * i), 160, 0, 1, question[i], 2);
 8001ae8:	e0bfdb17 	ldw	r2,-148(fp)
 8001aec:	108002e4 	muli	r2,r2,11
 8001af0:	11005784 	addi	r4,r2,350
 8001af4:	e0ffdc04 	addi	r3,fp,-144
 8001af8:	e0bfdb17 	ldw	r2,-148(fp)
 8001afc:	1885883a 	add	r2,r3,r2
 8001b00:	10800003 	ldbu	r2,0(r2)
 8001b04:	10803fcc 	andi	r2,r2,255
 8001b08:	1080201c 	xori	r2,r2,128
 8001b0c:	10bfe004 	addi	r2,r2,-128
 8001b10:	d8800015 	stw	r2,0(sp)
 8001b14:	00800084 	movi	r2,2
 8001b18:	d8800115 	stw	r2,4(sp)
 8001b1c:	01402804 	movi	r5,160
 8001b20:	000d883a 	mov	r6,zero
 8001b24:	01c00044 	movi	r7,1
 8001b28:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	char choiceB[] = "B. What's CPEN 391?";
	char choiceC[] = "C. It's a joke";
	char choiceD[] = "D. I don't know what i'm doing ";
	char choiceE[] = "E. None of the above";
	int i;
	for (i = 0; i < sizeof(question); i++)
 8001b2c:	e0bfdb17 	ldw	r2,-148(fp)
 8001b30:	10800044 	addi	r2,r2,1
 8001b34:	e0bfdb15 	stw	r2,-148(fp)
 8001b38:	e0bfdb17 	ldw	r2,-148(fp)
 8001b3c:	108007f0 	cmpltui	r2,r2,31
 8001b40:	103fe91e 	bne	r2,zero,8001ae8 <__alt_data_end+0xfc001ae8>
		OutGraphicsCharFont2a((350 + 11 * i), 160, 0, 1, question[i], 2);
	for (i = 0; i < sizeof(choiceA); i++)
 8001b44:	e03fdb15 	stw	zero,-148(fp)
 8001b48:	00001406 	br	8001b9c <multiple_qn+0x218>
		OutGraphicsCharFont2a((380 + 11 * i), 230, 0, 1, choiceA[i], 2);
 8001b4c:	e0bfdb17 	ldw	r2,-148(fp)
 8001b50:	108002e4 	muli	r2,r2,11
 8001b54:	11005f04 	addi	r4,r2,380
 8001b58:	e0ffe3c4 	addi	r3,fp,-113
 8001b5c:	e0bfdb17 	ldw	r2,-148(fp)
 8001b60:	1885883a 	add	r2,r3,r2
 8001b64:	10800003 	ldbu	r2,0(r2)
 8001b68:	10803fcc 	andi	r2,r2,255
 8001b6c:	1080201c 	xori	r2,r2,128
 8001b70:	10bfe004 	addi	r2,r2,-128
 8001b74:	d8800015 	stw	r2,0(sp)
 8001b78:	00800084 	movi	r2,2
 8001b7c:	d8800115 	stw	r2,4(sp)
 8001b80:	01403984 	movi	r5,230
 8001b84:	000d883a 	mov	r6,zero
 8001b88:	01c00044 	movi	r7,1
 8001b8c:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	char choiceD[] = "D. I don't know what i'm doing ";
	char choiceE[] = "E. None of the above";
	int i;
	for (i = 0; i < sizeof(question); i++)
		OutGraphicsCharFont2a((350 + 11 * i), 160, 0, 1, question[i], 2);
	for (i = 0; i < sizeof(choiceA); i++)
 8001b90:	e0bfdb17 	ldw	r2,-148(fp)
 8001b94:	10800044 	addi	r2,r2,1
 8001b98:	e0bfdb15 	stw	r2,-148(fp)
 8001b9c:	e0bfdb17 	ldw	r2,-148(fp)
 8001ba0:	108005f0 	cmpltui	r2,r2,23
 8001ba4:	103fe91e 	bne	r2,zero,8001b4c <__alt_data_end+0xfc001b4c>
		OutGraphicsCharFont2a((380 + 11 * i), 230, 0, 1, choiceA[i], 2);
	for (i = 0; i < sizeof(choiceB); i++)
 8001ba8:	e03fdb15 	stw	zero,-148(fp)
 8001bac:	00001406 	br	8001c00 <multiple_qn+0x27c>
		OutGraphicsCharFont2a((380 + 11 * i), 260, 0, 1, choiceB[i], 2);
 8001bb0:	e0bfdb17 	ldw	r2,-148(fp)
 8001bb4:	108002e4 	muli	r2,r2,11
 8001bb8:	11005f04 	addi	r4,r2,380
 8001bbc:	e0ffe984 	addi	r3,fp,-90
 8001bc0:	e0bfdb17 	ldw	r2,-148(fp)
 8001bc4:	1885883a 	add	r2,r3,r2
 8001bc8:	10800003 	ldbu	r2,0(r2)
 8001bcc:	10803fcc 	andi	r2,r2,255
 8001bd0:	1080201c 	xori	r2,r2,128
 8001bd4:	10bfe004 	addi	r2,r2,-128
 8001bd8:	d8800015 	stw	r2,0(sp)
 8001bdc:	00800084 	movi	r2,2
 8001be0:	d8800115 	stw	r2,4(sp)
 8001be4:	01404104 	movi	r5,260
 8001be8:	000d883a 	mov	r6,zero
 8001bec:	01c00044 	movi	r7,1
 8001bf0:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	int i;
	for (i = 0; i < sizeof(question); i++)
		OutGraphicsCharFont2a((350 + 11 * i), 160, 0, 1, question[i], 2);
	for (i = 0; i < sizeof(choiceA); i++)
		OutGraphicsCharFont2a((380 + 11 * i), 230, 0, 1, choiceA[i], 2);
	for (i = 0; i < sizeof(choiceB); i++)
 8001bf4:	e0bfdb17 	ldw	r2,-148(fp)
 8001bf8:	10800044 	addi	r2,r2,1
 8001bfc:	e0bfdb15 	stw	r2,-148(fp)
 8001c00:	e0bfdb17 	ldw	r2,-148(fp)
 8001c04:	10800530 	cmpltui	r2,r2,20
 8001c08:	103fe91e 	bne	r2,zero,8001bb0 <__alt_data_end+0xfc001bb0>
		OutGraphicsCharFont2a((380 + 11 * i), 260, 0, 1, choiceB[i], 2);
	for (i = 0; i < sizeof(choiceC); i++)
 8001c0c:	e03fdb15 	stw	zero,-148(fp)
 8001c10:	00001406 	br	8001c64 <multiple_qn+0x2e0>
		OutGraphicsCharFont2a((380 + 11 * i), 290, 0, 1, choiceC[i], 2);
 8001c14:	e0bfdb17 	ldw	r2,-148(fp)
 8001c18:	108002e4 	muli	r2,r2,11
 8001c1c:	11005f04 	addi	r4,r2,380
 8001c20:	e0ffee84 	addi	r3,fp,-70
 8001c24:	e0bfdb17 	ldw	r2,-148(fp)
 8001c28:	1885883a 	add	r2,r3,r2
 8001c2c:	10800003 	ldbu	r2,0(r2)
 8001c30:	10803fcc 	andi	r2,r2,255
 8001c34:	1080201c 	xori	r2,r2,128
 8001c38:	10bfe004 	addi	r2,r2,-128
 8001c3c:	d8800015 	stw	r2,0(sp)
 8001c40:	00800084 	movi	r2,2
 8001c44:	d8800115 	stw	r2,4(sp)
 8001c48:	01404884 	movi	r5,290
 8001c4c:	000d883a 	mov	r6,zero
 8001c50:	01c00044 	movi	r7,1
 8001c54:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((350 + 11 * i), 160, 0, 1, question[i], 2);
	for (i = 0; i < sizeof(choiceA); i++)
		OutGraphicsCharFont2a((380 + 11 * i), 230, 0, 1, choiceA[i], 2);
	for (i = 0; i < sizeof(choiceB); i++)
		OutGraphicsCharFont2a((380 + 11 * i), 260, 0, 1, choiceB[i], 2);
	for (i = 0; i < sizeof(choiceC); i++)
 8001c58:	e0bfdb17 	ldw	r2,-148(fp)
 8001c5c:	10800044 	addi	r2,r2,1
 8001c60:	e0bfdb15 	stw	r2,-148(fp)
 8001c64:	e0bfdb17 	ldw	r2,-148(fp)
 8001c68:	108003f0 	cmpltui	r2,r2,15
 8001c6c:	103fe91e 	bne	r2,zero,8001c14 <__alt_data_end+0xfc001c14>
		OutGraphicsCharFont2a((380 + 11 * i), 290, 0, 1, choiceC[i], 2);
	for (i = 0; i < sizeof(choiceD); i++)
 8001c70:	e03fdb15 	stw	zero,-148(fp)
 8001c74:	00001406 	br	8001cc8 <multiple_qn+0x344>
		OutGraphicsCharFont2a((380 + 11 * i), 320, 0, 1, choiceD[i], 2);
 8001c78:	e0bfdb17 	ldw	r2,-148(fp)
 8001c7c:	108002e4 	muli	r2,r2,11
 8001c80:	11005f04 	addi	r4,r2,380
 8001c84:	e0fff244 	addi	r3,fp,-55
 8001c88:	e0bfdb17 	ldw	r2,-148(fp)
 8001c8c:	1885883a 	add	r2,r3,r2
 8001c90:	10800003 	ldbu	r2,0(r2)
 8001c94:	10803fcc 	andi	r2,r2,255
 8001c98:	1080201c 	xori	r2,r2,128
 8001c9c:	10bfe004 	addi	r2,r2,-128
 8001ca0:	d8800015 	stw	r2,0(sp)
 8001ca4:	00800084 	movi	r2,2
 8001ca8:	d8800115 	stw	r2,4(sp)
 8001cac:	01405004 	movi	r5,320
 8001cb0:	000d883a 	mov	r6,zero
 8001cb4:	01c00044 	movi	r7,1
 8001cb8:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((380 + 11 * i), 230, 0, 1, choiceA[i], 2);
	for (i = 0; i < sizeof(choiceB); i++)
		OutGraphicsCharFont2a((380 + 11 * i), 260, 0, 1, choiceB[i], 2);
	for (i = 0; i < sizeof(choiceC); i++)
		OutGraphicsCharFont2a((380 + 11 * i), 290, 0, 1, choiceC[i], 2);
	for (i = 0; i < sizeof(choiceD); i++)
 8001cbc:	e0bfdb17 	ldw	r2,-148(fp)
 8001cc0:	10800044 	addi	r2,r2,1
 8001cc4:	e0bfdb15 	stw	r2,-148(fp)
 8001cc8:	e0bfdb17 	ldw	r2,-148(fp)
 8001ccc:	10800830 	cmpltui	r2,r2,32
 8001cd0:	103fe91e 	bne	r2,zero,8001c78 <__alt_data_end+0xfc001c78>
		OutGraphicsCharFont2a((380 + 11 * i), 320, 0, 1, choiceD[i], 2);
	for (i = 0; i < sizeof(choiceE); i++)
 8001cd4:	e03fdb15 	stw	zero,-148(fp)
 8001cd8:	00001406 	br	8001d2c <multiple_qn+0x3a8>
		OutGraphicsCharFont2a((380 + 11 * i), 350, 0, 1, choiceE[i], 2);
 8001cdc:	e0bfdb17 	ldw	r2,-148(fp)
 8001ce0:	108002e4 	muli	r2,r2,11
 8001ce4:	11005f04 	addi	r4,r2,380
 8001ce8:	e0fffa44 	addi	r3,fp,-23
 8001cec:	e0bfdb17 	ldw	r2,-148(fp)
 8001cf0:	1885883a 	add	r2,r3,r2
 8001cf4:	10800003 	ldbu	r2,0(r2)
 8001cf8:	10803fcc 	andi	r2,r2,255
 8001cfc:	1080201c 	xori	r2,r2,128
 8001d00:	10bfe004 	addi	r2,r2,-128
 8001d04:	d8800015 	stw	r2,0(sp)
 8001d08:	00800084 	movi	r2,2
 8001d0c:	d8800115 	stw	r2,4(sp)
 8001d10:	01405784 	movi	r5,350
 8001d14:	000d883a 	mov	r6,zero
 8001d18:	01c00044 	movi	r7,1
 8001d1c:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((380 + 11 * i), 260, 0, 1, choiceB[i], 2);
	for (i = 0; i < sizeof(choiceC); i++)
		OutGraphicsCharFont2a((380 + 11 * i), 290, 0, 1, choiceC[i], 2);
	for (i = 0; i < sizeof(choiceD); i++)
		OutGraphicsCharFont2a((380 + 11 * i), 320, 0, 1, choiceD[i], 2);
	for (i = 0; i < sizeof(choiceE); i++)
 8001d20:	e0bfdb17 	ldw	r2,-148(fp)
 8001d24:	10800044 	addi	r2,r2,1
 8001d28:	e0bfdb15 	stw	r2,-148(fp)
 8001d2c:	e0bfdb17 	ldw	r2,-148(fp)
 8001d30:	10800570 	cmpltui	r2,r2,21
 8001d34:	103fe91e 	bne	r2,zero,8001cdc <__alt_data_end+0xfc001cdc>
		OutGraphicsCharFont2a((380 + 11 * i), 350, 0, 1, choiceE[i], 2);

}
 8001d38:	e037883a 	mov	sp,fp
 8001d3c:	dfc00117 	ldw	ra,4(sp)
 8001d40:	df000017 	ldw	fp,0(sp)
 8001d44:	dec00204 	addi	sp,sp,8
 8001d48:	f800283a 	ret

08001d4c <shuffle_names>:

void shuffle_names() {
 8001d4c:	defff204 	addi	sp,sp,-56
 8001d50:	dfc00d15 	stw	ra,52(sp)
 8001d54:	df000c15 	stw	fp,48(sp)
 8001d58:	df000c04 	addi	fp,sp,48
	//make the layout
	//draw the background color
	clear_screen(1); //some kind of dirty blue 119 //250 gray
 8001d5c:	01000044 	movi	r4,1
 8001d60:	8000f100 	call	8000f10 <clear_screen>
	drawFilledRectangle(0, 100, 0, 800, 50); //insert the top bar
 8001d64:	00800c84 	movi	r2,50
 8001d68:	d8800015 	stw	r2,0(sp)
 8001d6c:	0009883a 	mov	r4,zero
 8001d70:	01401904 	movi	r5,100
 8001d74:	000d883a 	mov	r6,zero
 8001d78:	01c0c804 	movi	r7,800
 8001d7c:	8000d880 	call	8000d88 <drawFilledRectangle>

	///draw box for activity
	char class_name[] = "CPEN 391";
 8001d80:	00939174 	movhi	r2,20037
 8001d84:	109410c4 	addi	r2,r2,20547
 8001d88:	e0bff715 	stw	r2,-36(fp)
 8001d8c:	008c4e74 	movhi	r2,12601
 8001d90:	108cc804 	addi	r2,r2,13088
 8001d94:	e0bff815 	stw	r2,-32(fp)
 8001d98:	e03ff905 	stb	zero,-28(fp)
	char question[] = "QUESTIONS";
 8001d9c:	00801444 	movi	r2,81
 8001da0:	e0bff945 	stb	r2,-27(fp)
 8001da4:	00801544 	movi	r2,85
 8001da8:	e0bff985 	stb	r2,-26(fp)
 8001dac:	00801144 	movi	r2,69
 8001db0:	e0bff9c5 	stb	r2,-25(fp)
 8001db4:	008014c4 	movi	r2,83
 8001db8:	e0bffa05 	stb	r2,-24(fp)
 8001dbc:	00801504 	movi	r2,84
 8001dc0:	e0bffa45 	stb	r2,-23(fp)
 8001dc4:	00801244 	movi	r2,73
 8001dc8:	e0bffa85 	stb	r2,-22(fp)
 8001dcc:	008013c4 	movi	r2,79
 8001dd0:	e0bffac5 	stb	r2,-21(fp)
 8001dd4:	00801384 	movi	r2,78
 8001dd8:	e0bffb05 	stb	r2,-20(fp)
 8001ddc:	008014c4 	movi	r2,83
 8001de0:	e0bffb45 	stb	r2,-19(fp)
 8001de4:	e03ffb85 	stb	zero,-18(fp)
	char group1[] = "GROUP 1";
 8001de8:	008011c4 	movi	r2,71
 8001dec:	e0bffbc5 	stb	r2,-17(fp)
 8001df0:	00801484 	movi	r2,82
 8001df4:	e0bffc05 	stb	r2,-16(fp)
 8001df8:	008013c4 	movi	r2,79
 8001dfc:	e0bffc45 	stb	r2,-15(fp)
 8001e00:	00801544 	movi	r2,85
 8001e04:	e0bffc85 	stb	r2,-14(fp)
 8001e08:	00801404 	movi	r2,80
 8001e0c:	e0bffcc5 	stb	r2,-13(fp)
 8001e10:	00800804 	movi	r2,32
 8001e14:	e0bffd05 	stb	r2,-12(fp)
 8001e18:	00800c44 	movi	r2,49
 8001e1c:	e0bffd45 	stb	r2,-11(fp)
 8001e20:	e03ffd85 	stb	zero,-10(fp)
	char group2[] = "GROUP 2";
 8001e24:	008011c4 	movi	r2,71
 8001e28:	e0bffdc5 	stb	r2,-9(fp)
 8001e2c:	00801484 	movi	r2,82
 8001e30:	e0bffe05 	stb	r2,-8(fp)
 8001e34:	008013c4 	movi	r2,79
 8001e38:	e0bffe45 	stb	r2,-7(fp)
 8001e3c:	00801544 	movi	r2,85
 8001e40:	e0bffe85 	stb	r2,-6(fp)
 8001e44:	00801404 	movi	r2,80
 8001e48:	e0bffec5 	stb	r2,-5(fp)
 8001e4c:	00800804 	movi	r2,32
 8001e50:	e0bfff05 	stb	r2,-4(fp)
 8001e54:	00800c84 	movi	r2,50
 8001e58:	e0bfff45 	stb	r2,-3(fp)
 8001e5c:	e03fff85 	stb	zero,-2(fp)
	drawFilledRectangle(230, 290, 600, 720, 50); //rectangle for questions
 8001e60:	00800c84 	movi	r2,50
 8001e64:	d8800015 	stw	r2,0(sp)
 8001e68:	01003984 	movi	r4,230
 8001e6c:	01404884 	movi	r5,290
 8001e70:	01809604 	movi	r6,600
 8001e74:	01c0b404 	movi	r7,720
 8001e78:	8000d880 	call	8000d88 <drawFilledRectangle>
	int i;
	for (i = 0; i < sizeof(class_name); i++)
 8001e7c:	e03ff615 	stw	zero,-40(fp)
 8001e80:	00001406 	br	8001ed4 <shuffle_names+0x188>
		OutGraphicsCharFont2a((350 + 13 * i), 50, 0, 1, class_name[i], 2); //d
 8001e84:	e0bff617 	ldw	r2,-40(fp)
 8001e88:	10800364 	muli	r2,r2,13
 8001e8c:	11005784 	addi	r4,r2,350
 8001e90:	e0fff704 	addi	r3,fp,-36
 8001e94:	e0bff617 	ldw	r2,-40(fp)
 8001e98:	1885883a 	add	r2,r3,r2
 8001e9c:	10800003 	ldbu	r2,0(r2)
 8001ea0:	10803fcc 	andi	r2,r2,255
 8001ea4:	1080201c 	xori	r2,r2,128
 8001ea8:	10bfe004 	addi	r2,r2,-128
 8001eac:	d8800015 	stw	r2,0(sp)
 8001eb0:	00800084 	movi	r2,2
 8001eb4:	d8800115 	stw	r2,4(sp)
 8001eb8:	01400c84 	movi	r5,50
 8001ebc:	000d883a 	mov	r6,zero
 8001ec0:	01c00044 	movi	r7,1
 8001ec4:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	char question[] = "QUESTIONS";
	char group1[] = "GROUP 1";
	char group2[] = "GROUP 2";
	drawFilledRectangle(230, 290, 600, 720, 50); //rectangle for questions
	int i;
	for (i = 0; i < sizeof(class_name); i++)
 8001ec8:	e0bff617 	ldw	r2,-40(fp)
 8001ecc:	10800044 	addi	r2,r2,1
 8001ed0:	e0bff615 	stw	r2,-40(fp)
 8001ed4:	e0bff617 	ldw	r2,-40(fp)
 8001ed8:	10800270 	cmpltui	r2,r2,9
 8001edc:	103fe91e 	bne	r2,zero,8001e84 <__alt_data_end+0xfc001e84>
		OutGraphicsCharFont2a((350 + 13 * i), 50, 0, 1, class_name[i], 2); //d

	for (i = 0; i < sizeof(question); i++)
 8001ee0:	e03ff615 	stw	zero,-40(fp)
 8001ee4:	00001406 	br	8001f38 <shuffle_names+0x1ec>
		OutGraphicsCharFont2a((610 + 11 * i), 255, 15, 1, question[i], 2);
 8001ee8:	e0bff617 	ldw	r2,-40(fp)
 8001eec:	108002e4 	muli	r2,r2,11
 8001ef0:	11009884 	addi	r4,r2,610
 8001ef4:	e0fff944 	addi	r3,fp,-27
 8001ef8:	e0bff617 	ldw	r2,-40(fp)
 8001efc:	1885883a 	add	r2,r3,r2
 8001f00:	10800003 	ldbu	r2,0(r2)
 8001f04:	10803fcc 	andi	r2,r2,255
 8001f08:	1080201c 	xori	r2,r2,128
 8001f0c:	10bfe004 	addi	r2,r2,-128
 8001f10:	d8800015 	stw	r2,0(sp)
 8001f14:	00800084 	movi	r2,2
 8001f18:	d8800115 	stw	r2,4(sp)
 8001f1c:	01403fc4 	movi	r5,255
 8001f20:	018003c4 	movi	r6,15
 8001f24:	01c00044 	movi	r7,1
 8001f28:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	drawFilledRectangle(230, 290, 600, 720, 50); //rectangle for questions
	int i;
	for (i = 0; i < sizeof(class_name); i++)
		OutGraphicsCharFont2a((350 + 13 * i), 50, 0, 1, class_name[i], 2); //d

	for (i = 0; i < sizeof(question); i++)
 8001f2c:	e0bff617 	ldw	r2,-40(fp)
 8001f30:	10800044 	addi	r2,r2,1
 8001f34:	e0bff615 	stw	r2,-40(fp)
 8001f38:	e0bff617 	ldw	r2,-40(fp)
 8001f3c:	108002b0 	cmpltui	r2,r2,10
 8001f40:	103fe91e 	bne	r2,zero,8001ee8 <__alt_data_end+0xfc001ee8>
		OutGraphicsCharFont2a((610 + 11 * i), 255, 15, 1, question[i], 2);

	for (i = 0; i < sizeof(group1); i++)
 8001f44:	e03ff615 	stw	zero,-40(fp)
 8001f48:	00001406 	br	8001f9c <shuffle_names+0x250>
		OutGraphicsCharFont2a((100 + 11 * i), 160, 0, 1, group1[i], 2);
 8001f4c:	e0bff617 	ldw	r2,-40(fp)
 8001f50:	108002e4 	muli	r2,r2,11
 8001f54:	11001904 	addi	r4,r2,100
 8001f58:	e0fffbc4 	addi	r3,fp,-17
 8001f5c:	e0bff617 	ldw	r2,-40(fp)
 8001f60:	1885883a 	add	r2,r3,r2
 8001f64:	10800003 	ldbu	r2,0(r2)
 8001f68:	10803fcc 	andi	r2,r2,255
 8001f6c:	1080201c 	xori	r2,r2,128
 8001f70:	10bfe004 	addi	r2,r2,-128
 8001f74:	d8800015 	stw	r2,0(sp)
 8001f78:	00800084 	movi	r2,2
 8001f7c:	d8800115 	stw	r2,4(sp)
 8001f80:	01402804 	movi	r5,160
 8001f84:	000d883a 	mov	r6,zero
 8001f88:	01c00044 	movi	r7,1
 8001f8c:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((350 + 13 * i), 50, 0, 1, class_name[i], 2); //d

	for (i = 0; i < sizeof(question); i++)
		OutGraphicsCharFont2a((610 + 11 * i), 255, 15, 1, question[i], 2);

	for (i = 0; i < sizeof(group1); i++)
 8001f90:	e0bff617 	ldw	r2,-40(fp)
 8001f94:	10800044 	addi	r2,r2,1
 8001f98:	e0bff615 	stw	r2,-40(fp)
 8001f9c:	e0bff617 	ldw	r2,-40(fp)
 8001fa0:	10800230 	cmpltui	r2,r2,8
 8001fa4:	103fe91e 	bne	r2,zero,8001f4c <__alt_data_end+0xfc001f4c>
		OutGraphicsCharFont2a((100 + 11 * i), 160, 0, 1, group1[i], 2);

	for (i = 0; i < sizeof(group2); i++)
 8001fa8:	e03ff615 	stw	zero,-40(fp)
 8001fac:	00001406 	br	8002000 <shuffle_names+0x2b4>
		OutGraphicsCharFont2a((350 + 11 * i), 160, 0, 1, group2[i], 2);
 8001fb0:	e0bff617 	ldw	r2,-40(fp)
 8001fb4:	108002e4 	muli	r2,r2,11
 8001fb8:	11005784 	addi	r4,r2,350
 8001fbc:	e0fffdc4 	addi	r3,fp,-9
 8001fc0:	e0bff617 	ldw	r2,-40(fp)
 8001fc4:	1885883a 	add	r2,r3,r2
 8001fc8:	10800003 	ldbu	r2,0(r2)
 8001fcc:	10803fcc 	andi	r2,r2,255
 8001fd0:	1080201c 	xori	r2,r2,128
 8001fd4:	10bfe004 	addi	r2,r2,-128
 8001fd8:	d8800015 	stw	r2,0(sp)
 8001fdc:	00800084 	movi	r2,2
 8001fe0:	d8800115 	stw	r2,4(sp)
 8001fe4:	01402804 	movi	r5,160
 8001fe8:	000d883a 	mov	r6,zero
 8001fec:	01c00044 	movi	r7,1
 8001ff0:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((610 + 11 * i), 255, 15, 1, question[i], 2);

	for (i = 0; i < sizeof(group1); i++)
		OutGraphicsCharFont2a((100 + 11 * i), 160, 0, 1, group1[i], 2);

	for (i = 0; i < sizeof(group2); i++)
 8001ff4:	e0bff617 	ldw	r2,-40(fp)
 8001ff8:	10800044 	addi	r2,r2,1
 8001ffc:	e0bff615 	stw	r2,-40(fp)
 8002000:	e0bff617 	ldw	r2,-40(fp)
 8002004:	10800230 	cmpltui	r2,r2,8
 8002008:	103fe91e 	bne	r2,zero,8001fb0 <__alt_data_end+0xfc001fb0>
		OutGraphicsCharFont2a((350 + 11 * i), 160, 0, 1, group2[i], 2);

}
 800200c:	e037883a 	mov	sp,fp
 8002010:	dfc00117 	ldw	ra,4(sp)
 8002014:	df000017 	ldw	fp,0(sp)
 8002018:	dec00204 	addi	sp,sp,8
 800201c:	f800283a 	ret

08002020 <handle_touch>:


void handle_touch() {
 8002020:	defffe04 	addi	sp,sp,-8
 8002024:	dfc00115 	stw	ra,4(sp)
 8002028:	df000015 	stw	fp,0(sp)
 800202c:	d839883a 	mov	fp,sp

	Init_Touch();
 8002030:	800102c0 	call	800102c <Init_Touch>
	while (1) {
		if ((Touch_Status & 0x01) == 0x01) {
 8002034:	00a10034 	movhi	r2,33792
 8002038:	10808c04 	addi	r2,r2,560
 800203c:	10800003 	ldbu	r2,0(r2)
 8002040:	10803fcc 	andi	r2,r2,255
 8002044:	1080004c 	andi	r2,r2,1
 8002048:	10000a26 	beq	r2,zero,8002074 <handle_touch+0x54>

			if ((Touch_Recieve & 0x81) == 0x81) {
 800204c:	00a10034 	movhi	r2,33792
 8002050:	10808c84 	addi	r2,r2,562
 8002054:	10800003 	ldbu	r2,0(r2)
 8002058:	10803fcc 	andi	r2,r2,255
 800205c:	1080204c 	andi	r2,r2,129
 8002060:	10802058 	cmpnei	r2,r2,129
 8002064:	1000021e 	bne	r2,zero,8002070 <handle_touch+0x50>
				GetPress();
 8002068:	80010f00 	call	80010f0 <GetPress>
 800206c:	00000106 	br	8002074 <handle_touch+0x54>
			}

			else
				GetRelease();
 8002070:	80011f80 	call	80011f8 <GetRelease>
		}

	}
 8002074:	003fef06 	br	8002034 <__alt_data_end+0xfc002034>

08002078 <demo_page>:

}

void demo_page(){
 8002078:	defff204 	addi	sp,sp,-56
 800207c:	dfc00d15 	stw	ra,52(sp)
 8002080:	df000c15 	stw	fp,48(sp)
 8002084:	df000c04 	addi	fp,sp,48
	clear_screen(100);
 8002088:	01001904 	movi	r4,100
 800208c:	8000f100 	call	8000f10 <clear_screen>
	char title[] = "TEXT RECIEVED FROM THE BLUETOOTH: ";
 8002090:	00951634 	movhi	r2,21592
 8002094:	10915504 	addi	r2,r2,17748
 8002098:	e0bff715 	stw	r2,-36(fp)
 800209c:	0090d174 	movhi	r2,17221
 80020a0:	10948804 	addi	r2,r2,21024
 80020a4:	e0bff815 	stw	r2,-32(fp)
 80020a8:	009155b4 	movhi	r2,17750
 80020ac:	10915244 	addi	r2,r2,17737
 80020b0:	e0bff915 	stw	r2,-28(fp)
 80020b4:	009491b4 	movhi	r2,21062
 80020b8:	10881104 	addi	r2,r2,8260
 80020bc:	e0bffa15 	stw	r2,-24(fp)
 80020c0:	00950834 	movhi	r2,21536
 80020c4:	109353c4 	addi	r2,r2,19791
 80020c8:	e0bffb15 	stw	r2,-20(fp)
 80020cc:	00908834 	movhi	r2,16928
 80020d0:	10915204 	addi	r2,r2,17736
 80020d4:	e0bffc15 	stw	r2,-16(fp)
 80020d8:	00951174 	movhi	r2,21573
 80020dc:	10955304 	addi	r2,r2,21836
 80020e0:	e0bffd15 	stw	r2,-12(fp)
 80020e4:	00921534 	movhi	r2,18516
 80020e8:	1093d3c4 	addi	r2,r2,20303
 80020ec:	e0bffe15 	stw	r2,-8(fp)
 80020f0:	00880e84 	movi	r2,8250
 80020f4:	e0bfff0d 	sth	r2,-4(fp)
 80020f8:	e03fff85 	stb	zero,-2(fp)

	int i;
		for (i = 0; i < sizeof(title); i++)
 80020fc:	e03ff615 	stw	zero,-40(fp)
 8002100:	00001406 	br	8002154 <demo_page+0xdc>
			OutGraphicsCharFont2a((200 + 13 * i), 200, 0, 1, title[i], 3);
 8002104:	e0bff617 	ldw	r2,-40(fp)
 8002108:	10800364 	muli	r2,r2,13
 800210c:	11003204 	addi	r4,r2,200
 8002110:	e0fff704 	addi	r3,fp,-36
 8002114:	e0bff617 	ldw	r2,-40(fp)
 8002118:	1885883a 	add	r2,r3,r2
 800211c:	10800003 	ldbu	r2,0(r2)
 8002120:	10803fcc 	andi	r2,r2,255
 8002124:	1080201c 	xori	r2,r2,128
 8002128:	10bfe004 	addi	r2,r2,-128
 800212c:	d8800015 	stw	r2,0(sp)
 8002130:	008000c4 	movi	r2,3
 8002134:	d8800115 	stw	r2,4(sp)
 8002138:	01403204 	movi	r5,200
 800213c:	000d883a 	mov	r6,zero
 8002140:	01c00044 	movi	r7,1
 8002144:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
void demo_page(){
	clear_screen(100);
	char title[] = "TEXT RECIEVED FROM THE BLUETOOTH: ";

	int i;
		for (i = 0; i < sizeof(title); i++)
 8002148:	e0bff617 	ldw	r2,-40(fp)
 800214c:	10800044 	addi	r2,r2,1
 8002150:	e0bff615 	stw	r2,-40(fp)
 8002154:	e0bff617 	ldw	r2,-40(fp)
 8002158:	108008f0 	cmpltui	r2,r2,35
 800215c:	103fe91e 	bne	r2,zero,8002104 <__alt_data_end+0xfc002104>
			OutGraphicsCharFont2a((200 + 13 * i), 200, 0, 1, title[i], 3);

}
 8002160:	e037883a 	mov	sp,fp
 8002164:	dfc00117 	ldw	ra,4(sp)
 8002168:	df000017 	ldw	fp,0(sp)
 800216c:	dec00204 	addi	sp,sp,8
 8002170:	f800283a 	ret

08002174 <init_Bluetooth>:
#define BLUETOOTH_RxData (*(volatile unsigned char *)(0x84000222))
#define BLUETOOTH_Baud (*(volatile unsigned char *)(0x84000224))

#define SECONDS 1000000

void init_Bluetooth(void) {
 8002174:	defffe04 	addi	sp,sp,-8
 8002178:	dfc00115 	stw	ra,4(sp)
 800217c:	df000015 	stw	fp,0(sp)
 8002180:	d839883a 	mov	fp,sp
	printf("Start initialising the bluetooth...");
 8002184:	010200b4 	movhi	r4,2050
 8002188:	21320304 	addi	r4,r4,-14324
 800218c:	80033cc0 	call	80033cc <printf>
	BLUETOOTH_Control = 0x15;
 8002190:	00a10034 	movhi	r2,33792
 8002194:	10808804 	addi	r2,r2,544
 8002198:	00c00544 	movi	r3,21
 800219c:	10c00005 	stb	r3,0(r2)
	BLUETOOTH_Baud = 0x01;
 80021a0:	00a10034 	movhi	r2,33792
 80021a4:	10808904 	addi	r2,r2,548
 80021a8:	00c00044 	movi	r3,1
 80021ac:	10c00005 	stb	r3,0(r2)
	usleep(SECONDS); //wait for 100ms
 80021b0:	010003f4 	movhi	r4,15
 80021b4:	21109004 	addi	r4,r4,16960
 80021b8:	80101380 	call	8010138 <usleep>
	printf("Done initialization\n");
 80021bc:	010200b4 	movhi	r4,2050
 80021c0:	21320c04 	addi	r4,r4,-14288
 80021c4:	80034c00 	call	80034c0 <puts>
}
 80021c8:	e037883a 	mov	sp,fp
 80021cc:	dfc00117 	ldw	ra,4(sp)
 80021d0:	df000017 	ldw	fp,0(sp)
 80021d4:	dec00204 	addi	sp,sp,8
 80021d8:	f800283a 	ret

080021dc <putChar_Bluetooth>:

/*
 * Poll Tx bit in 6850 status register. Wait for it to become "1", and then
 * write c to the 6850 TxData register to output the character
 */
char putChar_Bluetooth(char c) {
 80021dc:	defffe04 	addi	sp,sp,-8
 80021e0:	df000115 	stw	fp,4(sp)
 80021e4:	df000104 	addi	fp,sp,4
 80021e8:	2005883a 	mov	r2,r4
 80021ec:	e0bfff05 	stb	r2,-4(fp)

	while (1) {
		if (BLUETOOTH_Status & 0x2) {
 80021f0:	00a10034 	movhi	r2,33792
 80021f4:	10808804 	addi	r2,r2,544
 80021f8:	10800003 	ldbu	r2,0(r2)
 80021fc:	10803fcc 	andi	r2,r2,255
 8002200:	1080008c 	andi	r2,r2,2
 8002204:	10000526 	beq	r2,zero,800221c <putChar_Bluetooth+0x40>
			BLUETOOTH_TxData = c;
 8002208:	00a10034 	movhi	r2,33792
 800220c:	10808884 	addi	r2,r2,546
 8002210:	e0ffff03 	ldbu	r3,-4(fp)
 8002214:	10c00005 	stb	r3,0(r2)
			break;
 8002218:	00000106 	br	8002220 <putChar_Bluetooth+0x44>
		}
	}
 800221c:	003ff406 	br	80021f0 <__alt_data_end+0xfc0021f0>
	return c;
 8002220:	e0bfff03 	ldbu	r2,-4(fp)

}
 8002224:	e037883a 	mov	sp,fp
 8002228:	df000017 	ldw	fp,0(sp)
 800222c:	dec00104 	addi	sp,sp,4
 8002230:	f800283a 	ret

08002234 <getChar_Bluetooth>:
/*
 * Poll Rx bit in 6850 status register. Wait for it to become "1", and then
 * read received character from 6850 RxData register
 */

char getChar_Bluetooth(void) {
 8002234:	deffff04 	addi	sp,sp,-4
 8002238:	df000015 	stw	fp,0(sp)
 800223c:	d839883a 	mov	fp,sp
	while (1) {
		if (BLUETOOTH_Status & 0x1) {
 8002240:	00a10034 	movhi	r2,33792
 8002244:	10808804 	addi	r2,r2,544
 8002248:	10800003 	ldbu	r2,0(r2)
 800224c:	10803fcc 	andi	r2,r2,255
 8002250:	1080004c 	andi	r2,r2,1
 8002254:	10000126 	beq	r2,zero,800225c <getChar_Bluetooth+0x28>
			break;
 8002258:	00000106 	br	8002260 <getChar_Bluetooth+0x2c>
		}
	}
 800225c:	003ff806 	br	8002240 <__alt_data_end+0xfc002240>
	return BLUETOOTH_RxData;
 8002260:	00a10034 	movhi	r2,33792
 8002264:	10808884 	addi	r2,r2,546
 8002268:	10800003 	ldbu	r2,0(r2)
}
 800226c:	e037883a 	mov	sp,fp
 8002270:	df000017 	ldw	fp,0(sp)
 8002274:	dec00104 	addi	sp,sp,4
 8002278:	f800283a 	ret

0800227c <send_command>:

/*
 * Send the command to the bluetooth dongle through the serial port.
 */
void send_command(char string[], int length) {
 800227c:	defffb04 	addi	sp,sp,-20
 8002280:	dfc00415 	stw	ra,16(sp)
 8002284:	df000315 	stw	fp,12(sp)
 8002288:	df000304 	addi	fp,sp,12
 800228c:	e13ffe15 	stw	r4,-8(fp)
 8002290:	e17fff15 	stw	r5,-4(fp)
	printf("Start sending the commands...");
 8002294:	010200b4 	movhi	r4,2050
 8002298:	21321104 	addi	r4,r4,-14268
 800229c:	80033cc0 	call	80033cc <printf>
	int i = 0;
 80022a0:	e03ffd15 	stw	zero,-12(fp)
	for (; i < length; i++) {
 80022a4:	00000f06 	br	80022e4 <send_command+0x68>
		usleep(SECONDS); //wait for 100ms
 80022a8:	010003f4 	movhi	r4,15
 80022ac:	21109004 	addi	r4,r4,16960
 80022b0:	80101380 	call	8010138 <usleep>
		putChar_Bluetooth(string[i]);
 80022b4:	e0bffd17 	ldw	r2,-12(fp)
 80022b8:	e0fffe17 	ldw	r3,-8(fp)
 80022bc:	1885883a 	add	r2,r3,r2
 80022c0:	10800003 	ldbu	r2,0(r2)
 80022c4:	10803fcc 	andi	r2,r2,255
 80022c8:	1080201c 	xori	r2,r2,128
 80022cc:	10bfe004 	addi	r2,r2,-128
 80022d0:	1009883a 	mov	r4,r2
 80022d4:	80021dc0 	call	80021dc <putChar_Bluetooth>
 * Send the command to the bluetooth dongle through the serial port.
 */
void send_command(char string[], int length) {
	printf("Start sending the commands...");
	int i = 0;
	for (; i < length; i++) {
 80022d8:	e0bffd17 	ldw	r2,-12(fp)
 80022dc:	10800044 	addi	r2,r2,1
 80022e0:	e0bffd15 	stw	r2,-12(fp)
 80022e4:	e0fffd17 	ldw	r3,-12(fp)
 80022e8:	e0bfff17 	ldw	r2,-4(fp)
 80022ec:	18bfee16 	blt	r3,r2,80022a8 <__alt_data_end+0xfc0022a8>
		usleep(SECONDS); //wait for 100ms
		putChar_Bluetooth(string[i]);
	}
	printf("Commands sent\n");
 80022f0:	010200b4 	movhi	r4,2050
 80022f4:	21321904 	addi	r4,r4,-14236
 80022f8:	80034c00 	call	80034c0 <puts>
}
 80022fc:	e037883a 	mov	sp,fp
 8002300:	dfc00117 	ldw	ra,4(sp)
 8002304:	df000017 	ldw	fp,0(sp)
 8002308:	dec00204 	addi	sp,sp,8
 800230c:	f800283a 	ret

08002310 <start_command>:

/*
 * Enter the command mode
 */
void start_command() {
 8002310:	defffe04 	addi	sp,sp,-8
 8002314:	dfc00115 	stw	ra,4(sp)
 8002318:	df000015 	stw	fp,0(sp)
 800231c:	d839883a 	mov	fp,sp
	usleep(SECONDS); //wait for 100ms
 8002320:	010003f4 	movhi	r4,15
 8002324:	21109004 	addi	r4,r4,16960
 8002328:	80101380 	call	8010138 <usleep>
	send_command("$$$", 3); //Enter the command mode
 800232c:	010200b4 	movhi	r4,2050
 8002330:	21321d04 	addi	r4,r4,-14220
 8002334:	014000c4 	movi	r5,3
 8002338:	800227c0 	call	800227c <send_command>
	usleep(SECONDS); //wait for 100ms
 800233c:	010003f4 	movhi	r4,15
 8002340:	21109004 	addi	r4,r4,16960
 8002344:	80101380 	call	8010138 <usleep>
	printf("Start the command mode here\n");
 8002348:	010200b4 	movhi	r4,2050
 800234c:	21321e04 	addi	r4,r4,-14216
 8002350:	80034c00 	call	80034c0 <puts>
}
 8002354:	e037883a 	mov	sp,fp
 8002358:	dfc00117 	ldw	ra,4(sp)
 800235c:	df000017 	ldw	fp,0(sp)
 8002360:	dec00204 	addi	sp,sp,8
 8002364:	f800283a 	ret

08002368 <end_command>:

/*
 * Quit the command mode
 */
void end_command() {
 8002368:	defffe04 	addi	sp,sp,-8
 800236c:	dfc00115 	stw	ra,4(sp)
 8002370:	df000015 	stw	fp,0(sp)
 8002374:	d839883a 	mov	fp,sp
	usleep(SECONDS); //wait for 100ms
 8002378:	010003f4 	movhi	r4,15
 800237c:	21109004 	addi	r4,r4,16960
 8002380:	80101380 	call	8010138 <usleep>
	send_command("---\r\n", 5); //Exit the command mode
 8002384:	010200b4 	movhi	r4,2050
 8002388:	21322504 	addi	r4,r4,-14188
 800238c:	01400144 	movi	r5,5
 8002390:	800227c0 	call	800227c <send_command>
	usleep(SECONDS); //wait for 100ms
 8002394:	010003f4 	movhi	r4,15
 8002398:	21109004 	addi	r4,r4,16960
 800239c:	80101380 	call	8010138 <usleep>
	printf("Exit the command mode here\n");
 80023a0:	010200b4 	movhi	r4,2050
 80023a4:	21322704 	addi	r4,r4,-14180
 80023a8:	80034c00 	call	80034c0 <puts>
}
 80023ac:	e037883a 	mov	sp,fp
 80023b0:	dfc00117 	ldw	ra,4(sp)
 80023b4:	df000017 	ldw	fp,0(sp)
 80023b8:	dec00204 	addi	sp,sp,8
 80023bc:	f800283a 	ret

080023c0 <putStringBluetooth>:

void putStringBluetooth(char *s) {
 80023c0:	defffc04 	addi	sp,sp,-16
 80023c4:	dfc00315 	stw	ra,12(sp)
 80023c8:	df000215 	stw	fp,8(sp)
 80023cc:	df000204 	addi	fp,sp,8
 80023d0:	e13fff15 	stw	r4,-4(fp)
	char i;
	while ((i = *s) != 0) {
 80023d4:	00000606 	br	80023f0 <putStringBluetooth+0x30>
		putChar_Bluetooth(i);
 80023d8:	e0bffe07 	ldb	r2,-8(fp)
 80023dc:	1009883a 	mov	r4,r2
 80023e0:	80021dc0 	call	80021dc <putChar_Bluetooth>
		s++;
 80023e4:	e0bfff17 	ldw	r2,-4(fp)
 80023e8:	10800044 	addi	r2,r2,1
 80023ec:	e0bfff15 	stw	r2,-4(fp)
	printf("Exit the command mode here\n");
}

void putStringBluetooth(char *s) {
	char i;
	while ((i = *s) != 0) {
 80023f0:	e0bfff17 	ldw	r2,-4(fp)
 80023f4:	10800003 	ldbu	r2,0(r2)
 80023f8:	e0bffe05 	stb	r2,-8(fp)
 80023fc:	e0bffe07 	ldb	r2,-8(fp)
 8002400:	103ff51e 	bne	r2,zero,80023d8 <__alt_data_end+0xfc0023d8>
		putChar_Bluetooth(i);
		s++;
	}
	printf("put the terminator");
 8002404:	010200b4 	movhi	r4,2050
 8002408:	21322e04 	addi	r4,r4,-14152
 800240c:	80033cc0 	call	80033cc <printf>
	putChar_Bluetooth('\r');
 8002410:	01000344 	movi	r4,13
 8002414:	80021dc0 	call	80021dc <putChar_Bluetooth>
}
 8002418:	e037883a 	mov	sp,fp
 800241c:	dfc00117 	ldw	ra,4(sp)
 8002420:	df000017 	ldw	fp,0(sp)
 8002424:	dec00204 	addi	sp,sp,8
 8002428:	f800283a 	ret

0800242c <dongle_reset>:

/*
 * Reset the bluetooth dongle
 */
void dongle_reset() {
 800242c:	defffd04 	addi	sp,sp,-12
 8002430:	dfc00215 	stw	ra,8(sp)
 8002434:	df000115 	stw	fp,4(sp)
 8002438:	df000104 	addi	fp,sp,4
	char *resetCommand = "SF,1\r\n";
 800243c:	008200b4 	movhi	r2,2050
 8002440:	10b23304 	addi	r2,r2,-14132
 8002444:	e0bfff15 	stw	r2,-4(fp)
	printf("doing a factory reset");
 8002448:	010200b4 	movhi	r4,2050
 800244c:	21323504 	addi	r4,r4,-14124
 8002450:	80033cc0 	call	80033cc <printf>
	putStringBluetooth(resetCommand);
 8002454:	e13fff17 	ldw	r4,-4(fp)
 8002458:	80023c00 	call	80023c0 <putStringBluetooth>
}
 800245c:	e037883a 	mov	sp,fp
 8002460:	dfc00117 	ldw	ra,4(sp)
 8002464:	df000017 	ldw	fp,0(sp)
 8002468:	dec00204 	addi	sp,sp,8
 800246c:	f800283a 	ret

08002470 <change_name>:

void change_name(void) {
 8002470:	defffc04 	addi	sp,sp,-16
 8002474:	dfc00315 	stw	ra,12(sp)
 8002478:	df000215 	stw	fp,8(sp)
 800247c:	df000204 	addi	fp,sp,8
	const char name[] = "ZXYM";
 8002480:	00935674 	movhi	r2,19801
 8002484:	10961684 	addi	r2,r2,22618
 8002488:	e0bffe15 	stw	r2,-8(fp)
 800248c:	e03fff05 	stb	zero,-4(fp)
	printf("Start setting up the Bluetooth name: '%s'", name);
 8002490:	010200b4 	movhi	r4,2050
 8002494:	21323b04 	addi	r4,r4,-14100
 8002498:	e17ffe04 	addi	r5,fp,-8
 800249c:	80033cc0 	call	80033cc <printf>
	send_command("SN,", 3);
 80024a0:	010200b4 	movhi	r4,2050
 80024a4:	21324604 	addi	r4,r4,-14056
 80024a8:	014000c4 	movi	r5,3
 80024ac:	800227c0 	call	800227c <send_command>
	send_command(name, 3);
 80024b0:	e13ffe04 	addi	r4,fp,-8
 80024b4:	014000c4 	movi	r5,3
 80024b8:	800227c0 	call	800227c <send_command>
	send_command("\r\n", 2);
 80024bc:	010200b4 	movhi	r4,2050
 80024c0:	21324704 	addi	r4,r4,-14052
 80024c4:	01400084 	movi	r5,2
 80024c8:	800227c0 	call	800227c <send_command>
	printf("Done with the name setup...");
 80024cc:	010200b4 	movhi	r4,2050
 80024d0:	21324804 	addi	r4,r4,-14048
 80024d4:	80033cc0 	call	80033cc <printf>
}
 80024d8:	e037883a 	mov	sp,fp
 80024dc:	dfc00117 	ldw	ra,4(sp)
 80024e0:	df000017 	ldw	fp,0(sp)
 80024e4:	dec00204 	addi	sp,sp,8
 80024e8:	f800283a 	ret

080024ec <change_password>:

void change_password() {
 80024ec:	defffc04 	addi	sp,sp,-16
 80024f0:	dfc00315 	stw	ra,12(sp)
 80024f4:	df000215 	stw	fp,8(sp)
 80024f8:	df000204 	addi	fp,sp,8
	const char password[] = "0987";
 80024fc:	008dce34 	movhi	r2,14136
 8002500:	108e4c04 	addi	r2,r2,14640
 8002504:	e0bffe15 	stw	r2,-8(fp)
 8002508:	e03fff05 	stb	zero,-4(fp)

	printf("Start setting up the Bluetooth password: '%s'", password);
 800250c:	010200b4 	movhi	r4,2050
 8002510:	21324f04 	addi	r4,r4,-14020
 8002514:	e17ffe04 	addi	r5,fp,-8
 8002518:	80033cc0 	call	80033cc <printf>
	send_command("SP,", 3);
 800251c:	010200b4 	movhi	r4,2050
 8002520:	21325b04 	addi	r4,r4,-13972
 8002524:	014000c4 	movi	r5,3
 8002528:	800227c0 	call	800227c <send_command>
	send_command(password, 4);
 800252c:	e13ffe04 	addi	r4,fp,-8
 8002530:	01400104 	movi	r5,4
 8002534:	800227c0 	call	800227c <send_command>
	send_command("\r\n", 2);
 8002538:	010200b4 	movhi	r4,2050
 800253c:	21324704 	addi	r4,r4,-14052
 8002540:	01400084 	movi	r5,2
 8002544:	800227c0 	call	800227c <send_command>

}
 8002548:	e037883a 	mov	sp,fp
 800254c:	dfc00117 	ldw	ra,4(sp)
 8002550:	df000017 	ldw	fp,0(sp)
 8002554:	dec00204 	addi	sp,sp,8
 8002558:	f800283a 	ret

0800255c <getStringBluetooth>:

void getStringBluetooth(char s[]) {
 800255c:	defffa04 	addi	sp,sp,-24
 8002560:	dfc00515 	stw	ra,20(sp)
 8002564:	df000415 	stw	fp,16(sp)
 8002568:	dc000315 	stw	r16,12(sp)
 800256c:	df000404 	addi	fp,sp,16
 8002570:	e13ffe15 	stw	r4,-8(fp)
	int i = 0;
 8002574:	e03ffc15 	stw	zero,-16(fp)
	while (s[i] != '@') {
 8002578:	00001406 	br	80025cc <getStringBluetooth+0x70>
		while (s[0] != '$')
 800257c:	00000406 	br	8002590 <getStringBluetooth+0x34>
			s[0] = getChar_Bluetooth();
 8002580:	80022340 	call	8002234 <getChar_Bluetooth>
 8002584:	1007883a 	mov	r3,r2
 8002588:	e0bffe17 	ldw	r2,-8(fp)
 800258c:	10c00005 	stb	r3,0(r2)
}

void getStringBluetooth(char s[]) {
	int i = 0;
	while (s[i] != '@') {
		while (s[0] != '$')
 8002590:	e0bffe17 	ldw	r2,-8(fp)
 8002594:	10800003 	ldbu	r2,0(r2)
 8002598:	10803fcc 	andi	r2,r2,255
 800259c:	1080201c 	xori	r2,r2,128
 80025a0:	10bfe004 	addi	r2,r2,-128
 80025a4:	10800918 	cmpnei	r2,r2,36
 80025a8:	103ff51e 	bne	r2,zero,8002580 <__alt_data_end+0xfc002580>
			s[0] = getChar_Bluetooth();
		i++;
 80025ac:	e0bffc17 	ldw	r2,-16(fp)
 80025b0:	10800044 	addi	r2,r2,1
 80025b4:	e0bffc15 	stw	r2,-16(fp)
		s[i] = getChar_Bluetooth();
 80025b8:	e0bffc17 	ldw	r2,-16(fp)
 80025bc:	e0fffe17 	ldw	r3,-8(fp)
 80025c0:	18a1883a 	add	r16,r3,r2
 80025c4:	80022340 	call	8002234 <getChar_Bluetooth>
 80025c8:	80800005 	stb	r2,0(r16)

}

void getStringBluetooth(char s[]) {
	int i = 0;
	while (s[i] != '@') {
 80025cc:	e0bffc17 	ldw	r2,-16(fp)
 80025d0:	e0fffe17 	ldw	r3,-8(fp)
 80025d4:	1885883a 	add	r2,r3,r2
 80025d8:	10800003 	ldbu	r2,0(r2)
 80025dc:	10803fcc 	andi	r2,r2,255
 80025e0:	1080201c 	xori	r2,r2,128
 80025e4:	10bfe004 	addi	r2,r2,-128
 80025e8:	10801018 	cmpnei	r2,r2,64
 80025ec:	103fe31e 	bne	r2,zero,800257c <__alt_data_end+0xfc00257c>
			s[0] = getChar_Bluetooth();
		i++;
		s[i] = getChar_Bluetooth();
	}
	int j;
	for (j = 1; j < 6; j++) {
 80025f0:	00800044 	movi	r2,1
 80025f4:	e0bffd15 	stw	r2,-12(fp)
 80025f8:	00001206 	br	8002644 <getStringBluetooth+0xe8>
		printf("the o thing is: %o", j);
 80025fc:	010200b4 	movhi	r4,2050
 8002600:	21325c04 	addi	r4,r4,-13968
 8002604:	e17ffd17 	ldw	r5,-12(fp)
 8002608:	80033cc0 	call	80033cc <printf>
		printf("the s char is: %c", s[j]);
 800260c:	e0bffd17 	ldw	r2,-12(fp)
 8002610:	e0fffe17 	ldw	r3,-8(fp)
 8002614:	1885883a 	add	r2,r3,r2
 8002618:	10800003 	ldbu	r2,0(r2)
 800261c:	10803fcc 	andi	r2,r2,255
 8002620:	1080201c 	xori	r2,r2,128
 8002624:	10bfe004 	addi	r2,r2,-128
 8002628:	010200b4 	movhi	r4,2050
 800262c:	21326104 	addi	r4,r4,-13948
 8002630:	100b883a 	mov	r5,r2
 8002634:	80033cc0 	call	80033cc <printf>
			s[0] = getChar_Bluetooth();
		i++;
		s[i] = getChar_Bluetooth();
	}
	int j;
	for (j = 1; j < 6; j++) {
 8002638:	e0bffd17 	ldw	r2,-12(fp)
 800263c:	10800044 	addi	r2,r2,1
 8002640:	e0bffd15 	stw	r2,-12(fp)
 8002644:	e0bffd17 	ldw	r2,-12(fp)
 8002648:	10800190 	cmplti	r2,r2,6
 800264c:	103feb1e 	bne	r2,zero,80025fc <__alt_data_end+0xfc0025fc>
		printf("the o thing is: %o", j);
		printf("the s char is: %c", s[j]);
	}

}
 8002650:	e6ffff04 	addi	sp,fp,-4
 8002654:	dfc00217 	ldw	ra,8(sp)
 8002658:	df000117 	ldw	fp,4(sp)
 800265c:	dc000017 	ldw	r16,0(sp)
 8002660:	dec00304 	addi	sp,sp,12
 8002664:	f800283a 	ret

08002668 <putchar_GPS>:
#include <GPS.h>
#include "Bluetooth.c"

/********* Initialise GPS controller **************************************/
/************************************   putchar_GPS      ***************************************/
int putchar_GPS(int c) {
 8002668:	defffe04 	addi	sp,sp,-8
 800266c:	df000115 	stw	fp,4(sp)
 8002670:	df000104 	addi	fp,sp,4
 8002674:	e13fff15 	stw	r4,-4(fp)
	// poll Tx bit in 6850 status register. Wait for it to become '1'
	// write 'c' to the 6850 TxData register to output the character
	while ((GPS_Status & 0x02) != 0x02) {
 8002678:	0001883a 	nop
 800267c:	00a10034 	movhi	r2,33792
 8002680:	10808404 	addi	r2,r2,528
 8002684:	10800003 	ldbu	r2,0(r2)
 8002688:	10803fcc 	andi	r2,r2,255
 800268c:	1080008c 	andi	r2,r2,2
 8002690:	103ffa26 	beq	r2,zero,800267c <__alt_data_end+0xfc00267c>
	};

	return GPS_Transmit = c & 0x7F;
 8002694:	00a10034 	movhi	r2,33792
 8002698:	10808484 	addi	r2,r2,530
 800269c:	e0ffff17 	ldw	r3,-4(fp)
 80026a0:	18c01fcc 	andi	r3,r3,127
 80026a4:	10c00005 	stb	r3,0(r2)
 80026a8:	18803fcc 	andi	r2,r3,255

}
 80026ac:	e037883a 	mov	sp,fp
 80026b0:	df000017 	ldw	fp,0(sp)
 80026b4:	dec00104 	addi	sp,sp,4
 80026b8:	f800283a 	ret

080026bc <getcharGPS>:
/************************************   getcharGPS      ***************************************/

int getcharGPS(void) {
 80026bc:	defffe04 	addi	sp,sp,-8
 80026c0:	df000115 	stw	fp,4(sp)
 80026c4:	df000104 	addi	fp,sp,4
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received character from 6850 RxData register.
	while ((GPS_Status & 0x01) != 0x01) {
 80026c8:	0001883a 	nop
 80026cc:	00a10034 	movhi	r2,33792
 80026d0:	10808404 	addi	r2,r2,528
 80026d4:	10800003 	ldbu	r2,0(r2)
 80026d8:	10803fcc 	andi	r2,r2,255
 80026dc:	1080004c 	andi	r2,r2,1
 80026e0:	103ffa26 	beq	r2,zero,80026cc <__alt_data_end+0xfc0026cc>
	};
	//printf("before while");
	unsigned char TS;
	TS = GPS_Recieve;
 80026e4:	00a10034 	movhi	r2,33792
 80026e8:	10808484 	addi	r2,r2,530
 80026ec:	10800003 	ldbu	r2,0(r2)
 80026f0:	e0bfff05 	stb	r2,-4(fp)
	//   printf ("getDone,Touch_Recieve= %x \n" , TS );
	return TS;
 80026f4:	e0bfff03 	ldbu	r2,-4(fp)

}
 80026f8:	e037883a 	mov	sp,fp
 80026fc:	df000017 	ldw	fp,0(sp)
 8002700:	dec00104 	addi	sp,sp,4
 8002704:	f800283a 	ret

08002708 <putString>:

/************************************   putString     ***************************************/

void putString(char *s) {
 8002708:	defffc04 	addi	sp,sp,-16
 800270c:	dfc00315 	stw	ra,12(sp)
 8002710:	df000215 	stw	fp,8(sp)
 8002714:	df000204 	addi	fp,sp,8
 8002718:	e13fff15 	stw	r4,-4(fp)
	char i;
	printf("before while");
 800271c:	010200b4 	movhi	r4,2050
 8002720:	21326604 	addi	r4,r4,-13928
 8002724:	80033cc0 	call	80033cc <printf>
	while ((i = *s) != 0) {
 8002728:	00000606 	br	8002744 <putString+0x3c>

		putchar_GPS(i);
 800272c:	e0bffe07 	ldb	r2,-8(fp)
 8002730:	1009883a 	mov	r4,r2
 8002734:	80026680 	call	8002668 <putchar_GPS>
		s++;
 8002738:	e0bfff17 	ldw	r2,-4(fp)
 800273c:	10800044 	addi	r2,r2,1
 8002740:	e0bfff15 	stw	r2,-4(fp)
/************************************   putString     ***************************************/

void putString(char *s) {
	char i;
	printf("before while");
	while ((i = *s) != 0) {
 8002744:	e0bfff17 	ldw	r2,-4(fp)
 8002748:	10800003 	ldbu	r2,0(r2)
 800274c:	e0bffe05 	stb	r2,-8(fp)
 8002750:	e0bffe07 	ldb	r2,-8(fp)
 8002754:	103ff51e 	bne	r2,zero,800272c <__alt_data_end+0xfc00272c>

		putchar_GPS(i);
		s++;
	}
	printf("out of while");
 8002758:	010200b4 	movhi	r4,2050
 800275c:	21326a04 	addi	r4,r4,-13912
 8002760:	80033cc0 	call	80033cc <printf>
}
 8002764:	e037883a 	mov	sp,fp
 8002768:	dfc00117 	ldw	ra,4(sp)
 800276c:	df000017 	ldw	fp,0(sp)
 8002770:	dec00204 	addi	sp,sp,8
 8002774:	f800283a 	ret

08002778 <StopLogging>:

/*****   we might need those     *****************************/

void StopLogging(void) {
 8002778:	defffd04 	addi	sp,sp,-12
 800277c:	dfc00215 	stw	ra,8(sp)
 8002780:	df000115 	stw	fp,4(sp)
 8002784:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK185,1";
 8002788:	008200b4 	movhi	r2,2050
 800278c:	10b26e04 	addi	r2,r2,-13896
 8002790:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 8002794:	e13fff17 	ldw	r4,-4(fp)
 8002798:	80027080 	call	8002708 <putString>

}
 800279c:	e037883a 	mov	sp,fp
 80027a0:	dfc00117 	ldw	ra,4(sp)
 80027a4:	df000017 	ldw	fp,0(sp)
 80027a8:	dec00204 	addi	sp,sp,8
 80027ac:	f800283a 	ret

080027b0 <ClearLogging>:

void ClearLogging(void) {
 80027b0:	defffd04 	addi	sp,sp,-12
 80027b4:	dfc00215 	stw	ra,8(sp)
 80027b8:	df000115 	stw	fp,4(sp)
 80027bc:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK184,1";
 80027c0:	008200b4 	movhi	r2,2050
 80027c4:	10b27104 	addi	r2,r2,-13884
 80027c8:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 80027cc:	e13fff17 	ldw	r4,-4(fp)
 80027d0:	80027080 	call	8002708 <putString>
}
 80027d4:	e037883a 	mov	sp,fp
 80027d8:	dfc00117 	ldw	ra,4(sp)
 80027dc:	df000017 	ldw	fp,0(sp)
 80027e0:	dec00204 	addi	sp,sp,8
 80027e4:	f800283a 	ret

080027e8 <StartLogger>:

void StartLogger(void) {
 80027e8:	defffd04 	addi	sp,sp,-12
 80027ec:	dfc00215 	stw	ra,8(sp)
 80027f0:	df000115 	stw	fp,4(sp)
 80027f4:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK186,1";
 80027f8:	008200b4 	movhi	r2,2050
 80027fc:	10b27404 	addi	r2,r2,-13872
 8002800:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 8002804:	e13fff17 	ldw	r4,-4(fp)
 8002808:	80027080 	call	8002708 <putString>

}
 800280c:	e037883a 	mov	sp,fp
 8002810:	dfc00117 	ldw	ra,4(sp)
 8002814:	df000017 	ldw	fp,0(sp)
 8002818:	dec00204 	addi	sp,sp,8
 800281c:	f800283a 	ret

08002820 <Init_GPS>:

/***********************  Init_GPS    *******************************/

void Init_GPS(void) {
 8002820:	deffff04 	addi	sp,sp,-4
 8002824:	df000015 	stw	fp,0(sp)
 8002828:	d839883a 	mov	fp,sp
	// 9600 baud, 8 bits of data, no parity, 1 stop bit etc
	GPS_Control = 0x15;
 800282c:	00a10034 	movhi	r2,33792
 8002830:	10808404 	addi	r2,r2,528
 8002834:	00c00544 	movi	r3,21
 8002838:	10c00005 	stb	r3,0(r2)
	GPS_Baud = 0x05; //9600 baud
 800283c:	00a10034 	movhi	r2,33792
 8002840:	10808504 	addi	r2,r2,532
 8002844:	00c00144 	movi	r3,5
 8002848:	10c00005 	stb	r3,0(r2)

	return;
 800284c:	0001883a 	nop
}
 8002850:	e037883a 	mov	sp,fp
 8002854:	df000017 	ldw	fp,0(sp)
 8002858:	dec00104 	addi	sp,sp,4
 800285c:	f800283a 	ret

08002860 <printTo7Seg>:
 //}
 *******************************************************/

/********     print GPS data on 7seg              *******************/

void printTo7Seg(int num) {
 8002860:	defffe04 	addi	sp,sp,-8
 8002864:	df000115 	stw	fp,4(sp)
 8002868:	df000104 	addi	fp,sp,4
 800286c:	e13fff15 	stw	r4,-4(fp)

	hex1 = num % 100;
 8002870:	00c80c04 	movi	r3,8240
 8002874:	e0bfff17 	ldw	r2,-4(fp)
 8002878:	01001904 	movi	r4,100
 800287c:	1109283a 	div	r4,r2,r4
 8002880:	21001924 	muli	r4,r4,100
 8002884:	1105c83a 	sub	r2,r2,r4
 8002888:	1880000d 	sth	r2,0(r3)
	hex2 = (num % 10000) / 100;
 800288c:	00c81004 	movi	r3,8256
 8002890:	e0bfff17 	ldw	r2,-4(fp)
 8002894:	0109c404 	movi	r4,10000
 8002898:	1109283a 	div	r4,r2,r4
 800289c:	2109c424 	muli	r4,r4,10000
 80028a0:	1109c83a 	sub	r4,r2,r4
 80028a4:	00801904 	movi	r2,100
 80028a8:	2085283a 	div	r2,r4,r2
 80028ac:	1880000d 	sth	r2,0(r3)
	hex3 = num / 10000;
 80028b0:	00881404 	movi	r2,8272
 80028b4:	e13fff17 	ldw	r4,-4(fp)
 80028b8:	00c9c404 	movi	r3,10000
 80028bc:	20c7283a 	div	r3,r4,r3
 80028c0:	10c0000d 	sth	r3,0(r2)

	return;
 80028c4:	0001883a 	nop

}
 80028c8:	e037883a 	mov	sp,fp
 80028cc:	df000017 	ldw	fp,0(sp)
 80028d0:	dec00104 	addi	sp,sp,4
 80028d4:	f800283a 	ret

080028d8 <printGpsData>:

/******************         Switches manipulation                   *********************/

void printGpsData(int data[8]) {
 80028d8:	defffc04 	addi	sp,sp,-16
 80028dc:	dfc00315 	stw	ra,12(sp)
 80028e0:	df000215 	stw	fp,8(sp)
 80028e4:	df000204 	addi	fp,sp,8
 80028e8:	e13fff15 	stw	r4,-4(fp)

	int sw = switches;
 80028ec:	00880004 	movi	r2,8192
 80028f0:	1080000b 	ldhu	r2,0(r2)
 80028f4:	10bfffcc 	andi	r2,r2,65535
 80028f8:	e0bffe15 	stw	r2,-8(fp)
	switch (sw) {
 80028fc:	e0bffe17 	ldw	r2,-8(fp)
 8002900:	108001e8 	cmpgeui	r2,r2,7
 8002904:	1000371e 	bne	r2,zero,80029e4 <printGpsData+0x10c>
 8002908:	e0bffe17 	ldw	r2,-8(fp)
 800290c:	100690ba 	slli	r3,r2,2
 8002910:	00820034 	movhi	r2,2048
 8002914:	108a4904 	addi	r2,r2,10532
 8002918:	1885883a 	add	r2,r3,r2
 800291c:	10800017 	ldw	r2,0(r2)
 8002920:	1000683a 	jmp	r2
 8002924:	08002940 	call	800294 <__reset-0x77ffd6c>
 8002928:	08002954 	ori	zero,at,165
 800292c:	0800296c 	andhi	zero,at,165
 8002930:	08002984 	addi	zero,at,166
 8002934:	0800299c 	xori	zero,at,166
 8002938:	080029b4 	orhi	zero,at,166
 800293c:	080029cc 	andi	zero,at,167
	case 0:
		// print time
		printTo7Seg(data[0]);
 8002940:	e0bfff17 	ldw	r2,-4(fp)
 8002944:	10800017 	ldw	r2,0(r2)
 8002948:	1009883a 	mov	r4,r2
 800294c:	80028600 	call	8002860 <printTo7Seg>
		break;
 8002950:	00002406 	br	80029e4 <printGpsData+0x10c>

	case 1:
		// print latitude part1
		printTo7Seg(data[2]);
 8002954:	e0bfff17 	ldw	r2,-4(fp)
 8002958:	10800204 	addi	r2,r2,8
 800295c:	10800017 	ldw	r2,0(r2)
 8002960:	1009883a 	mov	r4,r2
 8002964:	80028600 	call	8002860 <printTo7Seg>
		break;
 8002968:	00001e06 	br	80029e4 <printGpsData+0x10c>
	case 2:
		// print latitude par2
		printTo7Seg(data[3]);
 800296c:	e0bfff17 	ldw	r2,-4(fp)
 8002970:	10800304 	addi	r2,r2,12
 8002974:	10800017 	ldw	r2,0(r2)
 8002978:	1009883a 	mov	r4,r2
 800297c:	80028600 	call	8002860 <printTo7Seg>

		break;
 8002980:	00001806 	br	80029e4 <printGpsData+0x10c>
	case 3:
		// print N / S
		printTo7Seg(data[4]);
 8002984:	e0bfff17 	ldw	r2,-4(fp)
 8002988:	10800404 	addi	r2,r2,16
 800298c:	10800017 	ldw	r2,0(r2)
 8002990:	1009883a 	mov	r4,r2
 8002994:	80028600 	call	8002860 <printTo7Seg>
		break;
 8002998:	00001206 	br	80029e4 <printGpsData+0x10c>
	case 4:
		// print longitude part1
		printTo7Seg(data[5]);
 800299c:	e0bfff17 	ldw	r2,-4(fp)
 80029a0:	10800504 	addi	r2,r2,20
 80029a4:	10800017 	ldw	r2,0(r2)
 80029a8:	1009883a 	mov	r4,r2
 80029ac:	80028600 	call	8002860 <printTo7Seg>
		break;
 80029b0:	00000c06 	br	80029e4 <printGpsData+0x10c>
	case 5:
		// print longitude par2
		printTo7Seg(data[6]);
 80029b4:	e0bfff17 	ldw	r2,-4(fp)
 80029b8:	10800604 	addi	r2,r2,24
 80029bc:	10800017 	ldw	r2,0(r2)
 80029c0:	1009883a 	mov	r4,r2
 80029c4:	80028600 	call	8002860 <printTo7Seg>
		break;
 80029c8:	00000606 	br	80029e4 <printGpsData+0x10c>
	case 6:
		// print E / W
		printTo7Seg(data[7]);
 80029cc:	e0bfff17 	ldw	r2,-4(fp)
 80029d0:	10800704 	addi	r2,r2,28
 80029d4:	10800017 	ldw	r2,0(r2)
 80029d8:	1009883a 	mov	r4,r2
 80029dc:	80028600 	call	8002860 <printTo7Seg>
		break;
 80029e0:	0001883a 	nop

	}

}
 80029e4:	e037883a 	mov	sp,fp
 80029e8:	dfc00117 	ldw	ra,4(sp)
 80029ec:	df000017 	ldw	fp,0(sp)
 80029f0:	dec00204 	addi	sp,sp,8
 80029f4:	f800283a 	ret

080029f8 <getGpsInfo>:
//global variable used to get GPS data and display them on the touch screen
char dataAscii[8][20];

/*****        Extact data from GPS               **********************/
char dataAscii[8][20];
void getGpsInfo(void) {
 80029f8:	deff2504 	addi	sp,sp,-876
 80029fc:	dfc0da15 	stw	ra,872(sp)
 8002a00:	df00d915 	stw	fp,868(sp)
 8002a04:	df00d904 	addi	fp,sp,868
	//printf("inside INFO>>>>> \n");
	int buffer[200];
	int c;
	int i = 0;
 8002a08:	e03f2715 	stw	zero,-868(fp)
	do {
		c = getcharGPS();
 8002a0c:	80026bc0 	call	80026bc <getcharGPS>
 8002a10:	e0bf2a15 	stw	r2,-856(fp)
		buffer[i] = c;
 8002a14:	e0bf2717 	ldw	r2,-868(fp)
 8002a18:	1085883a 	add	r2,r2,r2
 8002a1c:	1085883a 	add	r2,r2,r2
 8002a20:	e0ff2704 	addi	r3,fp,-868
 8002a24:	1885883a 	add	r2,r3,r2
 8002a28:	10800404 	addi	r2,r2,16
 8002a2c:	e0ff2a17 	ldw	r3,-856(fp)
 8002a30:	10c00015 	stw	r3,0(r2)

		i++;
 8002a34:	e0bf2717 	ldw	r2,-868(fp)
 8002a38:	10800044 	addi	r2,r2,1
 8002a3c:	e0bf2715 	stw	r2,-868(fp)
	} while (c != '\n');
 8002a40:	e0bf2a17 	ldw	r2,-856(fp)
 8002a44:	10800298 	cmpnei	r2,r2,10
 8002a48:	103ff01e 	bne	r2,zero,8002a0c <__alt_data_end+0xfc002a0c>
	i = 0;
 8002a4c:	e03f2715 	stw	zero,-868(fp)
	if (buffer[4] == 'G') {
 8002a50:	e0bf2f17 	ldw	r2,-836(fp)
 8002a54:	108011d8 	cmpnei	r2,r2,71
 8002a58:	1000911e 	bne	r2,zero,8002ca0 <getGpsInfo+0x2a8>
//		printf("INSIDE IF \n");
		i = 7;
 8002a5c:	008001c4 	movi	r2,7
 8002a60:	e0bf2715 	stw	r2,-868(fp)
		int data[8];
		int k = 0;
 8002a64:	e03f2815 	stw	zero,-864(fp)
		do {
			int j = 0;
 8002a68:	e03f2915 	stw	zero,-860(fp)
			char tmp[20];

			do {
				if (buffer[i] != ',' && buffer[i] != '.')
 8002a6c:	e0bf2717 	ldw	r2,-868(fp)
 8002a70:	1085883a 	add	r2,r2,r2
 8002a74:	1085883a 	add	r2,r2,r2
 8002a78:	e13f2704 	addi	r4,fp,-868
 8002a7c:	2085883a 	add	r2,r4,r2
 8002a80:	10800404 	addi	r2,r2,16
 8002a84:	10800017 	ldw	r2,0(r2)
 8002a88:	10800b20 	cmpeqi	r2,r2,44
 8002a8c:	1000151e 	bne	r2,zero,8002ae4 <getGpsInfo+0xec>
 8002a90:	e0bf2717 	ldw	r2,-868(fp)
 8002a94:	1085883a 	add	r2,r2,r2
 8002a98:	1085883a 	add	r2,r2,r2
 8002a9c:	e0ff2704 	addi	r3,fp,-868
 8002aa0:	1885883a 	add	r2,r3,r2
 8002aa4:	10800404 	addi	r2,r2,16
 8002aa8:	10800017 	ldw	r2,0(r2)
 8002aac:	10800ba0 	cmpeqi	r2,r2,46
 8002ab0:	10000c1e 	bne	r2,zero,8002ae4 <getGpsInfo+0xec>
					tmp[j] = buffer[i];
 8002ab4:	e0bf2717 	ldw	r2,-868(fp)
 8002ab8:	1085883a 	add	r2,r2,r2
 8002abc:	1085883a 	add	r2,r2,r2
 8002ac0:	e13f2704 	addi	r4,fp,-868
 8002ac4:	2085883a 	add	r2,r4,r2
 8002ac8:	10800404 	addi	r2,r2,16
 8002acc:	10800017 	ldw	r2,0(r2)
 8002ad0:	1009883a 	mov	r4,r2
 8002ad4:	e0fff304 	addi	r3,fp,-52
 8002ad8:	e0bf2917 	ldw	r2,-860(fp)
 8002adc:	1885883a 	add	r2,r3,r2
 8002ae0:	11000005 	stb	r4,0(r2)
				dataAscii[k][j] = tmp[j];
 8002ae4:	e0fff304 	addi	r3,fp,-52
 8002ae8:	e0bf2917 	ldw	r2,-860(fp)
 8002aec:	1885883a 	add	r2,r3,r2
 8002af0:	10c00003 	ldbu	r3,0(r2)
 8002af4:	008200b4 	movhi	r2,2050
 8002af8:	10818104 	addi	r2,r2,1540
 8002afc:	e13f2817 	ldw	r4,-864(fp)
 8002b00:	21400524 	muli	r5,r4,20
 8002b04:	e13f2917 	ldw	r4,-860(fp)
 8002b08:	2909883a 	add	r4,r5,r4
 8002b0c:	1105883a 	add	r2,r2,r4
 8002b10:	10c00005 	stb	r3,0(r2)
//				printf("%c", buffer[i]);
				i++;
 8002b14:	e0bf2717 	ldw	r2,-868(fp)
 8002b18:	10800044 	addi	r2,r2,1
 8002b1c:	e0bf2715 	stw	r2,-868(fp)
				j++;
 8002b20:	e0bf2917 	ldw	r2,-860(fp)
 8002b24:	10800044 	addi	r2,r2,1
 8002b28:	e0bf2915 	stw	r2,-860(fp)
			} while (buffer[i] != ',' && buffer[i] != '.');
 8002b2c:	e0bf2717 	ldw	r2,-868(fp)
 8002b30:	1085883a 	add	r2,r2,r2
 8002b34:	1085883a 	add	r2,r2,r2
 8002b38:	e0ff2704 	addi	r3,fp,-868
 8002b3c:	1885883a 	add	r2,r3,r2
 8002b40:	10800404 	addi	r2,r2,16
 8002b44:	10800017 	ldw	r2,0(r2)
 8002b48:	10800b20 	cmpeqi	r2,r2,44
 8002b4c:	1000091e 	bne	r2,zero,8002b74 <getGpsInfo+0x17c>
 8002b50:	e0bf2717 	ldw	r2,-868(fp)
 8002b54:	1085883a 	add	r2,r2,r2
 8002b58:	1085883a 	add	r2,r2,r2
 8002b5c:	e13f2704 	addi	r4,fp,-868
 8002b60:	2085883a 	add	r2,r4,r2
 8002b64:	10800404 	addi	r2,r2,16
 8002b68:	10800017 	ldw	r2,0(r2)
 8002b6c:	10800b98 	cmpnei	r2,r2,46
 8002b70:	103fbe1e 	bne	r2,zero,8002a6c <__alt_data_end+0xfc002a6c>
			tmp[j] = '\0';
 8002b74:	e0fff304 	addi	r3,fp,-52
 8002b78:	e0bf2917 	ldw	r2,-860(fp)
 8002b7c:	1885883a 	add	r2,r3,r2
 8002b80:	10000005 	stb	zero,0(r2)
			if (k == 4) {
 8002b84:	e0bf2817 	ldw	r2,-864(fp)
 8002b88:	10800118 	cmpnei	r2,r2,4
 8002b8c:	1000111e 	bne	r2,zero,8002bd4 <getGpsInfo+0x1dc>
				data[k] = (tmp[0] == 'N') ? 2 : 3;
 8002b90:	e0bff303 	ldbu	r2,-52(fp)
 8002b94:	10803fcc 	andi	r2,r2,255
 8002b98:	1080201c 	xori	r2,r2,128
 8002b9c:	10bfe004 	addi	r2,r2,-128
 8002ba0:	10801398 	cmpnei	r2,r2,78
 8002ba4:	1000021e 	bne	r2,zero,8002bb0 <getGpsInfo+0x1b8>
 8002ba8:	00800084 	movi	r2,2
 8002bac:	00000106 	br	8002bb4 <getGpsInfo+0x1bc>
 8002bb0:	008000c4 	movi	r2,3
 8002bb4:	e0ff2817 	ldw	r3,-864(fp)
 8002bb8:	18c7883a 	add	r3,r3,r3
 8002bbc:	18c7883a 	add	r3,r3,r3
 8002bc0:	e13f2704 	addi	r4,fp,-868
 8002bc4:	20c7883a 	add	r3,r4,r3
 8002bc8:	18c0d104 	addi	r3,r3,836
 8002bcc:	18800015 	stw	r2,0(r3)
 8002bd0:	00001f06 	br	8002c50 <getGpsInfo+0x258>
			} else if (k == 7) {
 8002bd4:	e0bf2817 	ldw	r2,-864(fp)
 8002bd8:	108001d8 	cmpnei	r2,r2,7
 8002bdc:	1000111e 	bne	r2,zero,8002c24 <getGpsInfo+0x22c>
				data[k] = (tmp[0] == 'W') ? 4 : 5;
 8002be0:	e0bff303 	ldbu	r2,-52(fp)
 8002be4:	10803fcc 	andi	r2,r2,255
 8002be8:	1080201c 	xori	r2,r2,128
 8002bec:	10bfe004 	addi	r2,r2,-128
 8002bf0:	108015d8 	cmpnei	r2,r2,87
 8002bf4:	1000021e 	bne	r2,zero,8002c00 <getGpsInfo+0x208>
 8002bf8:	00800104 	movi	r2,4
 8002bfc:	00000106 	br	8002c04 <getGpsInfo+0x20c>
 8002c00:	00800144 	movi	r2,5
 8002c04:	e0ff2817 	ldw	r3,-864(fp)
 8002c08:	18c7883a 	add	r3,r3,r3
 8002c0c:	18c7883a 	add	r3,r3,r3
 8002c10:	e13f2704 	addi	r4,fp,-868
 8002c14:	20c7883a 	add	r3,r4,r3
 8002c18:	18c0d104 	addi	r3,r3,836
 8002c1c:	18800015 	stw	r2,0(r3)
 8002c20:	00000b06 	br	8002c50 <getGpsInfo+0x258>
			} else
				data[k] = atoi(tmp);
 8002c24:	e0bff304 	addi	r2,fp,-52
 8002c28:	1009883a 	mov	r4,r2
 8002c2c:	80032500 	call	8003250 <atoi>
 8002c30:	1007883a 	mov	r3,r2
 8002c34:	e0bf2817 	ldw	r2,-864(fp)
 8002c38:	1085883a 	add	r2,r2,r2
 8002c3c:	1085883a 	add	r2,r2,r2
 8002c40:	e13f2704 	addi	r4,fp,-868
 8002c44:	2085883a 	add	r2,r4,r2
 8002c48:	1080d104 	addi	r2,r2,836
 8002c4c:	10c00015 	stw	r3,0(r2)

//			printf(" data int %d\n", data[k]);
			k++;
 8002c50:	e0bf2817 	ldw	r2,-864(fp)
 8002c54:	10800044 	addi	r2,r2,1
 8002c58:	e0bf2815 	stw	r2,-864(fp)
		} while (buffer[i] != '\n' && k < 8);
 8002c5c:	e0bf2717 	ldw	r2,-868(fp)
 8002c60:	1085883a 	add	r2,r2,r2
 8002c64:	1085883a 	add	r2,r2,r2
 8002c68:	e0ff2704 	addi	r3,fp,-868
 8002c6c:	1885883a 	add	r2,r3,r2
 8002c70:	10800404 	addi	r2,r2,16
 8002c74:	10800017 	ldw	r2,0(r2)
 8002c78:	108002a0 	cmpeqi	r2,r2,10
 8002c7c:	1000031e 	bne	r2,zero,8002c8c <getGpsInfo+0x294>
 8002c80:	e0bf2817 	ldw	r2,-864(fp)
 8002c84:	10800210 	cmplti	r2,r2,8
 8002c88:	103f771e 	bne	r2,zero,8002a68 <__alt_data_end+0xfc002a68>

		printGpsData(data);
 8002c8c:	e0bff804 	addi	r2,fp,-32
 8002c90:	1009883a 	mov	r4,r2
 8002c94:	80028d80 	call	80028d8 <printGpsData>
		return;
 8002c98:	0001883a 	nop
 8002c9c:	00000106 	br	8002ca4 <getGpsInfo+0x2ac>
	}
	i = 0;
 8002ca0:	e03f2715 	stw	zero,-868(fp)
}
 8002ca4:	e037883a 	mov	sp,fp
 8002ca8:	dfc00117 	ldw	ra,4(sp)
 8002cac:	df000017 	ldw	fp,0(sp)
 8002cb0:	dec00204 	addi	sp,sp,8
 8002cb4:	f800283a 	ret

08002cb8 <GPS_Real_Time>:

///////////////////////////REAL TIME
void GPS_Real_Time() {
 8002cb8:	deffe304 	addi	sp,sp,-116
 8002cbc:	dfc01c15 	stw	ra,112(sp)
 8002cc0:	df001b15 	stw	fp,108(sp)
 8002cc4:	ddc01a15 	stw	r23,104(sp)
 8002cc8:	dd801915 	stw	r22,100(sp)
 8002ccc:	dd401815 	stw	r21,96(sp)
 8002cd0:	dd001715 	stw	r20,92(sp)
 8002cd4:	dcc01615 	stw	r19,88(sp)
 8002cd8:	dc801515 	stw	r18,84(sp)
 8002cdc:	dc401415 	stw	r17,80(sp)
 8002ce0:	dc001315 	stw	r16,76(sp)
 8002ce4:	df001b04 	addi	fp,sp,108
	char tmp_1[6]; //this array holds the real-time in string
	char tmp_2[6]; //this array holds the real-time in string
	int l;
//get rid of the initial garbage data
	do {
		printf("same time\n");
 8002ce8:	010200b4 	movhi	r4,2050
 8002cec:	21327704 	addi	r4,r4,-13860
 8002cf0:	80034c00 	call	80034c0 <puts>
		getGpsInfo();
 8002cf4:	80029f80 	call	80029f8 <getGpsInfo>
		for (l = 0; l < 6; l++) {
 8002cf8:	e03fe515 	stw	zero,-108(fp)
 8002cfc:	00000c06 	br	8002d30 <GPS_Real_Time+0x78>
			tmp_1[l] = dataAscii[0][l];
 8002d00:	008200b4 	movhi	r2,2050
 8002d04:	10818104 	addi	r2,r2,1540
 8002d08:	e0ffe517 	ldw	r3,-108(fp)
 8002d0c:	10c5883a 	add	r2,r2,r3
 8002d10:	10c00003 	ldbu	r3,0(r2)
 8002d14:	e13fec04 	addi	r4,fp,-80
 8002d18:	e0bfe517 	ldw	r2,-108(fp)
 8002d1c:	2085883a 	add	r2,r4,r2
 8002d20:	10c00005 	stb	r3,0(r2)
	int l;
//get rid of the initial garbage data
	do {
		printf("same time\n");
		getGpsInfo();
		for (l = 0; l < 6; l++) {
 8002d24:	e0bfe517 	ldw	r2,-108(fp)
 8002d28:	10800044 	addi	r2,r2,1
 8002d2c:	e0bfe515 	stw	r2,-108(fp)
 8002d30:	e0bfe517 	ldw	r2,-108(fp)
 8002d34:	10800190 	cmplti	r2,r2,6
 8002d38:	103ff11e 	bne	r2,zero,8002d00 <__alt_data_end+0xfc002d00>
			tmp_1[l] = dataAscii[0][l];
		}

		getGpsInfo();
 8002d3c:	80029f80 	call	80029f8 <getGpsInfo>
		for (l = 0; l < 6; l++) {
 8002d40:	e03fe515 	stw	zero,-108(fp)
 8002d44:	00000c06 	br	8002d78 <GPS_Real_Time+0xc0>
			tmp_2[l] = dataAscii[0][l];
 8002d48:	008200b4 	movhi	r2,2050
 8002d4c:	10818104 	addi	r2,r2,1540
 8002d50:	e0ffe517 	ldw	r3,-108(fp)
 8002d54:	10c5883a 	add	r2,r2,r3
 8002d58:	10c00003 	ldbu	r3,0(r2)
 8002d5c:	e13fed84 	addi	r4,fp,-74
 8002d60:	e0bfe517 	ldw	r2,-108(fp)
 8002d64:	2085883a 	add	r2,r4,r2
 8002d68:	10c00005 	stb	r3,0(r2)
		for (l = 0; l < 6; l++) {
			tmp_1[l] = dataAscii[0][l];
		}

		getGpsInfo();
		for (l = 0; l < 6; l++) {
 8002d6c:	e0bfe517 	ldw	r2,-108(fp)
 8002d70:	10800044 	addi	r2,r2,1
 8002d74:	e0bfe515 	stw	r2,-108(fp)
 8002d78:	e0bfe517 	ldw	r2,-108(fp)
 8002d7c:	10800190 	cmplti	r2,r2,6
 8002d80:	103ff11e 	bne	r2,zero,8002d48 <__alt_data_end+0xfc002d48>
			tmp_2[l] = dataAscii[0][l];
		}
	} while (tmp_1[6] == tmp_2[6]);
 8002d84:	e0ffed83 	ldbu	r3,-74(fp)
 8002d88:	e0bfef03 	ldbu	r2,-68(fp)
 8002d8c:	18c03fcc 	andi	r3,r3,255
 8002d90:	18c0201c 	xori	r3,r3,128
 8002d94:	18ffe004 	addi	r3,r3,-128
 8002d98:	10803fcc 	andi	r2,r2,255
 8002d9c:	1080201c 	xori	r2,r2,128
 8002da0:	10bfe004 	addi	r2,r2,-128
 8002da4:	18bfd026 	beq	r3,r2,8002ce8 <__alt_data_end+0xfc002ce8>

	//s as the size
	int s = sizeof(tmp_2);
 8002da8:	00800184 	movi	r2,6
 8002dac:	e0bfe615 	stw	r2,-104(fp)
	char str[s];  //stack overflow says we need this string
 8002db0:	e0bfe617 	ldw	r2,-104(fp)
 8002db4:	d807883a 	mov	r3,sp
 8002db8:	e0ffef15 	stw	r3,-68(fp)
 8002dbc:	10ffffc4 	addi	r3,r2,-1
 8002dc0:	e0ffe715 	stw	r3,-100(fp)
 8002dc4:	1007883a 	mov	r3,r2
 8002dc8:	e0fff015 	stw	r3,-64(fp)
 8002dcc:	e03ff115 	stw	zero,-60(fp)
 8002dd0:	e13ff017 	ldw	r4,-64(fp)
 8002dd4:	2006d77a 	srli	r3,r4,29
 8002dd8:	e13ff117 	ldw	r4,-60(fp)
 8002ddc:	202e90fa 	slli	r23,r4,3
 8002de0:	1deeb03a 	or	r23,r3,r23
 8002de4:	e0fff017 	ldw	r3,-64(fp)
 8002de8:	182c90fa 	slli	r22,r3,3
 8002dec:	1007883a 	mov	r3,r2
 8002df0:	e0fff215 	stw	r3,-56(fp)
 8002df4:	e03ff315 	stw	zero,-52(fp)
 8002df8:	e13ff217 	ldw	r4,-56(fp)
 8002dfc:	2006d77a 	srli	r3,r4,29
 8002e00:	e13ff317 	ldw	r4,-52(fp)
 8002e04:	202a90fa 	slli	r21,r4,3
 8002e08:	1d6ab03a 	or	r21,r3,r21
 8002e0c:	e0fff217 	ldw	r3,-56(fp)
 8002e10:	182890fa 	slli	r20,r3,3
 8002e14:	108000c4 	addi	r2,r2,3
 8002e18:	1004d0ba 	srli	r2,r2,2
 8002e1c:	1085883a 	add	r2,r2,r2
 8002e20:	1085883a 	add	r2,r2,r2
 8002e24:	d8b7c83a 	sub	sp,sp,r2
 8002e28:	d805883a 	mov	r2,sp
 8002e2c:	1005883a 	mov	r2,r2
 8002e30:	e0bfe815 	stw	r2,-96(fp)
	int converted;
	//convert string to int to get local time then convert back to string to put in the bluetooth
	strcpy(str, tmp_2);
 8002e34:	e0ffe817 	ldw	r3,-96(fp)
 8002e38:	e0bfed84 	addi	r2,fp,-74
 8002e3c:	1809883a 	mov	r4,r3
 8002e40:	100b883a 	mov	r5,r2
 8002e44:	80034d40 	call	80034d4 <strcpy>
	converted = atoi(str);
 8002e48:	e0bfe817 	ldw	r2,-96(fp)
 8002e4c:	1009883a 	mov	r4,r2
 8002e50:	80032500 	call	8003250 <atoi>
 8002e54:	e0bfe915 	stw	r2,-92(fp)
	char string[s];
 8002e58:	e0bfe617 	ldw	r2,-104(fp)
 8002e5c:	10ffffc4 	addi	r3,r2,-1
 8002e60:	e0ffea15 	stw	r3,-88(fp)
 8002e64:	1007883a 	mov	r3,r2
 8002e68:	e0fff415 	stw	r3,-48(fp)
 8002e6c:	e03ff515 	stw	zero,-44(fp)
 8002e70:	e13ff417 	ldw	r4,-48(fp)
 8002e74:	2006d77a 	srli	r3,r4,29
 8002e78:	e13ff517 	ldw	r4,-44(fp)
 8002e7c:	202690fa 	slli	r19,r4,3
 8002e80:	1ce6b03a 	or	r19,r3,r19
 8002e84:	e0fff417 	ldw	r3,-48(fp)
 8002e88:	182490fa 	slli	r18,r3,3
 8002e8c:	1007883a 	mov	r3,r2
 8002e90:	e0fff615 	stw	r3,-40(fp)
 8002e94:	e03ff715 	stw	zero,-36(fp)
 8002e98:	e13ff617 	ldw	r4,-40(fp)
 8002e9c:	2006d77a 	srli	r3,r4,29
 8002ea0:	e13ff717 	ldw	r4,-36(fp)
 8002ea4:	202290fa 	slli	r17,r4,3
 8002ea8:	1c62b03a 	or	r17,r3,r17
 8002eac:	e0fff617 	ldw	r3,-40(fp)
 8002eb0:	182090fa 	slli	r16,r3,3
 8002eb4:	108000c4 	addi	r2,r2,3
 8002eb8:	1004d0ba 	srli	r2,r2,2
 8002ebc:	1085883a 	add	r2,r2,r2
 8002ec0:	1085883a 	add	r2,r2,r2
 8002ec4:	d8b7c83a 	sub	sp,sp,r2
 8002ec8:	d805883a 	mov	r2,sp
 8002ecc:	1005883a 	mov	r2,r2
 8002ed0:	e0bfeb15 	stw	r2,-84(fp)

	if ((converted / 10000) > 7) {
 8002ed4:	e0ffe917 	ldw	r3,-92(fp)
 8002ed8:	00800074 	movhi	r2,1
 8002edc:	108e1fc4 	addi	r2,r2,14463
 8002ee0:	10c01e0e 	bge	r2,r3,8002f5c <GPS_Real_Time+0x2a4>
		converted = converted - 70000;
 8002ee4:	e0ffe917 	ldw	r3,-92(fp)
 8002ee8:	00bffff4 	movhi	r2,65535
 8002eec:	10bba404 	addi	r2,r2,-4464
 8002ef0:	1885883a 	add	r2,r3,r2
 8002ef4:	e0bfe915 	stw	r2,-92(fp)
		tostring(string, converted);
 8002ef8:	e0bfeb17 	ldw	r2,-84(fp)
 8002efc:	1009883a 	mov	r4,r2
 8002f00:	e17fe917 	ldw	r5,-92(fp)
 8002f04:	8002fd80 	call	8002fd8 <tostring>
		//this is to fix the missing 0 at the beginning of the string
		for (l = 5; l > 0; l--) {
 8002f08:	00800144 	movi	r2,5
 8002f0c:	e0bfe515 	stw	r2,-108(fp)
 8002f10:	00000c06 	br	8002f44 <GPS_Real_Time+0x28c>
			string[l] = string[l - 1];
 8002f14:	e0bfe517 	ldw	r2,-108(fp)
 8002f18:	10bfffc4 	addi	r2,r2,-1
 8002f1c:	e0ffeb17 	ldw	r3,-84(fp)
 8002f20:	1885883a 	add	r2,r3,r2
 8002f24:	10c00003 	ldbu	r3,0(r2)
 8002f28:	e13feb17 	ldw	r4,-84(fp)
 8002f2c:	e0bfe517 	ldw	r2,-108(fp)
 8002f30:	2085883a 	add	r2,r4,r2
 8002f34:	10c00005 	stb	r3,0(r2)

	if ((converted / 10000) > 7) {
		converted = converted - 70000;
		tostring(string, converted);
		//this is to fix the missing 0 at the beginning of the string
		for (l = 5; l > 0; l--) {
 8002f38:	e0bfe517 	ldw	r2,-108(fp)
 8002f3c:	10bfffc4 	addi	r2,r2,-1
 8002f40:	e0bfe515 	stw	r2,-108(fp)
 8002f44:	e0bfe517 	ldw	r2,-108(fp)
 8002f48:	00bff216 	blt	zero,r2,8002f14 <__alt_data_end+0xfc002f14>
			string[l] = string[l - 1];
		}
		string[0] = '0';
 8002f4c:	e0bfeb17 	ldw	r2,-84(fp)
 8002f50:	00c00c04 	movi	r3,48
 8002f54:	10c00005 	stb	r3,0(r2)
 8002f58:	00000906 	br	8002f80 <GPS_Real_Time+0x2c8>
	} else {
		converted = converted + 170000;
 8002f5c:	e0ffe917 	ldw	r3,-92(fp)
 8002f60:	008000f4 	movhi	r2,3
 8002f64:	10a60404 	addi	r2,r2,-26608
 8002f68:	1885883a 	add	r2,r3,r2
 8002f6c:	e0bfe915 	stw	r2,-92(fp)
		tostring(string, converted);
 8002f70:	e0bfeb17 	ldw	r2,-84(fp)
 8002f74:	1009883a 	mov	r4,r2
 8002f78:	e17fe917 	ldw	r5,-92(fp)
 8002f7c:	8002fd80 	call	8002fd8 <tostring>
	}

	//convert to string for sending to android
	printf("this is the time string %s \n", string);
 8002f80:	e0bfeb17 	ldw	r2,-84(fp)
 8002f84:	010200b4 	movhi	r4,2050
 8002f88:	21327a04 	addi	r4,r4,-13848
 8002f8c:	100b883a 	mov	r5,r2
 8002f90:	80033cc0 	call	80033cc <printf>
	putStringBluetooth(string);
 8002f94:	e0bfeb17 	ldw	r2,-84(fp)
 8002f98:	1009883a 	mov	r4,r2
 8002f9c:	80023c00 	call	80023c0 <putStringBluetooth>
 8002fa0:	e6ffef17 	ldw	sp,-68(fp)

	/*	for (i = 0; i < 8; i++) {
	 OutGraphicsCharFont2a((40 + 13 * i), 120, 4, 1, tmp[i], 1); //for actual value of data
	 }*/
}
 8002fa4:	e6fff804 	addi	sp,fp,-32
 8002fa8:	dfc00917 	ldw	ra,36(sp)
 8002fac:	df000817 	ldw	fp,32(sp)
 8002fb0:	ddc00717 	ldw	r23,28(sp)
 8002fb4:	dd800617 	ldw	r22,24(sp)
 8002fb8:	dd400517 	ldw	r21,20(sp)
 8002fbc:	dd000417 	ldw	r20,16(sp)
 8002fc0:	dcc00317 	ldw	r19,12(sp)
 8002fc4:	dc800217 	ldw	r18,8(sp)
 8002fc8:	dc400117 	ldw	r17,4(sp)
 8002fcc:	dc000017 	ldw	r16,0(sp)
 8002fd0:	dec00a04 	addi	sp,sp,40
 8002fd4:	f800283a 	ret

08002fd8 <tostring>:

void tostring(char str[], int num) {
 8002fd8:	defff904 	addi	sp,sp,-28
 8002fdc:	df000615 	stw	fp,24(sp)
 8002fe0:	df000604 	addi	fp,sp,24
 8002fe4:	e13ffe15 	stw	r4,-8(fp)
 8002fe8:	e17fff15 	stw	r5,-4(fp)
	int i;
	int rem;
	int len = 0;
 8002fec:	e03ffb15 	stw	zero,-20(fp)
	int n;
	n = num;
 8002ff0:	e0bfff17 	ldw	r2,-4(fp)
 8002ff4:	e0bffc15 	stw	r2,-16(fp)
	while (n != 0) {
 8002ff8:	00000706 	br	8003018 <tostring+0x40>
		len++;
 8002ffc:	e0bffb17 	ldw	r2,-20(fp)
 8003000:	10800044 	addi	r2,r2,1
 8003004:	e0bffb15 	stw	r2,-20(fp)
		n /= 10;
 8003008:	e0fffc17 	ldw	r3,-16(fp)
 800300c:	00800284 	movi	r2,10
 8003010:	1885283a 	div	r2,r3,r2
 8003014:	e0bffc15 	stw	r2,-16(fp)
	int i;
	int rem;
	int len = 0;
	int n;
	n = num;
	while (n != 0) {
 8003018:	e0bffc17 	ldw	r2,-16(fp)
 800301c:	103ff71e 	bne	r2,zero,8002ffc <__alt_data_end+0xfc002ffc>
		len++;
		n /= 10;

	}
	for (i = 0; i < len; i++) {
 8003020:	e03ffa15 	stw	zero,-24(fp)
 8003024:	00001706 	br	8003084 <tostring+0xac>
		rem = num % 10;
 8003028:	e0bfff17 	ldw	r2,-4(fp)
 800302c:	00c00284 	movi	r3,10
 8003030:	10c7283a 	div	r3,r2,r3
 8003034:	18c002a4 	muli	r3,r3,10
 8003038:	10c5c83a 	sub	r2,r2,r3
 800303c:	e0bffd15 	stw	r2,-12(fp)
		num = num / 10;
 8003040:	e0ffff17 	ldw	r3,-4(fp)
 8003044:	00800284 	movi	r2,10
 8003048:	1885283a 	div	r2,r3,r2
 800304c:	e0bfff15 	stw	r2,-4(fp)
		str[len - (i + 1)] = rem + '0';
 8003050:	e0bffa17 	ldw	r2,-24(fp)
 8003054:	0086303a 	nor	r3,zero,r2
 8003058:	e0bffb17 	ldw	r2,-20(fp)
 800305c:	1885883a 	add	r2,r3,r2
 8003060:	1007883a 	mov	r3,r2
 8003064:	e0bffe17 	ldw	r2,-8(fp)
 8003068:	10c5883a 	add	r2,r2,r3
 800306c:	e0fffd17 	ldw	r3,-12(fp)
 8003070:	18c00c04 	addi	r3,r3,48
 8003074:	10c00005 	stb	r3,0(r2)
	while (n != 0) {
		len++;
		n /= 10;

	}
	for (i = 0; i < len; i++) {
 8003078:	e0bffa17 	ldw	r2,-24(fp)
 800307c:	10800044 	addi	r2,r2,1
 8003080:	e0bffa15 	stw	r2,-24(fp)
 8003084:	e0fffa17 	ldw	r3,-24(fp)
 8003088:	e0bffb17 	ldw	r2,-20(fp)
 800308c:	18bfe616 	blt	r3,r2,8003028 <__alt_data_end+0xfc003028>
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';

	}
	str[len] = '\0';
 8003090:	e0bffb17 	ldw	r2,-20(fp)
 8003094:	e0fffe17 	ldw	r3,-8(fp)
 8003098:	1885883a 	add	r2,r3,r2
 800309c:	10000005 	stb	zero,0(r2)
}
 80030a0:	e037883a 	mov	sp,fp
 80030a4:	df000017 	ldw	fp,0(sp)
 80030a8:	dec00104 	addi	sp,sp,4
 80030ac:	f800283a 	ret

080030b0 <main>:
#include <string.h>

#define BLUETOOTH_Status (*(volatile unsigned char *)(0x84000220))
#define BLUETOOTH_RxData (*(volatile unsigned char *)(0x84000222))

int main() {
 80030b0:	defff704 	addi	sp,sp,-36
 80030b4:	dfc00815 	stw	ra,32(sp)
 80030b8:	df000715 	stw	fp,28(sp)
 80030bc:	df000704 	addi	fp,sp,28

	draw_page();
 80030c0:	80014e80 	call	80014e8 <draw_page>
	Init_Touch();
 80030c4:	800102c0 	call	800102c <Init_Touch>
	Init_GPS();
 80030c8:	80028200 	call	8002820 <Init_GPS>
	init_Bluetooth();
 80030cc:	80021740 	call	8002174 <init_Bluetooth>

	char s[9];
	int timeRequired = 0;
 80030d0:	e03ff915 	stw	zero,-28(fp)
	int i = 0;
 80030d4:	e03ffa15 	stw	zero,-24(fp)
	while (1) {
		while (BLUETOOTH_Status & 0x1) {
 80030d8:	00003206 	br	80031a4 <main+0xf4>
			s[i] = BLUETOOTH_RxData;
 80030dc:	00a10034 	movhi	r2,33792
 80030e0:	10808884 	addi	r2,r2,546
 80030e4:	10800003 	ldbu	r2,0(r2)
 80030e8:	1009883a 	mov	r4,r2
 80030ec:	e0fffb04 	addi	r3,fp,-20
 80030f0:	e0bffa17 	ldw	r2,-24(fp)
 80030f4:	1885883a 	add	r2,r3,r2
 80030f8:	11000005 	stb	r4,0(r2)
			while (s[i] != '@') {
 80030fc:	00001406 	br	8003150 <main+0xa0>
				i++;
 8003100:	e0bffa17 	ldw	r2,-24(fp)
 8003104:	10800044 	addi	r2,r2,1
 8003108:	e0bffa15 	stw	r2,-24(fp)
				s[i] = getChar_Bluetooth();
 800310c:	80022340 	call	8002234 <getChar_Bluetooth>
 8003110:	1009883a 	mov	r4,r2
 8003114:	e0fffb04 	addi	r3,fp,-20
 8003118:	e0bffa17 	ldw	r2,-24(fp)
 800311c:	1885883a 	add	r2,r3,r2
 8003120:	11000005 	stb	r4,0(r2)
				if (s[i] == '1')
 8003124:	e0fffb04 	addi	r3,fp,-20
 8003128:	e0bffa17 	ldw	r2,-24(fp)
 800312c:	1885883a 	add	r2,r3,r2
 8003130:	10800003 	ldbu	r2,0(r2)
 8003134:	10803fcc 	andi	r2,r2,255
 8003138:	1080201c 	xori	r2,r2,128
 800313c:	10bfe004 	addi	r2,r2,-128
 8003140:	10800c58 	cmpnei	r2,r2,49
 8003144:	1000021e 	bne	r2,zero,8003150 <main+0xa0>
					timeRequired = 1;
 8003148:	00800044 	movi	r2,1
 800314c:	e0bff915 	stw	r2,-28(fp)
	int timeRequired = 0;
	int i = 0;
	while (1) {
		while (BLUETOOTH_Status & 0x1) {
			s[i] = BLUETOOTH_RxData;
			while (s[i] != '@') {
 8003150:	e0fffb04 	addi	r3,fp,-20
 8003154:	e0bffa17 	ldw	r2,-24(fp)
 8003158:	1885883a 	add	r2,r3,r2
 800315c:	10800003 	ldbu	r2,0(r2)
 8003160:	10803fcc 	andi	r2,r2,255
 8003164:	1080201c 	xori	r2,r2,128
 8003168:	10bfe004 	addi	r2,r2,-128
 800316c:	10801018 	cmpnei	r2,r2,64
 8003170:	103fe31e 	bne	r2,zero,8003100 <__alt_data_end+0xfc003100>
				if (s[i] == '1')
					timeRequired = 1;

			}

			printf("out of the loop s[%d] is %c\n ", i, s[i]);
 8003174:	e0fffb04 	addi	r3,fp,-20
 8003178:	e0bffa17 	ldw	r2,-24(fp)
 800317c:	1885883a 	add	r2,r3,r2
 8003180:	10800003 	ldbu	r2,0(r2)
 8003184:	10803fcc 	andi	r2,r2,255
 8003188:	1080201c 	xori	r2,r2,128
 800318c:	10bfe004 	addi	r2,r2,-128
 8003190:	010200b4 	movhi	r4,2050
 8003194:	21328204 	addi	r4,r4,-13816
 8003198:	e17ffa17 	ldw	r5,-24(fp)
 800319c:	100d883a 	mov	r6,r2
 80031a0:	80033cc0 	call	80033cc <printf>

	char s[9];
	int timeRequired = 0;
	int i = 0;
	while (1) {
		while (BLUETOOTH_Status & 0x1) {
 80031a4:	00a10034 	movhi	r2,33792
 80031a8:	10808804 	addi	r2,r2,544
 80031ac:	10800003 	ldbu	r2,0(r2)
 80031b0:	10803fcc 	andi	r2,r2,255
 80031b4:	1080004c 	andi	r2,r2,1
 80031b8:	103fc81e 	bne	r2,zero,80030dc <__alt_data_end+0xfc0030dc>

			}

			printf("out of the loop s[%d] is %c\n ", i, s[i]);
		}
		if (timeRequired != 0) {
 80031bc:	e0bff917 	ldw	r2,-28(fp)
 80031c0:	10000226 	beq	r2,zero,80031cc <main+0x11c>
			GPS_Real_Time();
 80031c4:	8002cb80 	call	8002cb8 <GPS_Real_Time>
			timeRequired = 0;
 80031c8:	e03ff915 	stw	zero,-28(fp)
		}
		if (ScreenTouched()/*(Touch_Status & 0x01) == 0x01*/) {
 80031cc:	800108c0 	call	800108c <ScreenTouched>
 80031d0:	10001e26 	beq	r2,zero,800324c <main+0x19c>
			Point res;
			//printf("touch screen has something for me");

			if ((Touch_Recieve & 0x81) == 0x81) {
 80031d4:	00a10034 	movhi	r2,33792
 80031d8:	10808c84 	addi	r2,r2,562
 80031dc:	10800003 	ldbu	r2,0(r2)
 80031e0:	10803fcc 	andi	r2,r2,255
 80031e4:	1080204c 	andi	r2,r2,129
 80031e8:	10802058 	cmpnei	r2,r2,129
 80031ec:	1000171e 	bne	r2,zero,800324c <main+0x19c>
				//printf("get press has something for me");
				res = GetPressNoWait();
 80031f0:	80013000 	call	8001300 <GetPressNoWait>
 80031f4:	1009883a 	mov	r4,r2
 80031f8:	180b883a 	mov	r5,r3
 80031fc:	e13ffe15 	stw	r4,-8(fp)
 8003200:	e17fff15 	stw	r5,-4(fp)
				//GetPress();
				if(res.x > 310 && res.x < 460 && res.y > 409 && res.y < 475){
 8003204:	e0bffe17 	ldw	r2,-8(fp)
 8003208:	10804dd0 	cmplti	r2,r2,311
 800320c:	10000f1e 	bne	r2,zero,800324c <main+0x19c>
 8003210:	e0bffe17 	ldw	r2,-8(fp)
 8003214:	10807308 	cmpgei	r2,r2,460
 8003218:	10000c1e 	bne	r2,zero,800324c <main+0x19c>
 800321c:	e0bfff17 	ldw	r2,-4(fp)
 8003220:	10806690 	cmplti	r2,r2,410
 8003224:	1000091e 	bne	r2,zero,800324c <main+0x19c>
 8003228:	e0bfff17 	ldw	r2,-4(fp)
 800322c:	108076c8 	cmpgei	r2,r2,475
 8003230:	1000061e 	bne	r2,zero,800324c <main+0x19c>
					putStringBluetooth("Q1");
 8003234:	010200b4 	movhi	r4,2050
 8003238:	21328a04 	addi	r4,r4,-13784
 800323c:	80023c00 	call	80023c0 <putStringBluetooth>
					printf("i have enabled polling \n");
 8003240:	010200b4 	movhi	r4,2050
 8003244:	21328b04 	addi	r4,r4,-13780
 8003248:	80034c00 	call	80034c0 <puts>
			 * when clicked on next, show next question
			 * send the question number to the Android Studio
			 * draw the stop line after click on start pooling
			 */
		}
	}
 800324c:	003fa206 	br	80030d8 <__alt_data_end+0xfc0030d8>

08003250 <atoi>:
 8003250:	000b883a 	mov	r5,zero
 8003254:	01800284 	movi	r6,10
 8003258:	800385c1 	jmpi	800385c <strtol>

0800325c <_atoi_r>:
 800325c:	000d883a 	mov	r6,zero
 8003260:	01c00284 	movi	r7,10
 8003264:	80035fc1 	jmpi	80035fc <_strtol_r>

08003268 <memcpy>:
 8003268:	deffff04 	addi	sp,sp,-4
 800326c:	dc000015 	stw	r16,0(sp)
 8003270:	00c003c4 	movi	r3,15
 8003274:	2005883a 	mov	r2,r4
 8003278:	1980432e 	bgeu	r3,r6,8003388 <memcpy+0x120>
 800327c:	2146b03a 	or	r3,r4,r5
 8003280:	18c000cc 	andi	r3,r3,3
 8003284:	1800421e 	bne	r3,zero,8003390 <memcpy+0x128>
 8003288:	343ffc04 	addi	r16,r6,-16
 800328c:	8020d13a 	srli	r16,r16,4
 8003290:	28c00104 	addi	r3,r5,4
 8003294:	23400104 	addi	r13,r4,4
 8003298:	801e913a 	slli	r15,r16,4
 800329c:	2b000204 	addi	r12,r5,8
 80032a0:	22c00204 	addi	r11,r4,8
 80032a4:	7bc00504 	addi	r15,r15,20
 80032a8:	2a800304 	addi	r10,r5,12
 80032ac:	22400304 	addi	r9,r4,12
 80032b0:	2bdf883a 	add	r15,r5,r15
 80032b4:	2811883a 	mov	r8,r5
 80032b8:	200f883a 	mov	r7,r4
 80032bc:	41000017 	ldw	r4,0(r8)
 80032c0:	39c00404 	addi	r7,r7,16
 80032c4:	18c00404 	addi	r3,r3,16
 80032c8:	393ffc15 	stw	r4,-16(r7)
 80032cc:	1bbffc17 	ldw	r14,-16(r3)
 80032d0:	6b400404 	addi	r13,r13,16
 80032d4:	5ac00404 	addi	r11,r11,16
 80032d8:	6bbffc15 	stw	r14,-16(r13)
 80032dc:	63800017 	ldw	r14,0(r12)
 80032e0:	4a400404 	addi	r9,r9,16
 80032e4:	42000404 	addi	r8,r8,16
 80032e8:	5bbffc15 	stw	r14,-16(r11)
 80032ec:	53800017 	ldw	r14,0(r10)
 80032f0:	63000404 	addi	r12,r12,16
 80032f4:	52800404 	addi	r10,r10,16
 80032f8:	4bbffc15 	stw	r14,-16(r9)
 80032fc:	1bffef1e 	bne	r3,r15,80032bc <__alt_data_end+0xfc0032bc>
 8003300:	81c00044 	addi	r7,r16,1
 8003304:	380e913a 	slli	r7,r7,4
 8003308:	310003cc 	andi	r4,r6,15
 800330c:	02c000c4 	movi	r11,3
 8003310:	11c7883a 	add	r3,r2,r7
 8003314:	29cb883a 	add	r5,r5,r7
 8003318:	59001f2e 	bgeu	r11,r4,8003398 <memcpy+0x130>
 800331c:	1813883a 	mov	r9,r3
 8003320:	2811883a 	mov	r8,r5
 8003324:	200f883a 	mov	r7,r4
 8003328:	42800017 	ldw	r10,0(r8)
 800332c:	4a400104 	addi	r9,r9,4
 8003330:	39ffff04 	addi	r7,r7,-4
 8003334:	4abfff15 	stw	r10,-4(r9)
 8003338:	42000104 	addi	r8,r8,4
 800333c:	59fffa36 	bltu	r11,r7,8003328 <__alt_data_end+0xfc003328>
 8003340:	213fff04 	addi	r4,r4,-4
 8003344:	2008d0ba 	srli	r4,r4,2
 8003348:	318000cc 	andi	r6,r6,3
 800334c:	21000044 	addi	r4,r4,1
 8003350:	2109883a 	add	r4,r4,r4
 8003354:	2109883a 	add	r4,r4,r4
 8003358:	1907883a 	add	r3,r3,r4
 800335c:	290b883a 	add	r5,r5,r4
 8003360:	30000626 	beq	r6,zero,800337c <memcpy+0x114>
 8003364:	198d883a 	add	r6,r3,r6
 8003368:	29c00003 	ldbu	r7,0(r5)
 800336c:	18c00044 	addi	r3,r3,1
 8003370:	29400044 	addi	r5,r5,1
 8003374:	19ffffc5 	stb	r7,-1(r3)
 8003378:	19bffb1e 	bne	r3,r6,8003368 <__alt_data_end+0xfc003368>
 800337c:	dc000017 	ldw	r16,0(sp)
 8003380:	dec00104 	addi	sp,sp,4
 8003384:	f800283a 	ret
 8003388:	2007883a 	mov	r3,r4
 800338c:	003ff406 	br	8003360 <__alt_data_end+0xfc003360>
 8003390:	2007883a 	mov	r3,r4
 8003394:	003ff306 	br	8003364 <__alt_data_end+0xfc003364>
 8003398:	200d883a 	mov	r6,r4
 800339c:	003ff006 	br	8003360 <__alt_data_end+0xfc003360>

080033a0 <_printf_r>:
 80033a0:	defffd04 	addi	sp,sp,-12
 80033a4:	dfc00015 	stw	ra,0(sp)
 80033a8:	d9800115 	stw	r6,4(sp)
 80033ac:	d9c00215 	stw	r7,8(sp)
 80033b0:	280d883a 	mov	r6,r5
 80033b4:	21400217 	ldw	r5,8(r4)
 80033b8:	d9c00104 	addi	r7,sp,4
 80033bc:	80038800 	call	8003880 <___vfprintf_internal_r>
 80033c0:	dfc00017 	ldw	ra,0(sp)
 80033c4:	dec00304 	addi	sp,sp,12
 80033c8:	f800283a 	ret

080033cc <printf>:
 80033cc:	defffc04 	addi	sp,sp,-16
 80033d0:	dfc00015 	stw	ra,0(sp)
 80033d4:	d9400115 	stw	r5,4(sp)
 80033d8:	d9800215 	stw	r6,8(sp)
 80033dc:	d9c00315 	stw	r7,12(sp)
 80033e0:	008200b4 	movhi	r2,2050
 80033e4:	10ba9e04 	addi	r2,r2,-5512
 80033e8:	10800017 	ldw	r2,0(r2)
 80033ec:	200b883a 	mov	r5,r4
 80033f0:	d9800104 	addi	r6,sp,4
 80033f4:	11000217 	ldw	r4,8(r2)
 80033f8:	800587c0 	call	800587c <__vfprintf_internal>
 80033fc:	dfc00017 	ldw	ra,0(sp)
 8003400:	dec00404 	addi	sp,sp,16
 8003404:	f800283a 	ret

08003408 <_puts_r>:
 8003408:	defff604 	addi	sp,sp,-40
 800340c:	dc000715 	stw	r16,28(sp)
 8003410:	2021883a 	mov	r16,r4
 8003414:	2809883a 	mov	r4,r5
 8003418:	dc400815 	stw	r17,32(sp)
 800341c:	dfc00915 	stw	ra,36(sp)
 8003420:	2823883a 	mov	r17,r5
 8003424:	80035640 	call	8003564 <strlen>
 8003428:	00c200b4 	movhi	r3,2050
 800342c:	18fa9e04 	addi	r3,r3,-5512
 8003430:	18c00017 	ldw	r3,0(r3)
 8003434:	11000044 	addi	r4,r2,1
 8003438:	d8800115 	stw	r2,4(sp)
 800343c:	18c00217 	ldw	r3,8(r3)
 8003440:	014200b4 	movhi	r5,2050
 8003444:	29729104 	addi	r5,r5,-13756
 8003448:	1880030b 	ldhu	r2,12(r3)
 800344c:	d9400215 	stw	r5,8(sp)
 8003450:	d9000615 	stw	r4,24(sp)
 8003454:	01400044 	movi	r5,1
 8003458:	01000084 	movi	r4,2
 800345c:	d9000515 	stw	r4,20(sp)
 8003460:	dc400015 	stw	r17,0(sp)
 8003464:	d9400315 	stw	r5,12(sp)
 8003468:	dec00415 	stw	sp,16(sp)
 800346c:	1108000c 	andi	r4,r2,8192
 8003470:	2000061e 	bne	r4,zero,800348c <_puts_r+0x84>
 8003474:	19401917 	ldw	r5,100(r3)
 8003478:	0137ffc4 	movi	r4,-8193
 800347c:	10880014 	ori	r2,r2,8192
 8003480:	2908703a 	and	r4,r5,r4
 8003484:	1880030d 	sth	r2,12(r3)
 8003488:	19001915 	stw	r4,100(r3)
 800348c:	81400217 	ldw	r5,8(r16)
 8003490:	8009883a 	mov	r4,r16
 8003494:	d9800404 	addi	r6,sp,16
 8003498:	8007d040 	call	8007d04 <__sfvwrite_r>
 800349c:	1000061e 	bne	r2,zero,80034b8 <_puts_r+0xb0>
 80034a0:	00800284 	movi	r2,10
 80034a4:	dfc00917 	ldw	ra,36(sp)
 80034a8:	dc400817 	ldw	r17,32(sp)
 80034ac:	dc000717 	ldw	r16,28(sp)
 80034b0:	dec00a04 	addi	sp,sp,40
 80034b4:	f800283a 	ret
 80034b8:	00bfffc4 	movi	r2,-1
 80034bc:	003ff906 	br	80034a4 <__alt_data_end+0xfc0034a4>

080034c0 <puts>:
 80034c0:	008200b4 	movhi	r2,2050
 80034c4:	10ba9e04 	addi	r2,r2,-5512
 80034c8:	200b883a 	mov	r5,r4
 80034cc:	11000017 	ldw	r4,0(r2)
 80034d0:	80034081 	jmpi	8003408 <_puts_r>

080034d4 <strcpy>:
 80034d4:	2906b03a 	or	r3,r5,r4
 80034d8:	18c000cc 	andi	r3,r3,3
 80034dc:	2005883a 	mov	r2,r4
 80034e0:	1800161e 	bne	r3,zero,800353c <strcpy+0x68>
 80034e4:	29c00017 	ldw	r7,0(r5)
 80034e8:	02ffbff4 	movhi	r11,65279
 80034ec:	5affbfc4 	addi	r11,r11,-257
 80034f0:	02a02074 	movhi	r10,32897
 80034f4:	01c8303a 	nor	r4,zero,r7
 80034f8:	3ac7883a 	add	r3,r7,r11
 80034fc:	52a02004 	addi	r10,r10,-32640
 8003500:	20c6703a 	and	r3,r4,r3
 8003504:	1a86703a 	and	r3,r3,r10
 8003508:	18000c1e 	bne	r3,zero,800353c <strcpy+0x68>
 800350c:	1011883a 	mov	r8,r2
 8003510:	41c00015 	stw	r7,0(r8)
 8003514:	29400104 	addi	r5,r5,4
 8003518:	29c00017 	ldw	r7,0(r5)
 800351c:	41800104 	addi	r6,r8,4
 8003520:	3011883a 	mov	r8,r6
 8003524:	01d2303a 	nor	r9,zero,r7
 8003528:	3ac7883a 	add	r3,r7,r11
 800352c:	48c6703a 	and	r3,r9,r3
 8003530:	1a86703a 	and	r3,r3,r10
 8003534:	183ff626 	beq	r3,zero,8003510 <__alt_data_end+0xfc003510>
 8003538:	00000106 	br	8003540 <strcpy+0x6c>
 800353c:	100d883a 	mov	r6,r2
 8003540:	28c00003 	ldbu	r3,0(r5)
 8003544:	31800044 	addi	r6,r6,1
 8003548:	29400044 	addi	r5,r5,1
 800354c:	30ffffc5 	stb	r3,-1(r6)
 8003550:	18c03fcc 	andi	r3,r3,255
 8003554:	18c0201c 	xori	r3,r3,128
 8003558:	18ffe004 	addi	r3,r3,-128
 800355c:	183ff81e 	bne	r3,zero,8003540 <__alt_data_end+0xfc003540>
 8003560:	f800283a 	ret

08003564 <strlen>:
 8003564:	208000cc 	andi	r2,r4,3
 8003568:	10002026 	beq	r2,zero,80035ec <strlen+0x88>
 800356c:	20800007 	ldb	r2,0(r4)
 8003570:	10002026 	beq	r2,zero,80035f4 <strlen+0x90>
 8003574:	2005883a 	mov	r2,r4
 8003578:	00000206 	br	8003584 <strlen+0x20>
 800357c:	10c00007 	ldb	r3,0(r2)
 8003580:	18001826 	beq	r3,zero,80035e4 <strlen+0x80>
 8003584:	10800044 	addi	r2,r2,1
 8003588:	10c000cc 	andi	r3,r2,3
 800358c:	183ffb1e 	bne	r3,zero,800357c <__alt_data_end+0xfc00357c>
 8003590:	10c00017 	ldw	r3,0(r2)
 8003594:	01ffbff4 	movhi	r7,65279
 8003598:	39ffbfc4 	addi	r7,r7,-257
 800359c:	00ca303a 	nor	r5,zero,r3
 80035a0:	01a02074 	movhi	r6,32897
 80035a4:	19c7883a 	add	r3,r3,r7
 80035a8:	31a02004 	addi	r6,r6,-32640
 80035ac:	1946703a 	and	r3,r3,r5
 80035b0:	1986703a 	and	r3,r3,r6
 80035b4:	1800091e 	bne	r3,zero,80035dc <strlen+0x78>
 80035b8:	10800104 	addi	r2,r2,4
 80035bc:	10c00017 	ldw	r3,0(r2)
 80035c0:	19cb883a 	add	r5,r3,r7
 80035c4:	00c6303a 	nor	r3,zero,r3
 80035c8:	28c6703a 	and	r3,r5,r3
 80035cc:	1986703a 	and	r3,r3,r6
 80035d0:	183ff926 	beq	r3,zero,80035b8 <__alt_data_end+0xfc0035b8>
 80035d4:	00000106 	br	80035dc <strlen+0x78>
 80035d8:	10800044 	addi	r2,r2,1
 80035dc:	10c00007 	ldb	r3,0(r2)
 80035e0:	183ffd1e 	bne	r3,zero,80035d8 <__alt_data_end+0xfc0035d8>
 80035e4:	1105c83a 	sub	r2,r2,r4
 80035e8:	f800283a 	ret
 80035ec:	2005883a 	mov	r2,r4
 80035f0:	003fe706 	br	8003590 <__alt_data_end+0xfc003590>
 80035f4:	0005883a 	mov	r2,zero
 80035f8:	f800283a 	ret

080035fc <_strtol_r>:
 80035fc:	008200b4 	movhi	r2,2050
 8003600:	defff404 	addi	sp,sp,-48
 8003604:	10ba9c04 	addi	r2,r2,-5520
 8003608:	dcc00515 	stw	r19,20(sp)
 800360c:	14c00017 	ldw	r19,0(r2)
 8003610:	dd800815 	stw	r22,32(sp)
 8003614:	dd400715 	stw	r21,28(sp)
 8003618:	dd000615 	stw	r20,24(sp)
 800361c:	dfc00b15 	stw	ra,44(sp)
 8003620:	df000a15 	stw	fp,40(sp)
 8003624:	ddc00915 	stw	r23,36(sp)
 8003628:	dc800415 	stw	r18,16(sp)
 800362c:	dc400315 	stw	r17,12(sp)
 8003630:	dc000215 	stw	r16,8(sp)
 8003634:	282b883a 	mov	r21,r5
 8003638:	d9000015 	stw	r4,0(sp)
 800363c:	3029883a 	mov	r20,r6
 8003640:	382d883a 	mov	r22,r7
 8003644:	2813883a 	mov	r9,r5
 8003648:	4a000007 	ldb	r8,0(r9)
 800364c:	4807883a 	mov	r3,r9
 8003650:	4a400044 	addi	r9,r9,1
 8003654:	9a05883a 	add	r2,r19,r8
 8003658:	10800043 	ldbu	r2,1(r2)
 800365c:	1080020c 	andi	r2,r2,8
 8003660:	103ff91e 	bne	r2,zero,8003648 <__alt_data_end+0xfc003648>
 8003664:	00800b44 	movi	r2,45
 8003668:	4025883a 	mov	r18,r8
 800366c:	4823883a 	mov	r17,r9
 8003670:	40805826 	beq	r8,r2,80037d4 <_strtol_r+0x1d8>
 8003674:	00800ac4 	movi	r2,43
 8003678:	40805a26 	beq	r8,r2,80037e4 <_strtol_r+0x1e8>
 800367c:	0039883a 	mov	fp,zero
 8003680:	b0000426 	beq	r22,zero,8003694 <_strtol_r+0x98>
 8003684:	00800404 	movi	r2,16
 8003688:	b0805a26 	beq	r22,r2,80037f4 <_strtol_r+0x1f8>
 800368c:	b02f883a 	mov	r23,r22
 8003690:	00000406 	br	80036a4 <_strtol_r+0xa8>
 8003694:	00800c04 	movi	r2,48
 8003698:	90806526 	beq	r18,r2,8003830 <_strtol_r+0x234>
 800369c:	05800284 	movi	r22,10
 80036a0:	b02f883a 	mov	r23,r22
 80036a4:	00e00034 	movhi	r3,32768
 80036a8:	18ffffc4 	addi	r3,r3,-1
 80036ac:	e0e1883a 	add	r16,fp,r3
 80036b0:	b80b883a 	mov	r5,r23
 80036b4:	8009883a 	mov	r4,r16
 80036b8:	800d2d40 	call	800d2d4 <__umodsi3>
 80036bc:	8009883a 	mov	r4,r16
 80036c0:	b80b883a 	mov	r5,r23
 80036c4:	d8800115 	stw	r2,4(sp)
 80036c8:	800d2cc0 	call	800d2cc <__udivsi3>
 80036cc:	9c91883a 	add	r8,r19,r18
 80036d0:	42000043 	ldbu	r8,1(r8)
 80036d4:	8807883a 	mov	r3,r17
 80036d8:	000d883a 	mov	r6,zero
 80036dc:	4240010c 	andi	r9,r8,4
 80036e0:	0009883a 	mov	r4,zero
 80036e4:	02800044 	movi	r10,1
 80036e8:	017fffc4 	movi	r5,-1
 80036ec:	d9c00117 	ldw	r7,4(sp)
 80036f0:	48000e26 	beq	r9,zero,800372c <_strtol_r+0x130>
 80036f4:	923ff404 	addi	r8,r18,-48
 80036f8:	4580120e 	bge	r8,r22,8003744 <_strtol_r+0x148>
 80036fc:	31400526 	beq	r6,r5,8003714 <_strtol_r+0x118>
 8003700:	11002736 	bltu	r2,r4,80037a0 <_strtol_r+0x1a4>
 8003704:	20802526 	beq	r4,r2,800379c <_strtol_r+0x1a0>
 8003708:	25c9383a 	mul	r4,r4,r23
 800370c:	01800044 	movi	r6,1
 8003710:	4109883a 	add	r4,r8,r4
 8003714:	1c800007 	ldb	r18,0(r3)
 8003718:	18c00044 	addi	r3,r3,1
 800371c:	9c91883a 	add	r8,r19,r18
 8003720:	42000043 	ldbu	r8,1(r8)
 8003724:	4240010c 	andi	r9,r8,4
 8003728:	483ff21e 	bne	r9,zero,80036f4 <__alt_data_end+0xfc0036f4>
 800372c:	420000cc 	andi	r8,r8,3
 8003730:	40000426 	beq	r8,zero,8003744 <_strtol_r+0x148>
 8003734:	42801c26 	beq	r8,r10,80037a8 <_strtol_r+0x1ac>
 8003738:	024015c4 	movi	r9,87
 800373c:	9251c83a 	sub	r8,r18,r9
 8003740:	45bfee16 	blt	r8,r22,80036fc <__alt_data_end+0xfc0036fc>
 8003744:	00bfffc4 	movi	r2,-1
 8003748:	30801926 	beq	r6,r2,80037b0 <_strtol_r+0x1b4>
 800374c:	0705c83a 	sub	r2,zero,fp
 8003750:	2084f03a 	xor	r2,r4,r2
 8003754:	1739883a 	add	fp,r2,fp
 8003758:	e005883a 	mov	r2,fp
 800375c:	a0000326 	beq	r20,zero,800376c <_strtol_r+0x170>
 8003760:	30001a1e 	bne	r6,zero,80037cc <_strtol_r+0x1d0>
 8003764:	a80b883a 	mov	r5,r21
 8003768:	a1400015 	stw	r5,0(r20)
 800376c:	dfc00b17 	ldw	ra,44(sp)
 8003770:	df000a17 	ldw	fp,40(sp)
 8003774:	ddc00917 	ldw	r23,36(sp)
 8003778:	dd800817 	ldw	r22,32(sp)
 800377c:	dd400717 	ldw	r21,28(sp)
 8003780:	dd000617 	ldw	r20,24(sp)
 8003784:	dcc00517 	ldw	r19,20(sp)
 8003788:	dc800417 	ldw	r18,16(sp)
 800378c:	dc400317 	ldw	r17,12(sp)
 8003790:	dc000217 	ldw	r16,8(sp)
 8003794:	dec00c04 	addi	sp,sp,48
 8003798:	f800283a 	ret
 800379c:	3a3fda0e 	bge	r7,r8,8003708 <__alt_data_end+0xfc003708>
 80037a0:	01bfffc4 	movi	r6,-1
 80037a4:	003fdb06 	br	8003714 <__alt_data_end+0xfc003714>
 80037a8:	02400dc4 	movi	r9,55
 80037ac:	003fe306 	br	800373c <__alt_data_end+0xfc00373c>
 80037b0:	d9000017 	ldw	r4,0(sp)
 80037b4:	00800884 	movi	r2,34
 80037b8:	20800015 	stw	r2,0(r4)
 80037bc:	00a00034 	movhi	r2,32768
 80037c0:	10bfffc4 	addi	r2,r2,-1
 80037c4:	e085883a 	add	r2,fp,r2
 80037c8:	a03fe826 	beq	r20,zero,800376c <__alt_data_end+0xfc00376c>
 80037cc:	197fffc4 	addi	r5,r3,-1
 80037d0:	003fe506 	br	8003768 <__alt_data_end+0xfc003768>
 80037d4:	1c400084 	addi	r17,r3,2
 80037d8:	1c800047 	ldb	r18,1(r3)
 80037dc:	07000044 	movi	fp,1
 80037e0:	003fa706 	br	8003680 <__alt_data_end+0xfc003680>
 80037e4:	1c400084 	addi	r17,r3,2
 80037e8:	1c800047 	ldb	r18,1(r3)
 80037ec:	0039883a 	mov	fp,zero
 80037f0:	003fa306 	br	8003680 <__alt_data_end+0xfc003680>
 80037f4:	00800c04 	movi	r2,48
 80037f8:	90bfa41e 	bne	r18,r2,800368c <__alt_data_end+0xfc00368c>
 80037fc:	88c00003 	ldbu	r3,0(r17)
 8003800:	00bff7c4 	movi	r2,-33
 8003804:	1884703a 	and	r2,r3,r2
 8003808:	10803fcc 	andi	r2,r2,255
 800380c:	1080201c 	xori	r2,r2,128
 8003810:	10bfe004 	addi	r2,r2,-128
 8003814:	00c01604 	movi	r3,88
 8003818:	10ff9c1e 	bne	r2,r3,800368c <__alt_data_end+0xfc00368c>
 800381c:	05c00404 	movi	r23,16
 8003820:	8c800047 	ldb	r18,1(r17)
 8003824:	b82d883a 	mov	r22,r23
 8003828:	8c400084 	addi	r17,r17,2
 800382c:	003f9d06 	br	80036a4 <__alt_data_end+0xfc0036a4>
 8003830:	88c00003 	ldbu	r3,0(r17)
 8003834:	00bff7c4 	movi	r2,-33
 8003838:	1884703a 	and	r2,r3,r2
 800383c:	10803fcc 	andi	r2,r2,255
 8003840:	1080201c 	xori	r2,r2,128
 8003844:	10bfe004 	addi	r2,r2,-128
 8003848:	00c01604 	movi	r3,88
 800384c:	10fff326 	beq	r2,r3,800381c <__alt_data_end+0xfc00381c>
 8003850:	05800204 	movi	r22,8
 8003854:	b02f883a 	mov	r23,r22
 8003858:	003f9206 	br	80036a4 <__alt_data_end+0xfc0036a4>

0800385c <strtol>:
 800385c:	2007883a 	mov	r3,r4
 8003860:	010200b4 	movhi	r4,2050
 8003864:	213a9e04 	addi	r4,r4,-5512
 8003868:	21000017 	ldw	r4,0(r4)
 800386c:	2805883a 	mov	r2,r5
 8003870:	300f883a 	mov	r7,r6
 8003874:	180b883a 	mov	r5,r3
 8003878:	100d883a 	mov	r6,r2
 800387c:	80035fc1 	jmpi	80035fc <_strtol_r>

08003880 <___vfprintf_internal_r>:
 8003880:	defeb604 	addi	sp,sp,-1320
 8003884:	dfc14915 	stw	ra,1316(sp)
 8003888:	ddc14715 	stw	r23,1308(sp)
 800388c:	dd814615 	stw	r22,1304(sp)
 8003890:	282f883a 	mov	r23,r5
 8003894:	202d883a 	mov	r22,r4
 8003898:	d9812a15 	stw	r6,1192(sp)
 800389c:	d9c12d15 	stw	r7,1204(sp)
 80038a0:	df014815 	stw	fp,1312(sp)
 80038a4:	dd414515 	stw	r21,1300(sp)
 80038a8:	dd014415 	stw	r20,1296(sp)
 80038ac:	dcc14315 	stw	r19,1292(sp)
 80038b0:	dc814215 	stw	r18,1288(sp)
 80038b4:	dc414115 	stw	r17,1284(sp)
 80038b8:	dc014015 	stw	r16,1280(sp)
 80038bc:	80083c40 	call	80083c4 <_localeconv_r>
 80038c0:	10800017 	ldw	r2,0(r2)
 80038c4:	1009883a 	mov	r4,r2
 80038c8:	d8813515 	stw	r2,1236(sp)
 80038cc:	80035640 	call	8003564 <strlen>
 80038d0:	d8813815 	stw	r2,1248(sp)
 80038d4:	b0000226 	beq	r22,zero,80038e0 <___vfprintf_internal_r+0x60>
 80038d8:	b0800e17 	ldw	r2,56(r22)
 80038dc:	10010426 	beq	r2,zero,8003cf0 <___vfprintf_internal_r+0x470>
 80038e0:	b8c0030b 	ldhu	r3,12(r23)
 80038e4:	1908000c 	andi	r4,r3,8192
 80038e8:	1805883a 	mov	r2,r3
 80038ec:	2000071e 	bne	r4,zero,800390c <___vfprintf_internal_r+0x8c>
 80038f0:	b9001917 	ldw	r4,100(r23)
 80038f4:	18880014 	ori	r2,r3,8192
 80038f8:	00f7ffc4 	movi	r3,-8193
 80038fc:	20c8703a 	and	r4,r4,r3
 8003900:	b880030d 	sth	r2,12(r23)
 8003904:	1007883a 	mov	r3,r2
 8003908:	b9001915 	stw	r4,100(r23)
 800390c:	1100020c 	andi	r4,r2,8
 8003910:	2000a726 	beq	r4,zero,8003bb0 <___vfprintf_internal_r+0x330>
 8003914:	b9000417 	ldw	r4,16(r23)
 8003918:	2000a526 	beq	r4,zero,8003bb0 <___vfprintf_internal_r+0x330>
 800391c:	1080068c 	andi	r2,r2,26
 8003920:	01000284 	movi	r4,10
 8003924:	1100ab26 	beq	r2,r4,8003bd4 <___vfprintf_internal_r+0x354>
 8003928:	dac10e04 	addi	r11,sp,1080
 800392c:	db010dc4 	addi	r12,sp,1079
 8003930:	d8800404 	addi	r2,sp,16
 8003934:	050200b4 	movhi	r20,2050
 8003938:	dac12815 	stw	r11,1184(sp)
 800393c:	5b17c83a 	sub	r11,r11,r12
 8003940:	a532a284 	addi	r20,r20,-13686
 8003944:	db012915 	stw	r12,1188(sp)
 8003948:	d8811e15 	stw	r2,1144(sp)
 800394c:	d8012015 	stw	zero,1152(sp)
 8003950:	d8011f15 	stw	zero,1148(sp)
 8003954:	d8013315 	stw	zero,1228(sp)
 8003958:	d8013715 	stw	zero,1244(sp)
 800395c:	d8013915 	stw	zero,1252(sp)
 8003960:	d8013b15 	stw	zero,1260(sp)
 8003964:	d8013a15 	stw	zero,1256(sp)
 8003968:	d8012f15 	stw	zero,1212(sp)
 800396c:	1011883a 	mov	r8,r2
 8003970:	dac13c15 	stw	r11,1264(sp)
 8003974:	db012a17 	ldw	r12,1192(sp)
 8003978:	60800007 	ldb	r2,0(r12)
 800397c:	1000df26 	beq	r2,zero,8003cfc <___vfprintf_internal_r+0x47c>
 8003980:	00c00944 	movi	r3,37
 8003984:	10c0dd26 	beq	r2,r3,8003cfc <___vfprintf_internal_r+0x47c>
 8003988:	6021883a 	mov	r16,r12
 800398c:	00000106 	br	8003994 <___vfprintf_internal_r+0x114>
 8003990:	10c08426 	beq	r2,r3,8003ba4 <___vfprintf_internal_r+0x324>
 8003994:	84000044 	addi	r16,r16,1
 8003998:	80800007 	ldb	r2,0(r16)
 800399c:	103ffc1e 	bne	r2,zero,8003990 <__alt_data_end+0xfc003990>
 80039a0:	dac12a17 	ldw	r11,1192(sp)
 80039a4:	82e3c83a 	sub	r17,r16,r11
 80039a8:	88000f26 	beq	r17,zero,80039e8 <___vfprintf_internal_r+0x168>
 80039ac:	d8c12017 	ldw	r3,1152(sp)
 80039b0:	d8811f17 	ldw	r2,1148(sp)
 80039b4:	dac12a17 	ldw	r11,1192(sp)
 80039b8:	1c47883a 	add	r3,r3,r17
 80039bc:	10800044 	addi	r2,r2,1
 80039c0:	d8c12015 	stw	r3,1152(sp)
 80039c4:	42c00015 	stw	r11,0(r8)
 80039c8:	44400115 	stw	r17,4(r8)
 80039cc:	d8811f15 	stw	r2,1148(sp)
 80039d0:	00c001c4 	movi	r3,7
 80039d4:	1880b416 	blt	r3,r2,8003ca8 <___vfprintf_internal_r+0x428>
 80039d8:	42000204 	addi	r8,r8,8
 80039dc:	db012f17 	ldw	r12,1212(sp)
 80039e0:	6459883a 	add	r12,r12,r17
 80039e4:	db012f15 	stw	r12,1212(sp)
 80039e8:	80800007 	ldb	r2,0(r16)
 80039ec:	1000b526 	beq	r2,zero,8003cc4 <___vfprintf_internal_r+0x444>
 80039f0:	80800044 	addi	r2,r16,1
 80039f4:	84000047 	ldb	r16,1(r16)
 80039f8:	d8012785 	stb	zero,1182(sp)
 80039fc:	000d883a 	mov	r6,zero
 8003a00:	027fffc4 	movi	r9,-1
 8003a04:	d8012e15 	stw	zero,1208(sp)
 8003a08:	0023883a 	mov	r17,zero
 8003a0c:	01001604 	movi	r4,88
 8003a10:	01400244 	movi	r5,9
 8003a14:	02800a84 	movi	r10,42
 8003a18:	01c01b04 	movi	r7,108
 8003a1c:	10c00044 	addi	r3,r2,1
 8003a20:	80bff804 	addi	r2,r16,-32
 8003a24:	2082f236 	bltu	r4,r2,80045f0 <___vfprintf_internal_r+0xd70>
 8003a28:	100490ba 	slli	r2,r2,2
 8003a2c:	02c20034 	movhi	r11,2048
 8003a30:	5ace9004 	addi	r11,r11,14912
 8003a34:	12c5883a 	add	r2,r2,r11
 8003a38:	10800017 	ldw	r2,0(r2)
 8003a3c:	1000683a 	jmp	r2
 8003a40:	08004438 	rdprs	zero,at,272
 8003a44:	080045f0 	cmpltui	zero,at,279
 8003a48:	080045f0 	cmpltui	zero,at,279
 8003a4c:	08004458 	cmpnei	zero,at,273
 8003a50:	080045f0 	cmpltui	zero,at,279
 8003a54:	080045f0 	cmpltui	zero,at,279
 8003a58:	080045f0 	cmpltui	zero,at,279
 8003a5c:	080045f0 	cmpltui	zero,at,279
 8003a60:	080045f0 	cmpltui	zero,at,279
 8003a64:	080045f0 	cmpltui	zero,at,279
 8003a68:	080045b4 	orhi	zero,at,278
 8003a6c:	080045e0 	cmpeqi	zero,at,279
 8003a70:	080045f0 	cmpltui	zero,at,279
 8003a74:	08003d04 	addi	zero,at,244
 8003a78:	08003d14 	ori	zero,at,244
 8003a7c:	080045f0 	cmpltui	zero,at,279
 8003a80:	08003d54 	ori	zero,at,245
 8003a84:	08004248 	cmpgei	zero,at,265
 8003a88:	08004248 	cmpgei	zero,at,265
 8003a8c:	08004248 	cmpgei	zero,at,265
 8003a90:	08004248 	cmpgei	zero,at,265
 8003a94:	08004248 	cmpgei	zero,at,265
 8003a98:	08004248 	cmpgei	zero,at,265
 8003a9c:	08004248 	cmpgei	zero,at,265
 8003aa0:	08004248 	cmpgei	zero,at,265
 8003aa4:	08004248 	cmpgei	zero,at,265
 8003aa8:	080045f0 	cmpltui	zero,at,279
 8003aac:	080045f0 	cmpltui	zero,at,279
 8003ab0:	080045f0 	cmpltui	zero,at,279
 8003ab4:	080045f0 	cmpltui	zero,at,279
 8003ab8:	080045f0 	cmpltui	zero,at,279
 8003abc:	080045f0 	cmpltui	zero,at,279
 8003ac0:	080045f0 	cmpltui	zero,at,279
 8003ac4:	080045f0 	cmpltui	zero,at,279
 8003ac8:	080045f0 	cmpltui	zero,at,279
 8003acc:	080045f0 	cmpltui	zero,at,279
 8003ad0:	0800427c 	xorhi	zero,at,265
 8003ad4:	08003d64 	muli	zero,at,245
 8003ad8:	080045f0 	cmpltui	zero,at,279
 8003adc:	08003d64 	muli	zero,at,245
 8003ae0:	080045f0 	cmpltui	zero,at,279
 8003ae4:	080045f0 	cmpltui	zero,at,279
 8003ae8:	080045f0 	cmpltui	zero,at,279
 8003aec:	080045f0 	cmpltui	zero,at,279
 8003af0:	08003e08 	cmpgei	zero,at,248
 8003af4:	080045f0 	cmpltui	zero,at,279
 8003af8:	080045f0 	cmpltui	zero,at,279
 8003afc:	08003e18 	cmpnei	zero,at,248
 8003b00:	080045f0 	cmpltui	zero,at,279
 8003b04:	080045f0 	cmpltui	zero,at,279
 8003b08:	080045f0 	cmpltui	zero,at,279
 8003b0c:	080045f0 	cmpltui	zero,at,279
 8003b10:	080045f0 	cmpltui	zero,at,279
 8003b14:	08004214 	ori	zero,at,264
 8003b18:	080045f0 	cmpltui	zero,at,279
 8003b1c:	080045f0 	cmpltui	zero,at,279
 8003b20:	080042c4 	addi	zero,at,267
 8003b24:	080045f0 	cmpltui	zero,at,279
 8003b28:	080045f0 	cmpltui	zero,at,279
 8003b2c:	080045f0 	cmpltui	zero,at,279
 8003b30:	080045f0 	cmpltui	zero,at,279
 8003b34:	080045f0 	cmpltui	zero,at,279
 8003b38:	080045f0 	cmpltui	zero,at,279
 8003b3c:	080045f0 	cmpltui	zero,at,279
 8003b40:	080045f0 	cmpltui	zero,at,279
 8003b44:	080045f0 	cmpltui	zero,at,279
 8003b48:	080045f0 	cmpltui	zero,at,279
 8003b4c:	080044b8 	rdprs	zero,at,274
 8003b50:	08004468 	cmpgeui	zero,at,273
 8003b54:	08003d64 	muli	zero,at,245
 8003b58:	08003d64 	muli	zero,at,245
 8003b5c:	08003d64 	muli	zero,at,245
 8003b60:	080044a8 	cmpgeui	zero,at,274
 8003b64:	08004468 	cmpgeui	zero,at,273
 8003b68:	080045f0 	cmpltui	zero,at,279
 8003b6c:	080045f0 	cmpltui	zero,at,279
 8003b70:	080043b0 	cmpltui	zero,at,270
 8003b74:	080045f0 	cmpltui	zero,at,279
 8003b78:	080043c4 	addi	zero,at,271
 8003b7c:	080043f8 	rdprs	zero,at,271
 8003b80:	080044f8 	rdprs	zero,at,275
 8003b84:	08004320 	cmpeqi	zero,at,268
 8003b88:	080045f0 	cmpltui	zero,at,279
 8003b8c:	08004540 	call	800454 <__reset-0x77ffbac>
 8003b90:	080045f0 	cmpltui	zero,at,279
 8003b94:	08004330 	cmpltui	zero,at,268
 8003b98:	080045f0 	cmpltui	zero,at,279
 8003b9c:	080045f0 	cmpltui	zero,at,279
 8003ba0:	08004370 	cmpltui	zero,at,269
 8003ba4:	db012a17 	ldw	r12,1192(sp)
 8003ba8:	8323c83a 	sub	r17,r16,r12
 8003bac:	003f7e06 	br	80039a8 <__alt_data_end+0xfc0039a8>
 8003bb0:	b009883a 	mov	r4,r22
 8003bb4:	b80b883a 	mov	r5,r23
 8003bb8:	80058a00 	call	80058a0 <__swsetup_r>
 8003bbc:	10002d1e 	bne	r2,zero,8003c74 <___vfprintf_internal_r+0x3f4>
 8003bc0:	b8c0030b 	ldhu	r3,12(r23)
 8003bc4:	01000284 	movi	r4,10
 8003bc8:	1805883a 	mov	r2,r3
 8003bcc:	1080068c 	andi	r2,r2,26
 8003bd0:	113f551e 	bne	r2,r4,8003928 <__alt_data_end+0xfc003928>
 8003bd4:	b880038b 	ldhu	r2,14(r23)
 8003bd8:	113fffcc 	andi	r4,r2,65535
 8003bdc:	2120001c 	xori	r4,r4,32768
 8003be0:	21200004 	addi	r4,r4,-32768
 8003be4:	203f5016 	blt	r4,zero,8003928 <__alt_data_end+0xfc003928>
 8003be8:	bac01917 	ldw	r11,100(r23)
 8003bec:	ba800717 	ldw	r10,28(r23)
 8003bf0:	ba400917 	ldw	r9,36(r23)
 8003bf4:	d9812a17 	ldw	r6,1192(sp)
 8003bf8:	d9c12d17 	ldw	r7,1204(sp)
 8003bfc:	02010004 	movi	r8,1024
 8003c00:	18ffff4c 	andi	r3,r3,65533
 8003c04:	d881078d 	sth	r2,1054(sp)
 8003c08:	b009883a 	mov	r4,r22
 8003c0c:	d8800404 	addi	r2,sp,16
 8003c10:	d9410404 	addi	r5,sp,1040
 8003c14:	d8c1070d 	sth	r3,1052(sp)
 8003c18:	dac11d15 	stw	r11,1140(sp)
 8003c1c:	da810b15 	stw	r10,1068(sp)
 8003c20:	da410d15 	stw	r9,1076(sp)
 8003c24:	d8810415 	stw	r2,1040(sp)
 8003c28:	d8810815 	stw	r2,1056(sp)
 8003c2c:	da010615 	stw	r8,1048(sp)
 8003c30:	da010915 	stw	r8,1060(sp)
 8003c34:	d8010a15 	stw	zero,1064(sp)
 8003c38:	80038800 	call	8003880 <___vfprintf_internal_r>
 8003c3c:	1021883a 	mov	r16,r2
 8003c40:	10000416 	blt	r2,zero,8003c54 <___vfprintf_internal_r+0x3d4>
 8003c44:	b009883a 	mov	r4,r22
 8003c48:	d9410404 	addi	r5,sp,1040
 8003c4c:	80072f80 	call	80072f8 <_fflush_r>
 8003c50:	1006ee1e 	bne	r2,zero,800580c <___vfprintf_internal_r+0x1f8c>
 8003c54:	d881070b 	ldhu	r2,1052(sp)
 8003c58:	1080100c 	andi	r2,r2,64
 8003c5c:	10000326 	beq	r2,zero,8003c6c <___vfprintf_internal_r+0x3ec>
 8003c60:	b880030b 	ldhu	r2,12(r23)
 8003c64:	10801014 	ori	r2,r2,64
 8003c68:	b880030d 	sth	r2,12(r23)
 8003c6c:	8005883a 	mov	r2,r16
 8003c70:	00000106 	br	8003c78 <___vfprintf_internal_r+0x3f8>
 8003c74:	00bfffc4 	movi	r2,-1
 8003c78:	dfc14917 	ldw	ra,1316(sp)
 8003c7c:	df014817 	ldw	fp,1312(sp)
 8003c80:	ddc14717 	ldw	r23,1308(sp)
 8003c84:	dd814617 	ldw	r22,1304(sp)
 8003c88:	dd414517 	ldw	r21,1300(sp)
 8003c8c:	dd014417 	ldw	r20,1296(sp)
 8003c90:	dcc14317 	ldw	r19,1292(sp)
 8003c94:	dc814217 	ldw	r18,1288(sp)
 8003c98:	dc414117 	ldw	r17,1284(sp)
 8003c9c:	dc014017 	ldw	r16,1280(sp)
 8003ca0:	dec14a04 	addi	sp,sp,1320
 8003ca4:	f800283a 	ret
 8003ca8:	b009883a 	mov	r4,r22
 8003cac:	b80b883a 	mov	r5,r23
 8003cb0:	d9811e04 	addi	r6,sp,1144
 8003cb4:	800a9900 	call	800a990 <__sprint_r>
 8003cb8:	1000081e 	bne	r2,zero,8003cdc <___vfprintf_internal_r+0x45c>
 8003cbc:	da000404 	addi	r8,sp,16
 8003cc0:	003f4606 	br	80039dc <__alt_data_end+0xfc0039dc>
 8003cc4:	d8812017 	ldw	r2,1152(sp)
 8003cc8:	10000426 	beq	r2,zero,8003cdc <___vfprintf_internal_r+0x45c>
 8003ccc:	b009883a 	mov	r4,r22
 8003cd0:	b80b883a 	mov	r5,r23
 8003cd4:	d9811e04 	addi	r6,sp,1144
 8003cd8:	800a9900 	call	800a990 <__sprint_r>
 8003cdc:	b880030b 	ldhu	r2,12(r23)
 8003ce0:	1080100c 	andi	r2,r2,64
 8003ce4:	103fe31e 	bne	r2,zero,8003c74 <__alt_data_end+0xfc003c74>
 8003ce8:	d8812f17 	ldw	r2,1212(sp)
 8003cec:	003fe206 	br	8003c78 <__alt_data_end+0xfc003c78>
 8003cf0:	b009883a 	mov	r4,r22
 8003cf4:	80078a00 	call	80078a0 <__sinit>
 8003cf8:	003ef906 	br	80038e0 <__alt_data_end+0xfc0038e0>
 8003cfc:	dc012a17 	ldw	r16,1192(sp)
 8003d00:	003f3906 	br	80039e8 <__alt_data_end+0xfc0039e8>
 8003d04:	1805883a 	mov	r2,r3
 8003d08:	8c400114 	ori	r17,r17,4
 8003d0c:	1c000007 	ldb	r16,0(r3)
 8003d10:	003f4206 	br	8003a1c <__alt_data_end+0xfc003a1c>
 8003d14:	1c000007 	ldb	r16,0(r3)
 8003d18:	18800044 	addi	r2,r3,1
 8003d1c:	8286b326 	beq	r16,r10,80057ec <___vfprintf_internal_r+0x1f6c>
 8003d20:	82fff404 	addi	r11,r16,-48
 8003d24:	1007883a 	mov	r3,r2
 8003d28:	0013883a 	mov	r9,zero
 8003d2c:	2aff3c36 	bltu	r5,r11,8003a20 <__alt_data_end+0xfc003a20>
 8003d30:	1c000007 	ldb	r16,0(r3)
 8003d34:	4a4002a4 	muli	r9,r9,10
 8003d38:	18c00044 	addi	r3,r3,1
 8003d3c:	5a53883a 	add	r9,r11,r9
 8003d40:	82fff404 	addi	r11,r16,-48
 8003d44:	2afffa2e 	bgeu	r5,r11,8003d30 <__alt_data_end+0xfc003d30>
 8003d48:	483f350e 	bge	r9,zero,8003a20 <__alt_data_end+0xfc003a20>
 8003d4c:	027fffc4 	movi	r9,-1
 8003d50:	003f3306 	br	8003a20 <__alt_data_end+0xfc003a20>
 8003d54:	8c402014 	ori	r17,r17,128
 8003d58:	1805883a 	mov	r2,r3
 8003d5c:	1c000007 	ldb	r16,0(r3)
 8003d60:	003f2e06 	br	8003a1c <__alt_data_end+0xfc003a1c>
 8003d64:	db012d17 	ldw	r12,1204(sp)
 8003d68:	dac12d17 	ldw	r11,1204(sp)
 8003d6c:	d8c12a15 	stw	r3,1192(sp)
 8003d70:	63000017 	ldw	r12,0(r12)
 8003d74:	5ac00117 	ldw	r11,4(r11)
 8003d78:	d9812785 	stb	r6,1182(sp)
 8003d7c:	6009883a 	mov	r4,r12
 8003d80:	580b883a 	mov	r5,r11
 8003d84:	db013715 	stw	r12,1244(sp)
 8003d88:	da013f15 	stw	r8,1276(sp)
 8003d8c:	da413e15 	stw	r9,1272(sp)
 8003d90:	dac13915 	stw	r11,1252(sp)
 8003d94:	800a5ec0 	call	800a5ec <__fpclassifyd>
 8003d98:	db012d17 	ldw	r12,1204(sp)
 8003d9c:	04800044 	movi	r18,1
 8003da0:	da013f17 	ldw	r8,1276(sp)
 8003da4:	64c00204 	addi	r19,r12,8
 8003da8:	da413e17 	ldw	r9,1272(sp)
 8003dac:	d9013717 	ldw	r4,1244(sp)
 8003db0:	d9413917 	ldw	r5,1252(sp)
 8003db4:	1484581e 	bne	r2,r18,8004f18 <___vfprintf_internal_r+0x1698>
 8003db8:	000d883a 	mov	r6,zero
 8003dbc:	000f883a 	mov	r7,zero
 8003dc0:	800e5a80 	call	800e5a8 <__ledf2>
 8003dc4:	da013f17 	ldw	r8,1276(sp)
 8003dc8:	1005ef16 	blt	r2,zero,8005588 <___vfprintf_internal_r+0x1d08>
 8003dcc:	dd412783 	ldbu	r21,1182(sp)
 8003dd0:	008011c4 	movi	r2,71
 8003dd4:	14053b0e 	bge	r2,r16,80052c4 <___vfprintf_internal_r+0x1a44>
 8003dd8:	00c200b4 	movhi	r3,2050
 8003ddc:	18f29304 	addi	r3,r3,-13748
 8003de0:	d8c13115 	stw	r3,1220(sp)
 8003de4:	02c000c4 	movi	r11,3
 8003de8:	00bfdfc4 	movi	r2,-129
 8003dec:	dac12b15 	stw	r11,1196(sp)
 8003df0:	88a2703a 	and	r17,r17,r2
 8003df4:	dcc12d15 	stw	r19,1204(sp)
 8003df8:	5825883a 	mov	r18,r11
 8003dfc:	d8013215 	stw	zero,1224(sp)
 8003e00:	d8013415 	stw	zero,1232(sp)
 8003e04:	00003206 	br	8003ed0 <___vfprintf_internal_r+0x650>
 8003e08:	8c400214 	ori	r17,r17,8
 8003e0c:	1805883a 	mov	r2,r3
 8003e10:	1c000007 	ldb	r16,0(r3)
 8003e14:	003f0106 	br	8003a1c <__alt_data_end+0xfc003a1c>
 8003e18:	8c400414 	ori	r17,r17,16
 8003e1c:	d8c12a15 	stw	r3,1192(sp)
 8003e20:	88c0080c 	andi	r3,r17,32
 8003e24:	d8812d17 	ldw	r2,1204(sp)
 8003e28:	18017726 	beq	r3,zero,8004408 <___vfprintf_internal_r+0xb88>
 8003e2c:	db012d17 	ldw	r12,1204(sp)
 8003e30:	14c00017 	ldw	r19,0(r2)
 8003e34:	17000117 	ldw	fp,4(r2)
 8003e38:	63000204 	addi	r12,r12,8
 8003e3c:	db012d15 	stw	r12,1204(sp)
 8003e40:	0005883a 	mov	r2,zero
 8003e44:	9f06b03a 	or	r3,r19,fp
 8003e48:	d8012785 	stb	zero,1182(sp)
 8003e4c:	da413215 	stw	r9,1224(sp)
 8003e50:	002b883a 	mov	r21,zero
 8003e54:	48000216 	blt	r9,zero,8003e60 <___vfprintf_internal_r+0x5e0>
 8003e58:	013fdfc4 	movi	r4,-129
 8003e5c:	8922703a 	and	r17,r17,r4
 8003e60:	1801ed1e 	bne	r3,zero,8004618 <___vfprintf_internal_r+0xd98>
 8003e64:	4802e026 	beq	r9,zero,80049e8 <___vfprintf_internal_r+0x1168>
 8003e68:	10803fcc 	andi	r2,r2,255
 8003e6c:	00c00044 	movi	r3,1
 8003e70:	10c20f26 	beq	r2,r3,80046b0 <___vfprintf_internal_r+0xe30>
 8003e74:	00c00084 	movi	r3,2
 8003e78:	10c2fd26 	beq	r2,r3,8004a70 <___vfprintf_internal_r+0x11f0>
 8003e7c:	d8c10e04 	addi	r3,sp,1080
 8003e80:	9808d0fa 	srli	r4,r19,3
 8003e84:	e00a977a 	slli	r5,fp,29
 8003e88:	e038d0fa 	srli	fp,fp,3
 8003e8c:	9cc001cc 	andi	r19,r19,7
 8003e90:	98800c04 	addi	r2,r19,48
 8003e94:	18ffffc4 	addi	r3,r3,-1
 8003e98:	2926b03a 	or	r19,r5,r4
 8003e9c:	18800005 	stb	r2,0(r3)
 8003ea0:	9f08b03a 	or	r4,r19,fp
 8003ea4:	203ff61e 	bne	r4,zero,8003e80 <__alt_data_end+0xfc003e80>
 8003ea8:	8900004c 	andi	r4,r17,1
 8003eac:	d8c13115 	stw	r3,1220(sp)
 8003eb0:	2003791e 	bne	r4,zero,8004c98 <___vfprintf_internal_r+0x1418>
 8003eb4:	dac12817 	ldw	r11,1184(sp)
 8003eb8:	58e5c83a 	sub	r18,r11,r3
 8003ebc:	9005883a 	mov	r2,r18
 8003ec0:	9240010e 	bge	r18,r9,8003ec8 <___vfprintf_internal_r+0x648>
 8003ec4:	4805883a 	mov	r2,r9
 8003ec8:	d8812b15 	stw	r2,1196(sp)
 8003ecc:	d8013415 	stw	zero,1232(sp)
 8003ed0:	a8803fcc 	andi	r2,r21,255
 8003ed4:	1080201c 	xori	r2,r2,128
 8003ed8:	10bfe004 	addi	r2,r2,-128
 8003edc:	10000326 	beq	r2,zero,8003eec <___vfprintf_internal_r+0x66c>
 8003ee0:	db012b17 	ldw	r12,1196(sp)
 8003ee4:	63000044 	addi	r12,r12,1
 8003ee8:	db012b15 	stw	r12,1196(sp)
 8003eec:	88c0008c 	andi	r3,r17,2
 8003ef0:	d8c12c15 	stw	r3,1200(sp)
 8003ef4:	18000326 	beq	r3,zero,8003f04 <___vfprintf_internal_r+0x684>
 8003ef8:	dac12b17 	ldw	r11,1196(sp)
 8003efc:	5ac00084 	addi	r11,r11,2
 8003f00:	dac12b15 	stw	r11,1196(sp)
 8003f04:	8b00210c 	andi	r12,r17,132
 8003f08:	db013015 	stw	r12,1216(sp)
 8003f0c:	6001c01e 	bne	r12,zero,8004610 <___vfprintf_internal_r+0xd90>
 8003f10:	dac12e17 	ldw	r11,1208(sp)
 8003f14:	db012b17 	ldw	r12,1196(sp)
 8003f18:	5b39c83a 	sub	fp,r11,r12
 8003f1c:	0701bc0e 	bge	zero,fp,8004610 <___vfprintf_internal_r+0xd90>
 8003f20:	02400404 	movi	r9,16
 8003f24:	d8c12017 	ldw	r3,1152(sp)
 8003f28:	d8811f17 	ldw	r2,1148(sp)
 8003f2c:	4f05220e 	bge	r9,fp,80053b8 <___vfprintf_internal_r+0x1b38>
 8003f30:	014200b4 	movhi	r5,2050
 8003f34:	2972a684 	addi	r5,r5,-13670
 8003f38:	d9413615 	stw	r5,1240(sp)
 8003f3c:	482b883a 	mov	r21,r9
 8003f40:	04c001c4 	movi	r19,7
 8003f44:	00000306 	br	8003f54 <___vfprintf_internal_r+0x6d4>
 8003f48:	e73ffc04 	addi	fp,fp,-16
 8003f4c:	42000204 	addi	r8,r8,8
 8003f50:	af00130e 	bge	r21,fp,8003fa0 <___vfprintf_internal_r+0x720>
 8003f54:	02c200b4 	movhi	r11,2050
 8003f58:	18c00404 	addi	r3,r3,16
 8003f5c:	10800044 	addi	r2,r2,1
 8003f60:	5af2a684 	addi	r11,r11,-13670
 8003f64:	42c00015 	stw	r11,0(r8)
 8003f68:	45400115 	stw	r21,4(r8)
 8003f6c:	d8c12015 	stw	r3,1152(sp)
 8003f70:	d8811f15 	stw	r2,1148(sp)
 8003f74:	98bff40e 	bge	r19,r2,8003f48 <__alt_data_end+0xfc003f48>
 8003f78:	b009883a 	mov	r4,r22
 8003f7c:	b80b883a 	mov	r5,r23
 8003f80:	d9811e04 	addi	r6,sp,1144
 8003f84:	800a9900 	call	800a990 <__sprint_r>
 8003f88:	103f541e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8003f8c:	e73ffc04 	addi	fp,fp,-16
 8003f90:	d8c12017 	ldw	r3,1152(sp)
 8003f94:	d8811f17 	ldw	r2,1148(sp)
 8003f98:	da000404 	addi	r8,sp,16
 8003f9c:	af3fed16 	blt	r21,fp,8003f54 <__alt_data_end+0xfc003f54>
 8003fa0:	db013617 	ldw	r12,1240(sp)
 8003fa4:	e0c7883a 	add	r3,fp,r3
 8003fa8:	10800044 	addi	r2,r2,1
 8003fac:	43000015 	stw	r12,0(r8)
 8003fb0:	47000115 	stw	fp,4(r8)
 8003fb4:	d8c12015 	stw	r3,1152(sp)
 8003fb8:	d8811f15 	stw	r2,1148(sp)
 8003fbc:	010001c4 	movi	r4,7
 8003fc0:	2082f416 	blt	r4,r2,8004b94 <___vfprintf_internal_r+0x1314>
 8003fc4:	d8812787 	ldb	r2,1182(sp)
 8003fc8:	42000204 	addi	r8,r8,8
 8003fcc:	10000c26 	beq	r2,zero,8004000 <___vfprintf_internal_r+0x780>
 8003fd0:	d8811f17 	ldw	r2,1148(sp)
 8003fd4:	d9012784 	addi	r4,sp,1182
 8003fd8:	18c00044 	addi	r3,r3,1
 8003fdc:	10800044 	addi	r2,r2,1
 8003fe0:	41000015 	stw	r4,0(r8)
 8003fe4:	01000044 	movi	r4,1
 8003fe8:	41000115 	stw	r4,4(r8)
 8003fec:	d8c12015 	stw	r3,1152(sp)
 8003ff0:	d8811f15 	stw	r2,1148(sp)
 8003ff4:	010001c4 	movi	r4,7
 8003ff8:	20828d16 	blt	r4,r2,8004a30 <___vfprintf_internal_r+0x11b0>
 8003ffc:	42000204 	addi	r8,r8,8
 8004000:	dac12c17 	ldw	r11,1200(sp)
 8004004:	58000c26 	beq	r11,zero,8004038 <___vfprintf_internal_r+0x7b8>
 8004008:	d8811f17 	ldw	r2,1148(sp)
 800400c:	d9012704 	addi	r4,sp,1180
 8004010:	18c00084 	addi	r3,r3,2
 8004014:	10800044 	addi	r2,r2,1
 8004018:	41000015 	stw	r4,0(r8)
 800401c:	01000084 	movi	r4,2
 8004020:	41000115 	stw	r4,4(r8)
 8004024:	d8c12015 	stw	r3,1152(sp)
 8004028:	d8811f15 	stw	r2,1148(sp)
 800402c:	010001c4 	movi	r4,7
 8004030:	20828716 	blt	r4,r2,8004a50 <___vfprintf_internal_r+0x11d0>
 8004034:	42000204 	addi	r8,r8,8
 8004038:	db013017 	ldw	r12,1216(sp)
 800403c:	00802004 	movi	r2,128
 8004040:	6081e926 	beq	r12,r2,80047e8 <___vfprintf_internal_r+0xf68>
 8004044:	db013217 	ldw	r12,1224(sp)
 8004048:	64abc83a 	sub	r21,r12,r18
 800404c:	0540260e 	bge	zero,r21,80040e8 <___vfprintf_internal_r+0x868>
 8004050:	07000404 	movi	fp,16
 8004054:	d8811f17 	ldw	r2,1148(sp)
 8004058:	e5443d0e 	bge	fp,r21,8005150 <___vfprintf_internal_r+0x18d0>
 800405c:	014200b4 	movhi	r5,2050
 8004060:	2972a284 	addi	r5,r5,-13686
 8004064:	d9412c15 	stw	r5,1200(sp)
 8004068:	04c001c4 	movi	r19,7
 800406c:	00000306 	br	800407c <___vfprintf_internal_r+0x7fc>
 8004070:	ad7ffc04 	addi	r21,r21,-16
 8004074:	42000204 	addi	r8,r8,8
 8004078:	e540110e 	bge	fp,r21,80040c0 <___vfprintf_internal_r+0x840>
 800407c:	18c00404 	addi	r3,r3,16
 8004080:	10800044 	addi	r2,r2,1
 8004084:	45000015 	stw	r20,0(r8)
 8004088:	47000115 	stw	fp,4(r8)
 800408c:	d8c12015 	stw	r3,1152(sp)
 8004090:	d8811f15 	stw	r2,1148(sp)
 8004094:	98bff60e 	bge	r19,r2,8004070 <__alt_data_end+0xfc004070>
 8004098:	b009883a 	mov	r4,r22
 800409c:	b80b883a 	mov	r5,r23
 80040a0:	d9811e04 	addi	r6,sp,1144
 80040a4:	800a9900 	call	800a990 <__sprint_r>
 80040a8:	103f0c1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 80040ac:	ad7ffc04 	addi	r21,r21,-16
 80040b0:	d8c12017 	ldw	r3,1152(sp)
 80040b4:	d8811f17 	ldw	r2,1148(sp)
 80040b8:	da000404 	addi	r8,sp,16
 80040bc:	e57fef16 	blt	fp,r21,800407c <__alt_data_end+0xfc00407c>
 80040c0:	dac12c17 	ldw	r11,1200(sp)
 80040c4:	1d47883a 	add	r3,r3,r21
 80040c8:	10800044 	addi	r2,r2,1
 80040cc:	42c00015 	stw	r11,0(r8)
 80040d0:	45400115 	stw	r21,4(r8)
 80040d4:	d8c12015 	stw	r3,1152(sp)
 80040d8:	d8811f15 	stw	r2,1148(sp)
 80040dc:	010001c4 	movi	r4,7
 80040e0:	20824b16 	blt	r4,r2,8004a10 <___vfprintf_internal_r+0x1190>
 80040e4:	42000204 	addi	r8,r8,8
 80040e8:	8880400c 	andi	r2,r17,256
 80040ec:	1001761e 	bne	r2,zero,80046c8 <___vfprintf_internal_r+0xe48>
 80040f0:	d8811f17 	ldw	r2,1148(sp)
 80040f4:	db013117 	ldw	r12,1220(sp)
 80040f8:	1c87883a 	add	r3,r3,r18
 80040fc:	10800044 	addi	r2,r2,1
 8004100:	43000015 	stw	r12,0(r8)
 8004104:	44800115 	stw	r18,4(r8)
 8004108:	d8c12015 	stw	r3,1152(sp)
 800410c:	d8811f15 	stw	r2,1148(sp)
 8004110:	010001c4 	movi	r4,7
 8004114:	20822616 	blt	r4,r2,80049b0 <___vfprintf_internal_r+0x1130>
 8004118:	42000204 	addi	r8,r8,8
 800411c:	8c40010c 	andi	r17,r17,4
 8004120:	88003126 	beq	r17,zero,80041e8 <___vfprintf_internal_r+0x968>
 8004124:	db012e17 	ldw	r12,1208(sp)
 8004128:	dac12b17 	ldw	r11,1196(sp)
 800412c:	62e1c83a 	sub	r16,r12,r11
 8004130:	04002d0e 	bge	zero,r16,80041e8 <___vfprintf_internal_r+0x968>
 8004134:	04400404 	movi	r17,16
 8004138:	d8811f17 	ldw	r2,1148(sp)
 800413c:	8c04df0e 	bge	r17,r16,80054bc <___vfprintf_internal_r+0x1c3c>
 8004140:	010200b4 	movhi	r4,2050
 8004144:	2132a684 	addi	r4,r4,-13670
 8004148:	d9013615 	stw	r4,1240(sp)
 800414c:	048001c4 	movi	r18,7
 8004150:	00000306 	br	8004160 <___vfprintf_internal_r+0x8e0>
 8004154:	843ffc04 	addi	r16,r16,-16
 8004158:	42000204 	addi	r8,r8,8
 800415c:	8c00130e 	bge	r17,r16,80041ac <___vfprintf_internal_r+0x92c>
 8004160:	014200b4 	movhi	r5,2050
 8004164:	18c00404 	addi	r3,r3,16
 8004168:	10800044 	addi	r2,r2,1
 800416c:	2972a684 	addi	r5,r5,-13670
 8004170:	41400015 	stw	r5,0(r8)
 8004174:	44400115 	stw	r17,4(r8)
 8004178:	d8c12015 	stw	r3,1152(sp)
 800417c:	d8811f15 	stw	r2,1148(sp)
 8004180:	90bff40e 	bge	r18,r2,8004154 <__alt_data_end+0xfc004154>
 8004184:	b009883a 	mov	r4,r22
 8004188:	b80b883a 	mov	r5,r23
 800418c:	d9811e04 	addi	r6,sp,1144
 8004190:	800a9900 	call	800a990 <__sprint_r>
 8004194:	103ed11e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004198:	843ffc04 	addi	r16,r16,-16
 800419c:	d8c12017 	ldw	r3,1152(sp)
 80041a0:	d8811f17 	ldw	r2,1148(sp)
 80041a4:	da000404 	addi	r8,sp,16
 80041a8:	8c3fed16 	blt	r17,r16,8004160 <__alt_data_end+0xfc004160>
 80041ac:	dac13617 	ldw	r11,1240(sp)
 80041b0:	1c07883a 	add	r3,r3,r16
 80041b4:	10800044 	addi	r2,r2,1
 80041b8:	42c00015 	stw	r11,0(r8)
 80041bc:	44000115 	stw	r16,4(r8)
 80041c0:	d8c12015 	stw	r3,1152(sp)
 80041c4:	d8811f15 	stw	r2,1148(sp)
 80041c8:	010001c4 	movi	r4,7
 80041cc:	2080060e 	bge	r4,r2,80041e8 <___vfprintf_internal_r+0x968>
 80041d0:	b009883a 	mov	r4,r22
 80041d4:	b80b883a 	mov	r5,r23
 80041d8:	d9811e04 	addi	r6,sp,1144
 80041dc:	800a9900 	call	800a990 <__sprint_r>
 80041e0:	103ebe1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 80041e4:	d8c12017 	ldw	r3,1152(sp)
 80041e8:	d8812b17 	ldw	r2,1196(sp)
 80041ec:	db012e17 	ldw	r12,1208(sp)
 80041f0:	1300010e 	bge	r2,r12,80041f8 <___vfprintf_internal_r+0x978>
 80041f4:	6005883a 	mov	r2,r12
 80041f8:	dac12f17 	ldw	r11,1212(sp)
 80041fc:	5897883a 	add	r11,r11,r2
 8004200:	dac12f15 	stw	r11,1212(sp)
 8004204:	1801f21e 	bne	r3,zero,80049d0 <___vfprintf_internal_r+0x1150>
 8004208:	d8011f15 	stw	zero,1148(sp)
 800420c:	da000404 	addi	r8,sp,16
 8004210:	003dd806 	br	8003974 <__alt_data_end+0xfc003974>
 8004214:	8c400414 	ori	r17,r17,16
 8004218:	d8c12a15 	stw	r3,1192(sp)
 800421c:	88c0080c 	andi	r3,r17,32
 8004220:	d8812d17 	ldw	r2,1204(sp)
 8004224:	18004626 	beq	r3,zero,8004340 <___vfprintf_internal_r+0xac0>
 8004228:	dac12d17 	ldw	r11,1204(sp)
 800422c:	14c00017 	ldw	r19,0(r2)
 8004230:	17000117 	ldw	fp,4(r2)
 8004234:	5ac00204 	addi	r11,r11,8
 8004238:	dac12d15 	stw	r11,1204(sp)
 800423c:	00800044 	movi	r2,1
 8004240:	9f06b03a 	or	r3,r19,fp
 8004244:	003f0006 	br	8003e48 <__alt_data_end+0xfc003e48>
 8004248:	1805883a 	mov	r2,r3
 800424c:	d8012e15 	stw	zero,1208(sp)
 8004250:	82fff404 	addi	r11,r16,-48
 8004254:	0019883a 	mov	r12,zero
 8004258:	14000007 	ldb	r16,0(r2)
 800425c:	630002a4 	muli	r12,r12,10
 8004260:	18c00044 	addi	r3,r3,1
 8004264:	1805883a 	mov	r2,r3
 8004268:	62d9883a 	add	r12,r12,r11
 800426c:	82fff404 	addi	r11,r16,-48
 8004270:	2afff92e 	bgeu	r5,r11,8004258 <__alt_data_end+0xfc004258>
 8004274:	db012e15 	stw	r12,1208(sp)
 8004278:	003de906 	br	8003a20 <__alt_data_end+0xfc003a20>
 800427c:	8c400414 	ori	r17,r17,16
 8004280:	d8c12a15 	stw	r3,1192(sp)
 8004284:	d9812785 	stb	r6,1182(sp)
 8004288:	8880080c 	andi	r2,r17,32
 800428c:	d8c12d17 	ldw	r3,1204(sp)
 8004290:	10007a26 	beq	r2,zero,800447c <___vfprintf_internal_r+0xbfc>
 8004294:	db012d17 	ldw	r12,1204(sp)
 8004298:	18800117 	ldw	r2,4(r3)
 800429c:	1cc00017 	ldw	r19,0(r3)
 80042a0:	63000204 	addi	r12,r12,8
 80042a4:	db012d15 	stw	r12,1204(sp)
 80042a8:	1039883a 	mov	fp,r2
 80042ac:	10031016 	blt	r2,zero,8004ef0 <___vfprintf_internal_r+0x1670>
 80042b0:	dd412783 	ldbu	r21,1182(sp)
 80042b4:	da413215 	stw	r9,1224(sp)
 80042b8:	00800044 	movi	r2,1
 80042bc:	9f06b03a 	or	r3,r19,fp
 80042c0:	003ee406 	br	8003e54 <__alt_data_end+0xfc003e54>
 80042c4:	030200b4 	movhi	r12,2050
 80042c8:	63329604 	addi	r12,r12,-13736
 80042cc:	d8c12a15 	stw	r3,1192(sp)
 80042d0:	d9812785 	stb	r6,1182(sp)
 80042d4:	db013b15 	stw	r12,1260(sp)
 80042d8:	88c0080c 	andi	r3,r17,32
 80042dc:	d8812d17 	ldw	r2,1204(sp)
 80042e0:	18002b26 	beq	r3,zero,8004390 <___vfprintf_internal_r+0xb10>
 80042e4:	dac12d17 	ldw	r11,1204(sp)
 80042e8:	14c00017 	ldw	r19,0(r2)
 80042ec:	17000117 	ldw	fp,4(r2)
 80042f0:	5ac00204 	addi	r11,r11,8
 80042f4:	dac12d15 	stw	r11,1204(sp)
 80042f8:	8880004c 	andi	r2,r17,1
 80042fc:	10025b26 	beq	r2,zero,8004c6c <___vfprintf_internal_r+0x13ec>
 8004300:	9f06b03a 	or	r3,r19,fp
 8004304:	18037026 	beq	r3,zero,80050c8 <___vfprintf_internal_r+0x1848>
 8004308:	00800c04 	movi	r2,48
 800430c:	d8812705 	stb	r2,1180(sp)
 8004310:	dc012745 	stb	r16,1181(sp)
 8004314:	8c400094 	ori	r17,r17,2
 8004318:	00800084 	movi	r2,2
 800431c:	003eca06 	br	8003e48 <__alt_data_end+0xfc003e48>
 8004320:	8c400814 	ori	r17,r17,32
 8004324:	1805883a 	mov	r2,r3
 8004328:	1c000007 	ldb	r16,0(r3)
 800432c:	003dbb06 	br	8003a1c <__alt_data_end+0xfc003a1c>
 8004330:	d8c12a15 	stw	r3,1192(sp)
 8004334:	88c0080c 	andi	r3,r17,32
 8004338:	d8812d17 	ldw	r2,1204(sp)
 800433c:	183fba1e 	bne	r3,zero,8004228 <__alt_data_end+0xfc004228>
 8004340:	88c0040c 	andi	r3,r17,16
 8004344:	18024c1e 	bne	r3,zero,8004c78 <___vfprintf_internal_r+0x13f8>
 8004348:	88c0100c 	andi	r3,r17,64
 800434c:	18024a26 	beq	r3,zero,8004c78 <___vfprintf_internal_r+0x13f8>
 8004350:	dac12d17 	ldw	r11,1204(sp)
 8004354:	14c0000b 	ldhu	r19,0(r2)
 8004358:	0039883a 	mov	fp,zero
 800435c:	5ac00104 	addi	r11,r11,4
 8004360:	dac12d15 	stw	r11,1204(sp)
 8004364:	00800044 	movi	r2,1
 8004368:	9807883a 	mov	r3,r19
 800436c:	003eb606 	br	8003e48 <__alt_data_end+0xfc003e48>
 8004370:	008200b4 	movhi	r2,2050
 8004374:	10b29b04 	addi	r2,r2,-13716
 8004378:	d8c12a15 	stw	r3,1192(sp)
 800437c:	d8813b15 	stw	r2,1260(sp)
 8004380:	d9812785 	stb	r6,1182(sp)
 8004384:	88c0080c 	andi	r3,r17,32
 8004388:	d8812d17 	ldw	r2,1204(sp)
 800438c:	183fd51e 	bne	r3,zero,80042e4 <__alt_data_end+0xfc0042e4>
 8004390:	88c0040c 	andi	r3,r17,16
 8004394:	18034126 	beq	r3,zero,800509c <___vfprintf_internal_r+0x181c>
 8004398:	db012d17 	ldw	r12,1204(sp)
 800439c:	14c00017 	ldw	r19,0(r2)
 80043a0:	0039883a 	mov	fp,zero
 80043a4:	63000104 	addi	r12,r12,4
 80043a8:	db012d15 	stw	r12,1204(sp)
 80043ac:	003fd206 	br	80042f8 <__alt_data_end+0xfc0042f8>
 80043b0:	1c000007 	ldb	r16,0(r3)
 80043b4:	81c3d626 	beq	r16,r7,8005310 <___vfprintf_internal_r+0x1a90>
 80043b8:	8c400414 	ori	r17,r17,16
 80043bc:	1805883a 	mov	r2,r3
 80043c0:	003d9606 	br	8003a1c <__alt_data_end+0xfc003a1c>
 80043c4:	d8c12a15 	stw	r3,1192(sp)
 80043c8:	d9812785 	stb	r6,1182(sp)
 80043cc:	8880080c 	andi	r2,r17,32
 80043d0:	10033f26 	beq	r2,zero,80050d0 <___vfprintf_internal_r+0x1850>
 80043d4:	db012d17 	ldw	r12,1204(sp)
 80043d8:	dac12f17 	ldw	r11,1212(sp)
 80043dc:	60800017 	ldw	r2,0(r12)
 80043e0:	5807d7fa 	srai	r3,r11,31
 80043e4:	63000104 	addi	r12,r12,4
 80043e8:	db012d15 	stw	r12,1204(sp)
 80043ec:	12c00015 	stw	r11,0(r2)
 80043f0:	10c00115 	stw	r3,4(r2)
 80043f4:	003d5f06 	br	8003974 <__alt_data_end+0xfc003974>
 80043f8:	d8c12a15 	stw	r3,1192(sp)
 80043fc:	88c0080c 	andi	r3,r17,32
 8004400:	d8812d17 	ldw	r2,1204(sp)
 8004404:	183e891e 	bne	r3,zero,8003e2c <__alt_data_end+0xfc003e2c>
 8004408:	88c0040c 	andi	r3,r17,16
 800440c:	1801ea1e 	bne	r3,zero,8004bb8 <___vfprintf_internal_r+0x1338>
 8004410:	88c0100c 	andi	r3,r17,64
 8004414:	1801e826 	beq	r3,zero,8004bb8 <___vfprintf_internal_r+0x1338>
 8004418:	db012d17 	ldw	r12,1204(sp)
 800441c:	14c0000b 	ldhu	r19,0(r2)
 8004420:	0039883a 	mov	fp,zero
 8004424:	63000104 	addi	r12,r12,4
 8004428:	db012d15 	stw	r12,1204(sp)
 800442c:	0005883a 	mov	r2,zero
 8004430:	9807883a 	mov	r3,r19
 8004434:	003e8406 	br	8003e48 <__alt_data_end+0xfc003e48>
 8004438:	30803fcc 	andi	r2,r6,255
 800443c:	1080201c 	xori	r2,r2,128
 8004440:	10bfe004 	addi	r2,r2,-128
 8004444:	10031d1e 	bne	r2,zero,80050bc <___vfprintf_internal_r+0x183c>
 8004448:	1805883a 	mov	r2,r3
 800444c:	01800804 	movi	r6,32
 8004450:	1c000007 	ldb	r16,0(r3)
 8004454:	003d7106 	br	8003a1c <__alt_data_end+0xfc003a1c>
 8004458:	8c400054 	ori	r17,r17,1
 800445c:	1805883a 	mov	r2,r3
 8004460:	1c000007 	ldb	r16,0(r3)
 8004464:	003d6d06 	br	8003a1c <__alt_data_end+0xfc003a1c>
 8004468:	d8c12a15 	stw	r3,1192(sp)
 800446c:	d9812785 	stb	r6,1182(sp)
 8004470:	8880080c 	andi	r2,r17,32
 8004474:	d8c12d17 	ldw	r3,1204(sp)
 8004478:	103f861e 	bne	r2,zero,8004294 <__alt_data_end+0xfc004294>
 800447c:	8880040c 	andi	r2,r17,16
 8004480:	1001f31e 	bne	r2,zero,8004c50 <___vfprintf_internal_r+0x13d0>
 8004484:	8880100c 	andi	r2,r17,64
 8004488:	1001f126 	beq	r2,zero,8004c50 <___vfprintf_internal_r+0x13d0>
 800448c:	1cc0000f 	ldh	r19,0(r3)
 8004490:	db012d17 	ldw	r12,1204(sp)
 8004494:	9839d7fa 	srai	fp,r19,31
 8004498:	63000104 	addi	r12,r12,4
 800449c:	db012d15 	stw	r12,1204(sp)
 80044a0:	e005883a 	mov	r2,fp
 80044a4:	003f8106 	br	80042ac <__alt_data_end+0xfc0042ac>
 80044a8:	8c401014 	ori	r17,r17,64
 80044ac:	1805883a 	mov	r2,r3
 80044b0:	1c000007 	ldb	r16,0(r3)
 80044b4:	003d5906 	br	8003a1c <__alt_data_end+0xfc003a1c>
 80044b8:	db012d17 	ldw	r12,1204(sp)
 80044bc:	d8c12a15 	stw	r3,1192(sp)
 80044c0:	00c00044 	movi	r3,1
 80044c4:	60800017 	ldw	r2,0(r12)
 80044c8:	63000104 	addi	r12,r12,4
 80044cc:	d8c12b15 	stw	r3,1196(sp)
 80044d0:	d8012785 	stb	zero,1182(sp)
 80044d4:	d8810405 	stb	r2,1040(sp)
 80044d8:	db012d15 	stw	r12,1204(sp)
 80044dc:	dac10404 	addi	r11,sp,1040
 80044e0:	1825883a 	mov	r18,r3
 80044e4:	d8013215 	stw	zero,1224(sp)
 80044e8:	d8013415 	stw	zero,1232(sp)
 80044ec:	dac13115 	stw	r11,1220(sp)
 80044f0:	0005883a 	mov	r2,zero
 80044f4:	003e7d06 	br	8003eec <__alt_data_end+0xfc003eec>
 80044f8:	db012d17 	ldw	r12,1204(sp)
 80044fc:	00800c04 	movi	r2,48
 8004500:	d8812705 	stb	r2,1180(sp)
 8004504:	64c00017 	ldw	r19,0(r12)
 8004508:	00801e04 	movi	r2,120
 800450c:	d8812745 	stb	r2,1181(sp)
 8004510:	008200b4 	movhi	r2,2050
 8004514:	10b29b04 	addi	r2,r2,-13716
 8004518:	63000104 	addi	r12,r12,4
 800451c:	d8c12a15 	stw	r3,1192(sp)
 8004520:	d8813b15 	stw	r2,1260(sp)
 8004524:	0039883a 	mov	fp,zero
 8004528:	8c400094 	ori	r17,r17,2
 800452c:	db012d15 	stw	r12,1204(sp)
 8004530:	00800084 	movi	r2,2
 8004534:	04001e04 	movi	r16,120
 8004538:	9807883a 	mov	r3,r19
 800453c:	003e4206 	br	8003e48 <__alt_data_end+0xfc003e48>
 8004540:	dac12d17 	ldw	r11,1204(sp)
 8004544:	db012d17 	ldw	r12,1204(sp)
 8004548:	d8c12a15 	stw	r3,1192(sp)
 800454c:	5ac00017 	ldw	r11,0(r11)
 8004550:	d8012785 	stb	zero,1182(sp)
 8004554:	64c00104 	addi	r19,r12,4
 8004558:	dac13115 	stw	r11,1220(sp)
 800455c:	5803e826 	beq	r11,zero,8005500 <___vfprintf_internal_r+0x1c80>
 8004560:	d9013117 	ldw	r4,1220(sp)
 8004564:	48037a16 	blt	r9,zero,8005350 <___vfprintf_internal_r+0x1ad0>
 8004568:	480d883a 	mov	r6,r9
 800456c:	000b883a 	mov	r5,zero
 8004570:	da013f15 	stw	r8,1276(sp)
 8004574:	da413e15 	stw	r9,1272(sp)
 8004578:	8008d580 	call	8008d58 <memchr>
 800457c:	da013f17 	ldw	r8,1276(sp)
 8004580:	da413e17 	ldw	r9,1272(sp)
 8004584:	10044426 	beq	r2,zero,8005698 <___vfprintf_internal_r+0x1e18>
 8004588:	d8c13117 	ldw	r3,1220(sp)
 800458c:	10e5c83a 	sub	r18,r2,r3
 8004590:	4c834416 	blt	r9,r18,80052a4 <___vfprintf_internal_r+0x1a24>
 8004594:	9005883a 	mov	r2,r18
 8004598:	90037216 	blt	r18,zero,8005364 <___vfprintf_internal_r+0x1ae4>
 800459c:	dd412783 	ldbu	r21,1182(sp)
 80045a0:	d8812b15 	stw	r2,1196(sp)
 80045a4:	dcc12d15 	stw	r19,1204(sp)
 80045a8:	d8013215 	stw	zero,1224(sp)
 80045ac:	d8013415 	stw	zero,1232(sp)
 80045b0:	003e4706 	br	8003ed0 <__alt_data_end+0xfc003ed0>
 80045b4:	dac12d17 	ldw	r11,1204(sp)
 80045b8:	db012d17 	ldw	r12,1204(sp)
 80045bc:	5ac00017 	ldw	r11,0(r11)
 80045c0:	dac12e15 	stw	r11,1208(sp)
 80045c4:	62c00104 	addi	r11,r12,4
 80045c8:	db012e17 	ldw	r12,1208(sp)
 80045cc:	60034a16 	blt	r12,zero,80052f8 <___vfprintf_internal_r+0x1a78>
 80045d0:	dac12d15 	stw	r11,1204(sp)
 80045d4:	1805883a 	mov	r2,r3
 80045d8:	1c000007 	ldb	r16,0(r3)
 80045dc:	003d0f06 	br	8003a1c <__alt_data_end+0xfc003a1c>
 80045e0:	1805883a 	mov	r2,r3
 80045e4:	01800ac4 	movi	r6,43
 80045e8:	1c000007 	ldb	r16,0(r3)
 80045ec:	003d0b06 	br	8003a1c <__alt_data_end+0xfc003a1c>
 80045f0:	d8c12a15 	stw	r3,1192(sp)
 80045f4:	d9812785 	stb	r6,1182(sp)
 80045f8:	803db226 	beq	r16,zero,8003cc4 <__alt_data_end+0xfc003cc4>
 80045fc:	00c00044 	movi	r3,1
 8004600:	d8c12b15 	stw	r3,1196(sp)
 8004604:	dc010405 	stb	r16,1040(sp)
 8004608:	d8012785 	stb	zero,1182(sp)
 800460c:	003fb306 	br	80044dc <__alt_data_end+0xfc0044dc>
 8004610:	d8c12017 	ldw	r3,1152(sp)
 8004614:	003e6d06 	br	8003fcc <__alt_data_end+0xfc003fcc>
 8004618:	10803fcc 	andi	r2,r2,255
 800461c:	00c00044 	movi	r3,1
 8004620:	10fe141e 	bne	r2,r3,8003e74 <__alt_data_end+0xfc003e74>
 8004624:	e000021e 	bne	fp,zero,8004630 <___vfprintf_internal_r+0xdb0>
 8004628:	00800244 	movi	r2,9
 800462c:	14c0202e 	bgeu	r2,r19,80046b0 <___vfprintf_internal_r+0xe30>
 8004630:	dc012b15 	stw	r16,1196(sp)
 8004634:	dc412c15 	stw	r17,1200(sp)
 8004638:	9821883a 	mov	r16,r19
 800463c:	e023883a 	mov	r17,fp
 8004640:	dc810e04 	addi	r18,sp,1080
 8004644:	4027883a 	mov	r19,r8
 8004648:	4839883a 	mov	fp,r9
 800464c:	8009883a 	mov	r4,r16
 8004650:	880b883a 	mov	r5,r17
 8004654:	01800284 	movi	r6,10
 8004658:	000f883a 	mov	r7,zero
 800465c:	800cc200 	call	800cc20 <__umoddi3>
 8004660:	10800c04 	addi	r2,r2,48
 8004664:	94bfffc4 	addi	r18,r18,-1
 8004668:	8009883a 	mov	r4,r16
 800466c:	880b883a 	mov	r5,r17
 8004670:	01800284 	movi	r6,10
 8004674:	000f883a 	mov	r7,zero
 8004678:	90800005 	stb	r2,0(r18)
 800467c:	800c6600 	call	800c660 <__udivdi3>
 8004680:	1021883a 	mov	r16,r2
 8004684:	10c4b03a 	or	r2,r2,r3
 8004688:	1823883a 	mov	r17,r3
 800468c:	103fef1e 	bne	r2,zero,800464c <__alt_data_end+0xfc00464c>
 8004690:	dac12817 	ldw	r11,1184(sp)
 8004694:	dc813115 	stw	r18,1220(sp)
 8004698:	dc012b17 	ldw	r16,1196(sp)
 800469c:	9811883a 	mov	r8,r19
 80046a0:	dc412c17 	ldw	r17,1200(sp)
 80046a4:	e013883a 	mov	r9,fp
 80046a8:	5ca5c83a 	sub	r18,r11,r18
 80046ac:	003e0306 	br	8003ebc <__alt_data_end+0xfc003ebc>
 80046b0:	9cc00c04 	addi	r19,r19,48
 80046b4:	d8c10dc4 	addi	r3,sp,1079
 80046b8:	dcc10dc5 	stb	r19,1079(sp)
 80046bc:	dc813c17 	ldw	r18,1264(sp)
 80046c0:	d8c13115 	stw	r3,1220(sp)
 80046c4:	003dfd06 	br	8003ebc <__alt_data_end+0xfc003ebc>
 80046c8:	00801944 	movi	r2,101
 80046cc:	1400710e 	bge	r2,r16,8004894 <___vfprintf_internal_r+0x1014>
 80046d0:	d9013717 	ldw	r4,1244(sp)
 80046d4:	d9413917 	ldw	r5,1252(sp)
 80046d8:	000d883a 	mov	r6,zero
 80046dc:	000f883a 	mov	r7,zero
 80046e0:	d8c13d15 	stw	r3,1268(sp)
 80046e4:	da013f15 	stw	r8,1276(sp)
 80046e8:	800e4440 	call	800e444 <__eqdf2>
 80046ec:	d8c13d17 	ldw	r3,1268(sp)
 80046f0:	da013f17 	ldw	r8,1276(sp)
 80046f4:	1000ef1e 	bne	r2,zero,8004ab4 <___vfprintf_internal_r+0x1234>
 80046f8:	d8811f17 	ldw	r2,1148(sp)
 80046fc:	010200b4 	movhi	r4,2050
 8004700:	2132a204 	addi	r4,r4,-13688
 8004704:	18c00044 	addi	r3,r3,1
 8004708:	10800044 	addi	r2,r2,1
 800470c:	41000015 	stw	r4,0(r8)
 8004710:	01000044 	movi	r4,1
 8004714:	41000115 	stw	r4,4(r8)
 8004718:	d8c12015 	stw	r3,1152(sp)
 800471c:	d8811f15 	stw	r2,1148(sp)
 8004720:	010001c4 	movi	r4,7
 8004724:	20828e16 	blt	r4,r2,8005160 <___vfprintf_internal_r+0x18e0>
 8004728:	42000204 	addi	r8,r8,8
 800472c:	d8812617 	ldw	r2,1176(sp)
 8004730:	dac13317 	ldw	r11,1228(sp)
 8004734:	12c00216 	blt	r2,r11,8004740 <___vfprintf_internal_r+0xec0>
 8004738:	8880004c 	andi	r2,r17,1
 800473c:	103e7726 	beq	r2,zero,800411c <__alt_data_end+0xfc00411c>
 8004740:	db013817 	ldw	r12,1248(sp)
 8004744:	d8811f17 	ldw	r2,1148(sp)
 8004748:	dac13517 	ldw	r11,1236(sp)
 800474c:	1b07883a 	add	r3,r3,r12
 8004750:	10800044 	addi	r2,r2,1
 8004754:	42c00015 	stw	r11,0(r8)
 8004758:	43000115 	stw	r12,4(r8)
 800475c:	d8c12015 	stw	r3,1152(sp)
 8004760:	d8811f15 	stw	r2,1148(sp)
 8004764:	010001c4 	movi	r4,7
 8004768:	2082ed16 	blt	r4,r2,8005320 <___vfprintf_internal_r+0x1aa0>
 800476c:	42000204 	addi	r8,r8,8
 8004770:	db013317 	ldw	r12,1228(sp)
 8004774:	643fffc4 	addi	r16,r12,-1
 8004778:	043e680e 	bge	zero,r16,800411c <__alt_data_end+0xfc00411c>
 800477c:	04800404 	movi	r18,16
 8004780:	d8811f17 	ldw	r2,1148(sp)
 8004784:	94007e0e 	bge	r18,r16,8004980 <___vfprintf_internal_r+0x1100>
 8004788:	014200b4 	movhi	r5,2050
 800478c:	2972a284 	addi	r5,r5,-13686
 8004790:	d9412c15 	stw	r5,1200(sp)
 8004794:	054001c4 	movi	r21,7
 8004798:	00000306 	br	80047a8 <___vfprintf_internal_r+0xf28>
 800479c:	42000204 	addi	r8,r8,8
 80047a0:	843ffc04 	addi	r16,r16,-16
 80047a4:	9400790e 	bge	r18,r16,800498c <___vfprintf_internal_r+0x110c>
 80047a8:	18c00404 	addi	r3,r3,16
 80047ac:	10800044 	addi	r2,r2,1
 80047b0:	45000015 	stw	r20,0(r8)
 80047b4:	44800115 	stw	r18,4(r8)
 80047b8:	d8c12015 	stw	r3,1152(sp)
 80047bc:	d8811f15 	stw	r2,1148(sp)
 80047c0:	a8bff60e 	bge	r21,r2,800479c <__alt_data_end+0xfc00479c>
 80047c4:	b009883a 	mov	r4,r22
 80047c8:	b80b883a 	mov	r5,r23
 80047cc:	d9811e04 	addi	r6,sp,1144
 80047d0:	800a9900 	call	800a990 <__sprint_r>
 80047d4:	103d411e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 80047d8:	d8c12017 	ldw	r3,1152(sp)
 80047dc:	d8811f17 	ldw	r2,1148(sp)
 80047e0:	da000404 	addi	r8,sp,16
 80047e4:	003fee06 	br	80047a0 <__alt_data_end+0xfc0047a0>
 80047e8:	dac12e17 	ldw	r11,1208(sp)
 80047ec:	db012b17 	ldw	r12,1196(sp)
 80047f0:	5b2bc83a 	sub	r21,r11,r12
 80047f4:	057e130e 	bge	zero,r21,8004044 <__alt_data_end+0xfc004044>
 80047f8:	07000404 	movi	fp,16
 80047fc:	d8811f17 	ldw	r2,1148(sp)
 8004800:	e543640e 	bge	fp,r21,8005594 <___vfprintf_internal_r+0x1d14>
 8004804:	014200b4 	movhi	r5,2050
 8004808:	2972a284 	addi	r5,r5,-13686
 800480c:	d9412c15 	stw	r5,1200(sp)
 8004810:	04c001c4 	movi	r19,7
 8004814:	00000306 	br	8004824 <___vfprintf_internal_r+0xfa4>
 8004818:	ad7ffc04 	addi	r21,r21,-16
 800481c:	42000204 	addi	r8,r8,8
 8004820:	e540110e 	bge	fp,r21,8004868 <___vfprintf_internal_r+0xfe8>
 8004824:	18c00404 	addi	r3,r3,16
 8004828:	10800044 	addi	r2,r2,1
 800482c:	45000015 	stw	r20,0(r8)
 8004830:	47000115 	stw	fp,4(r8)
 8004834:	d8c12015 	stw	r3,1152(sp)
 8004838:	d8811f15 	stw	r2,1148(sp)
 800483c:	98bff60e 	bge	r19,r2,8004818 <__alt_data_end+0xfc004818>
 8004840:	b009883a 	mov	r4,r22
 8004844:	b80b883a 	mov	r5,r23
 8004848:	d9811e04 	addi	r6,sp,1144
 800484c:	800a9900 	call	800a990 <__sprint_r>
 8004850:	103d221e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004854:	ad7ffc04 	addi	r21,r21,-16
 8004858:	d8c12017 	ldw	r3,1152(sp)
 800485c:	d8811f17 	ldw	r2,1148(sp)
 8004860:	da000404 	addi	r8,sp,16
 8004864:	e57fef16 	blt	fp,r21,8004824 <__alt_data_end+0xfc004824>
 8004868:	dac12c17 	ldw	r11,1200(sp)
 800486c:	1d47883a 	add	r3,r3,r21
 8004870:	10800044 	addi	r2,r2,1
 8004874:	42c00015 	stw	r11,0(r8)
 8004878:	45400115 	stw	r21,4(r8)
 800487c:	d8c12015 	stw	r3,1152(sp)
 8004880:	d8811f15 	stw	r2,1148(sp)
 8004884:	010001c4 	movi	r4,7
 8004888:	20819116 	blt	r4,r2,8004ed0 <___vfprintf_internal_r+0x1650>
 800488c:	42000204 	addi	r8,r8,8
 8004890:	003dec06 	br	8004044 <__alt_data_end+0xfc004044>
 8004894:	db013317 	ldw	r12,1228(sp)
 8004898:	00800044 	movi	r2,1
 800489c:	18c00044 	addi	r3,r3,1
 80048a0:	1301530e 	bge	r2,r12,8004df0 <___vfprintf_internal_r+0x1570>
 80048a4:	dc011f17 	ldw	r16,1148(sp)
 80048a8:	dac13117 	ldw	r11,1220(sp)
 80048ac:	00800044 	movi	r2,1
 80048b0:	84000044 	addi	r16,r16,1
 80048b4:	40800115 	stw	r2,4(r8)
 80048b8:	42c00015 	stw	r11,0(r8)
 80048bc:	d8c12015 	stw	r3,1152(sp)
 80048c0:	dc011f15 	stw	r16,1148(sp)
 80048c4:	008001c4 	movi	r2,7
 80048c8:	14016b16 	blt	r2,r16,8004e78 <___vfprintf_internal_r+0x15f8>
 80048cc:	42000204 	addi	r8,r8,8
 80048d0:	db013817 	ldw	r12,1248(sp)
 80048d4:	dac13517 	ldw	r11,1236(sp)
 80048d8:	84000044 	addi	r16,r16,1
 80048dc:	1b07883a 	add	r3,r3,r12
 80048e0:	42c00015 	stw	r11,0(r8)
 80048e4:	43000115 	stw	r12,4(r8)
 80048e8:	d8c12015 	stw	r3,1152(sp)
 80048ec:	dc011f15 	stw	r16,1148(sp)
 80048f0:	008001c4 	movi	r2,7
 80048f4:	14016916 	blt	r2,r16,8004e9c <___vfprintf_internal_r+0x161c>
 80048f8:	44800204 	addi	r18,r8,8
 80048fc:	d9013717 	ldw	r4,1244(sp)
 8004900:	d9413917 	ldw	r5,1252(sp)
 8004904:	000d883a 	mov	r6,zero
 8004908:	000f883a 	mov	r7,zero
 800490c:	d8c13d15 	stw	r3,1268(sp)
 8004910:	800e4440 	call	800e444 <__eqdf2>
 8004914:	d8c13d17 	ldw	r3,1268(sp)
 8004918:	db013317 	ldw	r12,1228(sp)
 800491c:	1000ae26 	beq	r2,zero,8004bd8 <___vfprintf_internal_r+0x1358>
 8004920:	dac13117 	ldw	r11,1220(sp)
 8004924:	60bfffc4 	addi	r2,r12,-1
 8004928:	1887883a 	add	r3,r3,r2
 800492c:	59000044 	addi	r4,r11,1
 8004930:	84000044 	addi	r16,r16,1
 8004934:	90800115 	stw	r2,4(r18)
 8004938:	91000015 	stw	r4,0(r18)
 800493c:	d8c12015 	stw	r3,1152(sp)
 8004940:	dc011f15 	stw	r16,1148(sp)
 8004944:	008001c4 	movi	r2,7
 8004948:	14014216 	blt	r2,r16,8004e54 <___vfprintf_internal_r+0x15d4>
 800494c:	94800204 	addi	r18,r18,8
 8004950:	dac13a17 	ldw	r11,1256(sp)
 8004954:	dd4122c4 	addi	r21,sp,1163
 8004958:	84000044 	addi	r16,r16,1
 800495c:	58c7883a 	add	r3,r11,r3
 8004960:	95400015 	stw	r21,0(r18)
 8004964:	92c00115 	stw	r11,4(r18)
 8004968:	d8c12015 	stw	r3,1152(sp)
 800496c:	dc011f15 	stw	r16,1148(sp)
 8004970:	008001c4 	movi	r2,7
 8004974:	14000e16 	blt	r2,r16,80049b0 <___vfprintf_internal_r+0x1130>
 8004978:	92000204 	addi	r8,r18,8
 800497c:	003de706 	br	800411c <__alt_data_end+0xfc00411c>
 8004980:	010200b4 	movhi	r4,2050
 8004984:	2132a284 	addi	r4,r4,-13686
 8004988:	d9012c15 	stw	r4,1200(sp)
 800498c:	dac12c17 	ldw	r11,1200(sp)
 8004990:	1c07883a 	add	r3,r3,r16
 8004994:	44000115 	stw	r16,4(r8)
 8004998:	42c00015 	stw	r11,0(r8)
 800499c:	10800044 	addi	r2,r2,1
 80049a0:	d8c12015 	stw	r3,1152(sp)
 80049a4:	d8811f15 	stw	r2,1148(sp)
 80049a8:	010001c4 	movi	r4,7
 80049ac:	20bdda0e 	bge	r4,r2,8004118 <__alt_data_end+0xfc004118>
 80049b0:	b009883a 	mov	r4,r22
 80049b4:	b80b883a 	mov	r5,r23
 80049b8:	d9811e04 	addi	r6,sp,1144
 80049bc:	800a9900 	call	800a990 <__sprint_r>
 80049c0:	103cc61e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 80049c4:	d8c12017 	ldw	r3,1152(sp)
 80049c8:	da000404 	addi	r8,sp,16
 80049cc:	003dd306 	br	800411c <__alt_data_end+0xfc00411c>
 80049d0:	b009883a 	mov	r4,r22
 80049d4:	b80b883a 	mov	r5,r23
 80049d8:	d9811e04 	addi	r6,sp,1144
 80049dc:	800a9900 	call	800a990 <__sprint_r>
 80049e0:	103e0926 	beq	r2,zero,8004208 <__alt_data_end+0xfc004208>
 80049e4:	003cbd06 	br	8003cdc <__alt_data_end+0xfc003cdc>
 80049e8:	10803fcc 	andi	r2,r2,255
 80049ec:	1000651e 	bne	r2,zero,8004b84 <___vfprintf_internal_r+0x1304>
 80049f0:	8880004c 	andi	r2,r17,1
 80049f4:	10013226 	beq	r2,zero,8004ec0 <___vfprintf_internal_r+0x1640>
 80049f8:	00800c04 	movi	r2,48
 80049fc:	d8c10dc4 	addi	r3,sp,1079
 8004a00:	d8810dc5 	stb	r2,1079(sp)
 8004a04:	dc813c17 	ldw	r18,1264(sp)
 8004a08:	d8c13115 	stw	r3,1220(sp)
 8004a0c:	003d2b06 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8004a10:	b009883a 	mov	r4,r22
 8004a14:	b80b883a 	mov	r5,r23
 8004a18:	d9811e04 	addi	r6,sp,1144
 8004a1c:	800a9900 	call	800a990 <__sprint_r>
 8004a20:	103cae1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004a24:	d8c12017 	ldw	r3,1152(sp)
 8004a28:	da000404 	addi	r8,sp,16
 8004a2c:	003dae06 	br	80040e8 <__alt_data_end+0xfc0040e8>
 8004a30:	b009883a 	mov	r4,r22
 8004a34:	b80b883a 	mov	r5,r23
 8004a38:	d9811e04 	addi	r6,sp,1144
 8004a3c:	800a9900 	call	800a990 <__sprint_r>
 8004a40:	103ca61e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004a44:	d8c12017 	ldw	r3,1152(sp)
 8004a48:	da000404 	addi	r8,sp,16
 8004a4c:	003d6c06 	br	8004000 <__alt_data_end+0xfc004000>
 8004a50:	b009883a 	mov	r4,r22
 8004a54:	b80b883a 	mov	r5,r23
 8004a58:	d9811e04 	addi	r6,sp,1144
 8004a5c:	800a9900 	call	800a990 <__sprint_r>
 8004a60:	103c9e1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004a64:	d8c12017 	ldw	r3,1152(sp)
 8004a68:	da000404 	addi	r8,sp,16
 8004a6c:	003d7206 	br	8004038 <__alt_data_end+0xfc004038>
 8004a70:	d9413b17 	ldw	r5,1260(sp)
 8004a74:	d8c10e04 	addi	r3,sp,1080
 8004a78:	988003cc 	andi	r2,r19,15
 8004a7c:	e008973a 	slli	r4,fp,28
 8004a80:	2885883a 	add	r2,r5,r2
 8004a84:	9826d13a 	srli	r19,r19,4
 8004a88:	10800003 	ldbu	r2,0(r2)
 8004a8c:	e038d13a 	srli	fp,fp,4
 8004a90:	18ffffc4 	addi	r3,r3,-1
 8004a94:	24e6b03a 	or	r19,r4,r19
 8004a98:	18800005 	stb	r2,0(r3)
 8004a9c:	9f04b03a 	or	r2,r19,fp
 8004aa0:	103ff51e 	bne	r2,zero,8004a78 <__alt_data_end+0xfc004a78>
 8004aa4:	db012817 	ldw	r12,1184(sp)
 8004aa8:	d8c13115 	stw	r3,1220(sp)
 8004aac:	60e5c83a 	sub	r18,r12,r3
 8004ab0:	003d0206 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8004ab4:	dc012617 	ldw	r16,1176(sp)
 8004ab8:	0401b10e 	bge	zero,r16,8005180 <___vfprintf_internal_r+0x1900>
 8004abc:	db013117 	ldw	r12,1220(sp)
 8004ac0:	dac13317 	ldw	r11,1228(sp)
 8004ac4:	62e1883a 	add	r16,r12,r11
 8004ac8:	db013417 	ldw	r12,1232(sp)
 8004acc:	5825883a 	mov	r18,r11
 8004ad0:	62c0010e 	bge	r12,r11,8004ad8 <___vfprintf_internal_r+0x1258>
 8004ad4:	6025883a 	mov	r18,r12
 8004ad8:	04800b0e 	bge	zero,r18,8004b08 <___vfprintf_internal_r+0x1288>
 8004adc:	d8811f17 	ldw	r2,1148(sp)
 8004ae0:	dac13117 	ldw	r11,1220(sp)
 8004ae4:	1c87883a 	add	r3,r3,r18
 8004ae8:	10800044 	addi	r2,r2,1
 8004aec:	42c00015 	stw	r11,0(r8)
 8004af0:	44800115 	stw	r18,4(r8)
 8004af4:	d8c12015 	stw	r3,1152(sp)
 8004af8:	d8811f15 	stw	r2,1148(sp)
 8004afc:	010001c4 	movi	r4,7
 8004b00:	20824f16 	blt	r4,r2,8005440 <___vfprintf_internal_r+0x1bc0>
 8004b04:	42000204 	addi	r8,r8,8
 8004b08:	90024b16 	blt	r18,zero,8005438 <___vfprintf_internal_r+0x1bb8>
 8004b0c:	db013417 	ldw	r12,1232(sp)
 8004b10:	64a5c83a 	sub	r18,r12,r18
 8004b14:	0480730e 	bge	zero,r18,8004ce4 <___vfprintf_internal_r+0x1464>
 8004b18:	05400404 	movi	r21,16
 8004b1c:	d8811f17 	ldw	r2,1148(sp)
 8004b20:	ac817d0e 	bge	r21,r18,8005118 <___vfprintf_internal_r+0x1898>
 8004b24:	014200b4 	movhi	r5,2050
 8004b28:	2972a284 	addi	r5,r5,-13686
 8004b2c:	d9412c15 	stw	r5,1200(sp)
 8004b30:	070001c4 	movi	fp,7
 8004b34:	00000306 	br	8004b44 <___vfprintf_internal_r+0x12c4>
 8004b38:	42000204 	addi	r8,r8,8
 8004b3c:	94bffc04 	addi	r18,r18,-16
 8004b40:	ac81780e 	bge	r21,r18,8005124 <___vfprintf_internal_r+0x18a4>
 8004b44:	18c00404 	addi	r3,r3,16
 8004b48:	10800044 	addi	r2,r2,1
 8004b4c:	45000015 	stw	r20,0(r8)
 8004b50:	45400115 	stw	r21,4(r8)
 8004b54:	d8c12015 	stw	r3,1152(sp)
 8004b58:	d8811f15 	stw	r2,1148(sp)
 8004b5c:	e0bff60e 	bge	fp,r2,8004b38 <__alt_data_end+0xfc004b38>
 8004b60:	b009883a 	mov	r4,r22
 8004b64:	b80b883a 	mov	r5,r23
 8004b68:	d9811e04 	addi	r6,sp,1144
 8004b6c:	800a9900 	call	800a990 <__sprint_r>
 8004b70:	103c5a1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004b74:	d8c12017 	ldw	r3,1152(sp)
 8004b78:	d8811f17 	ldw	r2,1148(sp)
 8004b7c:	da000404 	addi	r8,sp,16
 8004b80:	003fee06 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8004b84:	dac10e04 	addi	r11,sp,1080
 8004b88:	0025883a 	mov	r18,zero
 8004b8c:	dac13115 	stw	r11,1220(sp)
 8004b90:	003cca06 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8004b94:	b009883a 	mov	r4,r22
 8004b98:	b80b883a 	mov	r5,r23
 8004b9c:	d9811e04 	addi	r6,sp,1144
 8004ba0:	800a9900 	call	800a990 <__sprint_r>
 8004ba4:	103c4d1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004ba8:	d8c12017 	ldw	r3,1152(sp)
 8004bac:	d8812787 	ldb	r2,1182(sp)
 8004bb0:	da000404 	addi	r8,sp,16
 8004bb4:	003d0506 	br	8003fcc <__alt_data_end+0xfc003fcc>
 8004bb8:	dac12d17 	ldw	r11,1204(sp)
 8004bbc:	14c00017 	ldw	r19,0(r2)
 8004bc0:	0039883a 	mov	fp,zero
 8004bc4:	5ac00104 	addi	r11,r11,4
 8004bc8:	dac12d15 	stw	r11,1204(sp)
 8004bcc:	0005883a 	mov	r2,zero
 8004bd0:	9807883a 	mov	r3,r19
 8004bd4:	003c9c06 	br	8003e48 <__alt_data_end+0xfc003e48>
 8004bd8:	657fffc4 	addi	r21,r12,-1
 8004bdc:	057f5c0e 	bge	zero,r21,8004950 <__alt_data_end+0xfc004950>
 8004be0:	07000404 	movi	fp,16
 8004be4:	e5408f0e 	bge	fp,r21,8004e24 <___vfprintf_internal_r+0x15a4>
 8004be8:	010200b4 	movhi	r4,2050
 8004bec:	2132a284 	addi	r4,r4,-13686
 8004bf0:	d9012c15 	stw	r4,1200(sp)
 8004bf4:	01c001c4 	movi	r7,7
 8004bf8:	00000306 	br	8004c08 <___vfprintf_internal_r+0x1388>
 8004bfc:	94800204 	addi	r18,r18,8
 8004c00:	ad7ffc04 	addi	r21,r21,-16
 8004c04:	e5408a0e 	bge	fp,r21,8004e30 <___vfprintf_internal_r+0x15b0>
 8004c08:	18c00404 	addi	r3,r3,16
 8004c0c:	84000044 	addi	r16,r16,1
 8004c10:	95000015 	stw	r20,0(r18)
 8004c14:	97000115 	stw	fp,4(r18)
 8004c18:	d8c12015 	stw	r3,1152(sp)
 8004c1c:	dc011f15 	stw	r16,1148(sp)
 8004c20:	3c3ff60e 	bge	r7,r16,8004bfc <__alt_data_end+0xfc004bfc>
 8004c24:	b009883a 	mov	r4,r22
 8004c28:	b80b883a 	mov	r5,r23
 8004c2c:	d9811e04 	addi	r6,sp,1144
 8004c30:	d9c13d15 	stw	r7,1268(sp)
 8004c34:	800a9900 	call	800a990 <__sprint_r>
 8004c38:	d9c13d17 	ldw	r7,1268(sp)
 8004c3c:	103c271e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004c40:	d8c12017 	ldw	r3,1152(sp)
 8004c44:	dc011f17 	ldw	r16,1148(sp)
 8004c48:	dc800404 	addi	r18,sp,16
 8004c4c:	003fec06 	br	8004c00 <__alt_data_end+0xfc004c00>
 8004c50:	1cc00017 	ldw	r19,0(r3)
 8004c54:	dac12d17 	ldw	r11,1204(sp)
 8004c58:	9839d7fa 	srai	fp,r19,31
 8004c5c:	5ac00104 	addi	r11,r11,4
 8004c60:	dac12d15 	stw	r11,1204(sp)
 8004c64:	e005883a 	mov	r2,fp
 8004c68:	003d9006 	br	80042ac <__alt_data_end+0xfc0042ac>
 8004c6c:	00800084 	movi	r2,2
 8004c70:	9f06b03a 	or	r3,r19,fp
 8004c74:	003c7406 	br	8003e48 <__alt_data_end+0xfc003e48>
 8004c78:	db012d17 	ldw	r12,1204(sp)
 8004c7c:	14c00017 	ldw	r19,0(r2)
 8004c80:	0039883a 	mov	fp,zero
 8004c84:	63000104 	addi	r12,r12,4
 8004c88:	db012d15 	stw	r12,1204(sp)
 8004c8c:	00800044 	movi	r2,1
 8004c90:	9807883a 	mov	r3,r19
 8004c94:	003c6c06 	br	8003e48 <__alt_data_end+0xfc003e48>
 8004c98:	10803fcc 	andi	r2,r2,255
 8004c9c:	1080201c 	xori	r2,r2,128
 8004ca0:	10bfe004 	addi	r2,r2,-128
 8004ca4:	01000c04 	movi	r4,48
 8004ca8:	1101a526 	beq	r2,r4,8005340 <___vfprintf_internal_r+0x1ac0>
 8004cac:	dac13117 	ldw	r11,1220(sp)
 8004cb0:	db012817 	ldw	r12,1184(sp)
 8004cb4:	193fffc5 	stb	r4,-1(r3)
 8004cb8:	5affffc4 	addi	r11,r11,-1
 8004cbc:	dac13115 	stw	r11,1220(sp)
 8004cc0:	62e5c83a 	sub	r18,r12,r11
 8004cc4:	003c7d06 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8004cc8:	b009883a 	mov	r4,r22
 8004ccc:	b80b883a 	mov	r5,r23
 8004cd0:	d9811e04 	addi	r6,sp,1144
 8004cd4:	800a9900 	call	800a990 <__sprint_r>
 8004cd8:	103c001e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004cdc:	d8c12017 	ldw	r3,1152(sp)
 8004ce0:	da000404 	addi	r8,sp,16
 8004ce4:	db013117 	ldw	r12,1220(sp)
 8004ce8:	dac13417 	ldw	r11,1232(sp)
 8004cec:	d8812617 	ldw	r2,1176(sp)
 8004cf0:	62e5883a 	add	r18,r12,r11
 8004cf4:	db013317 	ldw	r12,1228(sp)
 8004cf8:	13000216 	blt	r2,r12,8004d04 <___vfprintf_internal_r+0x1484>
 8004cfc:	8900004c 	andi	r4,r17,1
 8004d00:	20000c26 	beq	r4,zero,8004d34 <___vfprintf_internal_r+0x14b4>
 8004d04:	dac13817 	ldw	r11,1248(sp)
 8004d08:	d9011f17 	ldw	r4,1148(sp)
 8004d0c:	db013517 	ldw	r12,1236(sp)
 8004d10:	1ac7883a 	add	r3,r3,r11
 8004d14:	21000044 	addi	r4,r4,1
 8004d18:	43000015 	stw	r12,0(r8)
 8004d1c:	42c00115 	stw	r11,4(r8)
 8004d20:	d8c12015 	stw	r3,1152(sp)
 8004d24:	d9011f15 	stw	r4,1148(sp)
 8004d28:	014001c4 	movi	r5,7
 8004d2c:	2901cc16 	blt	r5,r4,8005460 <___vfprintf_internal_r+0x1be0>
 8004d30:	42000204 	addi	r8,r8,8
 8004d34:	dac13317 	ldw	r11,1228(sp)
 8004d38:	8489c83a 	sub	r4,r16,r18
 8004d3c:	5885c83a 	sub	r2,r11,r2
 8004d40:	1021883a 	mov	r16,r2
 8004d44:	2080010e 	bge	r4,r2,8004d4c <___vfprintf_internal_r+0x14cc>
 8004d48:	2021883a 	mov	r16,r4
 8004d4c:	04000a0e 	bge	zero,r16,8004d78 <___vfprintf_internal_r+0x14f8>
 8004d50:	d9011f17 	ldw	r4,1148(sp)
 8004d54:	1c07883a 	add	r3,r3,r16
 8004d58:	44800015 	stw	r18,0(r8)
 8004d5c:	21000044 	addi	r4,r4,1
 8004d60:	44000115 	stw	r16,4(r8)
 8004d64:	d8c12015 	stw	r3,1152(sp)
 8004d68:	d9011f15 	stw	r4,1148(sp)
 8004d6c:	014001c4 	movi	r5,7
 8004d70:	2901d616 	blt	r5,r4,80054cc <___vfprintf_internal_r+0x1c4c>
 8004d74:	42000204 	addi	r8,r8,8
 8004d78:	8001df16 	blt	r16,zero,80054f8 <___vfprintf_internal_r+0x1c78>
 8004d7c:	1421c83a 	sub	r16,r2,r16
 8004d80:	043ce60e 	bge	zero,r16,800411c <__alt_data_end+0xfc00411c>
 8004d84:	04800404 	movi	r18,16
 8004d88:	d8811f17 	ldw	r2,1148(sp)
 8004d8c:	943efc0e 	bge	r18,r16,8004980 <__alt_data_end+0xfc004980>
 8004d90:	014200b4 	movhi	r5,2050
 8004d94:	2972a284 	addi	r5,r5,-13686
 8004d98:	d9412c15 	stw	r5,1200(sp)
 8004d9c:	054001c4 	movi	r21,7
 8004da0:	00000306 	br	8004db0 <___vfprintf_internal_r+0x1530>
 8004da4:	42000204 	addi	r8,r8,8
 8004da8:	843ffc04 	addi	r16,r16,-16
 8004dac:	943ef70e 	bge	r18,r16,800498c <__alt_data_end+0xfc00498c>
 8004db0:	18c00404 	addi	r3,r3,16
 8004db4:	10800044 	addi	r2,r2,1
 8004db8:	45000015 	stw	r20,0(r8)
 8004dbc:	44800115 	stw	r18,4(r8)
 8004dc0:	d8c12015 	stw	r3,1152(sp)
 8004dc4:	d8811f15 	stw	r2,1148(sp)
 8004dc8:	a8bff60e 	bge	r21,r2,8004da4 <__alt_data_end+0xfc004da4>
 8004dcc:	b009883a 	mov	r4,r22
 8004dd0:	b80b883a 	mov	r5,r23
 8004dd4:	d9811e04 	addi	r6,sp,1144
 8004dd8:	800a9900 	call	800a990 <__sprint_r>
 8004ddc:	103bbf1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004de0:	d8c12017 	ldw	r3,1152(sp)
 8004de4:	d8811f17 	ldw	r2,1148(sp)
 8004de8:	da000404 	addi	r8,sp,16
 8004dec:	003fee06 	br	8004da8 <__alt_data_end+0xfc004da8>
 8004df0:	8888703a 	and	r4,r17,r2
 8004df4:	203eab1e 	bne	r4,zero,80048a4 <__alt_data_end+0xfc0048a4>
 8004df8:	dc011f17 	ldw	r16,1148(sp)
 8004dfc:	db013117 	ldw	r12,1220(sp)
 8004e00:	40800115 	stw	r2,4(r8)
 8004e04:	84000044 	addi	r16,r16,1
 8004e08:	43000015 	stw	r12,0(r8)
 8004e0c:	d8c12015 	stw	r3,1152(sp)
 8004e10:	dc011f15 	stw	r16,1148(sp)
 8004e14:	008001c4 	movi	r2,7
 8004e18:	14000e16 	blt	r2,r16,8004e54 <___vfprintf_internal_r+0x15d4>
 8004e1c:	44800204 	addi	r18,r8,8
 8004e20:	003ecb06 	br	8004950 <__alt_data_end+0xfc004950>
 8004e24:	008200b4 	movhi	r2,2050
 8004e28:	10b2a284 	addi	r2,r2,-13686
 8004e2c:	d8812c15 	stw	r2,1200(sp)
 8004e30:	dac12c17 	ldw	r11,1200(sp)
 8004e34:	1d47883a 	add	r3,r3,r21
 8004e38:	84000044 	addi	r16,r16,1
 8004e3c:	92c00015 	stw	r11,0(r18)
 8004e40:	95400115 	stw	r21,4(r18)
 8004e44:	d8c12015 	stw	r3,1152(sp)
 8004e48:	dc011f15 	stw	r16,1148(sp)
 8004e4c:	008001c4 	movi	r2,7
 8004e50:	143ebe0e 	bge	r2,r16,800494c <__alt_data_end+0xfc00494c>
 8004e54:	b009883a 	mov	r4,r22
 8004e58:	b80b883a 	mov	r5,r23
 8004e5c:	d9811e04 	addi	r6,sp,1144
 8004e60:	800a9900 	call	800a990 <__sprint_r>
 8004e64:	103b9d1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004e68:	d8c12017 	ldw	r3,1152(sp)
 8004e6c:	dc011f17 	ldw	r16,1148(sp)
 8004e70:	dc800404 	addi	r18,sp,16
 8004e74:	003eb606 	br	8004950 <__alt_data_end+0xfc004950>
 8004e78:	b009883a 	mov	r4,r22
 8004e7c:	b80b883a 	mov	r5,r23
 8004e80:	d9811e04 	addi	r6,sp,1144
 8004e84:	800a9900 	call	800a990 <__sprint_r>
 8004e88:	103b941e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004e8c:	d8c12017 	ldw	r3,1152(sp)
 8004e90:	dc011f17 	ldw	r16,1148(sp)
 8004e94:	da000404 	addi	r8,sp,16
 8004e98:	003e8d06 	br	80048d0 <__alt_data_end+0xfc0048d0>
 8004e9c:	b009883a 	mov	r4,r22
 8004ea0:	b80b883a 	mov	r5,r23
 8004ea4:	d9811e04 	addi	r6,sp,1144
 8004ea8:	800a9900 	call	800a990 <__sprint_r>
 8004eac:	103b8b1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004eb0:	d8c12017 	ldw	r3,1152(sp)
 8004eb4:	dc011f17 	ldw	r16,1148(sp)
 8004eb8:	dc800404 	addi	r18,sp,16
 8004ebc:	003e8f06 	br	80048fc <__alt_data_end+0xfc0048fc>
 8004ec0:	db010e04 	addi	r12,sp,1080
 8004ec4:	0025883a 	mov	r18,zero
 8004ec8:	db013115 	stw	r12,1220(sp)
 8004ecc:	003bfb06 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8004ed0:	b009883a 	mov	r4,r22
 8004ed4:	b80b883a 	mov	r5,r23
 8004ed8:	d9811e04 	addi	r6,sp,1144
 8004edc:	800a9900 	call	800a990 <__sprint_r>
 8004ee0:	103b7e1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8004ee4:	d8c12017 	ldw	r3,1152(sp)
 8004ee8:	da000404 	addi	r8,sp,16
 8004eec:	003c5506 	br	8004044 <__alt_data_end+0xfc004044>
 8004ef0:	04e7c83a 	sub	r19,zero,r19
 8004ef4:	9804c03a 	cmpne	r2,r19,zero
 8004ef8:	0739c83a 	sub	fp,zero,fp
 8004efc:	e0b9c83a 	sub	fp,fp,r2
 8004f00:	05400b44 	movi	r21,45
 8004f04:	dd412785 	stb	r21,1182(sp)
 8004f08:	da413215 	stw	r9,1224(sp)
 8004f0c:	00800044 	movi	r2,1
 8004f10:	9f06b03a 	or	r3,r19,fp
 8004f14:	003bcf06 	br	8003e54 <__alt_data_end+0xfc003e54>
 8004f18:	da013f15 	stw	r8,1276(sp)
 8004f1c:	da413e15 	stw	r9,1272(sp)
 8004f20:	800a5ec0 	call	800a5ec <__fpclassifyd>
 8004f24:	da013f17 	ldw	r8,1276(sp)
 8004f28:	da413e17 	ldw	r9,1272(sp)
 8004f2c:	1000ce26 	beq	r2,zero,8005268 <___vfprintf_internal_r+0x19e8>
 8004f30:	057ff7c4 	movi	r21,-33
 8004f34:	00bfffc4 	movi	r2,-1
 8004f38:	856a703a 	and	r21,r16,r21
 8004f3c:	4881f026 	beq	r9,r2,8005700 <___vfprintf_internal_r+0x1e80>
 8004f40:	008011c4 	movi	r2,71
 8004f44:	a881e526 	beq	r21,r2,80056dc <___vfprintf_internal_r+0x1e5c>
 8004f48:	db013917 	ldw	r12,1252(sp)
 8004f4c:	8ac04014 	ori	r11,r17,256
 8004f50:	dac12d15 	stw	r11,1204(sp)
 8004f54:	6001e416 	blt	r12,zero,80056e8 <___vfprintf_internal_r+0x1e68>
 8004f58:	dc813917 	ldw	r18,1252(sp)
 8004f5c:	d8012b05 	stb	zero,1196(sp)
 8004f60:	00801984 	movi	r2,102
 8004f64:	80811826 	beq	r16,r2,80053c8 <___vfprintf_internal_r+0x1b48>
 8004f68:	00801184 	movi	r2,70
 8004f6c:	80811626 	beq	r16,r2,80053c8 <___vfprintf_internal_r+0x1b48>
 8004f70:	00801144 	movi	r2,69
 8004f74:	a881e026 	beq	r21,r2,80056f8 <___vfprintf_internal_r+0x1e78>
 8004f78:	4839883a 	mov	fp,r9
 8004f7c:	d8812604 	addi	r2,sp,1176
 8004f80:	d8800115 	stw	r2,4(sp)
 8004f84:	d9413717 	ldw	r5,1244(sp)
 8004f88:	d8812504 	addi	r2,sp,1172
 8004f8c:	d8800215 	stw	r2,8(sp)
 8004f90:	d8812104 	addi	r2,sp,1156
 8004f94:	df000015 	stw	fp,0(sp)
 8004f98:	d8800315 	stw	r2,12(sp)
 8004f9c:	b009883a 	mov	r4,r22
 8004fa0:	900d883a 	mov	r6,r18
 8004fa4:	01c00084 	movi	r7,2
 8004fa8:	da013f15 	stw	r8,1276(sp)
 8004fac:	da413e15 	stw	r9,1272(sp)
 8004fb0:	8005bd00 	call	8005bd0 <_dtoa_r>
 8004fb4:	d8813115 	stw	r2,1220(sp)
 8004fb8:	008019c4 	movi	r2,103
 8004fbc:	da013f17 	ldw	r8,1276(sp)
 8004fc0:	da413e17 	ldw	r9,1272(sp)
 8004fc4:	80800226 	beq	r16,r2,8004fd0 <___vfprintf_internal_r+0x1750>
 8004fc8:	008011c4 	movi	r2,71
 8004fcc:	8081101e 	bne	r16,r2,8005410 <___vfprintf_internal_r+0x1b90>
 8004fd0:	8880004c 	andi	r2,r17,1
 8004fd4:	1001df26 	beq	r2,zero,8005754 <___vfprintf_internal_r+0x1ed4>
 8004fd8:	db013117 	ldw	r12,1220(sp)
 8004fdc:	6715883a 	add	r10,r12,fp
 8004fe0:	d9013717 	ldw	r4,1244(sp)
 8004fe4:	900b883a 	mov	r5,r18
 8004fe8:	000d883a 	mov	r6,zero
 8004fec:	000f883a 	mov	r7,zero
 8004ff0:	da013f15 	stw	r8,1276(sp)
 8004ff4:	da413e15 	stw	r9,1272(sp)
 8004ff8:	da813d15 	stw	r10,1268(sp)
 8004ffc:	800e4440 	call	800e444 <__eqdf2>
 8005000:	da013f17 	ldw	r8,1276(sp)
 8005004:	da413e17 	ldw	r9,1272(sp)
 8005008:	da813d17 	ldw	r10,1268(sp)
 800500c:	10016526 	beq	r2,zero,80055a4 <___vfprintf_internal_r+0x1d24>
 8005010:	d8812117 	ldw	r2,1156(sp)
 8005014:	1280062e 	bgeu	r2,r10,8005030 <___vfprintf_internal_r+0x17b0>
 8005018:	01000c04 	movi	r4,48
 800501c:	10c00044 	addi	r3,r2,1
 8005020:	d8c12115 	stw	r3,1156(sp)
 8005024:	11000005 	stb	r4,0(r2)
 8005028:	d8812117 	ldw	r2,1156(sp)
 800502c:	12bffb36 	bltu	r2,r10,800501c <__alt_data_end+0xfc00501c>
 8005030:	db013117 	ldw	r12,1220(sp)
 8005034:	1305c83a 	sub	r2,r2,r12
 8005038:	d8813315 	stw	r2,1228(sp)
 800503c:	008011c4 	movi	r2,71
 8005040:	a8814a26 	beq	r21,r2,800556c <___vfprintf_internal_r+0x1cec>
 8005044:	00801944 	movi	r2,101
 8005048:	14020a0e 	bge	r2,r16,8005874 <___vfprintf_internal_r+0x1ff4>
 800504c:	00801984 	movi	r2,102
 8005050:	8081b626 	beq	r16,r2,800572c <___vfprintf_internal_r+0x1eac>
 8005054:	db012617 	ldw	r12,1176(sp)
 8005058:	db013415 	stw	r12,1232(sp)
 800505c:	db013417 	ldw	r12,1232(sp)
 8005060:	dac13317 	ldw	r11,1228(sp)
 8005064:	62c1a816 	blt	r12,r11,8005708 <___vfprintf_internal_r+0x1e88>
 8005068:	8c40004c 	andi	r17,r17,1
 800506c:	8801ca1e 	bne	r17,zero,8005798 <___vfprintf_internal_r+0x1f18>
 8005070:	6005883a 	mov	r2,r12
 8005074:	6001b516 	blt	r12,zero,800574c <___vfprintf_internal_r+0x1ecc>
 8005078:	dc813417 	ldw	r18,1232(sp)
 800507c:	df012b07 	ldb	fp,1196(sp)
 8005080:	e001321e 	bne	fp,zero,800554c <___vfprintf_internal_r+0x1ccc>
 8005084:	dc412d17 	ldw	r17,1204(sp)
 8005088:	dd412783 	ldbu	r21,1182(sp)
 800508c:	d8812b15 	stw	r2,1196(sp)
 8005090:	dcc12d15 	stw	r19,1204(sp)
 8005094:	d8013215 	stw	zero,1224(sp)
 8005098:	003b8d06 	br	8003ed0 <__alt_data_end+0xfc003ed0>
 800509c:	88c0100c 	andi	r3,r17,64
 80050a0:	18008226 	beq	r3,zero,80052ac <___vfprintf_internal_r+0x1a2c>
 80050a4:	dac12d17 	ldw	r11,1204(sp)
 80050a8:	14c0000b 	ldhu	r19,0(r2)
 80050ac:	0039883a 	mov	fp,zero
 80050b0:	5ac00104 	addi	r11,r11,4
 80050b4:	dac12d15 	stw	r11,1204(sp)
 80050b8:	003c8f06 	br	80042f8 <__alt_data_end+0xfc0042f8>
 80050bc:	1c000007 	ldb	r16,0(r3)
 80050c0:	1805883a 	mov	r2,r3
 80050c4:	003a5506 	br	8003a1c <__alt_data_end+0xfc003a1c>
 80050c8:	00800084 	movi	r2,2
 80050cc:	003b5e06 	br	8003e48 <__alt_data_end+0xfc003e48>
 80050d0:	8880040c 	andi	r2,r17,16
 80050d4:	1000091e 	bne	r2,zero,80050fc <___vfprintf_internal_r+0x187c>
 80050d8:	8c40100c 	andi	r17,r17,64
 80050dc:	88000726 	beq	r17,zero,80050fc <___vfprintf_internal_r+0x187c>
 80050e0:	db012d17 	ldw	r12,1204(sp)
 80050e4:	dac12f17 	ldw	r11,1212(sp)
 80050e8:	60800017 	ldw	r2,0(r12)
 80050ec:	63000104 	addi	r12,r12,4
 80050f0:	db012d15 	stw	r12,1204(sp)
 80050f4:	12c0000d 	sth	r11,0(r2)
 80050f8:	003a1e06 	br	8003974 <__alt_data_end+0xfc003974>
 80050fc:	db012d17 	ldw	r12,1204(sp)
 8005100:	dac12f17 	ldw	r11,1212(sp)
 8005104:	60800017 	ldw	r2,0(r12)
 8005108:	63000104 	addi	r12,r12,4
 800510c:	db012d15 	stw	r12,1204(sp)
 8005110:	12c00015 	stw	r11,0(r2)
 8005114:	003a1706 	br	8003974 <__alt_data_end+0xfc003974>
 8005118:	010200b4 	movhi	r4,2050
 800511c:	2132a284 	addi	r4,r4,-13686
 8005120:	d9012c15 	stw	r4,1200(sp)
 8005124:	dac12c17 	ldw	r11,1200(sp)
 8005128:	1c87883a 	add	r3,r3,r18
 800512c:	10800044 	addi	r2,r2,1
 8005130:	42c00015 	stw	r11,0(r8)
 8005134:	44800115 	stw	r18,4(r8)
 8005138:	d8c12015 	stw	r3,1152(sp)
 800513c:	d8811f15 	stw	r2,1148(sp)
 8005140:	010001c4 	movi	r4,7
 8005144:	20bee016 	blt	r4,r2,8004cc8 <__alt_data_end+0xfc004cc8>
 8005148:	42000204 	addi	r8,r8,8
 800514c:	003ee506 	br	8004ce4 <__alt_data_end+0xfc004ce4>
 8005150:	010200b4 	movhi	r4,2050
 8005154:	2132a284 	addi	r4,r4,-13686
 8005158:	d9012c15 	stw	r4,1200(sp)
 800515c:	003bd806 	br	80040c0 <__alt_data_end+0xfc0040c0>
 8005160:	b009883a 	mov	r4,r22
 8005164:	b80b883a 	mov	r5,r23
 8005168:	d9811e04 	addi	r6,sp,1144
 800516c:	800a9900 	call	800a990 <__sprint_r>
 8005170:	103ada1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8005174:	d8c12017 	ldw	r3,1152(sp)
 8005178:	da000404 	addi	r8,sp,16
 800517c:	003d6b06 	br	800472c <__alt_data_end+0xfc00472c>
 8005180:	d8811f17 	ldw	r2,1148(sp)
 8005184:	030200b4 	movhi	r12,2050
 8005188:	01000044 	movi	r4,1
 800518c:	18c00044 	addi	r3,r3,1
 8005190:	10800044 	addi	r2,r2,1
 8005194:	6332a204 	addi	r12,r12,-13688
 8005198:	41000115 	stw	r4,4(r8)
 800519c:	43000015 	stw	r12,0(r8)
 80051a0:	d8c12015 	stw	r3,1152(sp)
 80051a4:	d8811f15 	stw	r2,1148(sp)
 80051a8:	010001c4 	movi	r4,7
 80051ac:	20804916 	blt	r4,r2,80052d4 <___vfprintf_internal_r+0x1a54>
 80051b0:	42000204 	addi	r8,r8,8
 80051b4:	8000041e 	bne	r16,zero,80051c8 <___vfprintf_internal_r+0x1948>
 80051b8:	dac13317 	ldw	r11,1228(sp)
 80051bc:	5800021e 	bne	r11,zero,80051c8 <___vfprintf_internal_r+0x1948>
 80051c0:	8880004c 	andi	r2,r17,1
 80051c4:	103bd526 	beq	r2,zero,800411c <__alt_data_end+0xfc00411c>
 80051c8:	db013817 	ldw	r12,1248(sp)
 80051cc:	d8811f17 	ldw	r2,1148(sp)
 80051d0:	dac13517 	ldw	r11,1236(sp)
 80051d4:	1b07883a 	add	r3,r3,r12
 80051d8:	10800044 	addi	r2,r2,1
 80051dc:	42c00015 	stw	r11,0(r8)
 80051e0:	43000115 	stw	r12,4(r8)
 80051e4:	d8c12015 	stw	r3,1152(sp)
 80051e8:	d8811f15 	stw	r2,1148(sp)
 80051ec:	010001c4 	movi	r4,7
 80051f0:	20813016 	blt	r4,r2,80056b4 <___vfprintf_internal_r+0x1e34>
 80051f4:	42000204 	addi	r8,r8,8
 80051f8:	0421c83a 	sub	r16,zero,r16
 80051fc:	0400630e 	bge	zero,r16,800538c <___vfprintf_internal_r+0x1b0c>
 8005200:	04800404 	movi	r18,16
 8005204:	94009f0e 	bge	r18,r16,8005484 <___vfprintf_internal_r+0x1c04>
 8005208:	010200b4 	movhi	r4,2050
 800520c:	2132a284 	addi	r4,r4,-13686
 8005210:	d9012c15 	stw	r4,1200(sp)
 8005214:	054001c4 	movi	r21,7
 8005218:	00000306 	br	8005228 <___vfprintf_internal_r+0x19a8>
 800521c:	42000204 	addi	r8,r8,8
 8005220:	843ffc04 	addi	r16,r16,-16
 8005224:	94009a0e 	bge	r18,r16,8005490 <___vfprintf_internal_r+0x1c10>
 8005228:	18c00404 	addi	r3,r3,16
 800522c:	10800044 	addi	r2,r2,1
 8005230:	45000015 	stw	r20,0(r8)
 8005234:	44800115 	stw	r18,4(r8)
 8005238:	d8c12015 	stw	r3,1152(sp)
 800523c:	d8811f15 	stw	r2,1148(sp)
 8005240:	a8bff60e 	bge	r21,r2,800521c <__alt_data_end+0xfc00521c>
 8005244:	b009883a 	mov	r4,r22
 8005248:	b80b883a 	mov	r5,r23
 800524c:	d9811e04 	addi	r6,sp,1144
 8005250:	800a9900 	call	800a990 <__sprint_r>
 8005254:	103aa11e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8005258:	d8c12017 	ldw	r3,1152(sp)
 800525c:	d8811f17 	ldw	r2,1148(sp)
 8005260:	da000404 	addi	r8,sp,16
 8005264:	003fee06 	br	8005220 <__alt_data_end+0xfc005220>
 8005268:	008011c4 	movi	r2,71
 800526c:	1400b316 	blt	r2,r16,800553c <___vfprintf_internal_r+0x1cbc>
 8005270:	030200b4 	movhi	r12,2050
 8005274:	63329404 	addi	r12,r12,-13744
 8005278:	db013115 	stw	r12,1220(sp)
 800527c:	00c000c4 	movi	r3,3
 8005280:	00bfdfc4 	movi	r2,-129
 8005284:	d8c12b15 	stw	r3,1196(sp)
 8005288:	88a2703a 	and	r17,r17,r2
 800528c:	dd412783 	ldbu	r21,1182(sp)
 8005290:	dcc12d15 	stw	r19,1204(sp)
 8005294:	1825883a 	mov	r18,r3
 8005298:	d8013215 	stw	zero,1224(sp)
 800529c:	d8013415 	stw	zero,1232(sp)
 80052a0:	003b0b06 	br	8003ed0 <__alt_data_end+0xfc003ed0>
 80052a4:	4825883a 	mov	r18,r9
 80052a8:	003cba06 	br	8004594 <__alt_data_end+0xfc004594>
 80052ac:	db012d17 	ldw	r12,1204(sp)
 80052b0:	14c00017 	ldw	r19,0(r2)
 80052b4:	0039883a 	mov	fp,zero
 80052b8:	63000104 	addi	r12,r12,4
 80052bc:	db012d15 	stw	r12,1204(sp)
 80052c0:	003c0d06 	br	80042f8 <__alt_data_end+0xfc0042f8>
 80052c4:	008200b4 	movhi	r2,2050
 80052c8:	10b29204 	addi	r2,r2,-13752
 80052cc:	d8813115 	stw	r2,1220(sp)
 80052d0:	003ac406 	br	8003de4 <__alt_data_end+0xfc003de4>
 80052d4:	b009883a 	mov	r4,r22
 80052d8:	b80b883a 	mov	r5,r23
 80052dc:	d9811e04 	addi	r6,sp,1144
 80052e0:	800a9900 	call	800a990 <__sprint_r>
 80052e4:	103a7d1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 80052e8:	dc012617 	ldw	r16,1176(sp)
 80052ec:	d8c12017 	ldw	r3,1152(sp)
 80052f0:	da000404 	addi	r8,sp,16
 80052f4:	003faf06 	br	80051b4 <__alt_data_end+0xfc0051b4>
 80052f8:	db012e17 	ldw	r12,1208(sp)
 80052fc:	1805883a 	mov	r2,r3
 8005300:	dac12d15 	stw	r11,1204(sp)
 8005304:	0319c83a 	sub	r12,zero,r12
 8005308:	db012e15 	stw	r12,1208(sp)
 800530c:	003a7e06 	br	8003d08 <__alt_data_end+0xfc003d08>
 8005310:	18800044 	addi	r2,r3,1
 8005314:	8c400814 	ori	r17,r17,32
 8005318:	1c000047 	ldb	r16,1(r3)
 800531c:	0039bf06 	br	8003a1c <__alt_data_end+0xfc003a1c>
 8005320:	b009883a 	mov	r4,r22
 8005324:	b80b883a 	mov	r5,r23
 8005328:	d9811e04 	addi	r6,sp,1144
 800532c:	800a9900 	call	800a990 <__sprint_r>
 8005330:	103a6a1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8005334:	d8c12017 	ldw	r3,1152(sp)
 8005338:	da000404 	addi	r8,sp,16
 800533c:	003d0c06 	br	8004770 <__alt_data_end+0xfc004770>
 8005340:	db012817 	ldw	r12,1184(sp)
 8005344:	d8c13117 	ldw	r3,1220(sp)
 8005348:	60e5c83a 	sub	r18,r12,r3
 800534c:	003adb06 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8005350:	da013f15 	stw	r8,1276(sp)
 8005354:	80035640 	call	8003564 <strlen>
 8005358:	1025883a 	mov	r18,r2
 800535c:	da013f17 	ldw	r8,1276(sp)
 8005360:	903c8e0e 	bge	r18,zero,800459c <__alt_data_end+0xfc00459c>
 8005364:	0005883a 	mov	r2,zero
 8005368:	003c8c06 	br	800459c <__alt_data_end+0xfc00459c>
 800536c:	b009883a 	mov	r4,r22
 8005370:	b80b883a 	mov	r5,r23
 8005374:	d9811e04 	addi	r6,sp,1144
 8005378:	800a9900 	call	800a990 <__sprint_r>
 800537c:	103a571e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8005380:	d8c12017 	ldw	r3,1152(sp)
 8005384:	d8811f17 	ldw	r2,1148(sp)
 8005388:	da000404 	addi	r8,sp,16
 800538c:	db013317 	ldw	r12,1228(sp)
 8005390:	dac13117 	ldw	r11,1220(sp)
 8005394:	10800044 	addi	r2,r2,1
 8005398:	60c7883a 	add	r3,r12,r3
 800539c:	42c00015 	stw	r11,0(r8)
 80053a0:	43000115 	stw	r12,4(r8)
 80053a4:	d8c12015 	stw	r3,1152(sp)
 80053a8:	d8811f15 	stw	r2,1148(sp)
 80053ac:	010001c4 	movi	r4,7
 80053b0:	20bb590e 	bge	r4,r2,8004118 <__alt_data_end+0xfc004118>
 80053b4:	003d7e06 	br	80049b0 <__alt_data_end+0xfc0049b0>
 80053b8:	010200b4 	movhi	r4,2050
 80053bc:	2132a684 	addi	r4,r4,-13670
 80053c0:	d9013615 	stw	r4,1240(sp)
 80053c4:	003af606 	br	8003fa0 <__alt_data_end+0xfc003fa0>
 80053c8:	d8812604 	addi	r2,sp,1176
 80053cc:	d8800115 	stw	r2,4(sp)
 80053d0:	d9413717 	ldw	r5,1244(sp)
 80053d4:	d8812504 	addi	r2,sp,1172
 80053d8:	d8800215 	stw	r2,8(sp)
 80053dc:	d8812104 	addi	r2,sp,1156
 80053e0:	da400015 	stw	r9,0(sp)
 80053e4:	d8800315 	stw	r2,12(sp)
 80053e8:	b009883a 	mov	r4,r22
 80053ec:	900d883a 	mov	r6,r18
 80053f0:	01c000c4 	movi	r7,3
 80053f4:	da013f15 	stw	r8,1276(sp)
 80053f8:	da413e15 	stw	r9,1272(sp)
 80053fc:	8005bd00 	call	8005bd0 <_dtoa_r>
 8005400:	da413e17 	ldw	r9,1272(sp)
 8005404:	da013f17 	ldw	r8,1276(sp)
 8005408:	d8813115 	stw	r2,1220(sp)
 800540c:	4839883a 	mov	fp,r9
 8005410:	dac13117 	ldw	r11,1220(sp)
 8005414:	00801184 	movi	r2,70
 8005418:	5f15883a 	add	r10,r11,fp
 800541c:	a8bef01e 	bne	r21,r2,8004fe0 <__alt_data_end+0xfc004fe0>
 8005420:	59000007 	ldb	r4,0(r11)
 8005424:	00800c04 	movi	r2,48
 8005428:	2080e026 	beq	r4,r2,80057ac <___vfprintf_internal_r+0x1f2c>
 800542c:	d8c12617 	ldw	r3,1176(sp)
 8005430:	50d5883a 	add	r10,r10,r3
 8005434:	003eea06 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 8005438:	0025883a 	mov	r18,zero
 800543c:	003db306 	br	8004b0c <__alt_data_end+0xfc004b0c>
 8005440:	b009883a 	mov	r4,r22
 8005444:	b80b883a 	mov	r5,r23
 8005448:	d9811e04 	addi	r6,sp,1144
 800544c:	800a9900 	call	800a990 <__sprint_r>
 8005450:	103a221e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8005454:	d8c12017 	ldw	r3,1152(sp)
 8005458:	da000404 	addi	r8,sp,16
 800545c:	003daa06 	br	8004b08 <__alt_data_end+0xfc004b08>
 8005460:	b009883a 	mov	r4,r22
 8005464:	b80b883a 	mov	r5,r23
 8005468:	d9811e04 	addi	r6,sp,1144
 800546c:	800a9900 	call	800a990 <__sprint_r>
 8005470:	103a1a1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8005474:	d8812617 	ldw	r2,1176(sp)
 8005478:	d8c12017 	ldw	r3,1152(sp)
 800547c:	da000404 	addi	r8,sp,16
 8005480:	003e2c06 	br	8004d34 <__alt_data_end+0xfc004d34>
 8005484:	030200b4 	movhi	r12,2050
 8005488:	6332a284 	addi	r12,r12,-13686
 800548c:	db012c15 	stw	r12,1200(sp)
 8005490:	dac12c17 	ldw	r11,1200(sp)
 8005494:	1c07883a 	add	r3,r3,r16
 8005498:	10800044 	addi	r2,r2,1
 800549c:	42c00015 	stw	r11,0(r8)
 80054a0:	44000115 	stw	r16,4(r8)
 80054a4:	d8c12015 	stw	r3,1152(sp)
 80054a8:	d8811f15 	stw	r2,1148(sp)
 80054ac:	010001c4 	movi	r4,7
 80054b0:	20bfae16 	blt	r4,r2,800536c <__alt_data_end+0xfc00536c>
 80054b4:	42000204 	addi	r8,r8,8
 80054b8:	003fb406 	br	800538c <__alt_data_end+0xfc00538c>
 80054bc:	030200b4 	movhi	r12,2050
 80054c0:	6332a684 	addi	r12,r12,-13670
 80054c4:	db013615 	stw	r12,1240(sp)
 80054c8:	003b3806 	br	80041ac <__alt_data_end+0xfc0041ac>
 80054cc:	b009883a 	mov	r4,r22
 80054d0:	b80b883a 	mov	r5,r23
 80054d4:	d9811e04 	addi	r6,sp,1144
 80054d8:	800a9900 	call	800a990 <__sprint_r>
 80054dc:	1039ff1e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 80054e0:	d8812617 	ldw	r2,1176(sp)
 80054e4:	db013317 	ldw	r12,1228(sp)
 80054e8:	d8c12017 	ldw	r3,1152(sp)
 80054ec:	da000404 	addi	r8,sp,16
 80054f0:	6085c83a 	sub	r2,r12,r2
 80054f4:	003e2006 	br	8004d78 <__alt_data_end+0xfc004d78>
 80054f8:	0021883a 	mov	r16,zero
 80054fc:	003e1f06 	br	8004d7c <__alt_data_end+0xfc004d7c>
 8005500:	00800184 	movi	r2,6
 8005504:	1240012e 	bgeu	r2,r9,800550c <___vfprintf_internal_r+0x1c8c>
 8005508:	1013883a 	mov	r9,r2
 800550c:	4825883a 	mov	r18,r9
 8005510:	4805883a 	mov	r2,r9
 8005514:	48009e16 	blt	r9,zero,8005790 <___vfprintf_internal_r+0x1f10>
 8005518:	d8812b15 	stw	r2,1196(sp)
 800551c:	008200b4 	movhi	r2,2050
 8005520:	10b2a004 	addi	r2,r2,-13696
 8005524:	d8813115 	stw	r2,1220(sp)
 8005528:	dcc12d15 	stw	r19,1204(sp)
 800552c:	d8013215 	stw	zero,1224(sp)
 8005530:	d8013415 	stw	zero,1232(sp)
 8005534:	0005883a 	mov	r2,zero
 8005538:	003a6c06 	br	8003eec <__alt_data_end+0xfc003eec>
 800553c:	008200b4 	movhi	r2,2050
 8005540:	10b29504 	addi	r2,r2,-13740
 8005544:	d8813115 	stw	r2,1220(sp)
 8005548:	003f4c06 	br	800527c <__alt_data_end+0xfc00527c>
 800554c:	00c00b44 	movi	r3,45
 8005550:	d8812b15 	stw	r2,1196(sp)
 8005554:	dc412d17 	ldw	r17,1204(sp)
 8005558:	d8c12785 	stb	r3,1182(sp)
 800555c:	dcc12d15 	stw	r19,1204(sp)
 8005560:	d8013215 	stw	zero,1224(sp)
 8005564:	00800b44 	movi	r2,45
 8005568:	003a5d06 	br	8003ee0 <__alt_data_end+0xfc003ee0>
 800556c:	d8c12617 	ldw	r3,1176(sp)
 8005570:	00bfff44 	movi	r2,-3
 8005574:	18800d16 	blt	r3,r2,80055ac <___vfprintf_internal_r+0x1d2c>
 8005578:	48c00c16 	blt	r9,r3,80055ac <___vfprintf_internal_r+0x1d2c>
 800557c:	d8c13415 	stw	r3,1232(sp)
 8005580:	040019c4 	movi	r16,103
 8005584:	003eb506 	br	800505c <__alt_data_end+0xfc00505c>
 8005588:	05400b44 	movi	r21,45
 800558c:	dd412785 	stb	r21,1182(sp)
 8005590:	003a0f06 	br	8003dd0 <__alt_data_end+0xfc003dd0>
 8005594:	010200b4 	movhi	r4,2050
 8005598:	2132a284 	addi	r4,r4,-13686
 800559c:	d9012c15 	stw	r4,1200(sp)
 80055a0:	003cb106 	br	8004868 <__alt_data_end+0xfc004868>
 80055a4:	5005883a 	mov	r2,r10
 80055a8:	003ea106 	br	8005030 <__alt_data_end+0xfc005030>
 80055ac:	843fff84 	addi	r16,r16,-2
 80055b0:	1f3fffc4 	addi	fp,r3,-1
 80055b4:	df012615 	stw	fp,1176(sp)
 80055b8:	dc0122c5 	stb	r16,1163(sp)
 80055bc:	e0009516 	blt	fp,zero,8005814 <___vfprintf_internal_r+0x1f94>
 80055c0:	00800ac4 	movi	r2,43
 80055c4:	d8812305 	stb	r2,1164(sp)
 80055c8:	00800244 	movi	r2,9
 80055cc:	1700690e 	bge	r2,fp,8005774 <___vfprintf_internal_r+0x1ef4>
 80055d0:	dd4122c4 	addi	r21,sp,1163
 80055d4:	dc012c15 	stw	r16,1200(sp)
 80055d8:	8825883a 	mov	r18,r17
 80055dc:	a821883a 	mov	r16,r21
 80055e0:	4023883a 	mov	r17,r8
 80055e4:	e009883a 	mov	r4,fp
 80055e8:	01400284 	movi	r5,10
 80055ec:	800d2700 	call	800d270 <__modsi3>
 80055f0:	10800c04 	addi	r2,r2,48
 80055f4:	843fffc4 	addi	r16,r16,-1
 80055f8:	e009883a 	mov	r4,fp
 80055fc:	01400284 	movi	r5,10
 8005600:	80800005 	stb	r2,0(r16)
 8005604:	800d21c0 	call	800d21c <__divsi3>
 8005608:	1039883a 	mov	fp,r2
 800560c:	00800244 	movi	r2,9
 8005610:	173ff416 	blt	r2,fp,80055e4 <__alt_data_end+0xfc0055e4>
 8005614:	8811883a 	mov	r8,r17
 8005618:	e0800c04 	addi	r2,fp,48
 800561c:	9023883a 	mov	r17,r18
 8005620:	8025883a 	mov	r18,r16
 8005624:	913fffc4 	addi	r4,r18,-1
 8005628:	90bfffc5 	stb	r2,-1(r18)
 800562c:	dc012c17 	ldw	r16,1200(sp)
 8005630:	25408e2e 	bgeu	r4,r21,800586c <___vfprintf_internal_r+0x1fec>
 8005634:	d9412384 	addi	r5,sp,1166
 8005638:	2c8bc83a 	sub	r5,r5,r18
 800563c:	d8c12344 	addi	r3,sp,1165
 8005640:	a94b883a 	add	r5,r21,r5
 8005644:	00000106 	br	800564c <___vfprintf_internal_r+0x1dcc>
 8005648:	20800003 	ldbu	r2,0(r4)
 800564c:	18800005 	stb	r2,0(r3)
 8005650:	18c00044 	addi	r3,r3,1
 8005654:	21000044 	addi	r4,r4,1
 8005658:	197ffb1e 	bne	r3,r5,8005648 <__alt_data_end+0xfc005648>
 800565c:	d8812304 	addi	r2,sp,1164
 8005660:	1485c83a 	sub	r2,r2,r18
 8005664:	d8c12344 	addi	r3,sp,1165
 8005668:	1885883a 	add	r2,r3,r2
 800566c:	dac13317 	ldw	r11,1228(sp)
 8005670:	156bc83a 	sub	r21,r2,r21
 8005674:	dd413a15 	stw	r21,1256(sp)
 8005678:	00800044 	movi	r2,1
 800567c:	5d65883a 	add	r18,r11,r21
 8005680:	12c0770e 	bge	r2,r11,8005860 <___vfprintf_internal_r+0x1fe0>
 8005684:	94800044 	addi	r18,r18,1
 8005688:	9005883a 	mov	r2,r18
 800568c:	90007216 	blt	r18,zero,8005858 <___vfprintf_internal_r+0x1fd8>
 8005690:	d8013415 	stw	zero,1232(sp)
 8005694:	003e7906 	br	800507c <__alt_data_end+0xfc00507c>
 8005698:	da412b15 	stw	r9,1196(sp)
 800569c:	dd412783 	ldbu	r21,1182(sp)
 80056a0:	4825883a 	mov	r18,r9
 80056a4:	dcc12d15 	stw	r19,1204(sp)
 80056a8:	d8013215 	stw	zero,1224(sp)
 80056ac:	d8013415 	stw	zero,1232(sp)
 80056b0:	003a0706 	br	8003ed0 <__alt_data_end+0xfc003ed0>
 80056b4:	b009883a 	mov	r4,r22
 80056b8:	b80b883a 	mov	r5,r23
 80056bc:	d9811e04 	addi	r6,sp,1144
 80056c0:	800a9900 	call	800a990 <__sprint_r>
 80056c4:	1039851e 	bne	r2,zero,8003cdc <__alt_data_end+0xfc003cdc>
 80056c8:	dc012617 	ldw	r16,1176(sp)
 80056cc:	d8c12017 	ldw	r3,1152(sp)
 80056d0:	d8811f17 	ldw	r2,1148(sp)
 80056d4:	da000404 	addi	r8,sp,16
 80056d8:	003ec706 	br	80051f8 <__alt_data_end+0xfc0051f8>
 80056dc:	483e1a1e 	bne	r9,zero,8004f48 <__alt_data_end+0xfc004f48>
 80056e0:	9013883a 	mov	r9,r18
 80056e4:	003e1806 	br	8004f48 <__alt_data_end+0xfc004f48>
 80056e8:	00c00b44 	movi	r3,45
 80056ec:	64a0003c 	xorhi	r18,r12,32768
 80056f0:	d8c12b05 	stb	r3,1196(sp)
 80056f4:	003e1a06 	br	8004f60 <__alt_data_end+0xfc004f60>
 80056f8:	4f000044 	addi	fp,r9,1
 80056fc:	003e1f06 	br	8004f7c <__alt_data_end+0xfc004f7c>
 8005700:	02400184 	movi	r9,6
 8005704:	003e1006 	br	8004f48 <__alt_data_end+0xfc004f48>
 8005708:	d8c13417 	ldw	r3,1232(sp)
 800570c:	00c04b0e 	bge	zero,r3,800583c <___vfprintf_internal_r+0x1fbc>
 8005710:	04800044 	movi	r18,1
 8005714:	dac13317 	ldw	r11,1228(sp)
 8005718:	92e5883a 	add	r18,r18,r11
 800571c:	9005883a 	mov	r2,r18
 8005720:	903e560e 	bge	r18,zero,800507c <__alt_data_end+0xfc00507c>
 8005724:	0005883a 	mov	r2,zero
 8005728:	003e5406 	br	800507c <__alt_data_end+0xfc00507c>
 800572c:	d8c12617 	ldw	r3,1176(sp)
 8005730:	d8c13415 	stw	r3,1232(sp)
 8005734:	00c03b0e 	bge	zero,r3,8005824 <___vfprintf_internal_r+0x1fa4>
 8005738:	4800081e 	bne	r9,zero,800575c <___vfprintf_internal_r+0x1edc>
 800573c:	8c40004c 	andi	r17,r17,1
 8005740:	8800061e 	bne	r17,zero,800575c <___vfprintf_internal_r+0x1edc>
 8005744:	1805883a 	mov	r2,r3
 8005748:	183e4b0e 	bge	r3,zero,8005078 <__alt_data_end+0xfc005078>
 800574c:	0005883a 	mov	r2,zero
 8005750:	003e4906 	br	8005078 <__alt_data_end+0xfc005078>
 8005754:	d8812117 	ldw	r2,1156(sp)
 8005758:	003e3506 	br	8005030 <__alt_data_end+0xfc005030>
 800575c:	dac13417 	ldw	r11,1232(sp)
 8005760:	4a400044 	addi	r9,r9,1
 8005764:	5a65883a 	add	r18,r11,r9
 8005768:	9005883a 	mov	r2,r18
 800576c:	903e430e 	bge	r18,zero,800507c <__alt_data_end+0xfc00507c>
 8005770:	003fec06 	br	8005724 <__alt_data_end+0xfc005724>
 8005774:	00800c04 	movi	r2,48
 8005778:	e0c00c04 	addi	r3,fp,48
 800577c:	d8812345 	stb	r2,1165(sp)
 8005780:	d8c12385 	stb	r3,1166(sp)
 8005784:	d88123c4 	addi	r2,sp,1167
 8005788:	dd4122c4 	addi	r21,sp,1163
 800578c:	003fb706 	br	800566c <__alt_data_end+0xfc00566c>
 8005790:	0005883a 	mov	r2,zero
 8005794:	003f6006 	br	8005518 <__alt_data_end+0xfc005518>
 8005798:	db013417 	ldw	r12,1232(sp)
 800579c:	64800044 	addi	r18,r12,1
 80057a0:	9005883a 	mov	r2,r18
 80057a4:	903e350e 	bge	r18,zero,800507c <__alt_data_end+0xfc00507c>
 80057a8:	003fde06 	br	8005724 <__alt_data_end+0xfc005724>
 80057ac:	d9013717 	ldw	r4,1244(sp)
 80057b0:	900b883a 	mov	r5,r18
 80057b4:	000d883a 	mov	r6,zero
 80057b8:	000f883a 	mov	r7,zero
 80057bc:	da013f15 	stw	r8,1276(sp)
 80057c0:	da413e15 	stw	r9,1272(sp)
 80057c4:	da813d15 	stw	r10,1268(sp)
 80057c8:	800e4440 	call	800e444 <__eqdf2>
 80057cc:	da013f17 	ldw	r8,1276(sp)
 80057d0:	da413e17 	ldw	r9,1272(sp)
 80057d4:	da813d17 	ldw	r10,1268(sp)
 80057d8:	103f1426 	beq	r2,zero,800542c <__alt_data_end+0xfc00542c>
 80057dc:	00800044 	movi	r2,1
 80057e0:	1707c83a 	sub	r3,r2,fp
 80057e4:	d8c12615 	stw	r3,1176(sp)
 80057e8:	003f1106 	br	8005430 <__alt_data_end+0xfc005430>
 80057ec:	dac12d17 	ldw	r11,1204(sp)
 80057f0:	5a400017 	ldw	r9,0(r11)
 80057f4:	5ac00104 	addi	r11,r11,4
 80057f8:	dac12d15 	stw	r11,1204(sp)
 80057fc:	483ec60e 	bge	r9,zero,8005318 <__alt_data_end+0xfc005318>
 8005800:	027fffc4 	movi	r9,-1
 8005804:	1c000047 	ldb	r16,1(r3)
 8005808:	00388406 	br	8003a1c <__alt_data_end+0xfc003a1c>
 800580c:	043fffc4 	movi	r16,-1
 8005810:	00391006 	br	8003c54 <__alt_data_end+0xfc003c54>
 8005814:	00800b44 	movi	r2,45
 8005818:	0739c83a 	sub	fp,zero,fp
 800581c:	d8812305 	stb	r2,1164(sp)
 8005820:	003f6906 	br	80055c8 <__alt_data_end+0xfc0055c8>
 8005824:	4800081e 	bne	r9,zero,8005848 <___vfprintf_internal_r+0x1fc8>
 8005828:	8c40004c 	andi	r17,r17,1
 800582c:	8800061e 	bne	r17,zero,8005848 <___vfprintf_internal_r+0x1fc8>
 8005830:	00800044 	movi	r2,1
 8005834:	1025883a 	mov	r18,r2
 8005838:	003e1006 	br	800507c <__alt_data_end+0xfc00507c>
 800583c:	04800084 	movi	r18,2
 8005840:	90e5c83a 	sub	r18,r18,r3
 8005844:	003fb306 	br	8005714 <__alt_data_end+0xfc005714>
 8005848:	4c800084 	addi	r18,r9,2
 800584c:	9005883a 	mov	r2,r18
 8005850:	903e0a0e 	bge	r18,zero,800507c <__alt_data_end+0xfc00507c>
 8005854:	003fb306 	br	8005724 <__alt_data_end+0xfc005724>
 8005858:	0005883a 	mov	r2,zero
 800585c:	003f8c06 	br	8005690 <__alt_data_end+0xfc005690>
 8005860:	88a2703a 	and	r17,r17,r2
 8005864:	883f8826 	beq	r17,zero,8005688 <__alt_data_end+0xfc005688>
 8005868:	003f8606 	br	8005684 <__alt_data_end+0xfc005684>
 800586c:	d8812344 	addi	r2,sp,1165
 8005870:	003f7e06 	br	800566c <__alt_data_end+0xfc00566c>
 8005874:	d8c12617 	ldw	r3,1176(sp)
 8005878:	003f4d06 	br	80055b0 <__alt_data_end+0xfc0055b0>

0800587c <__vfprintf_internal>:
 800587c:	2007883a 	mov	r3,r4
 8005880:	010200b4 	movhi	r4,2050
 8005884:	213a9e04 	addi	r4,r4,-5512
 8005888:	21000017 	ldw	r4,0(r4)
 800588c:	2805883a 	mov	r2,r5
 8005890:	300f883a 	mov	r7,r6
 8005894:	180b883a 	mov	r5,r3
 8005898:	100d883a 	mov	r6,r2
 800589c:	80038801 	jmpi	8003880 <___vfprintf_internal_r>

080058a0 <__swsetup_r>:
 80058a0:	008200b4 	movhi	r2,2050
 80058a4:	defffd04 	addi	sp,sp,-12
 80058a8:	10ba9e04 	addi	r2,r2,-5512
 80058ac:	dc400115 	stw	r17,4(sp)
 80058b0:	2023883a 	mov	r17,r4
 80058b4:	11000017 	ldw	r4,0(r2)
 80058b8:	dc000015 	stw	r16,0(sp)
 80058bc:	dfc00215 	stw	ra,8(sp)
 80058c0:	2821883a 	mov	r16,r5
 80058c4:	20000226 	beq	r4,zero,80058d0 <__swsetup_r+0x30>
 80058c8:	20c00e17 	ldw	r3,56(r4)
 80058cc:	18002e26 	beq	r3,zero,8005988 <__swsetup_r+0xe8>
 80058d0:	8080030b 	ldhu	r2,12(r16)
 80058d4:	10c0020c 	andi	r3,r2,8
 80058d8:	100d883a 	mov	r6,r2
 80058dc:	18000f26 	beq	r3,zero,800591c <__swsetup_r+0x7c>
 80058e0:	80c00417 	ldw	r3,16(r16)
 80058e4:	18001526 	beq	r3,zero,800593c <__swsetup_r+0x9c>
 80058e8:	1100004c 	andi	r4,r2,1
 80058ec:	20001c1e 	bne	r4,zero,8005960 <__swsetup_r+0xc0>
 80058f0:	1080008c 	andi	r2,r2,2
 80058f4:	1000261e 	bne	r2,zero,8005990 <__swsetup_r+0xf0>
 80058f8:	80800517 	ldw	r2,20(r16)
 80058fc:	80800215 	stw	r2,8(r16)
 8005900:	18001c26 	beq	r3,zero,8005974 <__swsetup_r+0xd4>
 8005904:	0005883a 	mov	r2,zero
 8005908:	dfc00217 	ldw	ra,8(sp)
 800590c:	dc400117 	ldw	r17,4(sp)
 8005910:	dc000017 	ldw	r16,0(sp)
 8005914:	dec00304 	addi	sp,sp,12
 8005918:	f800283a 	ret
 800591c:	3080040c 	andi	r2,r6,16
 8005920:	10001726 	beq	r2,zero,8005980 <__swsetup_r+0xe0>
 8005924:	3080010c 	andi	r2,r6,4
 8005928:	10001b1e 	bne	r2,zero,8005998 <__swsetup_r+0xf8>
 800592c:	80c00417 	ldw	r3,16(r16)
 8005930:	30800214 	ori	r2,r6,8
 8005934:	8080030d 	sth	r2,12(r16)
 8005938:	183feb1e 	bne	r3,zero,80058e8 <__alt_data_end+0xfc0058e8>
 800593c:	1140a00c 	andi	r5,r2,640
 8005940:	01008004 	movi	r4,512
 8005944:	293fe826 	beq	r5,r4,80058e8 <__alt_data_end+0xfc0058e8>
 8005948:	8809883a 	mov	r4,r17
 800594c:	800b883a 	mov	r5,r16
 8005950:	80083f80 	call	80083f8 <__smakebuf_r>
 8005954:	8080030b 	ldhu	r2,12(r16)
 8005958:	80c00417 	ldw	r3,16(r16)
 800595c:	003fe206 	br	80058e8 <__alt_data_end+0xfc0058e8>
 8005960:	80800517 	ldw	r2,20(r16)
 8005964:	80000215 	stw	zero,8(r16)
 8005968:	0085c83a 	sub	r2,zero,r2
 800596c:	80800615 	stw	r2,24(r16)
 8005970:	183fe41e 	bne	r3,zero,8005904 <__alt_data_end+0xfc005904>
 8005974:	8080030b 	ldhu	r2,12(r16)
 8005978:	1080200c 	andi	r2,r2,128
 800597c:	103fe226 	beq	r2,zero,8005908 <__alt_data_end+0xfc005908>
 8005980:	00bfffc4 	movi	r2,-1
 8005984:	003fe006 	br	8005908 <__alt_data_end+0xfc005908>
 8005988:	80078a00 	call	80078a0 <__sinit>
 800598c:	003fd006 	br	80058d0 <__alt_data_end+0xfc0058d0>
 8005990:	0005883a 	mov	r2,zero
 8005994:	003fd906 	br	80058fc <__alt_data_end+0xfc0058fc>
 8005998:	81400c17 	ldw	r5,48(r16)
 800599c:	28000626 	beq	r5,zero,80059b8 <__swsetup_r+0x118>
 80059a0:	80801004 	addi	r2,r16,64
 80059a4:	28800326 	beq	r5,r2,80059b4 <__swsetup_r+0x114>
 80059a8:	8809883a 	mov	r4,r17
 80059ac:	8007a140 	call	8007a14 <_free_r>
 80059b0:	8180030b 	ldhu	r6,12(r16)
 80059b4:	80000c15 	stw	zero,48(r16)
 80059b8:	80c00417 	ldw	r3,16(r16)
 80059bc:	00bff6c4 	movi	r2,-37
 80059c0:	118c703a 	and	r6,r2,r6
 80059c4:	80000115 	stw	zero,4(r16)
 80059c8:	80c00015 	stw	r3,0(r16)
 80059cc:	003fd806 	br	8005930 <__alt_data_end+0xfc005930>

080059d0 <quorem>:
 80059d0:	defff704 	addi	sp,sp,-36
 80059d4:	dc800215 	stw	r18,8(sp)
 80059d8:	20800417 	ldw	r2,16(r4)
 80059dc:	2c800417 	ldw	r18,16(r5)
 80059e0:	dfc00815 	stw	ra,32(sp)
 80059e4:	ddc00715 	stw	r23,28(sp)
 80059e8:	dd800615 	stw	r22,24(sp)
 80059ec:	dd400515 	stw	r21,20(sp)
 80059f0:	dd000415 	stw	r20,16(sp)
 80059f4:	dcc00315 	stw	r19,12(sp)
 80059f8:	dc400115 	stw	r17,4(sp)
 80059fc:	dc000015 	stw	r16,0(sp)
 8005a00:	14807116 	blt	r2,r18,8005bc8 <quorem+0x1f8>
 8005a04:	94bfffc4 	addi	r18,r18,-1
 8005a08:	94ad883a 	add	r22,r18,r18
 8005a0c:	b5ad883a 	add	r22,r22,r22
 8005a10:	2c400504 	addi	r17,r5,20
 8005a14:	8da9883a 	add	r20,r17,r22
 8005a18:	25400504 	addi	r21,r4,20
 8005a1c:	282f883a 	mov	r23,r5
 8005a20:	adad883a 	add	r22,r21,r22
 8005a24:	a1400017 	ldw	r5,0(r20)
 8005a28:	2021883a 	mov	r16,r4
 8005a2c:	b1000017 	ldw	r4,0(r22)
 8005a30:	29400044 	addi	r5,r5,1
 8005a34:	800d2cc0 	call	800d2cc <__udivsi3>
 8005a38:	1027883a 	mov	r19,r2
 8005a3c:	10002c26 	beq	r2,zero,8005af0 <quorem+0x120>
 8005a40:	a813883a 	mov	r9,r21
 8005a44:	8811883a 	mov	r8,r17
 8005a48:	0009883a 	mov	r4,zero
 8005a4c:	000d883a 	mov	r6,zero
 8005a50:	41c00017 	ldw	r7,0(r8)
 8005a54:	49400017 	ldw	r5,0(r9)
 8005a58:	42000104 	addi	r8,r8,4
 8005a5c:	38bfffcc 	andi	r2,r7,65535
 8005a60:	14c5383a 	mul	r2,r2,r19
 8005a64:	380ed43a 	srli	r7,r7,16
 8005a68:	28ffffcc 	andi	r3,r5,65535
 8005a6c:	2085883a 	add	r2,r4,r2
 8005a70:	1008d43a 	srli	r4,r2,16
 8005a74:	3ccf383a 	mul	r7,r7,r19
 8005a78:	198d883a 	add	r6,r3,r6
 8005a7c:	10ffffcc 	andi	r3,r2,65535
 8005a80:	30c7c83a 	sub	r3,r6,r3
 8005a84:	280ad43a 	srli	r5,r5,16
 8005a88:	21c9883a 	add	r4,r4,r7
 8005a8c:	180dd43a 	srai	r6,r3,16
 8005a90:	20bfffcc 	andi	r2,r4,65535
 8005a94:	288bc83a 	sub	r5,r5,r2
 8005a98:	298b883a 	add	r5,r5,r6
 8005a9c:	280e943a 	slli	r7,r5,16
 8005aa0:	18ffffcc 	andi	r3,r3,65535
 8005aa4:	2008d43a 	srli	r4,r4,16
 8005aa8:	38ceb03a 	or	r7,r7,r3
 8005aac:	49c00015 	stw	r7,0(r9)
 8005ab0:	280dd43a 	srai	r6,r5,16
 8005ab4:	4a400104 	addi	r9,r9,4
 8005ab8:	a23fe52e 	bgeu	r20,r8,8005a50 <__alt_data_end+0xfc005a50>
 8005abc:	b0800017 	ldw	r2,0(r22)
 8005ac0:	10000b1e 	bne	r2,zero,8005af0 <quorem+0x120>
 8005ac4:	b0bfff04 	addi	r2,r22,-4
 8005ac8:	a880082e 	bgeu	r21,r2,8005aec <quorem+0x11c>
 8005acc:	b0ffff17 	ldw	r3,-4(r22)
 8005ad0:	18000326 	beq	r3,zero,8005ae0 <quorem+0x110>
 8005ad4:	00000506 	br	8005aec <quorem+0x11c>
 8005ad8:	10c00017 	ldw	r3,0(r2)
 8005adc:	1800031e 	bne	r3,zero,8005aec <quorem+0x11c>
 8005ae0:	10bfff04 	addi	r2,r2,-4
 8005ae4:	94bfffc4 	addi	r18,r18,-1
 8005ae8:	a8bffb36 	bltu	r21,r2,8005ad8 <__alt_data_end+0xfc005ad8>
 8005aec:	84800415 	stw	r18,16(r16)
 8005af0:	8009883a 	mov	r4,r16
 8005af4:	b80b883a 	mov	r5,r23
 8005af8:	80099800 	call	8009980 <__mcmp>
 8005afc:	10002616 	blt	r2,zero,8005b98 <quorem+0x1c8>
 8005b00:	9cc00044 	addi	r19,r19,1
 8005b04:	a80d883a 	mov	r6,r21
 8005b08:	000b883a 	mov	r5,zero
 8005b0c:	31000017 	ldw	r4,0(r6)
 8005b10:	88800017 	ldw	r2,0(r17)
 8005b14:	31800104 	addi	r6,r6,4
 8005b18:	20ffffcc 	andi	r3,r4,65535
 8005b1c:	194b883a 	add	r5,r3,r5
 8005b20:	10ffffcc 	andi	r3,r2,65535
 8005b24:	28c7c83a 	sub	r3,r5,r3
 8005b28:	1004d43a 	srli	r2,r2,16
 8005b2c:	2008d43a 	srli	r4,r4,16
 8005b30:	180bd43a 	srai	r5,r3,16
 8005b34:	18ffffcc 	andi	r3,r3,65535
 8005b38:	2089c83a 	sub	r4,r4,r2
 8005b3c:	2149883a 	add	r4,r4,r5
 8005b40:	2004943a 	slli	r2,r4,16
 8005b44:	8c400104 	addi	r17,r17,4
 8005b48:	200bd43a 	srai	r5,r4,16
 8005b4c:	10c6b03a 	or	r3,r2,r3
 8005b50:	30ffff15 	stw	r3,-4(r6)
 8005b54:	a47fed2e 	bgeu	r20,r17,8005b0c <__alt_data_end+0xfc005b0c>
 8005b58:	9485883a 	add	r2,r18,r18
 8005b5c:	1085883a 	add	r2,r2,r2
 8005b60:	a887883a 	add	r3,r21,r2
 8005b64:	18800017 	ldw	r2,0(r3)
 8005b68:	10000b1e 	bne	r2,zero,8005b98 <quorem+0x1c8>
 8005b6c:	18bfff04 	addi	r2,r3,-4
 8005b70:	a880082e 	bgeu	r21,r2,8005b94 <quorem+0x1c4>
 8005b74:	18ffff17 	ldw	r3,-4(r3)
 8005b78:	18000326 	beq	r3,zero,8005b88 <quorem+0x1b8>
 8005b7c:	00000506 	br	8005b94 <quorem+0x1c4>
 8005b80:	10c00017 	ldw	r3,0(r2)
 8005b84:	1800031e 	bne	r3,zero,8005b94 <quorem+0x1c4>
 8005b88:	10bfff04 	addi	r2,r2,-4
 8005b8c:	94bfffc4 	addi	r18,r18,-1
 8005b90:	a8bffb36 	bltu	r21,r2,8005b80 <__alt_data_end+0xfc005b80>
 8005b94:	84800415 	stw	r18,16(r16)
 8005b98:	9805883a 	mov	r2,r19
 8005b9c:	dfc00817 	ldw	ra,32(sp)
 8005ba0:	ddc00717 	ldw	r23,28(sp)
 8005ba4:	dd800617 	ldw	r22,24(sp)
 8005ba8:	dd400517 	ldw	r21,20(sp)
 8005bac:	dd000417 	ldw	r20,16(sp)
 8005bb0:	dcc00317 	ldw	r19,12(sp)
 8005bb4:	dc800217 	ldw	r18,8(sp)
 8005bb8:	dc400117 	ldw	r17,4(sp)
 8005bbc:	dc000017 	ldw	r16,0(sp)
 8005bc0:	dec00904 	addi	sp,sp,36
 8005bc4:	f800283a 	ret
 8005bc8:	0005883a 	mov	r2,zero
 8005bcc:	003ff306 	br	8005b9c <__alt_data_end+0xfc005b9c>

08005bd0 <_dtoa_r>:
 8005bd0:	20801017 	ldw	r2,64(r4)
 8005bd4:	deffde04 	addi	sp,sp,-136
 8005bd8:	dd401d15 	stw	r21,116(sp)
 8005bdc:	dcc01b15 	stw	r19,108(sp)
 8005be0:	dc801a15 	stw	r18,104(sp)
 8005be4:	dc401915 	stw	r17,100(sp)
 8005be8:	dc001815 	stw	r16,96(sp)
 8005bec:	dfc02115 	stw	ra,132(sp)
 8005bf0:	df002015 	stw	fp,128(sp)
 8005bf4:	ddc01f15 	stw	r23,124(sp)
 8005bf8:	dd801e15 	stw	r22,120(sp)
 8005bfc:	dd001c15 	stw	r20,112(sp)
 8005c00:	d9c00315 	stw	r7,12(sp)
 8005c04:	2021883a 	mov	r16,r4
 8005c08:	302b883a 	mov	r21,r6
 8005c0c:	2825883a 	mov	r18,r5
 8005c10:	dc402417 	ldw	r17,144(sp)
 8005c14:	3027883a 	mov	r19,r6
 8005c18:	10000826 	beq	r2,zero,8005c3c <_dtoa_r+0x6c>
 8005c1c:	21801117 	ldw	r6,68(r4)
 8005c20:	00c00044 	movi	r3,1
 8005c24:	100b883a 	mov	r5,r2
 8005c28:	1986983a 	sll	r3,r3,r6
 8005c2c:	11800115 	stw	r6,4(r2)
 8005c30:	10c00215 	stw	r3,8(r2)
 8005c34:	80091680 	call	8009168 <_Bfree>
 8005c38:	80001015 	stw	zero,64(r16)
 8005c3c:	a8002d16 	blt	r21,zero,8005cf4 <_dtoa_r+0x124>
 8005c40:	88000015 	stw	zero,0(r17)
 8005c44:	a8dffc2c 	andhi	r3,r21,32752
 8005c48:	009ffc34 	movhi	r2,32752
 8005c4c:	18801b26 	beq	r3,r2,8005cbc <_dtoa_r+0xec>
 8005c50:	9009883a 	mov	r4,r18
 8005c54:	980b883a 	mov	r5,r19
 8005c58:	000d883a 	mov	r6,zero
 8005c5c:	000f883a 	mov	r7,zero
 8005c60:	800e4440 	call	800e444 <__eqdf2>
 8005c64:	10002a1e 	bne	r2,zero,8005d10 <_dtoa_r+0x140>
 8005c68:	d8c02317 	ldw	r3,140(sp)
 8005c6c:	d9002517 	ldw	r4,148(sp)
 8005c70:	00800044 	movi	r2,1
 8005c74:	18800015 	stw	r2,0(r3)
 8005c78:	2001a226 	beq	r4,zero,8006304 <_dtoa_r+0x734>
 8005c7c:	008200b4 	movhi	r2,2050
 8005c80:	10b2a244 	addi	r2,r2,-13687
 8005c84:	20800015 	stw	r2,0(r4)
 8005c88:	10bfffc4 	addi	r2,r2,-1
 8005c8c:	dfc02117 	ldw	ra,132(sp)
 8005c90:	df002017 	ldw	fp,128(sp)
 8005c94:	ddc01f17 	ldw	r23,124(sp)
 8005c98:	dd801e17 	ldw	r22,120(sp)
 8005c9c:	dd401d17 	ldw	r21,116(sp)
 8005ca0:	dd001c17 	ldw	r20,112(sp)
 8005ca4:	dcc01b17 	ldw	r19,108(sp)
 8005ca8:	dc801a17 	ldw	r18,104(sp)
 8005cac:	dc401917 	ldw	r17,100(sp)
 8005cb0:	dc001817 	ldw	r16,96(sp)
 8005cb4:	dec02204 	addi	sp,sp,136
 8005cb8:	f800283a 	ret
 8005cbc:	d8c02317 	ldw	r3,140(sp)
 8005cc0:	0089c3c4 	movi	r2,9999
 8005cc4:	18800015 	stw	r2,0(r3)
 8005cc8:	90017c26 	beq	r18,zero,80062bc <_dtoa_r+0x6ec>
 8005ccc:	008200b4 	movhi	r2,2050
 8005cd0:	10b34e04 	addi	r2,r2,-13000
 8005cd4:	d9002517 	ldw	r4,148(sp)
 8005cd8:	203fec26 	beq	r4,zero,8005c8c <__alt_data_end+0xfc005c8c>
 8005cdc:	10c000c7 	ldb	r3,3(r2)
 8005ce0:	18017d1e 	bne	r3,zero,80062d8 <_dtoa_r+0x708>
 8005ce4:	10c000c4 	addi	r3,r2,3
 8005ce8:	d9802517 	ldw	r6,148(sp)
 8005cec:	30c00015 	stw	r3,0(r6)
 8005cf0:	003fe606 	br	8005c8c <__alt_data_end+0xfc005c8c>
 8005cf4:	04e00034 	movhi	r19,32768
 8005cf8:	9cffffc4 	addi	r19,r19,-1
 8005cfc:	00800044 	movi	r2,1
 8005d00:	ace6703a 	and	r19,r21,r19
 8005d04:	88800015 	stw	r2,0(r17)
 8005d08:	982b883a 	mov	r21,r19
 8005d0c:	003fcd06 	br	8005c44 <__alt_data_end+0xfc005c44>
 8005d10:	d8800204 	addi	r2,sp,8
 8005d14:	a822d53a 	srli	r17,r21,20
 8005d18:	d8800015 	stw	r2,0(sp)
 8005d1c:	8009883a 	mov	r4,r16
 8005d20:	900b883a 	mov	r5,r18
 8005d24:	980d883a 	mov	r6,r19
 8005d28:	d9c00104 	addi	r7,sp,4
 8005d2c:	8009cf40 	call	8009cf4 <__d2b>
 8005d30:	1039883a 	mov	fp,r2
 8005d34:	88016a1e 	bne	r17,zero,80062e0 <_dtoa_r+0x710>
 8005d38:	dd000217 	ldw	r20,8(sp)
 8005d3c:	dc400117 	ldw	r17,4(sp)
 8005d40:	00befbc4 	movi	r2,-1041
 8005d44:	a463883a 	add	r17,r20,r17
 8005d48:	8882ea16 	blt	r17,r2,80068f4 <_dtoa_r+0xd24>
 8005d4c:	00bf0384 	movi	r2,-1010
 8005d50:	1445c83a 	sub	r2,r2,r17
 8005d54:	89010484 	addi	r4,r17,1042
 8005d58:	a8aa983a 	sll	r21,r21,r2
 8005d5c:	9108d83a 	srl	r4,r18,r4
 8005d60:	a908b03a 	or	r4,r21,r4
 8005d64:	800f7d40 	call	800f7d4 <__floatunsidf>
 8005d68:	017f8434 	movhi	r5,65040
 8005d6c:	01800044 	movi	r6,1
 8005d70:	1009883a 	mov	r4,r2
 8005d74:	194b883a 	add	r5,r3,r5
 8005d78:	8c7fffc4 	addi	r17,r17,-1
 8005d7c:	d9800f15 	stw	r6,60(sp)
 8005d80:	000d883a 	mov	r6,zero
 8005d84:	01cffe34 	movhi	r7,16376
 8005d88:	800edac0 	call	800edac <__subdf3>
 8005d8c:	0198dbf4 	movhi	r6,25455
 8005d90:	01cff4f4 	movhi	r7,16339
 8005d94:	1009883a 	mov	r4,r2
 8005d98:	180b883a 	mov	r5,r3
 8005d9c:	3190d844 	addi	r6,r6,17249
 8005da0:	39e1e9c4 	addi	r7,r7,-30809
 8005da4:	800e6880 	call	800e688 <__muldf3>
 8005da8:	01a2d874 	movhi	r6,35681
 8005dac:	01cff1f4 	movhi	r7,16327
 8005db0:	180b883a 	mov	r5,r3
 8005db4:	31b22cc4 	addi	r6,r6,-14157
 8005db8:	39e28a04 	addi	r7,r7,-30168
 8005dbc:	1009883a 	mov	r4,r2
 8005dc0:	800d2dc0 	call	800d2dc <__adddf3>
 8005dc4:	8809883a 	mov	r4,r17
 8005dc8:	102d883a 	mov	r22,r2
 8005dcc:	182b883a 	mov	r21,r3
 8005dd0:	800f7040 	call	800f704 <__floatsidf>
 8005dd4:	019427f4 	movhi	r6,20639
 8005dd8:	01cff4f4 	movhi	r7,16339
 8005ddc:	1009883a 	mov	r4,r2
 8005de0:	180b883a 	mov	r5,r3
 8005de4:	319e7ec4 	addi	r6,r6,31227
 8005de8:	39d104c4 	addi	r7,r7,17427
 8005dec:	800e6880 	call	800e688 <__muldf3>
 8005df0:	b009883a 	mov	r4,r22
 8005df4:	a80b883a 	mov	r5,r21
 8005df8:	100d883a 	mov	r6,r2
 8005dfc:	180f883a 	mov	r7,r3
 8005e00:	800d2dc0 	call	800d2dc <__adddf3>
 8005e04:	1009883a 	mov	r4,r2
 8005e08:	180b883a 	mov	r5,r3
 8005e0c:	102d883a 	mov	r22,r2
 8005e10:	182b883a 	mov	r21,r3
 8005e14:	800f67c0 	call	800f67c <__fixdfsi>
 8005e18:	b009883a 	mov	r4,r22
 8005e1c:	a80b883a 	mov	r5,r21
 8005e20:	000d883a 	mov	r6,zero
 8005e24:	000f883a 	mov	r7,zero
 8005e28:	d8800515 	stw	r2,20(sp)
 8005e2c:	800e5a80 	call	800e5a8 <__ledf2>
 8005e30:	10023116 	blt	r2,zero,80066f8 <_dtoa_r+0xb28>
 8005e34:	d8c00517 	ldw	r3,20(sp)
 8005e38:	00800584 	movi	r2,22
 8005e3c:	10c21f36 	bltu	r2,r3,80066bc <_dtoa_r+0xaec>
 8005e40:	180490fa 	slli	r2,r3,3
 8005e44:	00c200b4 	movhi	r3,2050
 8005e48:	18f36a04 	addi	r3,r3,-12888
 8005e4c:	1885883a 	add	r2,r3,r2
 8005e50:	11000017 	ldw	r4,0(r2)
 8005e54:	11400117 	ldw	r5,4(r2)
 8005e58:	900d883a 	mov	r6,r18
 8005e5c:	980f883a 	mov	r7,r19
 8005e60:	800e4c80 	call	800e4c8 <__gedf2>
 8005e64:	0082a70e 	bge	zero,r2,8006904 <_dtoa_r+0xd34>
 8005e68:	d9000517 	ldw	r4,20(sp)
 8005e6c:	d8000c15 	stw	zero,48(sp)
 8005e70:	213fffc4 	addi	r4,r4,-1
 8005e74:	d9000515 	stw	r4,20(sp)
 8005e78:	a463c83a 	sub	r17,r20,r17
 8005e7c:	8dbfffc4 	addi	r22,r17,-1
 8005e80:	b0021916 	blt	r22,zero,80066e8 <_dtoa_r+0xb18>
 8005e84:	d8000815 	stw	zero,32(sp)
 8005e88:	d8800517 	ldw	r2,20(sp)
 8005e8c:	10020e16 	blt	r2,zero,80066c8 <_dtoa_r+0xaf8>
 8005e90:	b0ad883a 	add	r22,r22,r2
 8005e94:	d8800a15 	stw	r2,40(sp)
 8005e98:	d8000915 	stw	zero,36(sp)
 8005e9c:	d8c00317 	ldw	r3,12(sp)
 8005ea0:	00800244 	movi	r2,9
 8005ea4:	10c11a36 	bltu	r2,r3,8006310 <_dtoa_r+0x740>
 8005ea8:	00800144 	movi	r2,5
 8005eac:	10c4fc0e 	bge	r2,r3,80072a0 <_dtoa_r+0x16d0>
 8005eb0:	18ffff04 	addi	r3,r3,-4
 8005eb4:	d8c00315 	stw	r3,12(sp)
 8005eb8:	0029883a 	mov	r20,zero
 8005ebc:	d9800317 	ldw	r6,12(sp)
 8005ec0:	008000c4 	movi	r2,3
 8005ec4:	3083bd26 	beq	r6,r2,8006dbc <_dtoa_r+0x11ec>
 8005ec8:	1183670e 	bge	r2,r6,8006c68 <_dtoa_r+0x1098>
 8005ecc:	d8c00317 	ldw	r3,12(sp)
 8005ed0:	00800104 	movi	r2,4
 8005ed4:	1882e726 	beq	r3,r2,8006a74 <_dtoa_r+0xea4>
 8005ed8:	00800144 	movi	r2,5
 8005edc:	1884f21e 	bne	r3,r2,80072a8 <_dtoa_r+0x16d8>
 8005ee0:	00800044 	movi	r2,1
 8005ee4:	d8800b15 	stw	r2,44(sp)
 8005ee8:	d8c02217 	ldw	r3,136(sp)
 8005eec:	d9000517 	ldw	r4,20(sp)
 8005ef0:	1907883a 	add	r3,r3,r4
 8005ef4:	19800044 	addi	r6,r3,1
 8005ef8:	d8c00d15 	stw	r3,52(sp)
 8005efc:	d9800615 	stw	r6,24(sp)
 8005f00:	0183c30e 	bge	zero,r6,8006e10 <_dtoa_r+0x1240>
 8005f04:	d9800617 	ldw	r6,24(sp)
 8005f08:	3023883a 	mov	r17,r6
 8005f0c:	80001115 	stw	zero,68(r16)
 8005f10:	008005c4 	movi	r2,23
 8005f14:	1184f62e 	bgeu	r2,r6,80072f0 <_dtoa_r+0x1720>
 8005f18:	00c00044 	movi	r3,1
 8005f1c:	00800104 	movi	r2,4
 8005f20:	1085883a 	add	r2,r2,r2
 8005f24:	11000504 	addi	r4,r2,20
 8005f28:	180b883a 	mov	r5,r3
 8005f2c:	18c00044 	addi	r3,r3,1
 8005f30:	313ffb2e 	bgeu	r6,r4,8005f20 <__alt_data_end+0xfc005f20>
 8005f34:	81401115 	stw	r5,68(r16)
 8005f38:	8009883a 	mov	r4,r16
 8005f3c:	80090c00 	call	80090c0 <_Balloc>
 8005f40:	d8800715 	stw	r2,28(sp)
 8005f44:	80801015 	stw	r2,64(r16)
 8005f48:	00800384 	movi	r2,14
 8005f4c:	1440fd36 	bltu	r2,r17,8006344 <_dtoa_r+0x774>
 8005f50:	a000fc26 	beq	r20,zero,8006344 <_dtoa_r+0x774>
 8005f54:	d8800517 	ldw	r2,20(sp)
 8005f58:	0083b90e 	bge	zero,r2,8006e40 <_dtoa_r+0x1270>
 8005f5c:	d8c00517 	ldw	r3,20(sp)
 8005f60:	108003cc 	andi	r2,r2,15
 8005f64:	100490fa 	slli	r2,r2,3
 8005f68:	182fd13a 	srai	r23,r3,4
 8005f6c:	00c200b4 	movhi	r3,2050
 8005f70:	18f36a04 	addi	r3,r3,-12888
 8005f74:	1885883a 	add	r2,r3,r2
 8005f78:	b8c0040c 	andi	r3,r23,16
 8005f7c:	12c00017 	ldw	r11,0(r2)
 8005f80:	12800117 	ldw	r10,4(r2)
 8005f84:	18039726 	beq	r3,zero,8006de4 <_dtoa_r+0x1214>
 8005f88:	008200b4 	movhi	r2,2050
 8005f8c:	10b36004 	addi	r2,r2,-12928
 8005f90:	11800817 	ldw	r6,32(r2)
 8005f94:	11c00917 	ldw	r7,36(r2)
 8005f98:	9009883a 	mov	r4,r18
 8005f9c:	980b883a 	mov	r5,r19
 8005fa0:	da801615 	stw	r10,88(sp)
 8005fa4:	dac01515 	stw	r11,84(sp)
 8005fa8:	800db780 	call	800db78 <__divdf3>
 8005fac:	da801617 	ldw	r10,88(sp)
 8005fb0:	dac01517 	ldw	r11,84(sp)
 8005fb4:	bdc003cc 	andi	r23,r23,15
 8005fb8:	044000c4 	movi	r17,3
 8005fbc:	d8800e15 	stw	r2,56(sp)
 8005fc0:	182b883a 	mov	r21,r3
 8005fc4:	b8001126 	beq	r23,zero,800600c <_dtoa_r+0x43c>
 8005fc8:	050200b4 	movhi	r20,2050
 8005fcc:	a5336004 	addi	r20,r20,-12928
 8005fd0:	5805883a 	mov	r2,r11
 8005fd4:	5007883a 	mov	r3,r10
 8005fd8:	b980004c 	andi	r6,r23,1
 8005fdc:	1009883a 	mov	r4,r2
 8005fe0:	b82fd07a 	srai	r23,r23,1
 8005fe4:	180b883a 	mov	r5,r3
 8005fe8:	30000426 	beq	r6,zero,8005ffc <_dtoa_r+0x42c>
 8005fec:	a1800017 	ldw	r6,0(r20)
 8005ff0:	a1c00117 	ldw	r7,4(r20)
 8005ff4:	8c400044 	addi	r17,r17,1
 8005ff8:	800e6880 	call	800e688 <__muldf3>
 8005ffc:	a5000204 	addi	r20,r20,8
 8006000:	b83ff51e 	bne	r23,zero,8005fd8 <__alt_data_end+0xfc005fd8>
 8006004:	1017883a 	mov	r11,r2
 8006008:	1815883a 	mov	r10,r3
 800600c:	d9000e17 	ldw	r4,56(sp)
 8006010:	a80b883a 	mov	r5,r21
 8006014:	580d883a 	mov	r6,r11
 8006018:	500f883a 	mov	r7,r10
 800601c:	800db780 	call	800db78 <__divdf3>
 8006020:	1029883a 	mov	r20,r2
 8006024:	182b883a 	mov	r21,r3
 8006028:	d9800c17 	ldw	r6,48(sp)
 800602c:	30000626 	beq	r6,zero,8006048 <_dtoa_r+0x478>
 8006030:	a009883a 	mov	r4,r20
 8006034:	a80b883a 	mov	r5,r21
 8006038:	000d883a 	mov	r6,zero
 800603c:	01cffc34 	movhi	r7,16368
 8006040:	800e5a80 	call	800e5a8 <__ledf2>
 8006044:	10043216 	blt	r2,zero,8007110 <_dtoa_r+0x1540>
 8006048:	8809883a 	mov	r4,r17
 800604c:	800f7040 	call	800f704 <__floatsidf>
 8006050:	1009883a 	mov	r4,r2
 8006054:	180b883a 	mov	r5,r3
 8006058:	a00d883a 	mov	r6,r20
 800605c:	a80f883a 	mov	r7,r21
 8006060:	800e6880 	call	800e688 <__muldf3>
 8006064:	000d883a 	mov	r6,zero
 8006068:	1009883a 	mov	r4,r2
 800606c:	180b883a 	mov	r5,r3
 8006070:	01d00734 	movhi	r7,16412
 8006074:	800d2dc0 	call	800d2dc <__adddf3>
 8006078:	1023883a 	mov	r17,r2
 800607c:	d9800617 	ldw	r6,24(sp)
 8006080:	00bf3034 	movhi	r2,64704
 8006084:	1885883a 	add	r2,r3,r2
 8006088:	d8800e15 	stw	r2,56(sp)
 800608c:	30032e26 	beq	r6,zero,8006d48 <_dtoa_r+0x1178>
 8006090:	d8c00517 	ldw	r3,20(sp)
 8006094:	da800617 	ldw	r10,24(sp)
 8006098:	d8c01215 	stw	r3,72(sp)
 800609c:	d9000b17 	ldw	r4,44(sp)
 80060a0:	2003b026 	beq	r4,zero,8006f64 <_dtoa_r+0x1394>
 80060a4:	50bfffc4 	addi	r2,r10,-1
 80060a8:	100490fa 	slli	r2,r2,3
 80060ac:	00c200b4 	movhi	r3,2050
 80060b0:	18f36a04 	addi	r3,r3,-12888
 80060b4:	1885883a 	add	r2,r3,r2
 80060b8:	11800017 	ldw	r6,0(r2)
 80060bc:	11c00117 	ldw	r7,4(r2)
 80060c0:	d8800717 	ldw	r2,28(sp)
 80060c4:	0009883a 	mov	r4,zero
 80060c8:	014ff834 	movhi	r5,16352
 80060cc:	da801615 	stw	r10,88(sp)
 80060d0:	15c00044 	addi	r23,r2,1
 80060d4:	800db780 	call	800db78 <__divdf3>
 80060d8:	d9c00e17 	ldw	r7,56(sp)
 80060dc:	880d883a 	mov	r6,r17
 80060e0:	1009883a 	mov	r4,r2
 80060e4:	180b883a 	mov	r5,r3
 80060e8:	800edac0 	call	800edac <__subdf3>
 80060ec:	a80b883a 	mov	r5,r21
 80060f0:	a009883a 	mov	r4,r20
 80060f4:	d8c01015 	stw	r3,64(sp)
 80060f8:	d8800e15 	stw	r2,56(sp)
 80060fc:	800f67c0 	call	800f67c <__fixdfsi>
 8006100:	1009883a 	mov	r4,r2
 8006104:	d8801715 	stw	r2,92(sp)
 8006108:	800f7040 	call	800f704 <__floatsidf>
 800610c:	a009883a 	mov	r4,r20
 8006110:	a80b883a 	mov	r5,r21
 8006114:	100d883a 	mov	r6,r2
 8006118:	180f883a 	mov	r7,r3
 800611c:	800edac0 	call	800edac <__subdf3>
 8006120:	da001717 	ldw	r8,92(sp)
 8006124:	1829883a 	mov	r20,r3
 8006128:	d8c00717 	ldw	r3,28(sp)
 800612c:	d9000e17 	ldw	r4,56(sp)
 8006130:	d9401017 	ldw	r5,64(sp)
 8006134:	42000c04 	addi	r8,r8,48
 8006138:	1023883a 	mov	r17,r2
 800613c:	1a000005 	stb	r8,0(r3)
 8006140:	880d883a 	mov	r6,r17
 8006144:	a00f883a 	mov	r7,r20
 8006148:	402b883a 	mov	r21,r8
 800614c:	800e4c80 	call	800e4c8 <__gedf2>
 8006150:	00844516 	blt	zero,r2,8007268 <_dtoa_r+0x1698>
 8006154:	0009883a 	mov	r4,zero
 8006158:	014ffc34 	movhi	r5,16368
 800615c:	880d883a 	mov	r6,r17
 8006160:	a00f883a 	mov	r7,r20
 8006164:	800edac0 	call	800edac <__subdf3>
 8006168:	d9000e17 	ldw	r4,56(sp)
 800616c:	d9401017 	ldw	r5,64(sp)
 8006170:	100d883a 	mov	r6,r2
 8006174:	180f883a 	mov	r7,r3
 8006178:	800e4c80 	call	800e4c8 <__gedf2>
 800617c:	da801617 	ldw	r10,88(sp)
 8006180:	00843616 	blt	zero,r2,800725c <_dtoa_r+0x168c>
 8006184:	00800044 	movi	r2,1
 8006188:	12806e0e 	bge	r2,r10,8006344 <_dtoa_r+0x774>
 800618c:	d9000717 	ldw	r4,28(sp)
 8006190:	dd801315 	stw	r22,76(sp)
 8006194:	dc001115 	stw	r16,68(sp)
 8006198:	2295883a 	add	r10,r4,r10
 800619c:	dcc01415 	stw	r19,80(sp)
 80061a0:	502d883a 	mov	r22,r10
 80061a4:	dcc01017 	ldw	r19,64(sp)
 80061a8:	b821883a 	mov	r16,r23
 80061ac:	dc801015 	stw	r18,64(sp)
 80061b0:	dc800e17 	ldw	r18,56(sp)
 80061b4:	00000906 	br	80061dc <_dtoa_r+0x60c>
 80061b8:	800edac0 	call	800edac <__subdf3>
 80061bc:	1009883a 	mov	r4,r2
 80061c0:	180b883a 	mov	r5,r3
 80061c4:	900d883a 	mov	r6,r18
 80061c8:	980f883a 	mov	r7,r19
 80061cc:	800e5a80 	call	800e5a8 <__ledf2>
 80061d0:	10040e16 	blt	r2,zero,800720c <_dtoa_r+0x163c>
 80061d4:	b821883a 	mov	r16,r23
 80061d8:	bd841026 	beq	r23,r22,800721c <_dtoa_r+0x164c>
 80061dc:	9009883a 	mov	r4,r18
 80061e0:	980b883a 	mov	r5,r19
 80061e4:	000d883a 	mov	r6,zero
 80061e8:	01d00934 	movhi	r7,16420
 80061ec:	800e6880 	call	800e688 <__muldf3>
 80061f0:	000d883a 	mov	r6,zero
 80061f4:	01d00934 	movhi	r7,16420
 80061f8:	8809883a 	mov	r4,r17
 80061fc:	a00b883a 	mov	r5,r20
 8006200:	1025883a 	mov	r18,r2
 8006204:	1827883a 	mov	r19,r3
 8006208:	800e6880 	call	800e688 <__muldf3>
 800620c:	180b883a 	mov	r5,r3
 8006210:	1009883a 	mov	r4,r2
 8006214:	1823883a 	mov	r17,r3
 8006218:	1029883a 	mov	r20,r2
 800621c:	800f67c0 	call	800f67c <__fixdfsi>
 8006220:	1009883a 	mov	r4,r2
 8006224:	102b883a 	mov	r21,r2
 8006228:	800f7040 	call	800f704 <__floatsidf>
 800622c:	a009883a 	mov	r4,r20
 8006230:	880b883a 	mov	r5,r17
 8006234:	100d883a 	mov	r6,r2
 8006238:	180f883a 	mov	r7,r3
 800623c:	800edac0 	call	800edac <__subdf3>
 8006240:	ad400c04 	addi	r21,r21,48
 8006244:	1009883a 	mov	r4,r2
 8006248:	180b883a 	mov	r5,r3
 800624c:	900d883a 	mov	r6,r18
 8006250:	980f883a 	mov	r7,r19
 8006254:	85400005 	stb	r21,0(r16)
 8006258:	1023883a 	mov	r17,r2
 800625c:	1829883a 	mov	r20,r3
 8006260:	800e5a80 	call	800e5a8 <__ledf2>
 8006264:	bdc00044 	addi	r23,r23,1
 8006268:	0009883a 	mov	r4,zero
 800626c:	014ffc34 	movhi	r5,16368
 8006270:	880d883a 	mov	r6,r17
 8006274:	a00f883a 	mov	r7,r20
 8006278:	103fcf0e 	bge	r2,zero,80061b8 <__alt_data_end+0xfc0061b8>
 800627c:	d9801217 	ldw	r6,72(sp)
 8006280:	dc001117 	ldw	r16,68(sp)
 8006284:	d9800515 	stw	r6,20(sp)
 8006288:	8009883a 	mov	r4,r16
 800628c:	e00b883a 	mov	r5,fp
 8006290:	80091680 	call	8009168 <_Bfree>
 8006294:	d8c00517 	ldw	r3,20(sp)
 8006298:	d9002317 	ldw	r4,140(sp)
 800629c:	d9802517 	ldw	r6,148(sp)
 80062a0:	b8000005 	stb	zero,0(r23)
 80062a4:	18800044 	addi	r2,r3,1
 80062a8:	20800015 	stw	r2,0(r4)
 80062ac:	30027226 	beq	r6,zero,8006c78 <_dtoa_r+0x10a8>
 80062b0:	35c00015 	stw	r23,0(r6)
 80062b4:	d8800717 	ldw	r2,28(sp)
 80062b8:	003e7406 	br	8005c8c <__alt_data_end+0xfc005c8c>
 80062bc:	00800434 	movhi	r2,16
 80062c0:	10bfffc4 	addi	r2,r2,-1
 80062c4:	a8aa703a 	and	r21,r21,r2
 80062c8:	a83e801e 	bne	r21,zero,8005ccc <__alt_data_end+0xfc005ccc>
 80062cc:	008200b4 	movhi	r2,2050
 80062d0:	10b34b04 	addi	r2,r2,-13012
 80062d4:	003e7f06 	br	8005cd4 <__alt_data_end+0xfc005cd4>
 80062d8:	10c00204 	addi	r3,r2,8
 80062dc:	003e8206 	br	8005ce8 <__alt_data_end+0xfc005ce8>
 80062e0:	01400434 	movhi	r5,16
 80062e4:	297fffc4 	addi	r5,r5,-1
 80062e8:	994a703a 	and	r5,r19,r5
 80062ec:	9009883a 	mov	r4,r18
 80062f0:	8c7f0044 	addi	r17,r17,-1023
 80062f4:	294ffc34 	orhi	r5,r5,16368
 80062f8:	dd000217 	ldw	r20,8(sp)
 80062fc:	d8000f15 	stw	zero,60(sp)
 8006300:	003e9f06 	br	8005d80 <__alt_data_end+0xfc005d80>
 8006304:	008200b4 	movhi	r2,2050
 8006308:	10b2a204 	addi	r2,r2,-13688
 800630c:	003e5f06 	br	8005c8c <__alt_data_end+0xfc005c8c>
 8006310:	80001115 	stw	zero,68(r16)
 8006314:	8009883a 	mov	r4,r16
 8006318:	000b883a 	mov	r5,zero
 800631c:	80090c00 	call	80090c0 <_Balloc>
 8006320:	01bfffc4 	movi	r6,-1
 8006324:	d8800715 	stw	r2,28(sp)
 8006328:	80801015 	stw	r2,64(r16)
 800632c:	00800044 	movi	r2,1
 8006330:	d9800615 	stw	r6,24(sp)
 8006334:	d8800b15 	stw	r2,44(sp)
 8006338:	d8002215 	stw	zero,136(sp)
 800633c:	d9800d15 	stw	r6,52(sp)
 8006340:	d8000315 	stw	zero,12(sp)
 8006344:	d8800117 	ldw	r2,4(sp)
 8006348:	10008e16 	blt	r2,zero,8006584 <_dtoa_r+0x9b4>
 800634c:	d9000517 	ldw	r4,20(sp)
 8006350:	00c00384 	movi	r3,14
 8006354:	19008b16 	blt	r3,r4,8006584 <_dtoa_r+0x9b4>
 8006358:	200490fa 	slli	r2,r4,3
 800635c:	00c200b4 	movhi	r3,2050
 8006360:	d9802217 	ldw	r6,136(sp)
 8006364:	18f36a04 	addi	r3,r3,-12888
 8006368:	1885883a 	add	r2,r3,r2
 800636c:	14400017 	ldw	r17,0(r2)
 8006370:	15000117 	ldw	r20,4(r2)
 8006374:	3001c716 	blt	r6,zero,8006a94 <_dtoa_r+0xec4>
 8006378:	880d883a 	mov	r6,r17
 800637c:	a00f883a 	mov	r7,r20
 8006380:	9009883a 	mov	r4,r18
 8006384:	980b883a 	mov	r5,r19
 8006388:	800db780 	call	800db78 <__divdf3>
 800638c:	180b883a 	mov	r5,r3
 8006390:	1009883a 	mov	r4,r2
 8006394:	800f67c0 	call	800f67c <__fixdfsi>
 8006398:	1009883a 	mov	r4,r2
 800639c:	102d883a 	mov	r22,r2
 80063a0:	800f7040 	call	800f704 <__floatsidf>
 80063a4:	1009883a 	mov	r4,r2
 80063a8:	180b883a 	mov	r5,r3
 80063ac:	880d883a 	mov	r6,r17
 80063b0:	a00f883a 	mov	r7,r20
 80063b4:	800e6880 	call	800e688 <__muldf3>
 80063b8:	9009883a 	mov	r4,r18
 80063bc:	980b883a 	mov	r5,r19
 80063c0:	100d883a 	mov	r6,r2
 80063c4:	180f883a 	mov	r7,r3
 80063c8:	800edac0 	call	800edac <__subdf3>
 80063cc:	d9000717 	ldw	r4,28(sp)
 80063d0:	d9800617 	ldw	r6,24(sp)
 80063d4:	180b883a 	mov	r5,r3
 80063d8:	b0c00c04 	addi	r3,r22,48
 80063dc:	20c00005 	stb	r3,0(r4)
 80063e0:	25c00044 	addi	r23,r4,1
 80063e4:	01000044 	movi	r4,1
 80063e8:	1011883a 	mov	r8,r2
 80063ec:	2807883a 	mov	r3,r5
 80063f0:	31003d26 	beq	r6,r4,80064e8 <_dtoa_r+0x918>
 80063f4:	000d883a 	mov	r6,zero
 80063f8:	01d00934 	movhi	r7,16420
 80063fc:	1009883a 	mov	r4,r2
 8006400:	800e6880 	call	800e688 <__muldf3>
 8006404:	1009883a 	mov	r4,r2
 8006408:	180b883a 	mov	r5,r3
 800640c:	000d883a 	mov	r6,zero
 8006410:	000f883a 	mov	r7,zero
 8006414:	1027883a 	mov	r19,r2
 8006418:	182b883a 	mov	r21,r3
 800641c:	800e4440 	call	800e444 <__eqdf2>
 8006420:	103f9926 	beq	r2,zero,8006288 <__alt_data_end+0xfc006288>
 8006424:	d8c00617 	ldw	r3,24(sp)
 8006428:	d9000717 	ldw	r4,28(sp)
 800642c:	b825883a 	mov	r18,r23
 8006430:	18bfffc4 	addi	r2,r3,-1
 8006434:	20ad883a 	add	r22,r4,r2
 8006438:	dc000315 	stw	r16,12(sp)
 800643c:	00000a06 	br	8006468 <_dtoa_r+0x898>
 8006440:	800e6880 	call	800e688 <__muldf3>
 8006444:	1009883a 	mov	r4,r2
 8006448:	180b883a 	mov	r5,r3
 800644c:	000d883a 	mov	r6,zero
 8006450:	000f883a 	mov	r7,zero
 8006454:	1027883a 	mov	r19,r2
 8006458:	182b883a 	mov	r21,r3
 800645c:	b825883a 	mov	r18,r23
 8006460:	800e4440 	call	800e444 <__eqdf2>
 8006464:	10022626 	beq	r2,zero,8006d00 <_dtoa_r+0x1130>
 8006468:	880d883a 	mov	r6,r17
 800646c:	a00f883a 	mov	r7,r20
 8006470:	9809883a 	mov	r4,r19
 8006474:	a80b883a 	mov	r5,r21
 8006478:	800db780 	call	800db78 <__divdf3>
 800647c:	180b883a 	mov	r5,r3
 8006480:	1009883a 	mov	r4,r2
 8006484:	800f67c0 	call	800f67c <__fixdfsi>
 8006488:	1009883a 	mov	r4,r2
 800648c:	1021883a 	mov	r16,r2
 8006490:	800f7040 	call	800f704 <__floatsidf>
 8006494:	1009883a 	mov	r4,r2
 8006498:	180b883a 	mov	r5,r3
 800649c:	880d883a 	mov	r6,r17
 80064a0:	a00f883a 	mov	r7,r20
 80064a4:	800e6880 	call	800e688 <__muldf3>
 80064a8:	9809883a 	mov	r4,r19
 80064ac:	a80b883a 	mov	r5,r21
 80064b0:	100d883a 	mov	r6,r2
 80064b4:	180f883a 	mov	r7,r3
 80064b8:	800edac0 	call	800edac <__subdf3>
 80064bc:	82000c04 	addi	r8,r16,48
 80064c0:	92000005 	stb	r8,0(r18)
 80064c4:	1009883a 	mov	r4,r2
 80064c8:	180b883a 	mov	r5,r3
 80064cc:	000d883a 	mov	r6,zero
 80064d0:	01d00934 	movhi	r7,16420
 80064d4:	1011883a 	mov	r8,r2
 80064d8:	bdc00044 	addi	r23,r23,1
 80064dc:	95bfd81e 	bne	r18,r22,8006440 <__alt_data_end+0xfc006440>
 80064e0:	802d883a 	mov	r22,r16
 80064e4:	dc000317 	ldw	r16,12(sp)
 80064e8:	4009883a 	mov	r4,r8
 80064ec:	180b883a 	mov	r5,r3
 80064f0:	400d883a 	mov	r6,r8
 80064f4:	180f883a 	mov	r7,r3
 80064f8:	800d2dc0 	call	800d2dc <__adddf3>
 80064fc:	8809883a 	mov	r4,r17
 8006500:	a00b883a 	mov	r5,r20
 8006504:	100d883a 	mov	r6,r2
 8006508:	180f883a 	mov	r7,r3
 800650c:	1027883a 	mov	r19,r2
 8006510:	1825883a 	mov	r18,r3
 8006514:	800e5a80 	call	800e5a8 <__ledf2>
 8006518:	10000816 	blt	r2,zero,800653c <_dtoa_r+0x96c>
 800651c:	8809883a 	mov	r4,r17
 8006520:	a00b883a 	mov	r5,r20
 8006524:	980d883a 	mov	r6,r19
 8006528:	900f883a 	mov	r7,r18
 800652c:	800e4440 	call	800e444 <__eqdf2>
 8006530:	103f551e 	bne	r2,zero,8006288 <__alt_data_end+0xfc006288>
 8006534:	b580004c 	andi	r22,r22,1
 8006538:	b03f5326 	beq	r22,zero,8006288 <__alt_data_end+0xfc006288>
 800653c:	bd7fffc3 	ldbu	r21,-1(r23)
 8006540:	b8bfffc4 	addi	r2,r23,-1
 8006544:	1007883a 	mov	r3,r2
 8006548:	01400e44 	movi	r5,57
 800654c:	d9800717 	ldw	r6,28(sp)
 8006550:	00000506 	br	8006568 <_dtoa_r+0x998>
 8006554:	18ffffc4 	addi	r3,r3,-1
 8006558:	30825e26 	beq	r6,r2,8006ed4 <_dtoa_r+0x1304>
 800655c:	1d400003 	ldbu	r21,0(r3)
 8006560:	102f883a 	mov	r23,r2
 8006564:	10bfffc4 	addi	r2,r2,-1
 8006568:	a9003fcc 	andi	r4,r21,255
 800656c:	2100201c 	xori	r4,r4,128
 8006570:	213fe004 	addi	r4,r4,-128
 8006574:	217ff726 	beq	r4,r5,8006554 <__alt_data_end+0xfc006554>
 8006578:	aa000044 	addi	r8,r21,1
 800657c:	12000005 	stb	r8,0(r2)
 8006580:	003f4106 	br	8006288 <__alt_data_end+0xfc006288>
 8006584:	d8c00b17 	ldw	r3,44(sp)
 8006588:	18006726 	beq	r3,zero,8006728 <_dtoa_r+0xb58>
 800658c:	d9000317 	ldw	r4,12(sp)
 8006590:	00c00044 	movi	r3,1
 8006594:	19016a0e 	bge	r3,r4,8006b40 <_dtoa_r+0xf70>
 8006598:	d8800617 	ldw	r2,24(sp)
 800659c:	d8c00917 	ldw	r3,36(sp)
 80065a0:	157fffc4 	addi	r21,r2,-1
 80065a4:	1d420716 	blt	r3,r21,8006dc4 <_dtoa_r+0x11f4>
 80065a8:	1d6bc83a 	sub	r21,r3,r21
 80065ac:	d8800617 	ldw	r2,24(sp)
 80065b0:	1002c716 	blt	r2,zero,80070d0 <_dtoa_r+0x1500>
 80065b4:	dd000817 	ldw	r20,32(sp)
 80065b8:	d8800617 	ldw	r2,24(sp)
 80065bc:	d9800817 	ldw	r6,32(sp)
 80065c0:	8009883a 	mov	r4,r16
 80065c4:	01400044 	movi	r5,1
 80065c8:	308d883a 	add	r6,r6,r2
 80065cc:	d9800815 	stw	r6,32(sp)
 80065d0:	b0ad883a 	add	r22,r22,r2
 80065d4:	80094c00 	call	80094c0 <__i2b>
 80065d8:	1023883a 	mov	r17,r2
 80065dc:	a0000826 	beq	r20,zero,8006600 <_dtoa_r+0xa30>
 80065e0:	0580070e 	bge	zero,r22,8006600 <_dtoa_r+0xa30>
 80065e4:	b005883a 	mov	r2,r22
 80065e8:	a5812016 	blt	r20,r22,8006a6c <_dtoa_r+0xe9c>
 80065ec:	d8c00817 	ldw	r3,32(sp)
 80065f0:	a0a9c83a 	sub	r20,r20,r2
 80065f4:	b0adc83a 	sub	r22,r22,r2
 80065f8:	1887c83a 	sub	r3,r3,r2
 80065fc:	d8c00815 	stw	r3,32(sp)
 8006600:	d9000917 	ldw	r4,36(sp)
 8006604:	0100140e 	bge	zero,r4,8006658 <_dtoa_r+0xa88>
 8006608:	d9800b17 	ldw	r6,44(sp)
 800660c:	3001e526 	beq	r6,zero,8006da4 <_dtoa_r+0x11d4>
 8006610:	05400e0e 	bge	zero,r21,800664c <_dtoa_r+0xa7c>
 8006614:	880b883a 	mov	r5,r17
 8006618:	8009883a 	mov	r4,r16
 800661c:	a80d883a 	mov	r6,r21
 8006620:	80096f80 	call	80096f8 <__pow5mult>
 8006624:	e00d883a 	mov	r6,fp
 8006628:	8009883a 	mov	r4,r16
 800662c:	100b883a 	mov	r5,r2
 8006630:	1023883a 	mov	r17,r2
 8006634:	80094fc0 	call	80094fc <__multiply>
 8006638:	102f883a 	mov	r23,r2
 800663c:	e00b883a 	mov	r5,fp
 8006640:	8009883a 	mov	r4,r16
 8006644:	80091680 	call	8009168 <_Bfree>
 8006648:	b839883a 	mov	fp,r23
 800664c:	d8800917 	ldw	r2,36(sp)
 8006650:	154dc83a 	sub	r6,r2,r21
 8006654:	3001281e 	bne	r6,zero,8006af8 <_dtoa_r+0xf28>
 8006658:	05c00044 	movi	r23,1
 800665c:	8009883a 	mov	r4,r16
 8006660:	b80b883a 	mov	r5,r23
 8006664:	80094c00 	call	80094c0 <__i2b>
 8006668:	d8c00a17 	ldw	r3,40(sp)
 800666c:	102b883a 	mov	r21,r2
 8006670:	00c0310e 	bge	zero,r3,8006738 <_dtoa_r+0xb68>
 8006674:	8009883a 	mov	r4,r16
 8006678:	100b883a 	mov	r5,r2
 800667c:	180d883a 	mov	r6,r3
 8006680:	80096f80 	call	80096f8 <__pow5mult>
 8006684:	d9000317 	ldw	r4,12(sp)
 8006688:	102b883a 	mov	r21,r2
 800668c:	b9011f0e 	bge	r23,r4,8006b0c <_dtoa_r+0xf3c>
 8006690:	0027883a 	mov	r19,zero
 8006694:	a8800417 	ldw	r2,16(r21)
 8006698:	10800104 	addi	r2,r2,4
 800669c:	1085883a 	add	r2,r2,r2
 80066a0:	1085883a 	add	r2,r2,r2
 80066a4:	a885883a 	add	r2,r21,r2
 80066a8:	11000017 	ldw	r4,0(r2)
 80066ac:	80093a80 	call	80093a8 <__hi0bits>
 80066b0:	00c00804 	movi	r3,32
 80066b4:	1885c83a 	sub	r2,r3,r2
 80066b8:	00002506 	br	8006750 <_dtoa_r+0xb80>
 80066bc:	01800044 	movi	r6,1
 80066c0:	d9800c15 	stw	r6,48(sp)
 80066c4:	003dec06 	br	8005e78 <__alt_data_end+0xfc005e78>
 80066c8:	d8c00817 	ldw	r3,32(sp)
 80066cc:	d9000517 	ldw	r4,20(sp)
 80066d0:	d8000a15 	stw	zero,40(sp)
 80066d4:	1907c83a 	sub	r3,r3,r4
 80066d8:	010dc83a 	sub	r6,zero,r4
 80066dc:	d8c00815 	stw	r3,32(sp)
 80066e0:	d9800915 	stw	r6,36(sp)
 80066e4:	003ded06 	br	8005e9c <__alt_data_end+0xfc005e9c>
 80066e8:	05adc83a 	sub	r22,zero,r22
 80066ec:	dd800815 	stw	r22,32(sp)
 80066f0:	002d883a 	mov	r22,zero
 80066f4:	003de406 	br	8005e88 <__alt_data_end+0xfc005e88>
 80066f8:	d9000517 	ldw	r4,20(sp)
 80066fc:	800f7040 	call	800f704 <__floatsidf>
 8006700:	1009883a 	mov	r4,r2
 8006704:	180b883a 	mov	r5,r3
 8006708:	b00d883a 	mov	r6,r22
 800670c:	a80f883a 	mov	r7,r21
 8006710:	800e4440 	call	800e444 <__eqdf2>
 8006714:	103dc726 	beq	r2,zero,8005e34 <__alt_data_end+0xfc005e34>
 8006718:	d8800517 	ldw	r2,20(sp)
 800671c:	10bfffc4 	addi	r2,r2,-1
 8006720:	d8800515 	stw	r2,20(sp)
 8006724:	003dc306 	br	8005e34 <__alt_data_end+0xfc005e34>
 8006728:	dd400917 	ldw	r21,36(sp)
 800672c:	dd000817 	ldw	r20,32(sp)
 8006730:	0023883a 	mov	r17,zero
 8006734:	003fa906 	br	80065dc <__alt_data_end+0xfc0065dc>
 8006738:	d9800317 	ldw	r6,12(sp)
 800673c:	b981670e 	bge	r23,r6,8006cdc <_dtoa_r+0x110c>
 8006740:	0027883a 	mov	r19,zero
 8006744:	d8c00a17 	ldw	r3,40(sp)
 8006748:	183fd21e 	bne	r3,zero,8006694 <__alt_data_end+0xfc006694>
 800674c:	00800044 	movi	r2,1
 8006750:	1585883a 	add	r2,r2,r22
 8006754:	108007cc 	andi	r2,r2,31
 8006758:	10005f26 	beq	r2,zero,80068d8 <_dtoa_r+0xd08>
 800675c:	00c00804 	movi	r3,32
 8006760:	1887c83a 	sub	r3,r3,r2
 8006764:	01000104 	movi	r4,4
 8006768:	20c2dd0e 	bge	r4,r3,80072e0 <_dtoa_r+0x1710>
 800676c:	d9000817 	ldw	r4,32(sp)
 8006770:	00c00704 	movi	r3,28
 8006774:	1885c83a 	sub	r2,r3,r2
 8006778:	2089883a 	add	r4,r4,r2
 800677c:	d9000815 	stw	r4,32(sp)
 8006780:	a0a9883a 	add	r20,r20,r2
 8006784:	b0ad883a 	add	r22,r22,r2
 8006788:	d8800817 	ldw	r2,32(sp)
 800678c:	0080050e 	bge	zero,r2,80067a4 <_dtoa_r+0xbd4>
 8006790:	e00b883a 	mov	r5,fp
 8006794:	8009883a 	mov	r4,r16
 8006798:	100d883a 	mov	r6,r2
 800679c:	80098380 	call	8009838 <__lshift>
 80067a0:	1039883a 	mov	fp,r2
 80067a4:	0580050e 	bge	zero,r22,80067bc <_dtoa_r+0xbec>
 80067a8:	a80b883a 	mov	r5,r21
 80067ac:	8009883a 	mov	r4,r16
 80067b0:	b00d883a 	mov	r6,r22
 80067b4:	80098380 	call	8009838 <__lshift>
 80067b8:	102b883a 	mov	r21,r2
 80067bc:	d8c00c17 	ldw	r3,48(sp)
 80067c0:	1801161e 	bne	r3,zero,8006c1c <_dtoa_r+0x104c>
 80067c4:	d8c00617 	ldw	r3,24(sp)
 80067c8:	00c12d0e 	bge	zero,r3,8006c80 <_dtoa_r+0x10b0>
 80067cc:	d8c00b17 	ldw	r3,44(sp)
 80067d0:	1800571e 	bne	r3,zero,8006930 <_dtoa_r+0xd60>
 80067d4:	dc800717 	ldw	r18,28(sp)
 80067d8:	dcc00617 	ldw	r19,24(sp)
 80067dc:	9029883a 	mov	r20,r18
 80067e0:	00000206 	br	80067ec <_dtoa_r+0xc1c>
 80067e4:	80091900 	call	8009190 <__multadd>
 80067e8:	1039883a 	mov	fp,r2
 80067ec:	e009883a 	mov	r4,fp
 80067f0:	a80b883a 	mov	r5,r21
 80067f4:	80059d00 	call	80059d0 <quorem>
 80067f8:	10800c04 	addi	r2,r2,48
 80067fc:	90800005 	stb	r2,0(r18)
 8006800:	94800044 	addi	r18,r18,1
 8006804:	9507c83a 	sub	r3,r18,r20
 8006808:	8009883a 	mov	r4,r16
 800680c:	e00b883a 	mov	r5,fp
 8006810:	01800284 	movi	r6,10
 8006814:	000f883a 	mov	r7,zero
 8006818:	1cfff216 	blt	r3,r19,80067e4 <__alt_data_end+0xfc0067e4>
 800681c:	1011883a 	mov	r8,r2
 8006820:	d8800617 	ldw	r2,24(sp)
 8006824:	00822e0e 	bge	zero,r2,80070e0 <_dtoa_r+0x1510>
 8006828:	d9000717 	ldw	r4,28(sp)
 800682c:	0025883a 	mov	r18,zero
 8006830:	20af883a 	add	r23,r4,r2
 8006834:	e00b883a 	mov	r5,fp
 8006838:	01800044 	movi	r6,1
 800683c:	8009883a 	mov	r4,r16
 8006840:	da001715 	stw	r8,92(sp)
 8006844:	80098380 	call	8009838 <__lshift>
 8006848:	1009883a 	mov	r4,r2
 800684c:	a80b883a 	mov	r5,r21
 8006850:	1039883a 	mov	fp,r2
 8006854:	80099800 	call	8009980 <__mcmp>
 8006858:	da001717 	ldw	r8,92(sp)
 800685c:	00816e0e 	bge	zero,r2,8006e18 <_dtoa_r+0x1248>
 8006860:	b93fffc3 	ldbu	r4,-1(r23)
 8006864:	b8bfffc4 	addi	r2,r23,-1
 8006868:	1007883a 	mov	r3,r2
 800686c:	01800e44 	movi	r6,57
 8006870:	d9c00717 	ldw	r7,28(sp)
 8006874:	00000506 	br	800688c <_dtoa_r+0xcbc>
 8006878:	18ffffc4 	addi	r3,r3,-1
 800687c:	38811926 	beq	r7,r2,8006ce4 <_dtoa_r+0x1114>
 8006880:	19000003 	ldbu	r4,0(r3)
 8006884:	102f883a 	mov	r23,r2
 8006888:	10bfffc4 	addi	r2,r2,-1
 800688c:	21403fcc 	andi	r5,r4,255
 8006890:	2940201c 	xori	r5,r5,128
 8006894:	297fe004 	addi	r5,r5,-128
 8006898:	29bff726 	beq	r5,r6,8006878 <__alt_data_end+0xfc006878>
 800689c:	21000044 	addi	r4,r4,1
 80068a0:	11000005 	stb	r4,0(r2)
 80068a4:	8009883a 	mov	r4,r16
 80068a8:	a80b883a 	mov	r5,r21
 80068ac:	80091680 	call	8009168 <_Bfree>
 80068b0:	883e7526 	beq	r17,zero,8006288 <__alt_data_end+0xfc006288>
 80068b4:	90000426 	beq	r18,zero,80068c8 <_dtoa_r+0xcf8>
 80068b8:	94400326 	beq	r18,r17,80068c8 <_dtoa_r+0xcf8>
 80068bc:	8009883a 	mov	r4,r16
 80068c0:	900b883a 	mov	r5,r18
 80068c4:	80091680 	call	8009168 <_Bfree>
 80068c8:	8009883a 	mov	r4,r16
 80068cc:	880b883a 	mov	r5,r17
 80068d0:	80091680 	call	8009168 <_Bfree>
 80068d4:	003e6c06 	br	8006288 <__alt_data_end+0xfc006288>
 80068d8:	00800704 	movi	r2,28
 80068dc:	d9800817 	ldw	r6,32(sp)
 80068e0:	a0a9883a 	add	r20,r20,r2
 80068e4:	b0ad883a 	add	r22,r22,r2
 80068e8:	308d883a 	add	r6,r6,r2
 80068ec:	d9800815 	stw	r6,32(sp)
 80068f0:	003fa506 	br	8006788 <__alt_data_end+0xfc006788>
 80068f4:	013efb84 	movi	r4,-1042
 80068f8:	246bc83a 	sub	r21,r4,r17
 80068fc:	9548983a 	sll	r4,r18,r21
 8006900:	003d1806 	br	8005d64 <__alt_data_end+0xfc005d64>
 8006904:	d8000c15 	stw	zero,48(sp)
 8006908:	003d5b06 	br	8005e78 <__alt_data_end+0xfc005e78>
 800690c:	880b883a 	mov	r5,r17
 8006910:	8009883a 	mov	r4,r16
 8006914:	01800284 	movi	r6,10
 8006918:	000f883a 	mov	r7,zero
 800691c:	80091900 	call	8009190 <__multadd>
 8006920:	1023883a 	mov	r17,r2
 8006924:	d8800d17 	ldw	r2,52(sp)
 8006928:	0082550e 	bge	zero,r2,8007280 <_dtoa_r+0x16b0>
 800692c:	d8800615 	stw	r2,24(sp)
 8006930:	0500050e 	bge	zero,r20,8006948 <_dtoa_r+0xd78>
 8006934:	880b883a 	mov	r5,r17
 8006938:	8009883a 	mov	r4,r16
 800693c:	a00d883a 	mov	r6,r20
 8006940:	80098380 	call	8009838 <__lshift>
 8006944:	1023883a 	mov	r17,r2
 8006948:	98016a1e 	bne	r19,zero,8006ef4 <_dtoa_r+0x1324>
 800694c:	8829883a 	mov	r20,r17
 8006950:	d9000617 	ldw	r4,24(sp)
 8006954:	dcc00717 	ldw	r19,28(sp)
 8006958:	9480004c 	andi	r18,r18,1
 800695c:	20bfffc4 	addi	r2,r4,-1
 8006960:	9885883a 	add	r2,r19,r2
 8006964:	d8800415 	stw	r2,16(sp)
 8006968:	dc800615 	stw	r18,24(sp)
 800696c:	e009883a 	mov	r4,fp
 8006970:	a80b883a 	mov	r5,r21
 8006974:	80059d00 	call	80059d0 <quorem>
 8006978:	e009883a 	mov	r4,fp
 800697c:	880b883a 	mov	r5,r17
 8006980:	102f883a 	mov	r23,r2
 8006984:	80099800 	call	8009980 <__mcmp>
 8006988:	8009883a 	mov	r4,r16
 800698c:	a80b883a 	mov	r5,r21
 8006990:	a00d883a 	mov	r6,r20
 8006994:	102d883a 	mov	r22,r2
 8006998:	80099e00 	call	80099e0 <__mdiff>
 800699c:	1007883a 	mov	r3,r2
 80069a0:	10800317 	ldw	r2,12(r2)
 80069a4:	bc800c04 	addi	r18,r23,48
 80069a8:	1000971e 	bne	r2,zero,8006c08 <_dtoa_r+0x1038>
 80069ac:	180b883a 	mov	r5,r3
 80069b0:	e009883a 	mov	r4,fp
 80069b4:	d8c01515 	stw	r3,84(sp)
 80069b8:	80099800 	call	8009980 <__mcmp>
 80069bc:	d8c01517 	ldw	r3,84(sp)
 80069c0:	8009883a 	mov	r4,r16
 80069c4:	d8801515 	stw	r2,84(sp)
 80069c8:	180b883a 	mov	r5,r3
 80069cc:	80091680 	call	8009168 <_Bfree>
 80069d0:	d8801517 	ldw	r2,84(sp)
 80069d4:	1000041e 	bne	r2,zero,80069e8 <_dtoa_r+0xe18>
 80069d8:	d9800317 	ldw	r6,12(sp)
 80069dc:	3000021e 	bne	r6,zero,80069e8 <_dtoa_r+0xe18>
 80069e0:	d8c00617 	ldw	r3,24(sp)
 80069e4:	18007626 	beq	r3,zero,8006bc0 <_dtoa_r+0xff0>
 80069e8:	b0005b16 	blt	r22,zero,8006b58 <_dtoa_r+0xf88>
 80069ec:	b000041e 	bne	r22,zero,8006a00 <_dtoa_r+0xe30>
 80069f0:	d9000317 	ldw	r4,12(sp)
 80069f4:	2000021e 	bne	r4,zero,8006a00 <_dtoa_r+0xe30>
 80069f8:	d8c00617 	ldw	r3,24(sp)
 80069fc:	18005626 	beq	r3,zero,8006b58 <_dtoa_r+0xf88>
 8006a00:	00814d16 	blt	zero,r2,8006f38 <_dtoa_r+0x1368>
 8006a04:	d8c00417 	ldw	r3,16(sp)
 8006a08:	9d800044 	addi	r22,r19,1
 8006a0c:	9c800005 	stb	r18,0(r19)
 8006a10:	b02f883a 	mov	r23,r22
 8006a14:	98c14c26 	beq	r19,r3,8006f48 <_dtoa_r+0x1378>
 8006a18:	e00b883a 	mov	r5,fp
 8006a1c:	8009883a 	mov	r4,r16
 8006a20:	01800284 	movi	r6,10
 8006a24:	000f883a 	mov	r7,zero
 8006a28:	80091900 	call	8009190 <__multadd>
 8006a2c:	1039883a 	mov	fp,r2
 8006a30:	8d006d26 	beq	r17,r20,8006be8 <_dtoa_r+0x1018>
 8006a34:	880b883a 	mov	r5,r17
 8006a38:	01800284 	movi	r6,10
 8006a3c:	000f883a 	mov	r7,zero
 8006a40:	8009883a 	mov	r4,r16
 8006a44:	80091900 	call	8009190 <__multadd>
 8006a48:	a00b883a 	mov	r5,r20
 8006a4c:	8009883a 	mov	r4,r16
 8006a50:	01800284 	movi	r6,10
 8006a54:	000f883a 	mov	r7,zero
 8006a58:	1023883a 	mov	r17,r2
 8006a5c:	80091900 	call	8009190 <__multadd>
 8006a60:	1029883a 	mov	r20,r2
 8006a64:	b027883a 	mov	r19,r22
 8006a68:	003fc006 	br	800696c <__alt_data_end+0xfc00696c>
 8006a6c:	a005883a 	mov	r2,r20
 8006a70:	003ede06 	br	80065ec <__alt_data_end+0xfc0065ec>
 8006a74:	01000044 	movi	r4,1
 8006a78:	d9000b15 	stw	r4,44(sp)
 8006a7c:	d9802217 	ldw	r6,136(sp)
 8006a80:	0180dc0e 	bge	zero,r6,8006df4 <_dtoa_r+0x1224>
 8006a84:	3023883a 	mov	r17,r6
 8006a88:	d9800d15 	stw	r6,52(sp)
 8006a8c:	d9800615 	stw	r6,24(sp)
 8006a90:	003d1e06 	br	8005f0c <__alt_data_end+0xfc005f0c>
 8006a94:	d8800617 	ldw	r2,24(sp)
 8006a98:	00be3716 	blt	zero,r2,8006378 <__alt_data_end+0xfc006378>
 8006a9c:	1000be1e 	bne	r2,zero,8006d98 <_dtoa_r+0x11c8>
 8006aa0:	8809883a 	mov	r4,r17
 8006aa4:	a00b883a 	mov	r5,r20
 8006aa8:	000d883a 	mov	r6,zero
 8006aac:	01d00534 	movhi	r7,16404
 8006ab0:	800e6880 	call	800e688 <__muldf3>
 8006ab4:	1009883a 	mov	r4,r2
 8006ab8:	180b883a 	mov	r5,r3
 8006abc:	900d883a 	mov	r6,r18
 8006ac0:	980f883a 	mov	r7,r19
 8006ac4:	800e4c80 	call	800e4c8 <__gedf2>
 8006ac8:	002b883a 	mov	r21,zero
 8006acc:	0023883a 	mov	r17,zero
 8006ad0:	10007a16 	blt	r2,zero,8006cbc <_dtoa_r+0x10ec>
 8006ad4:	d9002217 	ldw	r4,136(sp)
 8006ad8:	ddc00717 	ldw	r23,28(sp)
 8006adc:	0108303a 	nor	r4,zero,r4
 8006ae0:	d9000515 	stw	r4,20(sp)
 8006ae4:	8009883a 	mov	r4,r16
 8006ae8:	a80b883a 	mov	r5,r21
 8006aec:	80091680 	call	8009168 <_Bfree>
 8006af0:	883f751e 	bne	r17,zero,80068c8 <__alt_data_end+0xfc0068c8>
 8006af4:	003de406 	br	8006288 <__alt_data_end+0xfc006288>
 8006af8:	e00b883a 	mov	r5,fp
 8006afc:	8009883a 	mov	r4,r16
 8006b00:	80096f80 	call	80096f8 <__pow5mult>
 8006b04:	1039883a 	mov	fp,r2
 8006b08:	003ed306 	br	8006658 <__alt_data_end+0xfc006658>
 8006b0c:	903ee01e 	bne	r18,zero,8006690 <__alt_data_end+0xfc006690>
 8006b10:	00800434 	movhi	r2,16
 8006b14:	10bfffc4 	addi	r2,r2,-1
 8006b18:	9884703a 	and	r2,r19,r2
 8006b1c:	103f081e 	bne	r2,zero,8006740 <__alt_data_end+0xfc006740>
 8006b20:	9cdffc2c 	andhi	r19,r19,32752
 8006b24:	983f0626 	beq	r19,zero,8006740 <__alt_data_end+0xfc006740>
 8006b28:	d8800817 	ldw	r2,32(sp)
 8006b2c:	b5800044 	addi	r22,r22,1
 8006b30:	04c00044 	movi	r19,1
 8006b34:	10800044 	addi	r2,r2,1
 8006b38:	d8800815 	stw	r2,32(sp)
 8006b3c:	003f0106 	br	8006744 <__alt_data_end+0xfc006744>
 8006b40:	d9800f17 	ldw	r6,60(sp)
 8006b44:	30016826 	beq	r6,zero,80070e8 <_dtoa_r+0x1518>
 8006b48:	10810cc4 	addi	r2,r2,1075
 8006b4c:	dd400917 	ldw	r21,36(sp)
 8006b50:	dd000817 	ldw	r20,32(sp)
 8006b54:	003e9906 	br	80065bc <__alt_data_end+0xfc0065bc>
 8006b58:	9011883a 	mov	r8,r18
 8006b5c:	4007883a 	mov	r3,r8
 8006b60:	e02d883a 	mov	r22,fp
 8006b64:	0080100e 	bge	zero,r2,8006ba8 <_dtoa_r+0xfd8>
 8006b68:	01800044 	movi	r6,1
 8006b6c:	8009883a 	mov	r4,r16
 8006b70:	e00b883a 	mov	r5,fp
 8006b74:	da001515 	stw	r8,84(sp)
 8006b78:	da001715 	stw	r8,92(sp)
 8006b7c:	80098380 	call	8009838 <__lshift>
 8006b80:	1009883a 	mov	r4,r2
 8006b84:	a80b883a 	mov	r5,r21
 8006b88:	102d883a 	mov	r22,r2
 8006b8c:	80099800 	call	8009980 <__mcmp>
 8006b90:	d8c01517 	ldw	r3,84(sp)
 8006b94:	da001717 	ldw	r8,92(sp)
 8006b98:	0081a50e 	bge	zero,r2,8007230 <_dtoa_r+0x1660>
 8006b9c:	00800e44 	movi	r2,57
 8006ba0:	40817b26 	beq	r8,r2,8007190 <_dtoa_r+0x15c0>
 8006ba4:	40c00044 	addi	r3,r8,1
 8006ba8:	8825883a 	mov	r18,r17
 8006bac:	9dc00044 	addi	r23,r19,1
 8006bb0:	98c00005 	stb	r3,0(r19)
 8006bb4:	a023883a 	mov	r17,r20
 8006bb8:	b039883a 	mov	fp,r22
 8006bbc:	003f3906 	br	80068a4 <__alt_data_end+0xfc0068a4>
 8006bc0:	00800e44 	movi	r2,57
 8006bc4:	9011883a 	mov	r8,r18
 8006bc8:	90817226 	beq	r18,r2,8007194 <_dtoa_r+0x15c4>
 8006bcc:	0580010e 	bge	zero,r22,8006bd4 <_dtoa_r+0x1004>
 8006bd0:	ba000c44 	addi	r8,r23,49
 8006bd4:	8825883a 	mov	r18,r17
 8006bd8:	9dc00044 	addi	r23,r19,1
 8006bdc:	9a000005 	stb	r8,0(r19)
 8006be0:	a023883a 	mov	r17,r20
 8006be4:	003f2f06 	br	80068a4 <__alt_data_end+0xfc0068a4>
 8006be8:	880b883a 	mov	r5,r17
 8006bec:	8009883a 	mov	r4,r16
 8006bf0:	01800284 	movi	r6,10
 8006bf4:	000f883a 	mov	r7,zero
 8006bf8:	80091900 	call	8009190 <__multadd>
 8006bfc:	1023883a 	mov	r17,r2
 8006c00:	1029883a 	mov	r20,r2
 8006c04:	003f9706 	br	8006a64 <__alt_data_end+0xfc006a64>
 8006c08:	8009883a 	mov	r4,r16
 8006c0c:	180b883a 	mov	r5,r3
 8006c10:	80091680 	call	8009168 <_Bfree>
 8006c14:	00800044 	movi	r2,1
 8006c18:	003f7306 	br	80069e8 <__alt_data_end+0xfc0069e8>
 8006c1c:	e009883a 	mov	r4,fp
 8006c20:	a80b883a 	mov	r5,r21
 8006c24:	80099800 	call	8009980 <__mcmp>
 8006c28:	103ee60e 	bge	r2,zero,80067c4 <__alt_data_end+0xfc0067c4>
 8006c2c:	8009883a 	mov	r4,r16
 8006c30:	e00b883a 	mov	r5,fp
 8006c34:	01800284 	movi	r6,10
 8006c38:	000f883a 	mov	r7,zero
 8006c3c:	80091900 	call	8009190 <__multadd>
 8006c40:	d9000517 	ldw	r4,20(sp)
 8006c44:	d9800b17 	ldw	r6,44(sp)
 8006c48:	1039883a 	mov	fp,r2
 8006c4c:	213fffc4 	addi	r4,r4,-1
 8006c50:	d9000515 	stw	r4,20(sp)
 8006c54:	303f2d1e 	bne	r6,zero,800690c <__alt_data_end+0xfc00690c>
 8006c58:	d9000d17 	ldw	r4,52(sp)
 8006c5c:	0101780e 	bge	zero,r4,8007240 <_dtoa_r+0x1670>
 8006c60:	d9000615 	stw	r4,24(sp)
 8006c64:	003edb06 	br	80067d4 <__alt_data_end+0xfc0067d4>
 8006c68:	00800084 	movi	r2,2
 8006c6c:	30818e1e 	bne	r6,r2,80072a8 <_dtoa_r+0x16d8>
 8006c70:	d8000b15 	stw	zero,44(sp)
 8006c74:	003f8106 	br	8006a7c <__alt_data_end+0xfc006a7c>
 8006c78:	d8800717 	ldw	r2,28(sp)
 8006c7c:	003c0306 	br	8005c8c <__alt_data_end+0xfc005c8c>
 8006c80:	d9000317 	ldw	r4,12(sp)
 8006c84:	00800084 	movi	r2,2
 8006c88:	113ed00e 	bge	r2,r4,80067cc <__alt_data_end+0xfc0067cc>
 8006c8c:	d8c00617 	ldw	r3,24(sp)
 8006c90:	183f901e 	bne	r3,zero,8006ad4 <__alt_data_end+0xfc006ad4>
 8006c94:	a80b883a 	mov	r5,r21
 8006c98:	8009883a 	mov	r4,r16
 8006c9c:	01800144 	movi	r6,5
 8006ca0:	000f883a 	mov	r7,zero
 8006ca4:	80091900 	call	8009190 <__multadd>
 8006ca8:	e009883a 	mov	r4,fp
 8006cac:	100b883a 	mov	r5,r2
 8006cb0:	102b883a 	mov	r21,r2
 8006cb4:	80099800 	call	8009980 <__mcmp>
 8006cb8:	00bf860e 	bge	zero,r2,8006ad4 <__alt_data_end+0xfc006ad4>
 8006cbc:	d9800717 	ldw	r6,28(sp)
 8006cc0:	00800c44 	movi	r2,49
 8006cc4:	30800005 	stb	r2,0(r6)
 8006cc8:	d8800517 	ldw	r2,20(sp)
 8006ccc:	35c00044 	addi	r23,r6,1
 8006cd0:	10800044 	addi	r2,r2,1
 8006cd4:	d8800515 	stw	r2,20(sp)
 8006cd8:	003f8206 	br	8006ae4 <__alt_data_end+0xfc006ae4>
 8006cdc:	903e981e 	bne	r18,zero,8006740 <__alt_data_end+0xfc006740>
 8006ce0:	003f8b06 	br	8006b10 <__alt_data_end+0xfc006b10>
 8006ce4:	d9800517 	ldw	r6,20(sp)
 8006ce8:	d8c00717 	ldw	r3,28(sp)
 8006cec:	00800c44 	movi	r2,49
 8006cf0:	31800044 	addi	r6,r6,1
 8006cf4:	d9800515 	stw	r6,20(sp)
 8006cf8:	18800005 	stb	r2,0(r3)
 8006cfc:	003ee906 	br	80068a4 <__alt_data_end+0xfc0068a4>
 8006d00:	dc000317 	ldw	r16,12(sp)
 8006d04:	003d6006 	br	8006288 <__alt_data_end+0xfc006288>
 8006d08:	8809883a 	mov	r4,r17
 8006d0c:	800f7040 	call	800f704 <__floatsidf>
 8006d10:	a009883a 	mov	r4,r20
 8006d14:	a80b883a 	mov	r5,r21
 8006d18:	100d883a 	mov	r6,r2
 8006d1c:	180f883a 	mov	r7,r3
 8006d20:	800e6880 	call	800e688 <__muldf3>
 8006d24:	1009883a 	mov	r4,r2
 8006d28:	180b883a 	mov	r5,r3
 8006d2c:	000d883a 	mov	r6,zero
 8006d30:	01d00734 	movhi	r7,16412
 8006d34:	800d2dc0 	call	800d2dc <__adddf3>
 8006d38:	1023883a 	mov	r17,r2
 8006d3c:	00bf3034 	movhi	r2,64704
 8006d40:	1885883a 	add	r2,r3,r2
 8006d44:	d8800e15 	stw	r2,56(sp)
 8006d48:	a009883a 	mov	r4,r20
 8006d4c:	a80b883a 	mov	r5,r21
 8006d50:	000d883a 	mov	r6,zero
 8006d54:	01d00534 	movhi	r7,16404
 8006d58:	800edac0 	call	800edac <__subdf3>
 8006d5c:	d9c00e17 	ldw	r7,56(sp)
 8006d60:	1009883a 	mov	r4,r2
 8006d64:	180b883a 	mov	r5,r3
 8006d68:	880d883a 	mov	r6,r17
 8006d6c:	102b883a 	mov	r21,r2
 8006d70:	1829883a 	mov	r20,r3
 8006d74:	800e4c80 	call	800e4c8 <__gedf2>
 8006d78:	00807716 	blt	zero,r2,8006f58 <_dtoa_r+0x1388>
 8006d7c:	d8800e17 	ldw	r2,56(sp)
 8006d80:	a809883a 	mov	r4,r21
 8006d84:	a00b883a 	mov	r5,r20
 8006d88:	11e0003c 	xorhi	r7,r2,32768
 8006d8c:	880d883a 	mov	r6,r17
 8006d90:	800e5a80 	call	800e5a8 <__ledf2>
 8006d94:	103d6b0e 	bge	r2,zero,8006344 <__alt_data_end+0xfc006344>
 8006d98:	002b883a 	mov	r21,zero
 8006d9c:	0023883a 	mov	r17,zero
 8006da0:	003f4c06 	br	8006ad4 <__alt_data_end+0xfc006ad4>
 8006da4:	d9800917 	ldw	r6,36(sp)
 8006da8:	e00b883a 	mov	r5,fp
 8006dac:	8009883a 	mov	r4,r16
 8006db0:	80096f80 	call	80096f8 <__pow5mult>
 8006db4:	1039883a 	mov	fp,r2
 8006db8:	003e2706 	br	8006658 <__alt_data_end+0xfc006658>
 8006dbc:	d8000b15 	stw	zero,44(sp)
 8006dc0:	003c4906 	br	8005ee8 <__alt_data_end+0xfc005ee8>
 8006dc4:	d9000917 	ldw	r4,36(sp)
 8006dc8:	d9800a17 	ldw	r6,40(sp)
 8006dcc:	dd400915 	stw	r21,36(sp)
 8006dd0:	a905c83a 	sub	r2,r21,r4
 8006dd4:	308d883a 	add	r6,r6,r2
 8006dd8:	d9800a15 	stw	r6,40(sp)
 8006ddc:	002b883a 	mov	r21,zero
 8006de0:	003df206 	br	80065ac <__alt_data_end+0xfc0065ac>
 8006de4:	dc800e15 	stw	r18,56(sp)
 8006de8:	982b883a 	mov	r21,r19
 8006dec:	04400084 	movi	r17,2
 8006df0:	003c7406 	br	8005fc4 <__alt_data_end+0xfc005fc4>
 8006df4:	04400044 	movi	r17,1
 8006df8:	dc400d15 	stw	r17,52(sp)
 8006dfc:	dc400615 	stw	r17,24(sp)
 8006e00:	dc402215 	stw	r17,136(sp)
 8006e04:	80001115 	stw	zero,68(r16)
 8006e08:	000b883a 	mov	r5,zero
 8006e0c:	003c4a06 	br	8005f38 <__alt_data_end+0xfc005f38>
 8006e10:	3023883a 	mov	r17,r6
 8006e14:	003ffb06 	br	8006e04 <__alt_data_end+0xfc006e04>
 8006e18:	1000021e 	bne	r2,zero,8006e24 <_dtoa_r+0x1254>
 8006e1c:	4200004c 	andi	r8,r8,1
 8006e20:	403e8f1e 	bne	r8,zero,8006860 <__alt_data_end+0xfc006860>
 8006e24:	01000c04 	movi	r4,48
 8006e28:	00000106 	br	8006e30 <_dtoa_r+0x1260>
 8006e2c:	102f883a 	mov	r23,r2
 8006e30:	b8bfffc4 	addi	r2,r23,-1
 8006e34:	10c00007 	ldb	r3,0(r2)
 8006e38:	193ffc26 	beq	r3,r4,8006e2c <__alt_data_end+0xfc006e2c>
 8006e3c:	003e9906 	br	80068a4 <__alt_data_end+0xfc0068a4>
 8006e40:	d9000517 	ldw	r4,20(sp)
 8006e44:	012fc83a 	sub	r23,zero,r4
 8006e48:	b800ad26 	beq	r23,zero,8007100 <_dtoa_r+0x1530>
 8006e4c:	b88003cc 	andi	r2,r23,15
 8006e50:	100490fa 	slli	r2,r2,3
 8006e54:	00c200b4 	movhi	r3,2050
 8006e58:	18f36a04 	addi	r3,r3,-12888
 8006e5c:	1885883a 	add	r2,r3,r2
 8006e60:	11800017 	ldw	r6,0(r2)
 8006e64:	11c00117 	ldw	r7,4(r2)
 8006e68:	b82fd13a 	srai	r23,r23,4
 8006e6c:	9009883a 	mov	r4,r18
 8006e70:	980b883a 	mov	r5,r19
 8006e74:	800e6880 	call	800e688 <__muldf3>
 8006e78:	1029883a 	mov	r20,r2
 8006e7c:	182b883a 	mov	r21,r3
 8006e80:	b800f426 	beq	r23,zero,8007254 <_dtoa_r+0x1684>
 8006e84:	020200b4 	movhi	r8,2050
 8006e88:	42336004 	addi	r8,r8,-12928
 8006e8c:	8029883a 	mov	r20,r16
 8006e90:	04400084 	movi	r17,2
 8006e94:	4021883a 	mov	r16,r8
 8006e98:	b980004c 	andi	r6,r23,1
 8006e9c:	1009883a 	mov	r4,r2
 8006ea0:	b82fd07a 	srai	r23,r23,1
 8006ea4:	180b883a 	mov	r5,r3
 8006ea8:	30000426 	beq	r6,zero,8006ebc <_dtoa_r+0x12ec>
 8006eac:	81800017 	ldw	r6,0(r16)
 8006eb0:	81c00117 	ldw	r7,4(r16)
 8006eb4:	8c400044 	addi	r17,r17,1
 8006eb8:	800e6880 	call	800e688 <__muldf3>
 8006ebc:	84000204 	addi	r16,r16,8
 8006ec0:	b83ff51e 	bne	r23,zero,8006e98 <__alt_data_end+0xfc006e98>
 8006ec4:	a021883a 	mov	r16,r20
 8006ec8:	182b883a 	mov	r21,r3
 8006ecc:	1029883a 	mov	r20,r2
 8006ed0:	003c5506 	br	8006028 <__alt_data_end+0xfc006028>
 8006ed4:	d9800517 	ldw	r6,20(sp)
 8006ed8:	d9000717 	ldw	r4,28(sp)
 8006edc:	00c00c04 	movi	r3,48
 8006ee0:	31800044 	addi	r6,r6,1
 8006ee4:	d9800515 	stw	r6,20(sp)
 8006ee8:	20c00005 	stb	r3,0(r4)
 8006eec:	02000c44 	movi	r8,49
 8006ef0:	003da206 	br	800657c <__alt_data_end+0xfc00657c>
 8006ef4:	89400117 	ldw	r5,4(r17)
 8006ef8:	8009883a 	mov	r4,r16
 8006efc:	80090c00 	call	80090c0 <_Balloc>
 8006f00:	89800417 	ldw	r6,16(r17)
 8006f04:	11000304 	addi	r4,r2,12
 8006f08:	89400304 	addi	r5,r17,12
 8006f0c:	31800084 	addi	r6,r6,2
 8006f10:	318d883a 	add	r6,r6,r6
 8006f14:	318d883a 	add	r6,r6,r6
 8006f18:	1027883a 	mov	r19,r2
 8006f1c:	80032680 	call	8003268 <memcpy>
 8006f20:	8009883a 	mov	r4,r16
 8006f24:	980b883a 	mov	r5,r19
 8006f28:	01800044 	movi	r6,1
 8006f2c:	80098380 	call	8009838 <__lshift>
 8006f30:	1029883a 	mov	r20,r2
 8006f34:	003e8606 	br	8006950 <__alt_data_end+0xfc006950>
 8006f38:	00800e44 	movi	r2,57
 8006f3c:	90809526 	beq	r18,r2,8007194 <_dtoa_r+0x15c4>
 8006f40:	92000044 	addi	r8,r18,1
 8006f44:	003f2306 	br	8006bd4 <__alt_data_end+0xfc006bd4>
 8006f48:	9011883a 	mov	r8,r18
 8006f4c:	8825883a 	mov	r18,r17
 8006f50:	a023883a 	mov	r17,r20
 8006f54:	003e3706 	br	8006834 <__alt_data_end+0xfc006834>
 8006f58:	002b883a 	mov	r21,zero
 8006f5c:	0023883a 	mov	r17,zero
 8006f60:	003f5606 	br	8006cbc <__alt_data_end+0xfc006cbc>
 8006f64:	51bfffc4 	addi	r6,r10,-1
 8006f68:	300490fa 	slli	r2,r6,3
 8006f6c:	00c200b4 	movhi	r3,2050
 8006f70:	18f36a04 	addi	r3,r3,-12888
 8006f74:	1885883a 	add	r2,r3,r2
 8006f78:	d9c00e17 	ldw	r7,56(sp)
 8006f7c:	11000017 	ldw	r4,0(r2)
 8006f80:	11400117 	ldw	r5,4(r2)
 8006f84:	d8800717 	ldw	r2,28(sp)
 8006f88:	d9801015 	stw	r6,64(sp)
 8006f8c:	880d883a 	mov	r6,r17
 8006f90:	da801615 	stw	r10,88(sp)
 8006f94:	15c00044 	addi	r23,r2,1
 8006f98:	800e6880 	call	800e688 <__muldf3>
 8006f9c:	a80b883a 	mov	r5,r21
 8006fa0:	a009883a 	mov	r4,r20
 8006fa4:	d8c01115 	stw	r3,68(sp)
 8006fa8:	d8800e15 	stw	r2,56(sp)
 8006fac:	800f67c0 	call	800f67c <__fixdfsi>
 8006fb0:	1009883a 	mov	r4,r2
 8006fb4:	1023883a 	mov	r17,r2
 8006fb8:	800f7040 	call	800f704 <__floatsidf>
 8006fbc:	a009883a 	mov	r4,r20
 8006fc0:	a80b883a 	mov	r5,r21
 8006fc4:	100d883a 	mov	r6,r2
 8006fc8:	180f883a 	mov	r7,r3
 8006fcc:	800edac0 	call	800edac <__subdf3>
 8006fd0:	1813883a 	mov	r9,r3
 8006fd4:	d8c00717 	ldw	r3,28(sp)
 8006fd8:	8c400c04 	addi	r17,r17,48
 8006fdc:	1011883a 	mov	r8,r2
 8006fe0:	1c400005 	stb	r17,0(r3)
 8006fe4:	da801617 	ldw	r10,88(sp)
 8006fe8:	00800044 	movi	r2,1
 8006fec:	50802326 	beq	r10,r2,800707c <_dtoa_r+0x14ac>
 8006ff0:	d8800717 	ldw	r2,28(sp)
 8006ff4:	b82b883a 	mov	r21,r23
 8006ff8:	dc001315 	stw	r16,76(sp)
 8006ffc:	12a9883a 	add	r20,r2,r10
 8007000:	4807883a 	mov	r3,r9
 8007004:	4005883a 	mov	r2,r8
 8007008:	dc801415 	stw	r18,80(sp)
 800700c:	000d883a 	mov	r6,zero
 8007010:	01d00934 	movhi	r7,16420
 8007014:	1009883a 	mov	r4,r2
 8007018:	180b883a 	mov	r5,r3
 800701c:	800e6880 	call	800e688 <__muldf3>
 8007020:	180b883a 	mov	r5,r3
 8007024:	1009883a 	mov	r4,r2
 8007028:	1821883a 	mov	r16,r3
 800702c:	1025883a 	mov	r18,r2
 8007030:	800f67c0 	call	800f67c <__fixdfsi>
 8007034:	1009883a 	mov	r4,r2
 8007038:	1023883a 	mov	r17,r2
 800703c:	800f7040 	call	800f704 <__floatsidf>
 8007040:	9009883a 	mov	r4,r18
 8007044:	800b883a 	mov	r5,r16
 8007048:	100d883a 	mov	r6,r2
 800704c:	180f883a 	mov	r7,r3
 8007050:	8c400c04 	addi	r17,r17,48
 8007054:	800edac0 	call	800edac <__subdf3>
 8007058:	ad400044 	addi	r21,r21,1
 800705c:	ac7fffc5 	stb	r17,-1(r21)
 8007060:	ad3fea1e 	bne	r21,r20,800700c <__alt_data_end+0xfc00700c>
 8007064:	1813883a 	mov	r9,r3
 8007068:	d8c01017 	ldw	r3,64(sp)
 800706c:	dc001317 	ldw	r16,76(sp)
 8007070:	dc801417 	ldw	r18,80(sp)
 8007074:	1011883a 	mov	r8,r2
 8007078:	b8ef883a 	add	r23,r23,r3
 800707c:	d9000e17 	ldw	r4,56(sp)
 8007080:	d9401117 	ldw	r5,68(sp)
 8007084:	000d883a 	mov	r6,zero
 8007088:	01cff834 	movhi	r7,16352
 800708c:	da001715 	stw	r8,92(sp)
 8007090:	da401515 	stw	r9,84(sp)
 8007094:	800d2dc0 	call	800d2dc <__adddf3>
 8007098:	da001717 	ldw	r8,92(sp)
 800709c:	da401517 	ldw	r9,84(sp)
 80070a0:	1009883a 	mov	r4,r2
 80070a4:	400d883a 	mov	r6,r8
 80070a8:	480f883a 	mov	r7,r9
 80070ac:	180b883a 	mov	r5,r3
 80070b0:	800e5a80 	call	800e5a8 <__ledf2>
 80070b4:	da001717 	ldw	r8,92(sp)
 80070b8:	da401517 	ldw	r9,84(sp)
 80070bc:	10003b0e 	bge	r2,zero,80071ac <_dtoa_r+0x15dc>
 80070c0:	d9001217 	ldw	r4,72(sp)
 80070c4:	bd7fffc3 	ldbu	r21,-1(r23)
 80070c8:	d9000515 	stw	r4,20(sp)
 80070cc:	003d1c06 	br	8006540 <__alt_data_end+0xfc006540>
 80070d0:	d8c00817 	ldw	r3,32(sp)
 80070d4:	18a9c83a 	sub	r20,r3,r2
 80070d8:	0005883a 	mov	r2,zero
 80070dc:	003d3706 	br	80065bc <__alt_data_end+0xfc0065bc>
 80070e0:	00800044 	movi	r2,1
 80070e4:	003dd006 	br	8006828 <__alt_data_end+0xfc006828>
 80070e8:	d8c00217 	ldw	r3,8(sp)
 80070ec:	00800d84 	movi	r2,54
 80070f0:	dd400917 	ldw	r21,36(sp)
 80070f4:	10c5c83a 	sub	r2,r2,r3
 80070f8:	dd000817 	ldw	r20,32(sp)
 80070fc:	003d2f06 	br	80065bc <__alt_data_end+0xfc0065bc>
 8007100:	9029883a 	mov	r20,r18
 8007104:	982b883a 	mov	r21,r19
 8007108:	04400084 	movi	r17,2
 800710c:	003bc606 	br	8006028 <__alt_data_end+0xfc006028>
 8007110:	d8800617 	ldw	r2,24(sp)
 8007114:	103efc26 	beq	r2,zero,8006d08 <__alt_data_end+0xfc006d08>
 8007118:	d8c00d17 	ldw	r3,52(sp)
 800711c:	00fc890e 	bge	zero,r3,8006344 <__alt_data_end+0xfc006344>
 8007120:	a80b883a 	mov	r5,r21
 8007124:	a009883a 	mov	r4,r20
 8007128:	000d883a 	mov	r6,zero
 800712c:	01d00934 	movhi	r7,16420
 8007130:	800e6880 	call	800e688 <__muldf3>
 8007134:	89000044 	addi	r4,r17,1
 8007138:	1029883a 	mov	r20,r2
 800713c:	182b883a 	mov	r21,r3
 8007140:	800f7040 	call	800f704 <__floatsidf>
 8007144:	a009883a 	mov	r4,r20
 8007148:	a80b883a 	mov	r5,r21
 800714c:	100d883a 	mov	r6,r2
 8007150:	180f883a 	mov	r7,r3
 8007154:	800e6880 	call	800e688 <__muldf3>
 8007158:	1009883a 	mov	r4,r2
 800715c:	180b883a 	mov	r5,r3
 8007160:	000d883a 	mov	r6,zero
 8007164:	01d00734 	movhi	r7,16412
 8007168:	800d2dc0 	call	800d2dc <__adddf3>
 800716c:	d9000517 	ldw	r4,20(sp)
 8007170:	1023883a 	mov	r17,r2
 8007174:	00bf3034 	movhi	r2,64704
 8007178:	213fffc4 	addi	r4,r4,-1
 800717c:	1885883a 	add	r2,r3,r2
 8007180:	d9001215 	stw	r4,72(sp)
 8007184:	d8800e15 	stw	r2,56(sp)
 8007188:	da800d17 	ldw	r10,52(sp)
 800718c:	003bc306 	br	800609c <__alt_data_end+0xfc00609c>
 8007190:	b039883a 	mov	fp,r22
 8007194:	01000e44 	movi	r4,57
 8007198:	8825883a 	mov	r18,r17
 800719c:	9dc00044 	addi	r23,r19,1
 80071a0:	99000005 	stb	r4,0(r19)
 80071a4:	a023883a 	mov	r17,r20
 80071a8:	003dae06 	br	8006864 <__alt_data_end+0xfc006864>
 80071ac:	d9800e17 	ldw	r6,56(sp)
 80071b0:	d9c01117 	ldw	r7,68(sp)
 80071b4:	0009883a 	mov	r4,zero
 80071b8:	014ff834 	movhi	r5,16352
 80071bc:	da001715 	stw	r8,92(sp)
 80071c0:	da401515 	stw	r9,84(sp)
 80071c4:	800edac0 	call	800edac <__subdf3>
 80071c8:	da001717 	ldw	r8,92(sp)
 80071cc:	da401517 	ldw	r9,84(sp)
 80071d0:	1009883a 	mov	r4,r2
 80071d4:	180b883a 	mov	r5,r3
 80071d8:	400d883a 	mov	r6,r8
 80071dc:	480f883a 	mov	r7,r9
 80071e0:	800e4c80 	call	800e4c8 <__gedf2>
 80071e4:	00bc570e 	bge	zero,r2,8006344 <__alt_data_end+0xfc006344>
 80071e8:	01000c04 	movi	r4,48
 80071ec:	00000106 	br	80071f4 <_dtoa_r+0x1624>
 80071f0:	102f883a 	mov	r23,r2
 80071f4:	b8bfffc4 	addi	r2,r23,-1
 80071f8:	10c00007 	ldb	r3,0(r2)
 80071fc:	193ffc26 	beq	r3,r4,80071f0 <__alt_data_end+0xfc0071f0>
 8007200:	d9801217 	ldw	r6,72(sp)
 8007204:	d9800515 	stw	r6,20(sp)
 8007208:	003c1f06 	br	8006288 <__alt_data_end+0xfc006288>
 800720c:	d8801217 	ldw	r2,72(sp)
 8007210:	dc001117 	ldw	r16,68(sp)
 8007214:	d8800515 	stw	r2,20(sp)
 8007218:	003cc906 	br	8006540 <__alt_data_end+0xfc006540>
 800721c:	dd801317 	ldw	r22,76(sp)
 8007220:	dc001117 	ldw	r16,68(sp)
 8007224:	dcc01417 	ldw	r19,80(sp)
 8007228:	dc801017 	ldw	r18,64(sp)
 800722c:	003c4506 	br	8006344 <__alt_data_end+0xfc006344>
 8007230:	103e5d1e 	bne	r2,zero,8006ba8 <__alt_data_end+0xfc006ba8>
 8007234:	4080004c 	andi	r2,r8,1
 8007238:	103e5b26 	beq	r2,zero,8006ba8 <__alt_data_end+0xfc006ba8>
 800723c:	003e5706 	br	8006b9c <__alt_data_end+0xfc006b9c>
 8007240:	d8c00317 	ldw	r3,12(sp)
 8007244:	00800084 	movi	r2,2
 8007248:	10c00a16 	blt	r2,r3,8007274 <_dtoa_r+0x16a4>
 800724c:	d9000d17 	ldw	r4,52(sp)
 8007250:	003e8306 	br	8006c60 <__alt_data_end+0xfc006c60>
 8007254:	04400084 	movi	r17,2
 8007258:	003b7306 	br	8006028 <__alt_data_end+0xfc006028>
 800725c:	d9801217 	ldw	r6,72(sp)
 8007260:	d9800515 	stw	r6,20(sp)
 8007264:	003cb606 	br	8006540 <__alt_data_end+0xfc006540>
 8007268:	d9001217 	ldw	r4,72(sp)
 800726c:	d9000515 	stw	r4,20(sp)
 8007270:	003c0506 	br	8006288 <__alt_data_end+0xfc006288>
 8007274:	d9800d17 	ldw	r6,52(sp)
 8007278:	d9800615 	stw	r6,24(sp)
 800727c:	003e8306 	br	8006c8c <__alt_data_end+0xfc006c8c>
 8007280:	d9800317 	ldw	r6,12(sp)
 8007284:	00800084 	movi	r2,2
 8007288:	11800216 	blt	r2,r6,8007294 <_dtoa_r+0x16c4>
 800728c:	d8800d17 	ldw	r2,52(sp)
 8007290:	003da606 	br	800692c <__alt_data_end+0xfc00692c>
 8007294:	d8800d17 	ldw	r2,52(sp)
 8007298:	d8800615 	stw	r2,24(sp)
 800729c:	003e7b06 	br	8006c8c <__alt_data_end+0xfc006c8c>
 80072a0:	05000044 	movi	r20,1
 80072a4:	003b0506 	br	8005ebc <__alt_data_end+0xfc005ebc>
 80072a8:	8009883a 	mov	r4,r16
 80072ac:	80001115 	stw	zero,68(r16)
 80072b0:	000b883a 	mov	r5,zero
 80072b4:	80090c00 	call	80090c0 <_Balloc>
 80072b8:	d8800715 	stw	r2,28(sp)
 80072bc:	d8c00717 	ldw	r3,28(sp)
 80072c0:	00bfffc4 	movi	r2,-1
 80072c4:	01000044 	movi	r4,1
 80072c8:	d8800615 	stw	r2,24(sp)
 80072cc:	80c01015 	stw	r3,64(r16)
 80072d0:	d9000b15 	stw	r4,44(sp)
 80072d4:	d8002215 	stw	zero,136(sp)
 80072d8:	d8800d15 	stw	r2,52(sp)
 80072dc:	003c1906 	br	8006344 <__alt_data_end+0xfc006344>
 80072e0:	193d2926 	beq	r3,r4,8006788 <__alt_data_end+0xfc006788>
 80072e4:	00c00f04 	movi	r3,60
 80072e8:	1885c83a 	sub	r2,r3,r2
 80072ec:	003d7b06 	br	80068dc <__alt_data_end+0xfc0068dc>
 80072f0:	000b883a 	mov	r5,zero
 80072f4:	003b1006 	br	8005f38 <__alt_data_end+0xfc005f38>

080072f8 <_fflush_r>:
 80072f8:	defffb04 	addi	sp,sp,-20
 80072fc:	dcc00315 	stw	r19,12(sp)
 8007300:	dc000015 	stw	r16,0(sp)
 8007304:	dfc00415 	stw	ra,16(sp)
 8007308:	dc800215 	stw	r18,8(sp)
 800730c:	dc400115 	stw	r17,4(sp)
 8007310:	2027883a 	mov	r19,r4
 8007314:	2821883a 	mov	r16,r5
 8007318:	20000226 	beq	r4,zero,8007324 <_fflush_r+0x2c>
 800731c:	20800e17 	ldw	r2,56(r4)
 8007320:	10005326 	beq	r2,zero,8007470 <_fflush_r+0x178>
 8007324:	8080030b 	ldhu	r2,12(r16)
 8007328:	10ffffcc 	andi	r3,r2,65535
 800732c:	18e0001c 	xori	r3,r3,32768
 8007330:	18e00004 	addi	r3,r3,-32768
 8007334:	18002c26 	beq	r3,zero,80073e8 <_fflush_r+0xf0>
 8007338:	10c0020c 	andi	r3,r2,8
 800733c:	1800321e 	bne	r3,zero,8007408 <_fflush_r+0x110>
 8007340:	80c00117 	ldw	r3,4(r16)
 8007344:	10820014 	ori	r2,r2,2048
 8007348:	8080030d 	sth	r2,12(r16)
 800734c:	00c0570e 	bge	zero,r3,80074ac <_fflush_r+0x1b4>
 8007350:	82000a17 	ldw	r8,40(r16)
 8007354:	40002426 	beq	r8,zero,80073e8 <_fflush_r+0xf0>
 8007358:	9c400017 	ldw	r17,0(r19)
 800735c:	10c4000c 	andi	r3,r2,4096
 8007360:	98000015 	stw	zero,0(r19)
 8007364:	18004626 	beq	r3,zero,8007480 <_fflush_r+0x188>
 8007368:	81801417 	ldw	r6,80(r16)
 800736c:	10c0010c 	andi	r3,r2,4
 8007370:	18000626 	beq	r3,zero,800738c <_fflush_r+0x94>
 8007374:	80c00117 	ldw	r3,4(r16)
 8007378:	80800c17 	ldw	r2,48(r16)
 800737c:	30cdc83a 	sub	r6,r6,r3
 8007380:	10000226 	beq	r2,zero,800738c <_fflush_r+0x94>
 8007384:	80800f17 	ldw	r2,60(r16)
 8007388:	308dc83a 	sub	r6,r6,r2
 800738c:	81400717 	ldw	r5,28(r16)
 8007390:	9809883a 	mov	r4,r19
 8007394:	000f883a 	mov	r7,zero
 8007398:	403ee83a 	callr	r8
 800739c:	00ffffc4 	movi	r3,-1
 80073a0:	10c04526 	beq	r2,r3,80074b8 <_fflush_r+0x1c0>
 80073a4:	80c0030b 	ldhu	r3,12(r16)
 80073a8:	81000417 	ldw	r4,16(r16)
 80073ac:	80000115 	stw	zero,4(r16)
 80073b0:	197dffcc 	andi	r5,r3,63487
 80073b4:	8140030d 	sth	r5,12(r16)
 80073b8:	81000015 	stw	r4,0(r16)
 80073bc:	18c4000c 	andi	r3,r3,4096
 80073c0:	18000126 	beq	r3,zero,80073c8 <_fflush_r+0xd0>
 80073c4:	80801415 	stw	r2,80(r16)
 80073c8:	81400c17 	ldw	r5,48(r16)
 80073cc:	9c400015 	stw	r17,0(r19)
 80073d0:	28000526 	beq	r5,zero,80073e8 <_fflush_r+0xf0>
 80073d4:	80801004 	addi	r2,r16,64
 80073d8:	28800226 	beq	r5,r2,80073e4 <_fflush_r+0xec>
 80073dc:	9809883a 	mov	r4,r19
 80073e0:	8007a140 	call	8007a14 <_free_r>
 80073e4:	80000c15 	stw	zero,48(r16)
 80073e8:	0005883a 	mov	r2,zero
 80073ec:	dfc00417 	ldw	ra,16(sp)
 80073f0:	dcc00317 	ldw	r19,12(sp)
 80073f4:	dc800217 	ldw	r18,8(sp)
 80073f8:	dc400117 	ldw	r17,4(sp)
 80073fc:	dc000017 	ldw	r16,0(sp)
 8007400:	dec00504 	addi	sp,sp,20
 8007404:	f800283a 	ret
 8007408:	84800417 	ldw	r18,16(r16)
 800740c:	903ff626 	beq	r18,zero,80073e8 <__alt_data_end+0xfc0073e8>
 8007410:	84400017 	ldw	r17,0(r16)
 8007414:	108000cc 	andi	r2,r2,3
 8007418:	84800015 	stw	r18,0(r16)
 800741c:	8ca3c83a 	sub	r17,r17,r18
 8007420:	10001526 	beq	r2,zero,8007478 <_fflush_r+0x180>
 8007424:	0005883a 	mov	r2,zero
 8007428:	80800215 	stw	r2,8(r16)
 800742c:	04400316 	blt	zero,r17,800743c <_fflush_r+0x144>
 8007430:	003fed06 	br	80073e8 <__alt_data_end+0xfc0073e8>
 8007434:	90a5883a 	add	r18,r18,r2
 8007438:	047feb0e 	bge	zero,r17,80073e8 <__alt_data_end+0xfc0073e8>
 800743c:	80800917 	ldw	r2,36(r16)
 8007440:	81400717 	ldw	r5,28(r16)
 8007444:	880f883a 	mov	r7,r17
 8007448:	900d883a 	mov	r6,r18
 800744c:	9809883a 	mov	r4,r19
 8007450:	103ee83a 	callr	r2
 8007454:	88a3c83a 	sub	r17,r17,r2
 8007458:	00bff616 	blt	zero,r2,8007434 <__alt_data_end+0xfc007434>
 800745c:	80c0030b 	ldhu	r3,12(r16)
 8007460:	00bfffc4 	movi	r2,-1
 8007464:	18c01014 	ori	r3,r3,64
 8007468:	80c0030d 	sth	r3,12(r16)
 800746c:	003fdf06 	br	80073ec <__alt_data_end+0xfc0073ec>
 8007470:	80078a00 	call	80078a0 <__sinit>
 8007474:	003fab06 	br	8007324 <__alt_data_end+0xfc007324>
 8007478:	80800517 	ldw	r2,20(r16)
 800747c:	003fea06 	br	8007428 <__alt_data_end+0xfc007428>
 8007480:	81400717 	ldw	r5,28(r16)
 8007484:	000d883a 	mov	r6,zero
 8007488:	9809883a 	mov	r4,r19
 800748c:	01c00044 	movi	r7,1
 8007490:	403ee83a 	callr	r8
 8007494:	100d883a 	mov	r6,r2
 8007498:	00bfffc4 	movi	r2,-1
 800749c:	30801326 	beq	r6,r2,80074ec <_fflush_r+0x1f4>
 80074a0:	8080030b 	ldhu	r2,12(r16)
 80074a4:	82000a17 	ldw	r8,40(r16)
 80074a8:	003fb006 	br	800736c <__alt_data_end+0xfc00736c>
 80074ac:	80c00f17 	ldw	r3,60(r16)
 80074b0:	00ffa716 	blt	zero,r3,8007350 <__alt_data_end+0xfc007350>
 80074b4:	003fcc06 	br	80073e8 <__alt_data_end+0xfc0073e8>
 80074b8:	98c00017 	ldw	r3,0(r19)
 80074bc:	183fb926 	beq	r3,zero,80073a4 <__alt_data_end+0xfc0073a4>
 80074c0:	01000744 	movi	r4,29
 80074c4:	19000226 	beq	r3,r4,80074d0 <_fflush_r+0x1d8>
 80074c8:	01000584 	movi	r4,22
 80074cc:	1900101e 	bne	r3,r4,8007510 <_fflush_r+0x218>
 80074d0:	8080030b 	ldhu	r2,12(r16)
 80074d4:	80c00417 	ldw	r3,16(r16)
 80074d8:	80000115 	stw	zero,4(r16)
 80074dc:	10bdffcc 	andi	r2,r2,63487
 80074e0:	8080030d 	sth	r2,12(r16)
 80074e4:	80c00015 	stw	r3,0(r16)
 80074e8:	003fb706 	br	80073c8 <__alt_data_end+0xfc0073c8>
 80074ec:	98800017 	ldw	r2,0(r19)
 80074f0:	103feb26 	beq	r2,zero,80074a0 <__alt_data_end+0xfc0074a0>
 80074f4:	00c00744 	movi	r3,29
 80074f8:	10c00226 	beq	r2,r3,8007504 <_fflush_r+0x20c>
 80074fc:	00c00584 	movi	r3,22
 8007500:	10ffd61e 	bne	r2,r3,800745c <__alt_data_end+0xfc00745c>
 8007504:	9c400015 	stw	r17,0(r19)
 8007508:	0005883a 	mov	r2,zero
 800750c:	003fb706 	br	80073ec <__alt_data_end+0xfc0073ec>
 8007510:	80c0030b 	ldhu	r3,12(r16)
 8007514:	18c01014 	ori	r3,r3,64
 8007518:	80c0030d 	sth	r3,12(r16)
 800751c:	003fb306 	br	80073ec <__alt_data_end+0xfc0073ec>

08007520 <fflush>:
 8007520:	20000526 	beq	r4,zero,8007538 <fflush+0x18>
 8007524:	008200b4 	movhi	r2,2050
 8007528:	10ba9e04 	addi	r2,r2,-5512
 800752c:	200b883a 	mov	r5,r4
 8007530:	11000017 	ldw	r4,0(r2)
 8007534:	80072f81 	jmpi	80072f8 <_fflush_r>
 8007538:	008200b4 	movhi	r2,2050
 800753c:	10ba9d04 	addi	r2,r2,-5516
 8007540:	11000017 	ldw	r4,0(r2)
 8007544:	01420034 	movhi	r5,2048
 8007548:	295cbe04 	addi	r5,r5,29432
 800754c:	80082601 	jmpi	8008260 <_fwalk_reent>

08007550 <__fp_lock>:
 8007550:	0005883a 	mov	r2,zero
 8007554:	f800283a 	ret

08007558 <__fp_unlock>:
 8007558:	0005883a 	mov	r2,zero
 800755c:	f800283a 	ret

08007560 <_cleanup_r>:
 8007560:	01420074 	movhi	r5,2049
 8007564:	296fe704 	addi	r5,r5,-16484
 8007568:	80081a81 	jmpi	80081a8 <_fwalk>

0800756c <__sinit.part.1>:
 800756c:	defff604 	addi	sp,sp,-40
 8007570:	00c20034 	movhi	r3,2048
 8007574:	dfc00915 	stw	ra,36(sp)
 8007578:	df000815 	stw	fp,32(sp)
 800757c:	ddc00715 	stw	r23,28(sp)
 8007580:	dd800615 	stw	r22,24(sp)
 8007584:	dd400515 	stw	r21,20(sp)
 8007588:	dd000415 	stw	r20,16(sp)
 800758c:	dcc00315 	stw	r19,12(sp)
 8007590:	dc800215 	stw	r18,8(sp)
 8007594:	dc400115 	stw	r17,4(sp)
 8007598:	dc000015 	stw	r16,0(sp)
 800759c:	18dd5804 	addi	r3,r3,30048
 80075a0:	24000117 	ldw	r16,4(r4)
 80075a4:	20c00f15 	stw	r3,60(r4)
 80075a8:	07000044 	movi	fp,1
 80075ac:	00c000c4 	movi	r3,3
 80075b0:	2080bb04 	addi	r2,r4,748
 80075b4:	20c0b915 	stw	r3,740(r4)
 80075b8:	27000e15 	stw	fp,56(r4)
 80075bc:	2080ba15 	stw	r2,744(r4)
 80075c0:	2000b815 	stw	zero,736(r4)
 80075c4:	05c00204 	movi	r23,8
 80075c8:	00800104 	movi	r2,4
 80075cc:	2025883a 	mov	r18,r4
 80075d0:	b80d883a 	mov	r6,r23
 80075d4:	81001704 	addi	r4,r16,92
 80075d8:	000b883a 	mov	r5,zero
 80075dc:	80000015 	stw	zero,0(r16)
 80075e0:	80000115 	stw	zero,4(r16)
 80075e4:	80000215 	stw	zero,8(r16)
 80075e8:	8080030d 	sth	r2,12(r16)
 80075ec:	80001915 	stw	zero,100(r16)
 80075f0:	8000038d 	sth	zero,14(r16)
 80075f4:	80000415 	stw	zero,16(r16)
 80075f8:	80000515 	stw	zero,20(r16)
 80075fc:	80000615 	stw	zero,24(r16)
 8007600:	8008f9c0 	call	8008f9c <memset>
 8007604:	05820074 	movhi	r22,2049
 8007608:	94400217 	ldw	r17,8(r18)
 800760c:	05420074 	movhi	r21,2049
 8007610:	05020074 	movhi	r20,2049
 8007614:	04c20074 	movhi	r19,2049
 8007618:	b5a9ad04 	addi	r22,r22,-22860
 800761c:	ad69c404 	addi	r21,r21,-22768
 8007620:	a529e304 	addi	r20,r20,-22644
 8007624:	9ce9fa04 	addi	r19,r19,-22552
 8007628:	85800815 	stw	r22,32(r16)
 800762c:	85400915 	stw	r21,36(r16)
 8007630:	85000a15 	stw	r20,40(r16)
 8007634:	84c00b15 	stw	r19,44(r16)
 8007638:	84000715 	stw	r16,28(r16)
 800763c:	00800284 	movi	r2,10
 8007640:	89001704 	addi	r4,r17,92
 8007644:	b80d883a 	mov	r6,r23
 8007648:	000b883a 	mov	r5,zero
 800764c:	88000015 	stw	zero,0(r17)
 8007650:	88000115 	stw	zero,4(r17)
 8007654:	88000215 	stw	zero,8(r17)
 8007658:	8880030d 	sth	r2,12(r17)
 800765c:	88001915 	stw	zero,100(r17)
 8007660:	8f00038d 	sth	fp,14(r17)
 8007664:	88000415 	stw	zero,16(r17)
 8007668:	88000515 	stw	zero,20(r17)
 800766c:	88000615 	stw	zero,24(r17)
 8007670:	8008f9c0 	call	8008f9c <memset>
 8007674:	94000317 	ldw	r16,12(r18)
 8007678:	00800484 	movi	r2,18
 800767c:	8c400715 	stw	r17,28(r17)
 8007680:	8d800815 	stw	r22,32(r17)
 8007684:	8d400915 	stw	r21,36(r17)
 8007688:	8d000a15 	stw	r20,40(r17)
 800768c:	8cc00b15 	stw	r19,44(r17)
 8007690:	8080030d 	sth	r2,12(r16)
 8007694:	00800084 	movi	r2,2
 8007698:	80000015 	stw	zero,0(r16)
 800769c:	80000115 	stw	zero,4(r16)
 80076a0:	80000215 	stw	zero,8(r16)
 80076a4:	80001915 	stw	zero,100(r16)
 80076a8:	8080038d 	sth	r2,14(r16)
 80076ac:	80000415 	stw	zero,16(r16)
 80076b0:	80000515 	stw	zero,20(r16)
 80076b4:	80000615 	stw	zero,24(r16)
 80076b8:	81001704 	addi	r4,r16,92
 80076bc:	000b883a 	mov	r5,zero
 80076c0:	b80d883a 	mov	r6,r23
 80076c4:	8008f9c0 	call	8008f9c <memset>
 80076c8:	84000715 	stw	r16,28(r16)
 80076cc:	85800815 	stw	r22,32(r16)
 80076d0:	85400915 	stw	r21,36(r16)
 80076d4:	85000a15 	stw	r20,40(r16)
 80076d8:	84c00b15 	stw	r19,44(r16)
 80076dc:	dfc00917 	ldw	ra,36(sp)
 80076e0:	df000817 	ldw	fp,32(sp)
 80076e4:	ddc00717 	ldw	r23,28(sp)
 80076e8:	dd800617 	ldw	r22,24(sp)
 80076ec:	dd400517 	ldw	r21,20(sp)
 80076f0:	dd000417 	ldw	r20,16(sp)
 80076f4:	dcc00317 	ldw	r19,12(sp)
 80076f8:	dc800217 	ldw	r18,8(sp)
 80076fc:	dc400117 	ldw	r17,4(sp)
 8007700:	dc000017 	ldw	r16,0(sp)
 8007704:	dec00a04 	addi	sp,sp,40
 8007708:	f800283a 	ret

0800770c <__sfmoreglue>:
 800770c:	defffc04 	addi	sp,sp,-16
 8007710:	dc400115 	stw	r17,4(sp)
 8007714:	2c401a24 	muli	r17,r5,104
 8007718:	dc800215 	stw	r18,8(sp)
 800771c:	2825883a 	mov	r18,r5
 8007720:	89400304 	addi	r5,r17,12
 8007724:	dc000015 	stw	r16,0(sp)
 8007728:	dfc00315 	stw	ra,12(sp)
 800772c:	80085b00 	call	80085b0 <_malloc_r>
 8007730:	1021883a 	mov	r16,r2
 8007734:	10000726 	beq	r2,zero,8007754 <__sfmoreglue+0x48>
 8007738:	11000304 	addi	r4,r2,12
 800773c:	10000015 	stw	zero,0(r2)
 8007740:	14800115 	stw	r18,4(r2)
 8007744:	11000215 	stw	r4,8(r2)
 8007748:	000b883a 	mov	r5,zero
 800774c:	880d883a 	mov	r6,r17
 8007750:	8008f9c0 	call	8008f9c <memset>
 8007754:	8005883a 	mov	r2,r16
 8007758:	dfc00317 	ldw	ra,12(sp)
 800775c:	dc800217 	ldw	r18,8(sp)
 8007760:	dc400117 	ldw	r17,4(sp)
 8007764:	dc000017 	ldw	r16,0(sp)
 8007768:	dec00404 	addi	sp,sp,16
 800776c:	f800283a 	ret

08007770 <__sfp>:
 8007770:	008200b4 	movhi	r2,2050
 8007774:	defffb04 	addi	sp,sp,-20
 8007778:	10ba9d04 	addi	r2,r2,-5516
 800777c:	dc800215 	stw	r18,8(sp)
 8007780:	14800017 	ldw	r18,0(r2)
 8007784:	dcc00315 	stw	r19,12(sp)
 8007788:	dfc00415 	stw	ra,16(sp)
 800778c:	90800e17 	ldw	r2,56(r18)
 8007790:	dc400115 	stw	r17,4(sp)
 8007794:	dc000015 	stw	r16,0(sp)
 8007798:	2027883a 	mov	r19,r4
 800779c:	1000021e 	bne	r2,zero,80077a8 <__sfp+0x38>
 80077a0:	9009883a 	mov	r4,r18
 80077a4:	800756c0 	call	800756c <__sinit.part.1>
 80077a8:	9480b804 	addi	r18,r18,736
 80077ac:	047fffc4 	movi	r17,-1
 80077b0:	91400117 	ldw	r5,4(r18)
 80077b4:	94000217 	ldw	r16,8(r18)
 80077b8:	297fffc4 	addi	r5,r5,-1
 80077bc:	28000a16 	blt	r5,zero,80077e8 <__sfp+0x78>
 80077c0:	8080030f 	ldh	r2,12(r16)
 80077c4:	10000c26 	beq	r2,zero,80077f8 <__sfp+0x88>
 80077c8:	80c01d04 	addi	r3,r16,116
 80077cc:	00000206 	br	80077d8 <__sfp+0x68>
 80077d0:	18bfe60f 	ldh	r2,-104(r3)
 80077d4:	10000826 	beq	r2,zero,80077f8 <__sfp+0x88>
 80077d8:	297fffc4 	addi	r5,r5,-1
 80077dc:	1c3ffd04 	addi	r16,r3,-12
 80077e0:	18c01a04 	addi	r3,r3,104
 80077e4:	2c7ffa1e 	bne	r5,r17,80077d0 <__alt_data_end+0xfc0077d0>
 80077e8:	90800017 	ldw	r2,0(r18)
 80077ec:	10001d26 	beq	r2,zero,8007864 <__sfp+0xf4>
 80077f0:	1025883a 	mov	r18,r2
 80077f4:	003fee06 	br	80077b0 <__alt_data_end+0xfc0077b0>
 80077f8:	00bfffc4 	movi	r2,-1
 80077fc:	8080038d 	sth	r2,14(r16)
 8007800:	00800044 	movi	r2,1
 8007804:	8080030d 	sth	r2,12(r16)
 8007808:	80001915 	stw	zero,100(r16)
 800780c:	80000015 	stw	zero,0(r16)
 8007810:	80000215 	stw	zero,8(r16)
 8007814:	80000115 	stw	zero,4(r16)
 8007818:	80000415 	stw	zero,16(r16)
 800781c:	80000515 	stw	zero,20(r16)
 8007820:	80000615 	stw	zero,24(r16)
 8007824:	81001704 	addi	r4,r16,92
 8007828:	000b883a 	mov	r5,zero
 800782c:	01800204 	movi	r6,8
 8007830:	8008f9c0 	call	8008f9c <memset>
 8007834:	8005883a 	mov	r2,r16
 8007838:	80000c15 	stw	zero,48(r16)
 800783c:	80000d15 	stw	zero,52(r16)
 8007840:	80001115 	stw	zero,68(r16)
 8007844:	80001215 	stw	zero,72(r16)
 8007848:	dfc00417 	ldw	ra,16(sp)
 800784c:	dcc00317 	ldw	r19,12(sp)
 8007850:	dc800217 	ldw	r18,8(sp)
 8007854:	dc400117 	ldw	r17,4(sp)
 8007858:	dc000017 	ldw	r16,0(sp)
 800785c:	dec00504 	addi	sp,sp,20
 8007860:	f800283a 	ret
 8007864:	9809883a 	mov	r4,r19
 8007868:	01400104 	movi	r5,4
 800786c:	800770c0 	call	800770c <__sfmoreglue>
 8007870:	90800015 	stw	r2,0(r18)
 8007874:	103fde1e 	bne	r2,zero,80077f0 <__alt_data_end+0xfc0077f0>
 8007878:	00800304 	movi	r2,12
 800787c:	98800015 	stw	r2,0(r19)
 8007880:	0005883a 	mov	r2,zero
 8007884:	003ff006 	br	8007848 <__alt_data_end+0xfc007848>

08007888 <_cleanup>:
 8007888:	008200b4 	movhi	r2,2050
 800788c:	10ba9d04 	addi	r2,r2,-5516
 8007890:	11000017 	ldw	r4,0(r2)
 8007894:	01420074 	movhi	r5,2049
 8007898:	296fe704 	addi	r5,r5,-16484
 800789c:	80081a81 	jmpi	80081a8 <_fwalk>

080078a0 <__sinit>:
 80078a0:	20800e17 	ldw	r2,56(r4)
 80078a4:	10000126 	beq	r2,zero,80078ac <__sinit+0xc>
 80078a8:	f800283a 	ret
 80078ac:	800756c1 	jmpi	800756c <__sinit.part.1>

080078b0 <__sfp_lock_acquire>:
 80078b0:	f800283a 	ret

080078b4 <__sfp_lock_release>:
 80078b4:	f800283a 	ret

080078b8 <__sinit_lock_acquire>:
 80078b8:	f800283a 	ret

080078bc <__sinit_lock_release>:
 80078bc:	f800283a 	ret

080078c0 <__fp_lock_all>:
 80078c0:	008200b4 	movhi	r2,2050
 80078c4:	10ba9e04 	addi	r2,r2,-5512
 80078c8:	11000017 	ldw	r4,0(r2)
 80078cc:	01420034 	movhi	r5,2048
 80078d0:	295d5404 	addi	r5,r5,30032
 80078d4:	80081a81 	jmpi	80081a8 <_fwalk>

080078d8 <__fp_unlock_all>:
 80078d8:	008200b4 	movhi	r2,2050
 80078dc:	10ba9e04 	addi	r2,r2,-5512
 80078e0:	11000017 	ldw	r4,0(r2)
 80078e4:	01420034 	movhi	r5,2048
 80078e8:	295d5604 	addi	r5,r5,30040
 80078ec:	80081a81 	jmpi	80081a8 <_fwalk>

080078f0 <_malloc_trim_r>:
 80078f0:	defffb04 	addi	sp,sp,-20
 80078f4:	dcc00315 	stw	r19,12(sp)
 80078f8:	04c200b4 	movhi	r19,2050
 80078fc:	dc800215 	stw	r18,8(sp)
 8007900:	dc400115 	stw	r17,4(sp)
 8007904:	dc000015 	stw	r16,0(sp)
 8007908:	dfc00415 	stw	ra,16(sp)
 800790c:	2821883a 	mov	r16,r5
 8007910:	9cf51804 	addi	r19,r19,-11168
 8007914:	2025883a 	mov	r18,r4
 8007918:	800fe9c0 	call	800fe9c <__malloc_lock>
 800791c:	98800217 	ldw	r2,8(r19)
 8007920:	14400117 	ldw	r17,4(r2)
 8007924:	00bfff04 	movi	r2,-4
 8007928:	88a2703a 	and	r17,r17,r2
 800792c:	8c21c83a 	sub	r16,r17,r16
 8007930:	8403fbc4 	addi	r16,r16,4079
 8007934:	8020d33a 	srli	r16,r16,12
 8007938:	0083ffc4 	movi	r2,4095
 800793c:	843fffc4 	addi	r16,r16,-1
 8007940:	8020933a 	slli	r16,r16,12
 8007944:	1400060e 	bge	r2,r16,8007960 <_malloc_trim_r+0x70>
 8007948:	9009883a 	mov	r4,r18
 800794c:	000b883a 	mov	r5,zero
 8007950:	800a6600 	call	800a660 <_sbrk_r>
 8007954:	98c00217 	ldw	r3,8(r19)
 8007958:	1c47883a 	add	r3,r3,r17
 800795c:	10c00a26 	beq	r2,r3,8007988 <_malloc_trim_r+0x98>
 8007960:	9009883a 	mov	r4,r18
 8007964:	800febc0 	call	800febc <__malloc_unlock>
 8007968:	0005883a 	mov	r2,zero
 800796c:	dfc00417 	ldw	ra,16(sp)
 8007970:	dcc00317 	ldw	r19,12(sp)
 8007974:	dc800217 	ldw	r18,8(sp)
 8007978:	dc400117 	ldw	r17,4(sp)
 800797c:	dc000017 	ldw	r16,0(sp)
 8007980:	dec00504 	addi	sp,sp,20
 8007984:	f800283a 	ret
 8007988:	9009883a 	mov	r4,r18
 800798c:	040bc83a 	sub	r5,zero,r16
 8007990:	800a6600 	call	800a660 <_sbrk_r>
 8007994:	00ffffc4 	movi	r3,-1
 8007998:	10c00d26 	beq	r2,r3,80079d0 <_malloc_trim_r+0xe0>
 800799c:	00c200b4 	movhi	r3,2050
 80079a0:	18c17704 	addi	r3,r3,1500
 80079a4:	18800017 	ldw	r2,0(r3)
 80079a8:	99000217 	ldw	r4,8(r19)
 80079ac:	8c23c83a 	sub	r17,r17,r16
 80079b0:	8c400054 	ori	r17,r17,1
 80079b4:	1421c83a 	sub	r16,r2,r16
 80079b8:	24400115 	stw	r17,4(r4)
 80079bc:	9009883a 	mov	r4,r18
 80079c0:	1c000015 	stw	r16,0(r3)
 80079c4:	800febc0 	call	800febc <__malloc_unlock>
 80079c8:	00800044 	movi	r2,1
 80079cc:	003fe706 	br	800796c <__alt_data_end+0xfc00796c>
 80079d0:	9009883a 	mov	r4,r18
 80079d4:	000b883a 	mov	r5,zero
 80079d8:	800a6600 	call	800a660 <_sbrk_r>
 80079dc:	99000217 	ldw	r4,8(r19)
 80079e0:	014003c4 	movi	r5,15
 80079e4:	1107c83a 	sub	r3,r2,r4
 80079e8:	28ffdd0e 	bge	r5,r3,8007960 <__alt_data_end+0xfc007960>
 80079ec:	014200b4 	movhi	r5,2050
 80079f0:	297aa004 	addi	r5,r5,-5504
 80079f4:	29400017 	ldw	r5,0(r5)
 80079f8:	18c00054 	ori	r3,r3,1
 80079fc:	20c00115 	stw	r3,4(r4)
 8007a00:	00c200b4 	movhi	r3,2050
 8007a04:	1145c83a 	sub	r2,r2,r5
 8007a08:	18c17704 	addi	r3,r3,1500
 8007a0c:	18800015 	stw	r2,0(r3)
 8007a10:	003fd306 	br	8007960 <__alt_data_end+0xfc007960>

08007a14 <_free_r>:
 8007a14:	28004c26 	beq	r5,zero,8007b48 <_free_r+0x134>
 8007a18:	defffd04 	addi	sp,sp,-12
 8007a1c:	dc400115 	stw	r17,4(sp)
 8007a20:	dc000015 	stw	r16,0(sp)
 8007a24:	2023883a 	mov	r17,r4
 8007a28:	2821883a 	mov	r16,r5
 8007a2c:	dfc00215 	stw	ra,8(sp)
 8007a30:	800fe9c0 	call	800fe9c <__malloc_lock>
 8007a34:	813fff17 	ldw	r4,-4(r16)
 8007a38:	00bfff84 	movi	r2,-2
 8007a3c:	024200b4 	movhi	r9,2050
 8007a40:	81bffe04 	addi	r6,r16,-8
 8007a44:	2084703a 	and	r2,r4,r2
 8007a48:	4a751804 	addi	r9,r9,-11168
 8007a4c:	308b883a 	add	r5,r6,r2
 8007a50:	2a000117 	ldw	r8,4(r5)
 8007a54:	49c00217 	ldw	r7,8(r9)
 8007a58:	00ffff04 	movi	r3,-4
 8007a5c:	40c6703a 	and	r3,r8,r3
 8007a60:	39405326 	beq	r7,r5,8007bb0 <_free_r+0x19c>
 8007a64:	28c00115 	stw	r3,4(r5)
 8007a68:	2100004c 	andi	r4,r4,1
 8007a6c:	2000091e 	bne	r4,zero,8007a94 <_free_r+0x80>
 8007a70:	81fffe17 	ldw	r7,-8(r16)
 8007a74:	4a000204 	addi	r8,r9,8
 8007a78:	31cdc83a 	sub	r6,r6,r7
 8007a7c:	31000217 	ldw	r4,8(r6)
 8007a80:	11c5883a 	add	r2,r2,r7
 8007a84:	22006126 	beq	r4,r8,8007c0c <_free_r+0x1f8>
 8007a88:	31c00317 	ldw	r7,12(r6)
 8007a8c:	21c00315 	stw	r7,12(r4)
 8007a90:	39000215 	stw	r4,8(r7)
 8007a94:	28c9883a 	add	r4,r5,r3
 8007a98:	21c00117 	ldw	r7,4(r4)
 8007a9c:	39c0004c 	andi	r7,r7,1
 8007aa0:	38000d1e 	bne	r7,zero,8007ad8 <_free_r+0xc4>
 8007aa4:	29000217 	ldw	r4,8(r5)
 8007aa8:	10c5883a 	add	r2,r2,r3
 8007aac:	00c200b4 	movhi	r3,2050
 8007ab0:	18f51a04 	addi	r3,r3,-11160
 8007ab4:	20c07526 	beq	r4,r3,8007c8c <_free_r+0x278>
 8007ab8:	29c00317 	ldw	r7,12(r5)
 8007abc:	11400054 	ori	r5,r2,1
 8007ac0:	3087883a 	add	r3,r6,r2
 8007ac4:	21c00315 	stw	r7,12(r4)
 8007ac8:	39000215 	stw	r4,8(r7)
 8007acc:	31400115 	stw	r5,4(r6)
 8007ad0:	18800015 	stw	r2,0(r3)
 8007ad4:	00000406 	br	8007ae8 <_free_r+0xd4>
 8007ad8:	10c00054 	ori	r3,r2,1
 8007adc:	30c00115 	stw	r3,4(r6)
 8007ae0:	3087883a 	add	r3,r6,r2
 8007ae4:	18800015 	stw	r2,0(r3)
 8007ae8:	00c07fc4 	movi	r3,511
 8007aec:	18801736 	bltu	r3,r2,8007b4c <_free_r+0x138>
 8007af0:	1004d0fa 	srli	r2,r2,3
 8007af4:	01400044 	movi	r5,1
 8007af8:	49000117 	ldw	r4,4(r9)
 8007afc:	1087883a 	add	r3,r2,r2
 8007b00:	18c7883a 	add	r3,r3,r3
 8007b04:	1005d0ba 	srai	r2,r2,2
 8007b08:	18c7883a 	add	r3,r3,r3
 8007b0c:	1a47883a 	add	r3,r3,r9
 8007b10:	19c00217 	ldw	r7,8(r3)
 8007b14:	2884983a 	sll	r2,r5,r2
 8007b18:	30c00315 	stw	r3,12(r6)
 8007b1c:	31c00215 	stw	r7,8(r6)
 8007b20:	1104b03a 	or	r2,r2,r4
 8007b24:	19800215 	stw	r6,8(r3)
 8007b28:	48800115 	stw	r2,4(r9)
 8007b2c:	39800315 	stw	r6,12(r7)
 8007b30:	8809883a 	mov	r4,r17
 8007b34:	dfc00217 	ldw	ra,8(sp)
 8007b38:	dc400117 	ldw	r17,4(sp)
 8007b3c:	dc000017 	ldw	r16,0(sp)
 8007b40:	dec00304 	addi	sp,sp,12
 8007b44:	800febc1 	jmpi	800febc <__malloc_unlock>
 8007b48:	f800283a 	ret
 8007b4c:	1006d27a 	srli	r3,r2,9
 8007b50:	01000104 	movi	r4,4
 8007b54:	20c04036 	bltu	r4,r3,8007c58 <_free_r+0x244>
 8007b58:	1006d1ba 	srli	r3,r2,6
 8007b5c:	19400e04 	addi	r5,r3,56
 8007b60:	2947883a 	add	r3,r5,r5
 8007b64:	18c7883a 	add	r3,r3,r3
 8007b68:	18c7883a 	add	r3,r3,r3
 8007b6c:	1a49883a 	add	r4,r3,r9
 8007b70:	20c00217 	ldw	r3,8(r4)
 8007b74:	01c200b4 	movhi	r7,2050
 8007b78:	39f51804 	addi	r7,r7,-11168
 8007b7c:	19003b26 	beq	r3,r4,8007c6c <_free_r+0x258>
 8007b80:	01ffff04 	movi	r7,-4
 8007b84:	19400117 	ldw	r5,4(r3)
 8007b88:	29ca703a 	and	r5,r5,r7
 8007b8c:	1140022e 	bgeu	r2,r5,8007b98 <_free_r+0x184>
 8007b90:	18c00217 	ldw	r3,8(r3)
 8007b94:	20fffb1e 	bne	r4,r3,8007b84 <__alt_data_end+0xfc007b84>
 8007b98:	18800317 	ldw	r2,12(r3)
 8007b9c:	30800315 	stw	r2,12(r6)
 8007ba0:	30c00215 	stw	r3,8(r6)
 8007ba4:	11800215 	stw	r6,8(r2)
 8007ba8:	19800315 	stw	r6,12(r3)
 8007bac:	003fe006 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007bb0:	2100004c 	andi	r4,r4,1
 8007bb4:	1885883a 	add	r2,r3,r2
 8007bb8:	2000071e 	bne	r4,zero,8007bd8 <_free_r+0x1c4>
 8007bbc:	817ffe17 	ldw	r5,-8(r16)
 8007bc0:	314dc83a 	sub	r6,r6,r5
 8007bc4:	30c00317 	ldw	r3,12(r6)
 8007bc8:	31000217 	ldw	r4,8(r6)
 8007bcc:	1145883a 	add	r2,r2,r5
 8007bd0:	20c00315 	stw	r3,12(r4)
 8007bd4:	19000215 	stw	r4,8(r3)
 8007bd8:	10c00054 	ori	r3,r2,1
 8007bdc:	30c00115 	stw	r3,4(r6)
 8007be0:	00c200b4 	movhi	r3,2050
 8007be4:	18faa104 	addi	r3,r3,-5500
 8007be8:	18c00017 	ldw	r3,0(r3)
 8007bec:	49800215 	stw	r6,8(r9)
 8007bf0:	10ffcf36 	bltu	r2,r3,8007b30 <__alt_data_end+0xfc007b30>
 8007bf4:	008200b4 	movhi	r2,2050
 8007bf8:	10816f04 	addi	r2,r2,1468
 8007bfc:	11400017 	ldw	r5,0(r2)
 8007c00:	8809883a 	mov	r4,r17
 8007c04:	80078f00 	call	80078f0 <_malloc_trim_r>
 8007c08:	003fc906 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007c0c:	28c9883a 	add	r4,r5,r3
 8007c10:	21000117 	ldw	r4,4(r4)
 8007c14:	2100004c 	andi	r4,r4,1
 8007c18:	20000a1e 	bne	r4,zero,8007c44 <_free_r+0x230>
 8007c1c:	29000317 	ldw	r4,12(r5)
 8007c20:	29400217 	ldw	r5,8(r5)
 8007c24:	10c5883a 	add	r2,r2,r3
 8007c28:	10c00054 	ori	r3,r2,1
 8007c2c:	29000315 	stw	r4,12(r5)
 8007c30:	21400215 	stw	r5,8(r4)
 8007c34:	30c00115 	stw	r3,4(r6)
 8007c38:	308d883a 	add	r6,r6,r2
 8007c3c:	30800015 	stw	r2,0(r6)
 8007c40:	003fbb06 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007c44:	10c00054 	ori	r3,r2,1
 8007c48:	30c00115 	stw	r3,4(r6)
 8007c4c:	308d883a 	add	r6,r6,r2
 8007c50:	30800015 	stw	r2,0(r6)
 8007c54:	003fb606 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007c58:	01000504 	movi	r4,20
 8007c5c:	20c01436 	bltu	r4,r3,8007cb0 <_free_r+0x29c>
 8007c60:	194016c4 	addi	r5,r3,91
 8007c64:	2947883a 	add	r3,r5,r5
 8007c68:	003fbe06 	br	8007b64 <__alt_data_end+0xfc007b64>
 8007c6c:	280bd0ba 	srai	r5,r5,2
 8007c70:	00800044 	movi	r2,1
 8007c74:	39000117 	ldw	r4,4(r7)
 8007c78:	114a983a 	sll	r5,r2,r5
 8007c7c:	1805883a 	mov	r2,r3
 8007c80:	2908b03a 	or	r4,r5,r4
 8007c84:	39000115 	stw	r4,4(r7)
 8007c88:	003fc406 	br	8007b9c <__alt_data_end+0xfc007b9c>
 8007c8c:	49800515 	stw	r6,20(r9)
 8007c90:	49800415 	stw	r6,16(r9)
 8007c94:	10c00054 	ori	r3,r2,1
 8007c98:	31000315 	stw	r4,12(r6)
 8007c9c:	31000215 	stw	r4,8(r6)
 8007ca0:	30c00115 	stw	r3,4(r6)
 8007ca4:	308d883a 	add	r6,r6,r2
 8007ca8:	30800015 	stw	r2,0(r6)
 8007cac:	003fa006 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007cb0:	01001504 	movi	r4,84
 8007cb4:	20c00436 	bltu	r4,r3,8007cc8 <_free_r+0x2b4>
 8007cb8:	1006d33a 	srli	r3,r2,12
 8007cbc:	19401b84 	addi	r5,r3,110
 8007cc0:	2947883a 	add	r3,r5,r5
 8007cc4:	003fa706 	br	8007b64 <__alt_data_end+0xfc007b64>
 8007cc8:	01005504 	movi	r4,340
 8007ccc:	20c00436 	bltu	r4,r3,8007ce0 <_free_r+0x2cc>
 8007cd0:	1006d3fa 	srli	r3,r2,15
 8007cd4:	19401dc4 	addi	r5,r3,119
 8007cd8:	2947883a 	add	r3,r5,r5
 8007cdc:	003fa106 	br	8007b64 <__alt_data_end+0xfc007b64>
 8007ce0:	01015504 	movi	r4,1364
 8007ce4:	20c00436 	bltu	r4,r3,8007cf8 <_free_r+0x2e4>
 8007ce8:	1006d4ba 	srli	r3,r2,18
 8007cec:	19401f04 	addi	r5,r3,124
 8007cf0:	2947883a 	add	r3,r5,r5
 8007cf4:	003f9b06 	br	8007b64 <__alt_data_end+0xfc007b64>
 8007cf8:	00c03f04 	movi	r3,252
 8007cfc:	01401f84 	movi	r5,126
 8007d00:	003f9806 	br	8007b64 <__alt_data_end+0xfc007b64>

08007d04 <__sfvwrite_r>:
 8007d04:	30800217 	ldw	r2,8(r6)
 8007d08:	10004526 	beq	r2,zero,8007e20 <__sfvwrite_r+0x11c>
 8007d0c:	28c0030b 	ldhu	r3,12(r5)
 8007d10:	defff404 	addi	sp,sp,-48
 8007d14:	dd400715 	stw	r21,28(sp)
 8007d18:	dcc00515 	stw	r19,20(sp)
 8007d1c:	dc000215 	stw	r16,8(sp)
 8007d20:	dfc00b15 	stw	ra,44(sp)
 8007d24:	df000a15 	stw	fp,40(sp)
 8007d28:	ddc00915 	stw	r23,36(sp)
 8007d2c:	dd800815 	stw	r22,32(sp)
 8007d30:	dd000615 	stw	r20,24(sp)
 8007d34:	dc800415 	stw	r18,16(sp)
 8007d38:	dc400315 	stw	r17,12(sp)
 8007d3c:	1880020c 	andi	r2,r3,8
 8007d40:	2821883a 	mov	r16,r5
 8007d44:	202b883a 	mov	r21,r4
 8007d48:	3027883a 	mov	r19,r6
 8007d4c:	10002526 	beq	r2,zero,8007de4 <__sfvwrite_r+0xe0>
 8007d50:	28800417 	ldw	r2,16(r5)
 8007d54:	10002326 	beq	r2,zero,8007de4 <__sfvwrite_r+0xe0>
 8007d58:	1880008c 	andi	r2,r3,2
 8007d5c:	9c400017 	ldw	r17,0(r19)
 8007d60:	10003126 	beq	r2,zero,8007e28 <__sfvwrite_r+0x124>
 8007d64:	0029883a 	mov	r20,zero
 8007d68:	0025883a 	mov	r18,zero
 8007d6c:	05810004 	movi	r22,1024
 8007d70:	a00d883a 	mov	r6,r20
 8007d74:	a809883a 	mov	r4,r21
 8007d78:	90002526 	beq	r18,zero,8007e10 <__sfvwrite_r+0x10c>
 8007d7c:	900f883a 	mov	r7,r18
 8007d80:	81400717 	ldw	r5,28(r16)
 8007d84:	b480012e 	bgeu	r22,r18,8007d8c <__sfvwrite_r+0x88>
 8007d88:	01c10004 	movi	r7,1024
 8007d8c:	80800917 	ldw	r2,36(r16)
 8007d90:	103ee83a 	callr	r2
 8007d94:	0080510e 	bge	zero,r2,8007edc <__sfvwrite_r+0x1d8>
 8007d98:	98c00217 	ldw	r3,8(r19)
 8007d9c:	a0a9883a 	add	r20,r20,r2
 8007da0:	90a5c83a 	sub	r18,r18,r2
 8007da4:	1885c83a 	sub	r2,r3,r2
 8007da8:	98800215 	stw	r2,8(r19)
 8007dac:	103ff01e 	bne	r2,zero,8007d70 <__alt_data_end+0xfc007d70>
 8007db0:	0005883a 	mov	r2,zero
 8007db4:	dfc00b17 	ldw	ra,44(sp)
 8007db8:	df000a17 	ldw	fp,40(sp)
 8007dbc:	ddc00917 	ldw	r23,36(sp)
 8007dc0:	dd800817 	ldw	r22,32(sp)
 8007dc4:	dd400717 	ldw	r21,28(sp)
 8007dc8:	dd000617 	ldw	r20,24(sp)
 8007dcc:	dcc00517 	ldw	r19,20(sp)
 8007dd0:	dc800417 	ldw	r18,16(sp)
 8007dd4:	dc400317 	ldw	r17,12(sp)
 8007dd8:	dc000217 	ldw	r16,8(sp)
 8007ddc:	dec00c04 	addi	sp,sp,48
 8007de0:	f800283a 	ret
 8007de4:	a809883a 	mov	r4,r21
 8007de8:	800b883a 	mov	r5,r16
 8007dec:	80058a00 	call	80058a0 <__swsetup_r>
 8007df0:	80c0030b 	ldhu	r3,12(r16)
 8007df4:	103fd826 	beq	r2,zero,8007d58 <__alt_data_end+0xfc007d58>
 8007df8:	18c01014 	ori	r3,r3,64
 8007dfc:	80c0030d 	sth	r3,12(r16)
 8007e00:	00c00244 	movi	r3,9
 8007e04:	00bfffc4 	movi	r2,-1
 8007e08:	a8c00015 	stw	r3,0(r21)
 8007e0c:	003fe906 	br	8007db4 <__alt_data_end+0xfc007db4>
 8007e10:	8d000017 	ldw	r20,0(r17)
 8007e14:	8c800117 	ldw	r18,4(r17)
 8007e18:	8c400204 	addi	r17,r17,8
 8007e1c:	003fd406 	br	8007d70 <__alt_data_end+0xfc007d70>
 8007e20:	0005883a 	mov	r2,zero
 8007e24:	f800283a 	ret
 8007e28:	1880004c 	andi	r2,r3,1
 8007e2c:	1000301e 	bne	r2,zero,8007ef0 <__sfvwrite_r+0x1ec>
 8007e30:	002f883a 	mov	r23,zero
 8007e34:	0025883a 	mov	r18,zero
 8007e38:	90001c26 	beq	r18,zero,8007eac <__sfvwrite_r+0x1a8>
 8007e3c:	1880800c 	andi	r2,r3,512
 8007e40:	85000217 	ldw	r20,8(r16)
 8007e44:	10006c26 	beq	r2,zero,8007ff8 <__sfvwrite_r+0x2f4>
 8007e48:	a02d883a 	mov	r22,r20
 8007e4c:	95008536 	bltu	r18,r20,8008064 <__sfvwrite_r+0x360>
 8007e50:	1881200c 	andi	r2,r3,1152
 8007e54:	10009d1e 	bne	r2,zero,80080cc <__sfvwrite_r+0x3c8>
 8007e58:	81000017 	ldw	r4,0(r16)
 8007e5c:	a039883a 	mov	fp,r20
 8007e60:	9029883a 	mov	r20,r18
 8007e64:	b80b883a 	mov	r5,r23
 8007e68:	b00d883a 	mov	r6,r22
 8007e6c:	8008e400 	call	8008e40 <memmove>
 8007e70:	80c00217 	ldw	r3,8(r16)
 8007e74:	81000017 	ldw	r4,0(r16)
 8007e78:	9005883a 	mov	r2,r18
 8007e7c:	1f39c83a 	sub	fp,r3,fp
 8007e80:	258f883a 	add	r7,r4,r22
 8007e84:	87000215 	stw	fp,8(r16)
 8007e88:	81c00015 	stw	r7,0(r16)
 8007e8c:	98c00217 	ldw	r3,8(r19)
 8007e90:	b8af883a 	add	r23,r23,r2
 8007e94:	90a5c83a 	sub	r18,r18,r2
 8007e98:	1d05c83a 	sub	r2,r3,r20
 8007e9c:	98800215 	stw	r2,8(r19)
 8007ea0:	103fc326 	beq	r2,zero,8007db0 <__alt_data_end+0xfc007db0>
 8007ea4:	80c0030b 	ldhu	r3,12(r16)
 8007ea8:	903fe41e 	bne	r18,zero,8007e3c <__alt_data_end+0xfc007e3c>
 8007eac:	8dc00017 	ldw	r23,0(r17)
 8007eb0:	8c800117 	ldw	r18,4(r17)
 8007eb4:	8c400204 	addi	r17,r17,8
 8007eb8:	003fdf06 	br	8007e38 <__alt_data_end+0xfc007e38>
 8007ebc:	800a04c0 	call	800a04c <_realloc_r>
 8007ec0:	102d883a 	mov	r22,r2
 8007ec4:	1000a01e 	bne	r2,zero,8008148 <__sfvwrite_r+0x444>
 8007ec8:	81400417 	ldw	r5,16(r16)
 8007ecc:	a809883a 	mov	r4,r21
 8007ed0:	8007a140 	call	8007a14 <_free_r>
 8007ed4:	00800304 	movi	r2,12
 8007ed8:	a8800015 	stw	r2,0(r21)
 8007edc:	80c0030b 	ldhu	r3,12(r16)
 8007ee0:	00bfffc4 	movi	r2,-1
 8007ee4:	18c01014 	ori	r3,r3,64
 8007ee8:	80c0030d 	sth	r3,12(r16)
 8007eec:	003fb106 	br	8007db4 <__alt_data_end+0xfc007db4>
 8007ef0:	0029883a 	mov	r20,zero
 8007ef4:	0011883a 	mov	r8,zero
 8007ef8:	0039883a 	mov	fp,zero
 8007efc:	0025883a 	mov	r18,zero
 8007f00:	90001f26 	beq	r18,zero,8007f80 <__sfvwrite_r+0x27c>
 8007f04:	40006826 	beq	r8,zero,80080a8 <__sfvwrite_r+0x3a4>
 8007f08:	a02f883a 	mov	r23,r20
 8007f0c:	9500012e 	bgeu	r18,r20,8007f14 <__sfvwrite_r+0x210>
 8007f10:	902f883a 	mov	r23,r18
 8007f14:	81000017 	ldw	r4,0(r16)
 8007f18:	80800417 	ldw	r2,16(r16)
 8007f1c:	b82d883a 	mov	r22,r23
 8007f20:	81800217 	ldw	r6,8(r16)
 8007f24:	81c00517 	ldw	r7,20(r16)
 8007f28:	1100022e 	bgeu	r2,r4,8007f34 <__sfvwrite_r+0x230>
 8007f2c:	31c7883a 	add	r3,r6,r7
 8007f30:	1dc01816 	blt	r3,r23,8007f94 <__sfvwrite_r+0x290>
 8007f34:	b9c03f16 	blt	r23,r7,8008034 <__sfvwrite_r+0x330>
 8007f38:	80800917 	ldw	r2,36(r16)
 8007f3c:	81400717 	ldw	r5,28(r16)
 8007f40:	a809883a 	mov	r4,r21
 8007f44:	da000115 	stw	r8,4(sp)
 8007f48:	e00d883a 	mov	r6,fp
 8007f4c:	103ee83a 	callr	r2
 8007f50:	102d883a 	mov	r22,r2
 8007f54:	da000117 	ldw	r8,4(sp)
 8007f58:	00bfe00e 	bge	zero,r2,8007edc <__alt_data_end+0xfc007edc>
 8007f5c:	a5a9c83a 	sub	r20,r20,r22
 8007f60:	a0001f26 	beq	r20,zero,8007fe0 <__sfvwrite_r+0x2dc>
 8007f64:	98800217 	ldw	r2,8(r19)
 8007f68:	e5b9883a 	add	fp,fp,r22
 8007f6c:	95a5c83a 	sub	r18,r18,r22
 8007f70:	15adc83a 	sub	r22,r2,r22
 8007f74:	9d800215 	stw	r22,8(r19)
 8007f78:	b03f8d26 	beq	r22,zero,8007db0 <__alt_data_end+0xfc007db0>
 8007f7c:	903fe11e 	bne	r18,zero,8007f04 <__alt_data_end+0xfc007f04>
 8007f80:	8f000017 	ldw	fp,0(r17)
 8007f84:	8c800117 	ldw	r18,4(r17)
 8007f88:	0011883a 	mov	r8,zero
 8007f8c:	8c400204 	addi	r17,r17,8
 8007f90:	003fdb06 	br	8007f00 <__alt_data_end+0xfc007f00>
 8007f94:	180d883a 	mov	r6,r3
 8007f98:	e00b883a 	mov	r5,fp
 8007f9c:	da000115 	stw	r8,4(sp)
 8007fa0:	d8c00015 	stw	r3,0(sp)
 8007fa4:	8008e400 	call	8008e40 <memmove>
 8007fa8:	d8c00017 	ldw	r3,0(sp)
 8007fac:	80800017 	ldw	r2,0(r16)
 8007fb0:	a809883a 	mov	r4,r21
 8007fb4:	800b883a 	mov	r5,r16
 8007fb8:	10c5883a 	add	r2,r2,r3
 8007fbc:	80800015 	stw	r2,0(r16)
 8007fc0:	d8c00015 	stw	r3,0(sp)
 8007fc4:	80072f80 	call	80072f8 <_fflush_r>
 8007fc8:	d8c00017 	ldw	r3,0(sp)
 8007fcc:	da000117 	ldw	r8,4(sp)
 8007fd0:	103fc21e 	bne	r2,zero,8007edc <__alt_data_end+0xfc007edc>
 8007fd4:	182d883a 	mov	r22,r3
 8007fd8:	a5a9c83a 	sub	r20,r20,r22
 8007fdc:	a03fe11e 	bne	r20,zero,8007f64 <__alt_data_end+0xfc007f64>
 8007fe0:	a809883a 	mov	r4,r21
 8007fe4:	800b883a 	mov	r5,r16
 8007fe8:	80072f80 	call	80072f8 <_fflush_r>
 8007fec:	103fbb1e 	bne	r2,zero,8007edc <__alt_data_end+0xfc007edc>
 8007ff0:	0011883a 	mov	r8,zero
 8007ff4:	003fdb06 	br	8007f64 <__alt_data_end+0xfc007f64>
 8007ff8:	81000017 	ldw	r4,0(r16)
 8007ffc:	80800417 	ldw	r2,16(r16)
 8008000:	1100012e 	bgeu	r2,r4,8008008 <__sfvwrite_r+0x304>
 8008004:	a4805a36 	bltu	r20,r18,8008170 <__sfvwrite_r+0x46c>
 8008008:	81c00517 	ldw	r7,20(r16)
 800800c:	91c01a36 	bltu	r18,r7,8008078 <__sfvwrite_r+0x374>
 8008010:	80800917 	ldw	r2,36(r16)
 8008014:	81400717 	ldw	r5,28(r16)
 8008018:	a809883a 	mov	r4,r21
 800801c:	b80d883a 	mov	r6,r23
 8008020:	103ee83a 	callr	r2
 8008024:	1029883a 	mov	r20,r2
 8008028:	00bfac0e 	bge	zero,r2,8007edc <__alt_data_end+0xfc007edc>
 800802c:	a005883a 	mov	r2,r20
 8008030:	003f9606 	br	8007e8c <__alt_data_end+0xfc007e8c>
 8008034:	b80d883a 	mov	r6,r23
 8008038:	e00b883a 	mov	r5,fp
 800803c:	da000115 	stw	r8,4(sp)
 8008040:	8008e400 	call	8008e40 <memmove>
 8008044:	80800217 	ldw	r2,8(r16)
 8008048:	80c00017 	ldw	r3,0(r16)
 800804c:	da000117 	ldw	r8,4(sp)
 8008050:	15c5c83a 	sub	r2,r2,r23
 8008054:	1def883a 	add	r23,r3,r23
 8008058:	80800215 	stw	r2,8(r16)
 800805c:	85c00015 	stw	r23,0(r16)
 8008060:	003fbe06 	br	8007f5c <__alt_data_end+0xfc007f5c>
 8008064:	81000017 	ldw	r4,0(r16)
 8008068:	9039883a 	mov	fp,r18
 800806c:	9029883a 	mov	r20,r18
 8008070:	902d883a 	mov	r22,r18
 8008074:	003f7b06 	br	8007e64 <__alt_data_end+0xfc007e64>
 8008078:	b80b883a 	mov	r5,r23
 800807c:	900d883a 	mov	r6,r18
 8008080:	8008e400 	call	8008e40 <memmove>
 8008084:	80c00217 	ldw	r3,8(r16)
 8008088:	80800017 	ldw	r2,0(r16)
 800808c:	9029883a 	mov	r20,r18
 8008090:	1c87c83a 	sub	r3,r3,r18
 8008094:	1485883a 	add	r2,r2,r18
 8008098:	80800015 	stw	r2,0(r16)
 800809c:	80c00215 	stw	r3,8(r16)
 80080a0:	9005883a 	mov	r2,r18
 80080a4:	003f7906 	br	8007e8c <__alt_data_end+0xfc007e8c>
 80080a8:	e009883a 	mov	r4,fp
 80080ac:	01400284 	movi	r5,10
 80080b0:	900d883a 	mov	r6,r18
 80080b4:	8008d580 	call	8008d58 <memchr>
 80080b8:	10003826 	beq	r2,zero,800819c <__sfvwrite_r+0x498>
 80080bc:	10800044 	addi	r2,r2,1
 80080c0:	1729c83a 	sub	r20,r2,fp
 80080c4:	02000044 	movi	r8,1
 80080c8:	003f8f06 	br	8007f08 <__alt_data_end+0xfc007f08>
 80080cc:	80800517 	ldw	r2,20(r16)
 80080d0:	81400417 	ldw	r5,16(r16)
 80080d4:	87000017 	ldw	fp,0(r16)
 80080d8:	10a9883a 	add	r20,r2,r2
 80080dc:	a085883a 	add	r2,r20,r2
 80080e0:	1028d7fa 	srli	r20,r2,31
 80080e4:	e179c83a 	sub	fp,fp,r5
 80080e8:	e1000044 	addi	r4,fp,1
 80080ec:	a085883a 	add	r2,r20,r2
 80080f0:	1029d07a 	srai	r20,r2,1
 80080f4:	2485883a 	add	r2,r4,r18
 80080f8:	a00d883a 	mov	r6,r20
 80080fc:	a080022e 	bgeu	r20,r2,8008108 <__sfvwrite_r+0x404>
 8008100:	1029883a 	mov	r20,r2
 8008104:	100d883a 	mov	r6,r2
 8008108:	18c1000c 	andi	r3,r3,1024
 800810c:	a809883a 	mov	r4,r21
 8008110:	183f6a26 	beq	r3,zero,8007ebc <__alt_data_end+0xfc007ebc>
 8008114:	300b883a 	mov	r5,r6
 8008118:	80085b00 	call	80085b0 <_malloc_r>
 800811c:	102d883a 	mov	r22,r2
 8008120:	103f6c26 	beq	r2,zero,8007ed4 <__alt_data_end+0xfc007ed4>
 8008124:	81400417 	ldw	r5,16(r16)
 8008128:	1009883a 	mov	r4,r2
 800812c:	e00d883a 	mov	r6,fp
 8008130:	80032680 	call	8003268 <memcpy>
 8008134:	8080030b 	ldhu	r2,12(r16)
 8008138:	00fedfc4 	movi	r3,-1153
 800813c:	10c4703a 	and	r2,r2,r3
 8008140:	10802014 	ori	r2,r2,128
 8008144:	8080030d 	sth	r2,12(r16)
 8008148:	b709883a 	add	r4,r22,fp
 800814c:	a707c83a 	sub	r3,r20,fp
 8008150:	85800415 	stw	r22,16(r16)
 8008154:	85000515 	stw	r20,20(r16)
 8008158:	81000015 	stw	r4,0(r16)
 800815c:	9039883a 	mov	fp,r18
 8008160:	80c00215 	stw	r3,8(r16)
 8008164:	9029883a 	mov	r20,r18
 8008168:	902d883a 	mov	r22,r18
 800816c:	003f3d06 	br	8007e64 <__alt_data_end+0xfc007e64>
 8008170:	b80b883a 	mov	r5,r23
 8008174:	a00d883a 	mov	r6,r20
 8008178:	8008e400 	call	8008e40 <memmove>
 800817c:	80800017 	ldw	r2,0(r16)
 8008180:	a809883a 	mov	r4,r21
 8008184:	800b883a 	mov	r5,r16
 8008188:	1505883a 	add	r2,r2,r20
 800818c:	80800015 	stw	r2,0(r16)
 8008190:	80072f80 	call	80072f8 <_fflush_r>
 8008194:	103fa526 	beq	r2,zero,800802c <__alt_data_end+0xfc00802c>
 8008198:	003f5006 	br	8007edc <__alt_data_end+0xfc007edc>
 800819c:	95000044 	addi	r20,r18,1
 80081a0:	02000044 	movi	r8,1
 80081a4:	003f5806 	br	8007f08 <__alt_data_end+0xfc007f08>

080081a8 <_fwalk>:
 80081a8:	defff804 	addi	sp,sp,-32
 80081ac:	dd400515 	stw	r21,20(sp)
 80081b0:	2540b804 	addi	r21,r4,736
 80081b4:	dd800615 	stw	r22,24(sp)
 80081b8:	dd000415 	stw	r20,16(sp)
 80081bc:	dfc00715 	stw	ra,28(sp)
 80081c0:	dcc00315 	stw	r19,12(sp)
 80081c4:	dc800215 	stw	r18,8(sp)
 80081c8:	dc400115 	stw	r17,4(sp)
 80081cc:	dc000015 	stw	r16,0(sp)
 80081d0:	2829883a 	mov	r20,r5
 80081d4:	002d883a 	mov	r22,zero
 80081d8:	80078b00 	call	80078b0 <__sfp_lock_acquire>
 80081dc:	a8001426 	beq	r21,zero,8008230 <_fwalk+0x88>
 80081e0:	04ffffc4 	movi	r19,-1
 80081e4:	ac400117 	ldw	r17,4(r21)
 80081e8:	ac800217 	ldw	r18,8(r21)
 80081ec:	8c7fffc4 	addi	r17,r17,-1
 80081f0:	88000d16 	blt	r17,zero,8008228 <_fwalk+0x80>
 80081f4:	94000304 	addi	r16,r18,12
 80081f8:	94800384 	addi	r18,r18,14
 80081fc:	80c0000f 	ldh	r3,0(r16)
 8008200:	8c7fffc4 	addi	r17,r17,-1
 8008204:	813ffd04 	addi	r4,r16,-12
 8008208:	18000426 	beq	r3,zero,800821c <_fwalk+0x74>
 800820c:	90c0000f 	ldh	r3,0(r18)
 8008210:	1cc00226 	beq	r3,r19,800821c <_fwalk+0x74>
 8008214:	a03ee83a 	callr	r20
 8008218:	b0acb03a 	or	r22,r22,r2
 800821c:	84001a04 	addi	r16,r16,104
 8008220:	94801a04 	addi	r18,r18,104
 8008224:	8cfff51e 	bne	r17,r19,80081fc <__alt_data_end+0xfc0081fc>
 8008228:	ad400017 	ldw	r21,0(r21)
 800822c:	a83fed1e 	bne	r21,zero,80081e4 <__alt_data_end+0xfc0081e4>
 8008230:	80078b40 	call	80078b4 <__sfp_lock_release>
 8008234:	b005883a 	mov	r2,r22
 8008238:	dfc00717 	ldw	ra,28(sp)
 800823c:	dd800617 	ldw	r22,24(sp)
 8008240:	dd400517 	ldw	r21,20(sp)
 8008244:	dd000417 	ldw	r20,16(sp)
 8008248:	dcc00317 	ldw	r19,12(sp)
 800824c:	dc800217 	ldw	r18,8(sp)
 8008250:	dc400117 	ldw	r17,4(sp)
 8008254:	dc000017 	ldw	r16,0(sp)
 8008258:	dec00804 	addi	sp,sp,32
 800825c:	f800283a 	ret

08008260 <_fwalk_reent>:
 8008260:	defff804 	addi	sp,sp,-32
 8008264:	dd400515 	stw	r21,20(sp)
 8008268:	2540b804 	addi	r21,r4,736
 800826c:	dd800615 	stw	r22,24(sp)
 8008270:	dd000415 	stw	r20,16(sp)
 8008274:	dcc00315 	stw	r19,12(sp)
 8008278:	dfc00715 	stw	ra,28(sp)
 800827c:	dc800215 	stw	r18,8(sp)
 8008280:	dc400115 	stw	r17,4(sp)
 8008284:	dc000015 	stw	r16,0(sp)
 8008288:	2027883a 	mov	r19,r4
 800828c:	2829883a 	mov	r20,r5
 8008290:	002d883a 	mov	r22,zero
 8008294:	80078b00 	call	80078b0 <__sfp_lock_acquire>
 8008298:	a8001326 	beq	r21,zero,80082e8 <_fwalk_reent+0x88>
 800829c:	04bfffc4 	movi	r18,-1
 80082a0:	ac400117 	ldw	r17,4(r21)
 80082a4:	ac000217 	ldw	r16,8(r21)
 80082a8:	8c7fffc4 	addi	r17,r17,-1
 80082ac:	88000c16 	blt	r17,zero,80082e0 <_fwalk_reent+0x80>
 80082b0:	84000304 	addi	r16,r16,12
 80082b4:	80c0000f 	ldh	r3,0(r16)
 80082b8:	8c7fffc4 	addi	r17,r17,-1
 80082bc:	817ffd04 	addi	r5,r16,-12
 80082c0:	18000526 	beq	r3,zero,80082d8 <_fwalk_reent+0x78>
 80082c4:	80c0008f 	ldh	r3,2(r16)
 80082c8:	9809883a 	mov	r4,r19
 80082cc:	1c800226 	beq	r3,r18,80082d8 <_fwalk_reent+0x78>
 80082d0:	a03ee83a 	callr	r20
 80082d4:	b0acb03a 	or	r22,r22,r2
 80082d8:	84001a04 	addi	r16,r16,104
 80082dc:	8cbff51e 	bne	r17,r18,80082b4 <__alt_data_end+0xfc0082b4>
 80082e0:	ad400017 	ldw	r21,0(r21)
 80082e4:	a83fee1e 	bne	r21,zero,80082a0 <__alt_data_end+0xfc0082a0>
 80082e8:	80078b40 	call	80078b4 <__sfp_lock_release>
 80082ec:	b005883a 	mov	r2,r22
 80082f0:	dfc00717 	ldw	ra,28(sp)
 80082f4:	dd800617 	ldw	r22,24(sp)
 80082f8:	dd400517 	ldw	r21,20(sp)
 80082fc:	dd000417 	ldw	r20,16(sp)
 8008300:	dcc00317 	ldw	r19,12(sp)
 8008304:	dc800217 	ldw	r18,8(sp)
 8008308:	dc400117 	ldw	r17,4(sp)
 800830c:	dc000017 	ldw	r16,0(sp)
 8008310:	dec00804 	addi	sp,sp,32
 8008314:	f800283a 	ret

08008318 <_setlocale_r>:
 8008318:	30001b26 	beq	r6,zero,8008388 <_setlocale_r+0x70>
 800831c:	014200b4 	movhi	r5,2050
 8008320:	defffe04 	addi	sp,sp,-8
 8008324:	29735004 	addi	r5,r5,-12992
 8008328:	3009883a 	mov	r4,r6
 800832c:	dc000015 	stw	r16,0(sp)
 8008330:	dfc00115 	stw	ra,4(sp)
 8008334:	3021883a 	mov	r16,r6
 8008338:	800a7f00 	call	800a7f0 <strcmp>
 800833c:	1000061e 	bne	r2,zero,8008358 <_setlocale_r+0x40>
 8008340:	008200b4 	movhi	r2,2050
 8008344:	10b34f04 	addi	r2,r2,-12996
 8008348:	dfc00117 	ldw	ra,4(sp)
 800834c:	dc000017 	ldw	r16,0(sp)
 8008350:	dec00204 	addi	sp,sp,8
 8008354:	f800283a 	ret
 8008358:	014200b4 	movhi	r5,2050
 800835c:	29734f04 	addi	r5,r5,-12996
 8008360:	8009883a 	mov	r4,r16
 8008364:	800a7f00 	call	800a7f0 <strcmp>
 8008368:	103ff526 	beq	r2,zero,8008340 <__alt_data_end+0xfc008340>
 800836c:	014200b4 	movhi	r5,2050
 8008370:	29729a04 	addi	r5,r5,-13720
 8008374:	8009883a 	mov	r4,r16
 8008378:	800a7f00 	call	800a7f0 <strcmp>
 800837c:	103ff026 	beq	r2,zero,8008340 <__alt_data_end+0xfc008340>
 8008380:	0005883a 	mov	r2,zero
 8008384:	003ff006 	br	8008348 <__alt_data_end+0xfc008348>
 8008388:	008200b4 	movhi	r2,2050
 800838c:	10b34f04 	addi	r2,r2,-12996
 8008390:	f800283a 	ret

08008394 <__locale_charset>:
 8008394:	008200b4 	movhi	r2,2050
 8008398:	10b50204 	addi	r2,r2,-11256
 800839c:	f800283a 	ret

080083a0 <__locale_mb_cur_max>:
 80083a0:	008200b4 	movhi	r2,2050
 80083a4:	10ba9f04 	addi	r2,r2,-5508
 80083a8:	10800017 	ldw	r2,0(r2)
 80083ac:	f800283a 	ret

080083b0 <__locale_msgcharset>:
 80083b0:	008200b4 	movhi	r2,2050
 80083b4:	10b4fa04 	addi	r2,r2,-11288
 80083b8:	f800283a 	ret

080083bc <__locale_cjk_lang>:
 80083bc:	0005883a 	mov	r2,zero
 80083c0:	f800283a 	ret

080083c4 <_localeconv_r>:
 80083c4:	008200b4 	movhi	r2,2050
 80083c8:	10b50a04 	addi	r2,r2,-11224
 80083cc:	f800283a 	ret

080083d0 <setlocale>:
 80083d0:	00c200b4 	movhi	r3,2050
 80083d4:	18fa9e04 	addi	r3,r3,-5512
 80083d8:	2005883a 	mov	r2,r4
 80083dc:	19000017 	ldw	r4,0(r3)
 80083e0:	280d883a 	mov	r6,r5
 80083e4:	100b883a 	mov	r5,r2
 80083e8:	80083181 	jmpi	8008318 <_setlocale_r>

080083ec <localeconv>:
 80083ec:	008200b4 	movhi	r2,2050
 80083f0:	10b50a04 	addi	r2,r2,-11224
 80083f4:	f800283a 	ret

080083f8 <__smakebuf_r>:
 80083f8:	2880030b 	ldhu	r2,12(r5)
 80083fc:	10c0008c 	andi	r3,r2,2
 8008400:	1800401e 	bne	r3,zero,8008504 <__smakebuf_r+0x10c>
 8008404:	deffec04 	addi	sp,sp,-80
 8008408:	dc000f15 	stw	r16,60(sp)
 800840c:	2821883a 	mov	r16,r5
 8008410:	2940038f 	ldh	r5,14(r5)
 8008414:	dc401015 	stw	r17,64(sp)
 8008418:	dfc01315 	stw	ra,76(sp)
 800841c:	dcc01215 	stw	r19,72(sp)
 8008420:	dc801115 	stw	r18,68(sp)
 8008424:	2023883a 	mov	r17,r4
 8008428:	28001b16 	blt	r5,zero,8008498 <__smakebuf_r+0xa0>
 800842c:	d80d883a 	mov	r6,sp
 8008430:	800c18c0 	call	800c18c <_fstat_r>
 8008434:	10001716 	blt	r2,zero,8008494 <__smakebuf_r+0x9c>
 8008438:	d8800117 	ldw	r2,4(sp)
 800843c:	00e00014 	movui	r3,32768
 8008440:	10bc000c 	andi	r2,r2,61440
 8008444:	10c03726 	beq	r2,r3,8008524 <__smakebuf_r+0x12c>
 8008448:	80c0030b 	ldhu	r3,12(r16)
 800844c:	18c20014 	ori	r3,r3,2048
 8008450:	80c0030d 	sth	r3,12(r16)
 8008454:	00c80004 	movi	r3,8192
 8008458:	10c03c1e 	bne	r2,r3,800854c <__smakebuf_r+0x154>
 800845c:	8140038f 	ldh	r5,14(r16)
 8008460:	8809883a 	mov	r4,r17
 8008464:	800c1e40 	call	800c1e4 <_isatty_r>
 8008468:	10004e26 	beq	r2,zero,80085a4 <__smakebuf_r+0x1ac>
 800846c:	8080030b 	ldhu	r2,12(r16)
 8008470:	04c00044 	movi	r19,1
 8008474:	80c010c4 	addi	r3,r16,67
 8008478:	14c4b03a 	or	r2,r2,r19
 800847c:	8080030d 	sth	r2,12(r16)
 8008480:	80c00015 	stw	r3,0(r16)
 8008484:	80c00415 	stw	r3,16(r16)
 8008488:	84c00515 	stw	r19,20(r16)
 800848c:	04810004 	movi	r18,1024
 8008490:	00000706 	br	80084b0 <__smakebuf_r+0xb8>
 8008494:	8080030b 	ldhu	r2,12(r16)
 8008498:	10c0200c 	andi	r3,r2,128
 800849c:	18001f1e 	bne	r3,zero,800851c <__smakebuf_r+0x124>
 80084a0:	04810004 	movi	r18,1024
 80084a4:	10820014 	ori	r2,r2,2048
 80084a8:	8080030d 	sth	r2,12(r16)
 80084ac:	0027883a 	mov	r19,zero
 80084b0:	8809883a 	mov	r4,r17
 80084b4:	900b883a 	mov	r5,r18
 80084b8:	80085b00 	call	80085b0 <_malloc_r>
 80084bc:	10002e26 	beq	r2,zero,8008578 <__smakebuf_r+0x180>
 80084c0:	80c0030b 	ldhu	r3,12(r16)
 80084c4:	01020034 	movhi	r4,2048
 80084c8:	211d5804 	addi	r4,r4,30048
 80084cc:	89000f15 	stw	r4,60(r17)
 80084d0:	18c02014 	ori	r3,r3,128
 80084d4:	80c0030d 	sth	r3,12(r16)
 80084d8:	80800015 	stw	r2,0(r16)
 80084dc:	80800415 	stw	r2,16(r16)
 80084e0:	84800515 	stw	r18,20(r16)
 80084e4:	98001c1e 	bne	r19,zero,8008558 <__smakebuf_r+0x160>
 80084e8:	dfc01317 	ldw	ra,76(sp)
 80084ec:	dcc01217 	ldw	r19,72(sp)
 80084f0:	dc801117 	ldw	r18,68(sp)
 80084f4:	dc401017 	ldw	r17,64(sp)
 80084f8:	dc000f17 	ldw	r16,60(sp)
 80084fc:	dec01404 	addi	sp,sp,80
 8008500:	f800283a 	ret
 8008504:	288010c4 	addi	r2,r5,67
 8008508:	28800015 	stw	r2,0(r5)
 800850c:	28800415 	stw	r2,16(r5)
 8008510:	00800044 	movi	r2,1
 8008514:	28800515 	stw	r2,20(r5)
 8008518:	f800283a 	ret
 800851c:	04801004 	movi	r18,64
 8008520:	003fe006 	br	80084a4 <__alt_data_end+0xfc0084a4>
 8008524:	81000a17 	ldw	r4,40(r16)
 8008528:	00c20074 	movhi	r3,2049
 800852c:	18e9e304 	addi	r3,r3,-22644
 8008530:	20ffc51e 	bne	r4,r3,8008448 <__alt_data_end+0xfc008448>
 8008534:	80c0030b 	ldhu	r3,12(r16)
 8008538:	01010004 	movi	r4,1024
 800853c:	81001315 	stw	r4,76(r16)
 8008540:	1906b03a 	or	r3,r3,r4
 8008544:	80c0030d 	sth	r3,12(r16)
 8008548:	003fc206 	br	8008454 <__alt_data_end+0xfc008454>
 800854c:	0027883a 	mov	r19,zero
 8008550:	04810004 	movi	r18,1024
 8008554:	003fd606 	br	80084b0 <__alt_data_end+0xfc0084b0>
 8008558:	8140038f 	ldh	r5,14(r16)
 800855c:	8809883a 	mov	r4,r17
 8008560:	800c1e40 	call	800c1e4 <_isatty_r>
 8008564:	103fe026 	beq	r2,zero,80084e8 <__alt_data_end+0xfc0084e8>
 8008568:	8080030b 	ldhu	r2,12(r16)
 800856c:	10800054 	ori	r2,r2,1
 8008570:	8080030d 	sth	r2,12(r16)
 8008574:	003fdc06 	br	80084e8 <__alt_data_end+0xfc0084e8>
 8008578:	8080030b 	ldhu	r2,12(r16)
 800857c:	10c0800c 	andi	r3,r2,512
 8008580:	183fd91e 	bne	r3,zero,80084e8 <__alt_data_end+0xfc0084e8>
 8008584:	10800094 	ori	r2,r2,2
 8008588:	80c010c4 	addi	r3,r16,67
 800858c:	8080030d 	sth	r2,12(r16)
 8008590:	00800044 	movi	r2,1
 8008594:	80c00015 	stw	r3,0(r16)
 8008598:	80c00415 	stw	r3,16(r16)
 800859c:	80800515 	stw	r2,20(r16)
 80085a0:	003fd106 	br	80084e8 <__alt_data_end+0xfc0084e8>
 80085a4:	04c00044 	movi	r19,1
 80085a8:	04810004 	movi	r18,1024
 80085ac:	003fc006 	br	80084b0 <__alt_data_end+0xfc0084b0>

080085b0 <_malloc_r>:
 80085b0:	defff504 	addi	sp,sp,-44
 80085b4:	dc800315 	stw	r18,12(sp)
 80085b8:	dfc00a15 	stw	ra,40(sp)
 80085bc:	df000915 	stw	fp,36(sp)
 80085c0:	ddc00815 	stw	r23,32(sp)
 80085c4:	dd800715 	stw	r22,28(sp)
 80085c8:	dd400615 	stw	r21,24(sp)
 80085cc:	dd000515 	stw	r20,20(sp)
 80085d0:	dcc00415 	stw	r19,16(sp)
 80085d4:	dc400215 	stw	r17,8(sp)
 80085d8:	dc000115 	stw	r16,4(sp)
 80085dc:	288002c4 	addi	r2,r5,11
 80085e0:	00c00584 	movi	r3,22
 80085e4:	2025883a 	mov	r18,r4
 80085e8:	18802a2e 	bgeu	r3,r2,8008694 <_malloc_r+0xe4>
 80085ec:	047ffe04 	movi	r17,-8
 80085f0:	1462703a 	and	r17,r2,r17
 80085f4:	88009e16 	blt	r17,zero,8008870 <_malloc_r+0x2c0>
 80085f8:	89409d36 	bltu	r17,r5,8008870 <_malloc_r+0x2c0>
 80085fc:	800fe9c0 	call	800fe9c <__malloc_lock>
 8008600:	00807dc4 	movi	r2,503
 8008604:	14402736 	bltu	r2,r17,80086a4 <_malloc_r+0xf4>
 8008608:	8806d0fa 	srli	r3,r17,3
 800860c:	04c200b4 	movhi	r19,2050
 8008610:	9cf51804 	addi	r19,r19,-11168
 8008614:	18c5883a 	add	r2,r3,r3
 8008618:	1085883a 	add	r2,r2,r2
 800861c:	1085883a 	add	r2,r2,r2
 8008620:	9885883a 	add	r2,r19,r2
 8008624:	14000317 	ldw	r16,12(r2)
 8008628:	80814a26 	beq	r16,r2,8008b54 <_malloc_r+0x5a4>
 800862c:	80c00117 	ldw	r3,4(r16)
 8008630:	81000317 	ldw	r4,12(r16)
 8008634:	00bfff04 	movi	r2,-4
 8008638:	1884703a 	and	r2,r3,r2
 800863c:	81400217 	ldw	r5,8(r16)
 8008640:	8085883a 	add	r2,r16,r2
 8008644:	10c00117 	ldw	r3,4(r2)
 8008648:	29000315 	stw	r4,12(r5)
 800864c:	21400215 	stw	r5,8(r4)
 8008650:	18c00054 	ori	r3,r3,1
 8008654:	10c00115 	stw	r3,4(r2)
 8008658:	9009883a 	mov	r4,r18
 800865c:	800febc0 	call	800febc <__malloc_unlock>
 8008660:	80800204 	addi	r2,r16,8
 8008664:	dfc00a17 	ldw	ra,40(sp)
 8008668:	df000917 	ldw	fp,36(sp)
 800866c:	ddc00817 	ldw	r23,32(sp)
 8008670:	dd800717 	ldw	r22,28(sp)
 8008674:	dd400617 	ldw	r21,24(sp)
 8008678:	dd000517 	ldw	r20,20(sp)
 800867c:	dcc00417 	ldw	r19,16(sp)
 8008680:	dc800317 	ldw	r18,12(sp)
 8008684:	dc400217 	ldw	r17,8(sp)
 8008688:	dc000117 	ldw	r16,4(sp)
 800868c:	dec00b04 	addi	sp,sp,44
 8008690:	f800283a 	ret
 8008694:	04400404 	movi	r17,16
 8008698:	89407536 	bltu	r17,r5,8008870 <_malloc_r+0x2c0>
 800869c:	800fe9c0 	call	800fe9c <__malloc_lock>
 80086a0:	003fd906 	br	8008608 <__alt_data_end+0xfc008608>
 80086a4:	8806d27a 	srli	r3,r17,9
 80086a8:	18007526 	beq	r3,zero,8008880 <_malloc_r+0x2d0>
 80086ac:	00800104 	movi	r2,4
 80086b0:	10c0ef36 	bltu	r2,r3,8008a70 <_malloc_r+0x4c0>
 80086b4:	8806d1ba 	srli	r3,r17,6
 80086b8:	19c00e04 	addi	r7,r3,56
 80086bc:	39cb883a 	add	r5,r7,r7
 80086c0:	04c200b4 	movhi	r19,2050
 80086c4:	294b883a 	add	r5,r5,r5
 80086c8:	9cf51804 	addi	r19,r19,-11168
 80086cc:	294b883a 	add	r5,r5,r5
 80086d0:	994b883a 	add	r5,r19,r5
 80086d4:	2c000317 	ldw	r16,12(r5)
 80086d8:	2c000e26 	beq	r5,r16,8008714 <_malloc_r+0x164>
 80086dc:	80800117 	ldw	r2,4(r16)
 80086e0:	01bfff04 	movi	r6,-4
 80086e4:	010003c4 	movi	r4,15
 80086e8:	1184703a 	and	r2,r2,r6
 80086ec:	1447c83a 	sub	r3,r2,r17
 80086f0:	20c00716 	blt	r4,r3,8008710 <_malloc_r+0x160>
 80086f4:	1800650e 	bge	r3,zero,800888c <_malloc_r+0x2dc>
 80086f8:	84000317 	ldw	r16,12(r16)
 80086fc:	2c000526 	beq	r5,r16,8008714 <_malloc_r+0x164>
 8008700:	80800117 	ldw	r2,4(r16)
 8008704:	1184703a 	and	r2,r2,r6
 8008708:	1447c83a 	sub	r3,r2,r17
 800870c:	20fff90e 	bge	r4,r3,80086f4 <__alt_data_end+0xfc0086f4>
 8008710:	39ffffc4 	addi	r7,r7,-1
 8008714:	38c00044 	addi	r3,r7,1
 8008718:	018200b4 	movhi	r6,2050
 800871c:	9c000417 	ldw	r16,16(r19)
 8008720:	31b51804 	addi	r6,r6,-11168
 8008724:	32400204 	addi	r9,r6,8
 8008728:	82410326 	beq	r16,r9,8008b38 <_malloc_r+0x588>
 800872c:	81000117 	ldw	r4,4(r16)
 8008730:	00bfff04 	movi	r2,-4
 8008734:	208e703a 	and	r7,r4,r2
 8008738:	3c45c83a 	sub	r2,r7,r17
 800873c:	010003c4 	movi	r4,15
 8008740:	2080ee16 	blt	r4,r2,8008afc <_malloc_r+0x54c>
 8008744:	32400515 	stw	r9,20(r6)
 8008748:	32400415 	stw	r9,16(r6)
 800874c:	1000510e 	bge	r2,zero,8008894 <_malloc_r+0x2e4>
 8008750:	00807fc4 	movi	r2,511
 8008754:	11c0ce36 	bltu	r2,r7,8008a90 <_malloc_r+0x4e0>
 8008758:	3808d0fa 	srli	r4,r7,3
 800875c:	01c00044 	movi	r7,1
 8008760:	30800117 	ldw	r2,4(r6)
 8008764:	210b883a 	add	r5,r4,r4
 8008768:	294b883a 	add	r5,r5,r5
 800876c:	2009d0ba 	srai	r4,r4,2
 8008770:	294b883a 	add	r5,r5,r5
 8008774:	298b883a 	add	r5,r5,r6
 8008778:	2a000217 	ldw	r8,8(r5)
 800877c:	3908983a 	sll	r4,r7,r4
 8008780:	81400315 	stw	r5,12(r16)
 8008784:	82000215 	stw	r8,8(r16)
 8008788:	2088b03a 	or	r4,r4,r2
 800878c:	2c000215 	stw	r16,8(r5)
 8008790:	31000115 	stw	r4,4(r6)
 8008794:	44000315 	stw	r16,12(r8)
 8008798:	1805d0ba 	srai	r2,r3,2
 800879c:	01400044 	movi	r5,1
 80087a0:	288a983a 	sll	r5,r5,r2
 80087a4:	21404336 	bltu	r4,r5,80088b4 <_malloc_r+0x304>
 80087a8:	2144703a 	and	r2,r4,r5
 80087ac:	10000a1e 	bne	r2,zero,80087d8 <_malloc_r+0x228>
 80087b0:	00bfff04 	movi	r2,-4
 80087b4:	294b883a 	add	r5,r5,r5
 80087b8:	1886703a 	and	r3,r3,r2
 80087bc:	2144703a 	and	r2,r4,r5
 80087c0:	18c00104 	addi	r3,r3,4
 80087c4:	1000041e 	bne	r2,zero,80087d8 <_malloc_r+0x228>
 80087c8:	294b883a 	add	r5,r5,r5
 80087cc:	2144703a 	and	r2,r4,r5
 80087d0:	18c00104 	addi	r3,r3,4
 80087d4:	103ffc26 	beq	r2,zero,80087c8 <__alt_data_end+0xfc0087c8>
 80087d8:	023fff04 	movi	r8,-4
 80087dc:	01c003c4 	movi	r7,15
 80087e0:	18c5883a 	add	r2,r3,r3
 80087e4:	1085883a 	add	r2,r2,r2
 80087e8:	1085883a 	add	r2,r2,r2
 80087ec:	9895883a 	add	r10,r19,r2
 80087f0:	52c00304 	addi	r11,r10,12
 80087f4:	1819883a 	mov	r12,r3
 80087f8:	5c000017 	ldw	r16,0(r11)
 80087fc:	59bffd04 	addi	r6,r11,-12
 8008800:	8180041e 	bne	r16,r6,8008814 <_malloc_r+0x264>
 8008804:	0000ce06 	br	8008b40 <_malloc_r+0x590>
 8008808:	2000d70e 	bge	r4,zero,8008b68 <_malloc_r+0x5b8>
 800880c:	84000317 	ldw	r16,12(r16)
 8008810:	8180cb26 	beq	r16,r6,8008b40 <_malloc_r+0x590>
 8008814:	80800117 	ldw	r2,4(r16)
 8008818:	1204703a 	and	r2,r2,r8
 800881c:	1449c83a 	sub	r4,r2,r17
 8008820:	393ff90e 	bge	r7,r4,8008808 <__alt_data_end+0xfc008808>
 8008824:	80800317 	ldw	r2,12(r16)
 8008828:	80c00217 	ldw	r3,8(r16)
 800882c:	89400054 	ori	r5,r17,1
 8008830:	81400115 	stw	r5,4(r16)
 8008834:	18800315 	stw	r2,12(r3)
 8008838:	10c00215 	stw	r3,8(r2)
 800883c:	8463883a 	add	r17,r16,r17
 8008840:	9c400515 	stw	r17,20(r19)
 8008844:	9c400415 	stw	r17,16(r19)
 8008848:	20800054 	ori	r2,r4,1
 800884c:	88800115 	stw	r2,4(r17)
 8008850:	8a400315 	stw	r9,12(r17)
 8008854:	8a400215 	stw	r9,8(r17)
 8008858:	8923883a 	add	r17,r17,r4
 800885c:	89000015 	stw	r4,0(r17)
 8008860:	9009883a 	mov	r4,r18
 8008864:	800febc0 	call	800febc <__malloc_unlock>
 8008868:	80800204 	addi	r2,r16,8
 800886c:	003f7d06 	br	8008664 <__alt_data_end+0xfc008664>
 8008870:	00800304 	movi	r2,12
 8008874:	90800015 	stw	r2,0(r18)
 8008878:	0005883a 	mov	r2,zero
 800887c:	003f7906 	br	8008664 <__alt_data_end+0xfc008664>
 8008880:	01401f84 	movi	r5,126
 8008884:	01c00fc4 	movi	r7,63
 8008888:	003f8d06 	br	80086c0 <__alt_data_end+0xfc0086c0>
 800888c:	81000317 	ldw	r4,12(r16)
 8008890:	003f6a06 	br	800863c <__alt_data_end+0xfc00863c>
 8008894:	81c5883a 	add	r2,r16,r7
 8008898:	10c00117 	ldw	r3,4(r2)
 800889c:	9009883a 	mov	r4,r18
 80088a0:	18c00054 	ori	r3,r3,1
 80088a4:	10c00115 	stw	r3,4(r2)
 80088a8:	800febc0 	call	800febc <__malloc_unlock>
 80088ac:	80800204 	addi	r2,r16,8
 80088b0:	003f6c06 	br	8008664 <__alt_data_end+0xfc008664>
 80088b4:	9c000217 	ldw	r16,8(r19)
 80088b8:	00bfff04 	movi	r2,-4
 80088bc:	85800117 	ldw	r22,4(r16)
 80088c0:	b0ac703a 	and	r22,r22,r2
 80088c4:	b4400336 	bltu	r22,r17,80088d4 <_malloc_r+0x324>
 80088c8:	b445c83a 	sub	r2,r22,r17
 80088cc:	00c003c4 	movi	r3,15
 80088d0:	18805d16 	blt	r3,r2,8008a48 <_malloc_r+0x498>
 80088d4:	05c200b4 	movhi	r23,2050
 80088d8:	008200b4 	movhi	r2,2050
 80088dc:	bdfaa004 	addi	r23,r23,-5504
 80088e0:	10816f04 	addi	r2,r2,1468
 80088e4:	15400017 	ldw	r21,0(r2)
 80088e8:	b9000017 	ldw	r4,0(r23)
 80088ec:	00ffffc4 	movi	r3,-1
 80088f0:	858d883a 	add	r6,r16,r22
 80088f4:	8d6b883a 	add	r21,r17,r21
 80088f8:	20c0e426 	beq	r4,r3,8008c8c <_malloc_r+0x6dc>
 80088fc:	ad4403c4 	addi	r21,r21,4111
 8008900:	00fc0004 	movi	r3,-4096
 8008904:	a8ea703a 	and	r21,r21,r3
 8008908:	9009883a 	mov	r4,r18
 800890c:	a80b883a 	mov	r5,r21
 8008910:	d9800015 	stw	r6,0(sp)
 8008914:	800a6600 	call	800a660 <_sbrk_r>
 8008918:	00ffffc4 	movi	r3,-1
 800891c:	1029883a 	mov	r20,r2
 8008920:	d9800017 	ldw	r6,0(sp)
 8008924:	10c0a426 	beq	r2,r3,8008bb8 <_malloc_r+0x608>
 8008928:	1180a236 	bltu	r2,r6,8008bb4 <_malloc_r+0x604>
 800892c:	070200b4 	movhi	fp,2050
 8008930:	e7017704 	addi	fp,fp,1500
 8008934:	e0c00017 	ldw	r3,0(fp)
 8008938:	a8c7883a 	add	r3,r21,r3
 800893c:	e0c00015 	stw	r3,0(fp)
 8008940:	3500da26 	beq	r6,r20,8008cac <_malloc_r+0x6fc>
 8008944:	b9000017 	ldw	r4,0(r23)
 8008948:	00bfffc4 	movi	r2,-1
 800894c:	2080e426 	beq	r4,r2,8008ce0 <_malloc_r+0x730>
 8008950:	a185c83a 	sub	r2,r20,r6
 8008954:	1885883a 	add	r2,r3,r2
 8008958:	e0800015 	stw	r2,0(fp)
 800895c:	a0c001cc 	andi	r3,r20,7
 8008960:	1800b526 	beq	r3,zero,8008c38 <_malloc_r+0x688>
 8008964:	a0e9c83a 	sub	r20,r20,r3
 8008968:	00840204 	movi	r2,4104
 800896c:	a5000204 	addi	r20,r20,8
 8008970:	10c7c83a 	sub	r3,r2,r3
 8008974:	a545883a 	add	r2,r20,r21
 8008978:	1083ffcc 	andi	r2,r2,4095
 800897c:	18abc83a 	sub	r21,r3,r2
 8008980:	9009883a 	mov	r4,r18
 8008984:	a80b883a 	mov	r5,r21
 8008988:	800a6600 	call	800a660 <_sbrk_r>
 800898c:	00ffffc4 	movi	r3,-1
 8008990:	10c0d026 	beq	r2,r3,8008cd4 <_malloc_r+0x724>
 8008994:	1507c83a 	sub	r3,r2,r20
 8008998:	a8c7883a 	add	r3,r21,r3
 800899c:	18c00054 	ori	r3,r3,1
 80089a0:	e0800017 	ldw	r2,0(fp)
 80089a4:	9d000215 	stw	r20,8(r19)
 80089a8:	a0c00115 	stw	r3,4(r20)
 80089ac:	a887883a 	add	r3,r21,r2
 80089b0:	e0c00015 	stw	r3,0(fp)
 80089b4:	84c00e26 	beq	r16,r19,80089f0 <_malloc_r+0x440>
 80089b8:	018003c4 	movi	r6,15
 80089bc:	3580a02e 	bgeu	r6,r22,8008c40 <_malloc_r+0x690>
 80089c0:	81400117 	ldw	r5,4(r16)
 80089c4:	013ffe04 	movi	r4,-8
 80089c8:	b0bffd04 	addi	r2,r22,-12
 80089cc:	1104703a 	and	r2,r2,r4
 80089d0:	2900004c 	andi	r4,r5,1
 80089d4:	1108b03a 	or	r4,r2,r4
 80089d8:	81000115 	stw	r4,4(r16)
 80089dc:	01400144 	movi	r5,5
 80089e0:	8089883a 	add	r4,r16,r2
 80089e4:	21400115 	stw	r5,4(r4)
 80089e8:	21400215 	stw	r5,8(r4)
 80089ec:	3080c036 	bltu	r6,r2,8008cf0 <_malloc_r+0x740>
 80089f0:	008200b4 	movhi	r2,2050
 80089f4:	10816e04 	addi	r2,r2,1464
 80089f8:	11000017 	ldw	r4,0(r2)
 80089fc:	20c0012e 	bgeu	r4,r3,8008a04 <_malloc_r+0x454>
 8008a00:	10c00015 	stw	r3,0(r2)
 8008a04:	008200b4 	movhi	r2,2050
 8008a08:	10816d04 	addi	r2,r2,1460
 8008a0c:	11000017 	ldw	r4,0(r2)
 8008a10:	9c000217 	ldw	r16,8(r19)
 8008a14:	20c0012e 	bgeu	r4,r3,8008a1c <_malloc_r+0x46c>
 8008a18:	10c00015 	stw	r3,0(r2)
 8008a1c:	80c00117 	ldw	r3,4(r16)
 8008a20:	00bfff04 	movi	r2,-4
 8008a24:	1886703a 	and	r3,r3,r2
 8008a28:	1c45c83a 	sub	r2,r3,r17
 8008a2c:	1c400236 	bltu	r3,r17,8008a38 <_malloc_r+0x488>
 8008a30:	00c003c4 	movi	r3,15
 8008a34:	18800416 	blt	r3,r2,8008a48 <_malloc_r+0x498>
 8008a38:	9009883a 	mov	r4,r18
 8008a3c:	800febc0 	call	800febc <__malloc_unlock>
 8008a40:	0005883a 	mov	r2,zero
 8008a44:	003f0706 	br	8008664 <__alt_data_end+0xfc008664>
 8008a48:	88c00054 	ori	r3,r17,1
 8008a4c:	80c00115 	stw	r3,4(r16)
 8008a50:	8463883a 	add	r17,r16,r17
 8008a54:	10800054 	ori	r2,r2,1
 8008a58:	9c400215 	stw	r17,8(r19)
 8008a5c:	88800115 	stw	r2,4(r17)
 8008a60:	9009883a 	mov	r4,r18
 8008a64:	800febc0 	call	800febc <__malloc_unlock>
 8008a68:	80800204 	addi	r2,r16,8
 8008a6c:	003efd06 	br	8008664 <__alt_data_end+0xfc008664>
 8008a70:	00800504 	movi	r2,20
 8008a74:	10c0482e 	bgeu	r2,r3,8008b98 <_malloc_r+0x5e8>
 8008a78:	00801504 	movi	r2,84
 8008a7c:	10c06836 	bltu	r2,r3,8008c20 <_malloc_r+0x670>
 8008a80:	8806d33a 	srli	r3,r17,12
 8008a84:	19c01b84 	addi	r7,r3,110
 8008a88:	39cb883a 	add	r5,r7,r7
 8008a8c:	003f0c06 	br	80086c0 <__alt_data_end+0xfc0086c0>
 8008a90:	3804d27a 	srli	r2,r7,9
 8008a94:	01000104 	movi	r4,4
 8008a98:	2080422e 	bgeu	r4,r2,8008ba4 <_malloc_r+0x5f4>
 8008a9c:	01000504 	movi	r4,20
 8008aa0:	20807c36 	bltu	r4,r2,8008c94 <_malloc_r+0x6e4>
 8008aa4:	110016c4 	addi	r4,r2,91
 8008aa8:	210b883a 	add	r5,r4,r4
 8008aac:	294b883a 	add	r5,r5,r5
 8008ab0:	294b883a 	add	r5,r5,r5
 8008ab4:	994b883a 	add	r5,r19,r5
 8008ab8:	28800217 	ldw	r2,8(r5)
 8008abc:	020200b4 	movhi	r8,2050
 8008ac0:	42351804 	addi	r8,r8,-11168
 8008ac4:	11406326 	beq	r2,r5,8008c54 <_malloc_r+0x6a4>
 8008ac8:	01bfff04 	movi	r6,-4
 8008acc:	11000117 	ldw	r4,4(r2)
 8008ad0:	2188703a 	and	r4,r4,r6
 8008ad4:	3900022e 	bgeu	r7,r4,8008ae0 <_malloc_r+0x530>
 8008ad8:	10800217 	ldw	r2,8(r2)
 8008adc:	28bffb1e 	bne	r5,r2,8008acc <__alt_data_end+0xfc008acc>
 8008ae0:	11800317 	ldw	r6,12(r2)
 8008ae4:	99000117 	ldw	r4,4(r19)
 8008ae8:	81800315 	stw	r6,12(r16)
 8008aec:	80800215 	stw	r2,8(r16)
 8008af0:	34000215 	stw	r16,8(r6)
 8008af4:	14000315 	stw	r16,12(r2)
 8008af8:	003f2706 	br	8008798 <__alt_data_end+0xfc008798>
 8008afc:	88c00054 	ori	r3,r17,1
 8008b00:	80c00115 	stw	r3,4(r16)
 8008b04:	8463883a 	add	r17,r16,r17
 8008b08:	34400515 	stw	r17,20(r6)
 8008b0c:	34400415 	stw	r17,16(r6)
 8008b10:	10c00054 	ori	r3,r2,1
 8008b14:	8a400315 	stw	r9,12(r17)
 8008b18:	8a400215 	stw	r9,8(r17)
 8008b1c:	88c00115 	stw	r3,4(r17)
 8008b20:	88a3883a 	add	r17,r17,r2
 8008b24:	88800015 	stw	r2,0(r17)
 8008b28:	9009883a 	mov	r4,r18
 8008b2c:	800febc0 	call	800febc <__malloc_unlock>
 8008b30:	80800204 	addi	r2,r16,8
 8008b34:	003ecb06 	br	8008664 <__alt_data_end+0xfc008664>
 8008b38:	31000117 	ldw	r4,4(r6)
 8008b3c:	003f1606 	br	8008798 <__alt_data_end+0xfc008798>
 8008b40:	63000044 	addi	r12,r12,1
 8008b44:	608000cc 	andi	r2,r12,3
 8008b48:	5ac00204 	addi	r11,r11,8
 8008b4c:	103f2a1e 	bne	r2,zero,80087f8 <__alt_data_end+0xfc0087f8>
 8008b50:	00002106 	br	8008bd8 <_malloc_r+0x628>
 8008b54:	80800204 	addi	r2,r16,8
 8008b58:	84000517 	ldw	r16,20(r16)
 8008b5c:	143eb31e 	bne	r2,r16,800862c <__alt_data_end+0xfc00862c>
 8008b60:	18c00084 	addi	r3,r3,2
 8008b64:	003eec06 	br	8008718 <__alt_data_end+0xfc008718>
 8008b68:	8085883a 	add	r2,r16,r2
 8008b6c:	10c00117 	ldw	r3,4(r2)
 8008b70:	81000317 	ldw	r4,12(r16)
 8008b74:	81400217 	ldw	r5,8(r16)
 8008b78:	18c00054 	ori	r3,r3,1
 8008b7c:	10c00115 	stw	r3,4(r2)
 8008b80:	29000315 	stw	r4,12(r5)
 8008b84:	21400215 	stw	r5,8(r4)
 8008b88:	9009883a 	mov	r4,r18
 8008b8c:	800febc0 	call	800febc <__malloc_unlock>
 8008b90:	80800204 	addi	r2,r16,8
 8008b94:	003eb306 	br	8008664 <__alt_data_end+0xfc008664>
 8008b98:	19c016c4 	addi	r7,r3,91
 8008b9c:	39cb883a 	add	r5,r7,r7
 8008ba0:	003ec706 	br	80086c0 <__alt_data_end+0xfc0086c0>
 8008ba4:	3804d1ba 	srli	r2,r7,6
 8008ba8:	11000e04 	addi	r4,r2,56
 8008bac:	210b883a 	add	r5,r4,r4
 8008bb0:	003fbe06 	br	8008aac <__alt_data_end+0xfc008aac>
 8008bb4:	84ff5d26 	beq	r16,r19,800892c <__alt_data_end+0xfc00892c>
 8008bb8:	9c000217 	ldw	r16,8(r19)
 8008bbc:	00bfff04 	movi	r2,-4
 8008bc0:	80c00117 	ldw	r3,4(r16)
 8008bc4:	1886703a 	and	r3,r3,r2
 8008bc8:	003f9706 	br	8008a28 <__alt_data_end+0xfc008a28>
 8008bcc:	52800017 	ldw	r10,0(r10)
 8008bd0:	18ffffc4 	addi	r3,r3,-1
 8008bd4:	50805c1e 	bne	r10,r2,8008d48 <_malloc_r+0x798>
 8008bd8:	190000cc 	andi	r4,r3,3
 8008bdc:	50bffe04 	addi	r2,r10,-8
 8008be0:	203ffa1e 	bne	r4,zero,8008bcc <__alt_data_end+0xfc008bcc>
 8008be4:	98800117 	ldw	r2,4(r19)
 8008be8:	0146303a 	nor	r3,zero,r5
 8008bec:	1884703a 	and	r2,r3,r2
 8008bf0:	98800115 	stw	r2,4(r19)
 8008bf4:	294b883a 	add	r5,r5,r5
 8008bf8:	117f2e36 	bltu	r2,r5,80088b4 <__alt_data_end+0xfc0088b4>
 8008bfc:	283f2d26 	beq	r5,zero,80088b4 <__alt_data_end+0xfc0088b4>
 8008c00:	1146703a 	and	r3,r2,r5
 8008c04:	1800521e 	bne	r3,zero,8008d50 <_malloc_r+0x7a0>
 8008c08:	6007883a 	mov	r3,r12
 8008c0c:	294b883a 	add	r5,r5,r5
 8008c10:	1148703a 	and	r4,r2,r5
 8008c14:	18c00104 	addi	r3,r3,4
 8008c18:	203ffc26 	beq	r4,zero,8008c0c <__alt_data_end+0xfc008c0c>
 8008c1c:	003ef006 	br	80087e0 <__alt_data_end+0xfc0087e0>
 8008c20:	00805504 	movi	r2,340
 8008c24:	10c01336 	bltu	r2,r3,8008c74 <_malloc_r+0x6c4>
 8008c28:	8806d3fa 	srli	r3,r17,15
 8008c2c:	19c01dc4 	addi	r7,r3,119
 8008c30:	39cb883a 	add	r5,r7,r7
 8008c34:	003ea206 	br	80086c0 <__alt_data_end+0xfc0086c0>
 8008c38:	00c40004 	movi	r3,4096
 8008c3c:	003f4d06 	br	8008974 <__alt_data_end+0xfc008974>
 8008c40:	00800044 	movi	r2,1
 8008c44:	a0800115 	stw	r2,4(r20)
 8008c48:	a021883a 	mov	r16,r20
 8008c4c:	0007883a 	mov	r3,zero
 8008c50:	003f7506 	br	8008a28 <__alt_data_end+0xfc008a28>
 8008c54:	200bd0ba 	srai	r5,r4,2
 8008c58:	01800044 	movi	r6,1
 8008c5c:	41000117 	ldw	r4,4(r8)
 8008c60:	314a983a 	sll	r5,r6,r5
 8008c64:	100d883a 	mov	r6,r2
 8008c68:	2908b03a 	or	r4,r5,r4
 8008c6c:	41000115 	stw	r4,4(r8)
 8008c70:	003f9d06 	br	8008ae8 <__alt_data_end+0xfc008ae8>
 8008c74:	00815504 	movi	r2,1364
 8008c78:	10c01336 	bltu	r2,r3,8008cc8 <_malloc_r+0x718>
 8008c7c:	8806d4ba 	srli	r3,r17,18
 8008c80:	19c01f04 	addi	r7,r3,124
 8008c84:	39cb883a 	add	r5,r7,r7
 8008c88:	003e8d06 	br	80086c0 <__alt_data_end+0xfc0086c0>
 8008c8c:	ad400404 	addi	r21,r21,16
 8008c90:	003f1d06 	br	8008908 <__alt_data_end+0xfc008908>
 8008c94:	01001504 	movi	r4,84
 8008c98:	20801c36 	bltu	r4,r2,8008d0c <_malloc_r+0x75c>
 8008c9c:	3804d33a 	srli	r2,r7,12
 8008ca0:	11001b84 	addi	r4,r2,110
 8008ca4:	210b883a 	add	r5,r4,r4
 8008ca8:	003f8006 	br	8008aac <__alt_data_end+0xfc008aac>
 8008cac:	3083ffcc 	andi	r2,r6,4095
 8008cb0:	103f241e 	bne	r2,zero,8008944 <__alt_data_end+0xfc008944>
 8008cb4:	99000217 	ldw	r4,8(r19)
 8008cb8:	ad85883a 	add	r2,r21,r22
 8008cbc:	10800054 	ori	r2,r2,1
 8008cc0:	20800115 	stw	r2,4(r4)
 8008cc4:	003f4a06 	br	80089f0 <__alt_data_end+0xfc0089f0>
 8008cc8:	01403f04 	movi	r5,252
 8008ccc:	01c01f84 	movi	r7,126
 8008cd0:	003e7b06 	br	80086c0 <__alt_data_end+0xfc0086c0>
 8008cd4:	00c00044 	movi	r3,1
 8008cd8:	002b883a 	mov	r21,zero
 8008cdc:	003f3006 	br	80089a0 <__alt_data_end+0xfc0089a0>
 8008ce0:	008200b4 	movhi	r2,2050
 8008ce4:	10baa004 	addi	r2,r2,-5504
 8008ce8:	15000015 	stw	r20,0(r2)
 8008cec:	003f1b06 	br	800895c <__alt_data_end+0xfc00895c>
 8008cf0:	9009883a 	mov	r4,r18
 8008cf4:	81400204 	addi	r5,r16,8
 8008cf8:	8007a140 	call	8007a14 <_free_r>
 8008cfc:	008200b4 	movhi	r2,2050
 8008d00:	10817704 	addi	r2,r2,1500
 8008d04:	10c00017 	ldw	r3,0(r2)
 8008d08:	003f3906 	br	80089f0 <__alt_data_end+0xfc0089f0>
 8008d0c:	01005504 	movi	r4,340
 8008d10:	20800436 	bltu	r4,r2,8008d24 <_malloc_r+0x774>
 8008d14:	3804d3fa 	srli	r2,r7,15
 8008d18:	11001dc4 	addi	r4,r2,119
 8008d1c:	210b883a 	add	r5,r4,r4
 8008d20:	003f6206 	br	8008aac <__alt_data_end+0xfc008aac>
 8008d24:	01015504 	movi	r4,1364
 8008d28:	20800436 	bltu	r4,r2,8008d3c <_malloc_r+0x78c>
 8008d2c:	3804d4ba 	srli	r2,r7,18
 8008d30:	11001f04 	addi	r4,r2,124
 8008d34:	210b883a 	add	r5,r4,r4
 8008d38:	003f5c06 	br	8008aac <__alt_data_end+0xfc008aac>
 8008d3c:	01403f04 	movi	r5,252
 8008d40:	01001f84 	movi	r4,126
 8008d44:	003f5906 	br	8008aac <__alt_data_end+0xfc008aac>
 8008d48:	98800117 	ldw	r2,4(r19)
 8008d4c:	003fa906 	br	8008bf4 <__alt_data_end+0xfc008bf4>
 8008d50:	6007883a 	mov	r3,r12
 8008d54:	003ea206 	br	80087e0 <__alt_data_end+0xfc0087e0>

08008d58 <memchr>:
 8008d58:	208000cc 	andi	r2,r4,3
 8008d5c:	280f883a 	mov	r7,r5
 8008d60:	10003526 	beq	r2,zero,8008e38 <memchr+0xe0>
 8008d64:	30bfffc4 	addi	r2,r6,-1
 8008d68:	30001b26 	beq	r6,zero,8008dd8 <memchr+0x80>
 8008d6c:	21800003 	ldbu	r6,0(r4)
 8008d70:	28c03fcc 	andi	r3,r5,255
 8008d74:	30c01a26 	beq	r6,r3,8008de0 <memchr+0x88>
 8008d78:	180d883a 	mov	r6,r3
 8008d7c:	00000406 	br	8008d90 <memchr+0x38>
 8008d80:	10001526 	beq	r2,zero,8008dd8 <memchr+0x80>
 8008d84:	20c00003 	ldbu	r3,0(r4)
 8008d88:	10bfffc4 	addi	r2,r2,-1
 8008d8c:	19801426 	beq	r3,r6,8008de0 <memchr+0x88>
 8008d90:	21000044 	addi	r4,r4,1
 8008d94:	20c000cc 	andi	r3,r4,3
 8008d98:	183ff91e 	bne	r3,zero,8008d80 <__alt_data_end+0xfc008d80>
 8008d9c:	024000c4 	movi	r9,3
 8008da0:	48801136 	bltu	r9,r2,8008de8 <memchr+0x90>
 8008da4:	10000c26 	beq	r2,zero,8008dd8 <memchr+0x80>
 8008da8:	20c00003 	ldbu	r3,0(r4)
 8008dac:	29403fcc 	andi	r5,r5,255
 8008db0:	19400b26 	beq	r3,r5,8008de0 <memchr+0x88>
 8008db4:	20c00044 	addi	r3,r4,1
 8008db8:	2085883a 	add	r2,r4,r2
 8008dbc:	39803fcc 	andi	r6,r7,255
 8008dc0:	00000306 	br	8008dd0 <memchr+0x78>
 8008dc4:	18c00044 	addi	r3,r3,1
 8008dc8:	197fffc3 	ldbu	r5,-1(r3)
 8008dcc:	29800426 	beq	r5,r6,8008de0 <memchr+0x88>
 8008dd0:	1809883a 	mov	r4,r3
 8008dd4:	18bffb1e 	bne	r3,r2,8008dc4 <__alt_data_end+0xfc008dc4>
 8008dd8:	0005883a 	mov	r2,zero
 8008ddc:	f800283a 	ret
 8008de0:	2005883a 	mov	r2,r4
 8008de4:	f800283a 	ret
 8008de8:	28c03fcc 	andi	r3,r5,255
 8008dec:	1810923a 	slli	r8,r3,8
 8008df0:	02ffbff4 	movhi	r11,65279
 8008df4:	02a02074 	movhi	r10,32897
 8008df8:	40c6b03a 	or	r3,r8,r3
 8008dfc:	1810943a 	slli	r8,r3,16
 8008e00:	5affbfc4 	addi	r11,r11,-257
 8008e04:	52a02004 	addi	r10,r10,-32640
 8008e08:	40d0b03a 	or	r8,r8,r3
 8008e0c:	20c00017 	ldw	r3,0(r4)
 8008e10:	40c6f03a 	xor	r3,r8,r3
 8008e14:	1acd883a 	add	r6,r3,r11
 8008e18:	00c6303a 	nor	r3,zero,r3
 8008e1c:	30c6703a 	and	r3,r6,r3
 8008e20:	1a86703a 	and	r3,r3,r10
 8008e24:	183fdf1e 	bne	r3,zero,8008da4 <__alt_data_end+0xfc008da4>
 8008e28:	10bfff04 	addi	r2,r2,-4
 8008e2c:	21000104 	addi	r4,r4,4
 8008e30:	48bff636 	bltu	r9,r2,8008e0c <__alt_data_end+0xfc008e0c>
 8008e34:	003fdb06 	br	8008da4 <__alt_data_end+0xfc008da4>
 8008e38:	3005883a 	mov	r2,r6
 8008e3c:	003fd706 	br	8008d9c <__alt_data_end+0xfc008d9c>

08008e40 <memmove>:
 8008e40:	2005883a 	mov	r2,r4
 8008e44:	29000b2e 	bgeu	r5,r4,8008e74 <memmove+0x34>
 8008e48:	298f883a 	add	r7,r5,r6
 8008e4c:	21c0092e 	bgeu	r4,r7,8008e74 <memmove+0x34>
 8008e50:	2187883a 	add	r3,r4,r6
 8008e54:	198bc83a 	sub	r5,r3,r6
 8008e58:	30004b26 	beq	r6,zero,8008f88 <memmove+0x148>
 8008e5c:	39ffffc4 	addi	r7,r7,-1
 8008e60:	39000003 	ldbu	r4,0(r7)
 8008e64:	18ffffc4 	addi	r3,r3,-1
 8008e68:	19000005 	stb	r4,0(r3)
 8008e6c:	197ffb1e 	bne	r3,r5,8008e5c <__alt_data_end+0xfc008e5c>
 8008e70:	f800283a 	ret
 8008e74:	00c003c4 	movi	r3,15
 8008e78:	1980412e 	bgeu	r3,r6,8008f80 <memmove+0x140>
 8008e7c:	1146b03a 	or	r3,r2,r5
 8008e80:	18c000cc 	andi	r3,r3,3
 8008e84:	1800411e 	bne	r3,zero,8008f8c <memmove+0x14c>
 8008e88:	33fffc04 	addi	r15,r6,-16
 8008e8c:	781ed13a 	srli	r15,r15,4
 8008e90:	28c00104 	addi	r3,r5,4
 8008e94:	13400104 	addi	r13,r2,4
 8008e98:	781c913a 	slli	r14,r15,4
 8008e9c:	2b000204 	addi	r12,r5,8
 8008ea0:	12c00204 	addi	r11,r2,8
 8008ea4:	73800504 	addi	r14,r14,20
 8008ea8:	2a800304 	addi	r10,r5,12
 8008eac:	12400304 	addi	r9,r2,12
 8008eb0:	2b9d883a 	add	r14,r5,r14
 8008eb4:	2811883a 	mov	r8,r5
 8008eb8:	100f883a 	mov	r7,r2
 8008ebc:	41000017 	ldw	r4,0(r8)
 8008ec0:	39c00404 	addi	r7,r7,16
 8008ec4:	18c00404 	addi	r3,r3,16
 8008ec8:	393ffc15 	stw	r4,-16(r7)
 8008ecc:	193ffc17 	ldw	r4,-16(r3)
 8008ed0:	6b400404 	addi	r13,r13,16
 8008ed4:	5ac00404 	addi	r11,r11,16
 8008ed8:	693ffc15 	stw	r4,-16(r13)
 8008edc:	61000017 	ldw	r4,0(r12)
 8008ee0:	4a400404 	addi	r9,r9,16
 8008ee4:	42000404 	addi	r8,r8,16
 8008ee8:	593ffc15 	stw	r4,-16(r11)
 8008eec:	51000017 	ldw	r4,0(r10)
 8008ef0:	63000404 	addi	r12,r12,16
 8008ef4:	52800404 	addi	r10,r10,16
 8008ef8:	493ffc15 	stw	r4,-16(r9)
 8008efc:	1bbfef1e 	bne	r3,r14,8008ebc <__alt_data_end+0xfc008ebc>
 8008f00:	79000044 	addi	r4,r15,1
 8008f04:	2008913a 	slli	r4,r4,4
 8008f08:	328003cc 	andi	r10,r6,15
 8008f0c:	02c000c4 	movi	r11,3
 8008f10:	1107883a 	add	r3,r2,r4
 8008f14:	290b883a 	add	r5,r5,r4
 8008f18:	5a801e2e 	bgeu	r11,r10,8008f94 <memmove+0x154>
 8008f1c:	1813883a 	mov	r9,r3
 8008f20:	2811883a 	mov	r8,r5
 8008f24:	500f883a 	mov	r7,r10
 8008f28:	41000017 	ldw	r4,0(r8)
 8008f2c:	4a400104 	addi	r9,r9,4
 8008f30:	39ffff04 	addi	r7,r7,-4
 8008f34:	493fff15 	stw	r4,-4(r9)
 8008f38:	42000104 	addi	r8,r8,4
 8008f3c:	59fffa36 	bltu	r11,r7,8008f28 <__alt_data_end+0xfc008f28>
 8008f40:	513fff04 	addi	r4,r10,-4
 8008f44:	2008d0ba 	srli	r4,r4,2
 8008f48:	318000cc 	andi	r6,r6,3
 8008f4c:	21000044 	addi	r4,r4,1
 8008f50:	2109883a 	add	r4,r4,r4
 8008f54:	2109883a 	add	r4,r4,r4
 8008f58:	1907883a 	add	r3,r3,r4
 8008f5c:	290b883a 	add	r5,r5,r4
 8008f60:	30000926 	beq	r6,zero,8008f88 <memmove+0x148>
 8008f64:	198d883a 	add	r6,r3,r6
 8008f68:	29c00003 	ldbu	r7,0(r5)
 8008f6c:	18c00044 	addi	r3,r3,1
 8008f70:	29400044 	addi	r5,r5,1
 8008f74:	19ffffc5 	stb	r7,-1(r3)
 8008f78:	19bffb1e 	bne	r3,r6,8008f68 <__alt_data_end+0xfc008f68>
 8008f7c:	f800283a 	ret
 8008f80:	1007883a 	mov	r3,r2
 8008f84:	003ff606 	br	8008f60 <__alt_data_end+0xfc008f60>
 8008f88:	f800283a 	ret
 8008f8c:	1007883a 	mov	r3,r2
 8008f90:	003ff406 	br	8008f64 <__alt_data_end+0xfc008f64>
 8008f94:	500d883a 	mov	r6,r10
 8008f98:	003ff106 	br	8008f60 <__alt_data_end+0xfc008f60>

08008f9c <memset>:
 8008f9c:	20c000cc 	andi	r3,r4,3
 8008fa0:	2005883a 	mov	r2,r4
 8008fa4:	18004326 	beq	r3,zero,80090b4 <memset+0x118>
 8008fa8:	31ffffc4 	addi	r7,r6,-1
 8008fac:	30004026 	beq	r6,zero,80090b0 <memset+0x114>
 8008fb0:	2813883a 	mov	r9,r5
 8008fb4:	200d883a 	mov	r6,r4
 8008fb8:	2007883a 	mov	r3,r4
 8008fbc:	00000406 	br	8008fd0 <memset+0x34>
 8008fc0:	3a3fffc4 	addi	r8,r7,-1
 8008fc4:	31800044 	addi	r6,r6,1
 8008fc8:	38003926 	beq	r7,zero,80090b0 <memset+0x114>
 8008fcc:	400f883a 	mov	r7,r8
 8008fd0:	18c00044 	addi	r3,r3,1
 8008fd4:	32400005 	stb	r9,0(r6)
 8008fd8:	1a0000cc 	andi	r8,r3,3
 8008fdc:	403ff81e 	bne	r8,zero,8008fc0 <__alt_data_end+0xfc008fc0>
 8008fe0:	010000c4 	movi	r4,3
 8008fe4:	21c02d2e 	bgeu	r4,r7,800909c <memset+0x100>
 8008fe8:	29803fcc 	andi	r6,r5,255
 8008fec:	3008923a 	slli	r4,r6,8
 8008ff0:	218cb03a 	or	r6,r4,r6
 8008ff4:	3008943a 	slli	r4,r6,16
 8008ff8:	218cb03a 	or	r6,r4,r6
 8008ffc:	010003c4 	movi	r4,15
 8009000:	21c0182e 	bgeu	r4,r7,8009064 <memset+0xc8>
 8009004:	3b3ffc04 	addi	r12,r7,-16
 8009008:	6018d13a 	srli	r12,r12,4
 800900c:	1a000104 	addi	r8,r3,4
 8009010:	1ac00204 	addi	r11,r3,8
 8009014:	6008913a 	slli	r4,r12,4
 8009018:	1a800304 	addi	r10,r3,12
 800901c:	1813883a 	mov	r9,r3
 8009020:	21000504 	addi	r4,r4,20
 8009024:	1909883a 	add	r4,r3,r4
 8009028:	49800015 	stw	r6,0(r9)
 800902c:	41800015 	stw	r6,0(r8)
 8009030:	59800015 	stw	r6,0(r11)
 8009034:	51800015 	stw	r6,0(r10)
 8009038:	42000404 	addi	r8,r8,16
 800903c:	4a400404 	addi	r9,r9,16
 8009040:	5ac00404 	addi	r11,r11,16
 8009044:	52800404 	addi	r10,r10,16
 8009048:	413ff71e 	bne	r8,r4,8009028 <__alt_data_end+0xfc009028>
 800904c:	63000044 	addi	r12,r12,1
 8009050:	6018913a 	slli	r12,r12,4
 8009054:	39c003cc 	andi	r7,r7,15
 8009058:	010000c4 	movi	r4,3
 800905c:	1b07883a 	add	r3,r3,r12
 8009060:	21c00e2e 	bgeu	r4,r7,800909c <memset+0x100>
 8009064:	1813883a 	mov	r9,r3
 8009068:	3811883a 	mov	r8,r7
 800906c:	010000c4 	movi	r4,3
 8009070:	49800015 	stw	r6,0(r9)
 8009074:	423fff04 	addi	r8,r8,-4
 8009078:	4a400104 	addi	r9,r9,4
 800907c:	223ffc36 	bltu	r4,r8,8009070 <__alt_data_end+0xfc009070>
 8009080:	393fff04 	addi	r4,r7,-4
 8009084:	2008d0ba 	srli	r4,r4,2
 8009088:	39c000cc 	andi	r7,r7,3
 800908c:	21000044 	addi	r4,r4,1
 8009090:	2109883a 	add	r4,r4,r4
 8009094:	2109883a 	add	r4,r4,r4
 8009098:	1907883a 	add	r3,r3,r4
 800909c:	38000426 	beq	r7,zero,80090b0 <memset+0x114>
 80090a0:	19cf883a 	add	r7,r3,r7
 80090a4:	19400005 	stb	r5,0(r3)
 80090a8:	18c00044 	addi	r3,r3,1
 80090ac:	19fffd1e 	bne	r3,r7,80090a4 <__alt_data_end+0xfc0090a4>
 80090b0:	f800283a 	ret
 80090b4:	2007883a 	mov	r3,r4
 80090b8:	300f883a 	mov	r7,r6
 80090bc:	003fc806 	br	8008fe0 <__alt_data_end+0xfc008fe0>

080090c0 <_Balloc>:
 80090c0:	20801317 	ldw	r2,76(r4)
 80090c4:	defffc04 	addi	sp,sp,-16
 80090c8:	dc400115 	stw	r17,4(sp)
 80090cc:	dc000015 	stw	r16,0(sp)
 80090d0:	dfc00315 	stw	ra,12(sp)
 80090d4:	dc800215 	stw	r18,8(sp)
 80090d8:	2023883a 	mov	r17,r4
 80090dc:	2821883a 	mov	r16,r5
 80090e0:	10000f26 	beq	r2,zero,8009120 <_Balloc+0x60>
 80090e4:	8407883a 	add	r3,r16,r16
 80090e8:	18c7883a 	add	r3,r3,r3
 80090ec:	10c7883a 	add	r3,r2,r3
 80090f0:	18800017 	ldw	r2,0(r3)
 80090f4:	10001126 	beq	r2,zero,800913c <_Balloc+0x7c>
 80090f8:	11000017 	ldw	r4,0(r2)
 80090fc:	19000015 	stw	r4,0(r3)
 8009100:	10000415 	stw	zero,16(r2)
 8009104:	10000315 	stw	zero,12(r2)
 8009108:	dfc00317 	ldw	ra,12(sp)
 800910c:	dc800217 	ldw	r18,8(sp)
 8009110:	dc400117 	ldw	r17,4(sp)
 8009114:	dc000017 	ldw	r16,0(sp)
 8009118:	dec00404 	addi	sp,sp,16
 800911c:	f800283a 	ret
 8009120:	01400104 	movi	r5,4
 8009124:	01800844 	movi	r6,33
 8009128:	800bdd80 	call	800bdd8 <_calloc_r>
 800912c:	88801315 	stw	r2,76(r17)
 8009130:	103fec1e 	bne	r2,zero,80090e4 <__alt_data_end+0xfc0090e4>
 8009134:	0005883a 	mov	r2,zero
 8009138:	003ff306 	br	8009108 <__alt_data_end+0xfc009108>
 800913c:	01400044 	movi	r5,1
 8009140:	2c24983a 	sll	r18,r5,r16
 8009144:	8809883a 	mov	r4,r17
 8009148:	91800144 	addi	r6,r18,5
 800914c:	318d883a 	add	r6,r6,r6
 8009150:	318d883a 	add	r6,r6,r6
 8009154:	800bdd80 	call	800bdd8 <_calloc_r>
 8009158:	103ff626 	beq	r2,zero,8009134 <__alt_data_end+0xfc009134>
 800915c:	14000115 	stw	r16,4(r2)
 8009160:	14800215 	stw	r18,8(r2)
 8009164:	003fe606 	br	8009100 <__alt_data_end+0xfc009100>

08009168 <_Bfree>:
 8009168:	28000826 	beq	r5,zero,800918c <_Bfree+0x24>
 800916c:	28c00117 	ldw	r3,4(r5)
 8009170:	20801317 	ldw	r2,76(r4)
 8009174:	18c7883a 	add	r3,r3,r3
 8009178:	18c7883a 	add	r3,r3,r3
 800917c:	10c5883a 	add	r2,r2,r3
 8009180:	10c00017 	ldw	r3,0(r2)
 8009184:	28c00015 	stw	r3,0(r5)
 8009188:	11400015 	stw	r5,0(r2)
 800918c:	f800283a 	ret

08009190 <__multadd>:
 8009190:	defffa04 	addi	sp,sp,-24
 8009194:	dc000115 	stw	r16,4(sp)
 8009198:	2c000417 	ldw	r16,16(r5)
 800919c:	dc800315 	stw	r18,12(sp)
 80091a0:	dc400215 	stw	r17,8(sp)
 80091a4:	dfc00515 	stw	ra,20(sp)
 80091a8:	dcc00415 	stw	r19,16(sp)
 80091ac:	2823883a 	mov	r17,r5
 80091b0:	2025883a 	mov	r18,r4
 80091b4:	2a400504 	addi	r9,r5,20
 80091b8:	0015883a 	mov	r10,zero
 80091bc:	4a000017 	ldw	r8,0(r9)
 80091c0:	4a400104 	addi	r9,r9,4
 80091c4:	52800044 	addi	r10,r10,1
 80091c8:	40ffffcc 	andi	r3,r8,65535
 80091cc:	1987383a 	mul	r3,r3,r6
 80091d0:	4010d43a 	srli	r8,r8,16
 80091d4:	19cf883a 	add	r7,r3,r7
 80091d8:	4191383a 	mul	r8,r8,r6
 80091dc:	3816d43a 	srli	r11,r7,16
 80091e0:	38ffffcc 	andi	r3,r7,65535
 80091e4:	5a0f883a 	add	r7,r11,r8
 80091e8:	3810943a 	slli	r8,r7,16
 80091ec:	380ed43a 	srli	r7,r7,16
 80091f0:	40c7883a 	add	r3,r8,r3
 80091f4:	48ffff15 	stw	r3,-4(r9)
 80091f8:	543ff016 	blt	r10,r16,80091bc <__alt_data_end+0xfc0091bc>
 80091fc:	38000926 	beq	r7,zero,8009224 <__multadd+0x94>
 8009200:	88800217 	ldw	r2,8(r17)
 8009204:	80800f0e 	bge	r16,r2,8009244 <__multadd+0xb4>
 8009208:	80800144 	addi	r2,r16,5
 800920c:	1085883a 	add	r2,r2,r2
 8009210:	1085883a 	add	r2,r2,r2
 8009214:	8885883a 	add	r2,r17,r2
 8009218:	11c00015 	stw	r7,0(r2)
 800921c:	84000044 	addi	r16,r16,1
 8009220:	8c000415 	stw	r16,16(r17)
 8009224:	8805883a 	mov	r2,r17
 8009228:	dfc00517 	ldw	ra,20(sp)
 800922c:	dcc00417 	ldw	r19,16(sp)
 8009230:	dc800317 	ldw	r18,12(sp)
 8009234:	dc400217 	ldw	r17,8(sp)
 8009238:	dc000117 	ldw	r16,4(sp)
 800923c:	dec00604 	addi	sp,sp,24
 8009240:	f800283a 	ret
 8009244:	89400117 	ldw	r5,4(r17)
 8009248:	9009883a 	mov	r4,r18
 800924c:	d9c00015 	stw	r7,0(sp)
 8009250:	29400044 	addi	r5,r5,1
 8009254:	80090c00 	call	80090c0 <_Balloc>
 8009258:	89800417 	ldw	r6,16(r17)
 800925c:	89400304 	addi	r5,r17,12
 8009260:	11000304 	addi	r4,r2,12
 8009264:	31800084 	addi	r6,r6,2
 8009268:	318d883a 	add	r6,r6,r6
 800926c:	318d883a 	add	r6,r6,r6
 8009270:	1027883a 	mov	r19,r2
 8009274:	80032680 	call	8003268 <memcpy>
 8009278:	89000117 	ldw	r4,4(r17)
 800927c:	90c01317 	ldw	r3,76(r18)
 8009280:	d9c00017 	ldw	r7,0(sp)
 8009284:	2109883a 	add	r4,r4,r4
 8009288:	2109883a 	add	r4,r4,r4
 800928c:	1907883a 	add	r3,r3,r4
 8009290:	18800017 	ldw	r2,0(r3)
 8009294:	88800015 	stw	r2,0(r17)
 8009298:	1c400015 	stw	r17,0(r3)
 800929c:	9823883a 	mov	r17,r19
 80092a0:	003fd906 	br	8009208 <__alt_data_end+0xfc009208>

080092a4 <__s2b>:
 80092a4:	defff904 	addi	sp,sp,-28
 80092a8:	dc400115 	stw	r17,4(sp)
 80092ac:	dc000015 	stw	r16,0(sp)
 80092b0:	2023883a 	mov	r17,r4
 80092b4:	2821883a 	mov	r16,r5
 80092b8:	39000204 	addi	r4,r7,8
 80092bc:	01400244 	movi	r5,9
 80092c0:	dcc00315 	stw	r19,12(sp)
 80092c4:	dc800215 	stw	r18,8(sp)
 80092c8:	dfc00615 	stw	ra,24(sp)
 80092cc:	dd400515 	stw	r21,20(sp)
 80092d0:	dd000415 	stw	r20,16(sp)
 80092d4:	3825883a 	mov	r18,r7
 80092d8:	3027883a 	mov	r19,r6
 80092dc:	800d21c0 	call	800d21c <__divsi3>
 80092e0:	00c00044 	movi	r3,1
 80092e4:	000b883a 	mov	r5,zero
 80092e8:	1880030e 	bge	r3,r2,80092f8 <__s2b+0x54>
 80092ec:	18c7883a 	add	r3,r3,r3
 80092f0:	29400044 	addi	r5,r5,1
 80092f4:	18bffd16 	blt	r3,r2,80092ec <__alt_data_end+0xfc0092ec>
 80092f8:	8809883a 	mov	r4,r17
 80092fc:	80090c00 	call	80090c0 <_Balloc>
 8009300:	d8c00717 	ldw	r3,28(sp)
 8009304:	10c00515 	stw	r3,20(r2)
 8009308:	00c00044 	movi	r3,1
 800930c:	10c00415 	stw	r3,16(r2)
 8009310:	00c00244 	movi	r3,9
 8009314:	1cc0210e 	bge	r3,r19,800939c <__s2b+0xf8>
 8009318:	80eb883a 	add	r21,r16,r3
 800931c:	a829883a 	mov	r20,r21
 8009320:	84e1883a 	add	r16,r16,r19
 8009324:	a1c00007 	ldb	r7,0(r20)
 8009328:	8809883a 	mov	r4,r17
 800932c:	a5000044 	addi	r20,r20,1
 8009330:	100b883a 	mov	r5,r2
 8009334:	01800284 	movi	r6,10
 8009338:	39fff404 	addi	r7,r7,-48
 800933c:	80091900 	call	8009190 <__multadd>
 8009340:	a43ff81e 	bne	r20,r16,8009324 <__alt_data_end+0xfc009324>
 8009344:	ace1883a 	add	r16,r21,r19
 8009348:	843ffe04 	addi	r16,r16,-8
 800934c:	9c800a0e 	bge	r19,r18,8009378 <__s2b+0xd4>
 8009350:	94e5c83a 	sub	r18,r18,r19
 8009354:	84a5883a 	add	r18,r16,r18
 8009358:	81c00007 	ldb	r7,0(r16)
 800935c:	8809883a 	mov	r4,r17
 8009360:	84000044 	addi	r16,r16,1
 8009364:	100b883a 	mov	r5,r2
 8009368:	01800284 	movi	r6,10
 800936c:	39fff404 	addi	r7,r7,-48
 8009370:	80091900 	call	8009190 <__multadd>
 8009374:	84bff81e 	bne	r16,r18,8009358 <__alt_data_end+0xfc009358>
 8009378:	dfc00617 	ldw	ra,24(sp)
 800937c:	dd400517 	ldw	r21,20(sp)
 8009380:	dd000417 	ldw	r20,16(sp)
 8009384:	dcc00317 	ldw	r19,12(sp)
 8009388:	dc800217 	ldw	r18,8(sp)
 800938c:	dc400117 	ldw	r17,4(sp)
 8009390:	dc000017 	ldw	r16,0(sp)
 8009394:	dec00704 	addi	sp,sp,28
 8009398:	f800283a 	ret
 800939c:	84000284 	addi	r16,r16,10
 80093a0:	1827883a 	mov	r19,r3
 80093a4:	003fe906 	br	800934c <__alt_data_end+0xfc00934c>

080093a8 <__hi0bits>:
 80093a8:	20bfffec 	andhi	r2,r4,65535
 80093ac:	1000141e 	bne	r2,zero,8009400 <__hi0bits+0x58>
 80093b0:	2008943a 	slli	r4,r4,16
 80093b4:	00800404 	movi	r2,16
 80093b8:	20ffc02c 	andhi	r3,r4,65280
 80093bc:	1800021e 	bne	r3,zero,80093c8 <__hi0bits+0x20>
 80093c0:	2008923a 	slli	r4,r4,8
 80093c4:	10800204 	addi	r2,r2,8
 80093c8:	20fc002c 	andhi	r3,r4,61440
 80093cc:	1800021e 	bne	r3,zero,80093d8 <__hi0bits+0x30>
 80093d0:	2008913a 	slli	r4,r4,4
 80093d4:	10800104 	addi	r2,r2,4
 80093d8:	20f0002c 	andhi	r3,r4,49152
 80093dc:	1800031e 	bne	r3,zero,80093ec <__hi0bits+0x44>
 80093e0:	2109883a 	add	r4,r4,r4
 80093e4:	10800084 	addi	r2,r2,2
 80093e8:	2109883a 	add	r4,r4,r4
 80093ec:	20000316 	blt	r4,zero,80093fc <__hi0bits+0x54>
 80093f0:	2110002c 	andhi	r4,r4,16384
 80093f4:	2000041e 	bne	r4,zero,8009408 <__hi0bits+0x60>
 80093f8:	00800804 	movi	r2,32
 80093fc:	f800283a 	ret
 8009400:	0005883a 	mov	r2,zero
 8009404:	003fec06 	br	80093b8 <__alt_data_end+0xfc0093b8>
 8009408:	10800044 	addi	r2,r2,1
 800940c:	f800283a 	ret

08009410 <__lo0bits>:
 8009410:	20c00017 	ldw	r3,0(r4)
 8009414:	188001cc 	andi	r2,r3,7
 8009418:	10000826 	beq	r2,zero,800943c <__lo0bits+0x2c>
 800941c:	1880004c 	andi	r2,r3,1
 8009420:	1000211e 	bne	r2,zero,80094a8 <__lo0bits+0x98>
 8009424:	1880008c 	andi	r2,r3,2
 8009428:	1000211e 	bne	r2,zero,80094b0 <__lo0bits+0xa0>
 800942c:	1806d0ba 	srli	r3,r3,2
 8009430:	00800084 	movi	r2,2
 8009434:	20c00015 	stw	r3,0(r4)
 8009438:	f800283a 	ret
 800943c:	18bfffcc 	andi	r2,r3,65535
 8009440:	10001326 	beq	r2,zero,8009490 <__lo0bits+0x80>
 8009444:	0005883a 	mov	r2,zero
 8009448:	19403fcc 	andi	r5,r3,255
 800944c:	2800021e 	bne	r5,zero,8009458 <__lo0bits+0x48>
 8009450:	1806d23a 	srli	r3,r3,8
 8009454:	10800204 	addi	r2,r2,8
 8009458:	194003cc 	andi	r5,r3,15
 800945c:	2800021e 	bne	r5,zero,8009468 <__lo0bits+0x58>
 8009460:	1806d13a 	srli	r3,r3,4
 8009464:	10800104 	addi	r2,r2,4
 8009468:	194000cc 	andi	r5,r3,3
 800946c:	2800021e 	bne	r5,zero,8009478 <__lo0bits+0x68>
 8009470:	1806d0ba 	srli	r3,r3,2
 8009474:	10800084 	addi	r2,r2,2
 8009478:	1940004c 	andi	r5,r3,1
 800947c:	2800081e 	bne	r5,zero,80094a0 <__lo0bits+0x90>
 8009480:	1806d07a 	srli	r3,r3,1
 8009484:	1800051e 	bne	r3,zero,800949c <__lo0bits+0x8c>
 8009488:	00800804 	movi	r2,32
 800948c:	f800283a 	ret
 8009490:	1806d43a 	srli	r3,r3,16
 8009494:	00800404 	movi	r2,16
 8009498:	003feb06 	br	8009448 <__alt_data_end+0xfc009448>
 800949c:	10800044 	addi	r2,r2,1
 80094a0:	20c00015 	stw	r3,0(r4)
 80094a4:	f800283a 	ret
 80094a8:	0005883a 	mov	r2,zero
 80094ac:	f800283a 	ret
 80094b0:	1806d07a 	srli	r3,r3,1
 80094b4:	00800044 	movi	r2,1
 80094b8:	20c00015 	stw	r3,0(r4)
 80094bc:	f800283a 	ret

080094c0 <__i2b>:
 80094c0:	defffd04 	addi	sp,sp,-12
 80094c4:	dc000015 	stw	r16,0(sp)
 80094c8:	04000044 	movi	r16,1
 80094cc:	dc400115 	stw	r17,4(sp)
 80094d0:	2823883a 	mov	r17,r5
 80094d4:	800b883a 	mov	r5,r16
 80094d8:	dfc00215 	stw	ra,8(sp)
 80094dc:	80090c00 	call	80090c0 <_Balloc>
 80094e0:	14400515 	stw	r17,20(r2)
 80094e4:	14000415 	stw	r16,16(r2)
 80094e8:	dfc00217 	ldw	ra,8(sp)
 80094ec:	dc400117 	ldw	r17,4(sp)
 80094f0:	dc000017 	ldw	r16,0(sp)
 80094f4:	dec00304 	addi	sp,sp,12
 80094f8:	f800283a 	ret

080094fc <__multiply>:
 80094fc:	defffa04 	addi	sp,sp,-24
 8009500:	dcc00315 	stw	r19,12(sp)
 8009504:	dc800215 	stw	r18,8(sp)
 8009508:	2cc00417 	ldw	r19,16(r5)
 800950c:	34800417 	ldw	r18,16(r6)
 8009510:	dd000415 	stw	r20,16(sp)
 8009514:	dc400115 	stw	r17,4(sp)
 8009518:	dfc00515 	stw	ra,20(sp)
 800951c:	dc000015 	stw	r16,0(sp)
 8009520:	2829883a 	mov	r20,r5
 8009524:	3023883a 	mov	r17,r6
 8009528:	9c807016 	blt	r19,r18,80096ec <__multiply+0x1f0>
 800952c:	9005883a 	mov	r2,r18
 8009530:	9825883a 	mov	r18,r19
 8009534:	1027883a 	mov	r19,r2
 8009538:	a0800217 	ldw	r2,8(r20)
 800953c:	94e1883a 	add	r16,r18,r19
 8009540:	a1400117 	ldw	r5,4(r20)
 8009544:	1400010e 	bge	r2,r16,800954c <__multiply+0x50>
 8009548:	29400044 	addi	r5,r5,1
 800954c:	80090c00 	call	80090c0 <_Balloc>
 8009550:	8417883a 	add	r11,r16,r16
 8009554:	13000504 	addi	r12,r2,20
 8009558:	5ad7883a 	add	r11,r11,r11
 800955c:	62d7883a 	add	r11,r12,r11
 8009560:	6007883a 	mov	r3,r12
 8009564:	62c0032e 	bgeu	r12,r11,8009574 <__multiply+0x78>
 8009568:	18000015 	stw	zero,0(r3)
 800956c:	18c00104 	addi	r3,r3,4
 8009570:	1afffd36 	bltu	r3,r11,8009568 <__alt_data_end+0xfc009568>
 8009574:	9ce7883a 	add	r19,r19,r19
 8009578:	94a5883a 	add	r18,r18,r18
 800957c:	89800504 	addi	r6,r17,20
 8009580:	9ce7883a 	add	r19,r19,r19
 8009584:	a3800504 	addi	r14,r20,20
 8009588:	94a5883a 	add	r18,r18,r18
 800958c:	34db883a 	add	r13,r6,r19
 8009590:	7495883a 	add	r10,r14,r18
 8009594:	3340422e 	bgeu	r6,r13,80096a0 <__multiply+0x1a4>
 8009598:	34400017 	ldw	r17,0(r6)
 800959c:	8cbfffcc 	andi	r18,r17,65535
 80095a0:	90001b26 	beq	r18,zero,8009610 <__multiply+0x114>
 80095a4:	6013883a 	mov	r9,r12
 80095a8:	7023883a 	mov	r17,r14
 80095ac:	0011883a 	mov	r8,zero
 80095b0:	88c00017 	ldw	r3,0(r17)
 80095b4:	4bc00017 	ldw	r15,0(r9)
 80095b8:	8c400104 	addi	r17,r17,4
 80095bc:	19ffffcc 	andi	r7,r3,65535
 80095c0:	3c8f383a 	mul	r7,r7,r18
 80095c4:	1808d43a 	srli	r4,r3,16
 80095c8:	797fffcc 	andi	r5,r15,65535
 80095cc:	29cb883a 	add	r5,r5,r7
 80095d0:	2a0b883a 	add	r5,r5,r8
 80095d4:	2489383a 	mul	r4,r4,r18
 80095d8:	7806d43a 	srli	r3,r15,16
 80095dc:	2810d43a 	srli	r8,r5,16
 80095e0:	297fffcc 	andi	r5,r5,65535
 80095e4:	1907883a 	add	r3,r3,r4
 80095e8:	1a07883a 	add	r3,r3,r8
 80095ec:	1808943a 	slli	r4,r3,16
 80095f0:	480f883a 	mov	r7,r9
 80095f4:	1810d43a 	srli	r8,r3,16
 80095f8:	214ab03a 	or	r5,r4,r5
 80095fc:	49400015 	stw	r5,0(r9)
 8009600:	4a400104 	addi	r9,r9,4
 8009604:	8abfea36 	bltu	r17,r10,80095b0 <__alt_data_end+0xfc0095b0>
 8009608:	3a000115 	stw	r8,4(r7)
 800960c:	34400017 	ldw	r17,0(r6)
 8009610:	8822d43a 	srli	r17,r17,16
 8009614:	88001f26 	beq	r17,zero,8009694 <__multiply+0x198>
 8009618:	60c00017 	ldw	r3,0(r12)
 800961c:	7013883a 	mov	r9,r14
 8009620:	601f883a 	mov	r15,r12
 8009624:	1811883a 	mov	r8,r3
 8009628:	6027883a 	mov	r19,r12
 800962c:	000f883a 	mov	r7,zero
 8009630:	00000106 	br	8009638 <__multiply+0x13c>
 8009634:	9027883a 	mov	r19,r18
 8009638:	4940000b 	ldhu	r5,0(r9)
 800963c:	4010d43a 	srli	r8,r8,16
 8009640:	193fffcc 	andi	r4,r3,65535
 8009644:	2c4b383a 	mul	r5,r5,r17
 8009648:	7bc00104 	addi	r15,r15,4
 800964c:	4a400104 	addi	r9,r9,4
 8009650:	2a0b883a 	add	r5,r5,r8
 8009654:	29cb883a 	add	r5,r5,r7
 8009658:	2806943a 	slli	r3,r5,16
 800965c:	9c800104 	addi	r18,r19,4
 8009660:	280ad43a 	srli	r5,r5,16
 8009664:	1908b03a 	or	r4,r3,r4
 8009668:	793fff15 	stw	r4,-4(r15)
 800966c:	48ffff17 	ldw	r3,-4(r9)
 8009670:	92000017 	ldw	r8,0(r18)
 8009674:	1806d43a 	srli	r3,r3,16
 8009678:	413fffcc 	andi	r4,r8,65535
 800967c:	1c47383a 	mul	r3,r3,r17
 8009680:	1907883a 	add	r3,r3,r4
 8009684:	1947883a 	add	r3,r3,r5
 8009688:	180ed43a 	srli	r7,r3,16
 800968c:	4abfe936 	bltu	r9,r10,8009634 <__alt_data_end+0xfc009634>
 8009690:	98c00115 	stw	r3,4(r19)
 8009694:	31800104 	addi	r6,r6,4
 8009698:	63000104 	addi	r12,r12,4
 800969c:	337fbe36 	bltu	r6,r13,8009598 <__alt_data_end+0xfc009598>
 80096a0:	0400090e 	bge	zero,r16,80096c8 <__multiply+0x1cc>
 80096a4:	58ffff17 	ldw	r3,-4(r11)
 80096a8:	5affff04 	addi	r11,r11,-4
 80096ac:	18000326 	beq	r3,zero,80096bc <__multiply+0x1c0>
 80096b0:	00000506 	br	80096c8 <__multiply+0x1cc>
 80096b4:	58c00017 	ldw	r3,0(r11)
 80096b8:	1800031e 	bne	r3,zero,80096c8 <__multiply+0x1cc>
 80096bc:	843fffc4 	addi	r16,r16,-1
 80096c0:	5affff04 	addi	r11,r11,-4
 80096c4:	803ffb1e 	bne	r16,zero,80096b4 <__alt_data_end+0xfc0096b4>
 80096c8:	14000415 	stw	r16,16(r2)
 80096cc:	dfc00517 	ldw	ra,20(sp)
 80096d0:	dd000417 	ldw	r20,16(sp)
 80096d4:	dcc00317 	ldw	r19,12(sp)
 80096d8:	dc800217 	ldw	r18,8(sp)
 80096dc:	dc400117 	ldw	r17,4(sp)
 80096e0:	dc000017 	ldw	r16,0(sp)
 80096e4:	dec00604 	addi	sp,sp,24
 80096e8:	f800283a 	ret
 80096ec:	3029883a 	mov	r20,r6
 80096f0:	2823883a 	mov	r17,r5
 80096f4:	003f9006 	br	8009538 <__alt_data_end+0xfc009538>

080096f8 <__pow5mult>:
 80096f8:	defffa04 	addi	sp,sp,-24
 80096fc:	dcc00315 	stw	r19,12(sp)
 8009700:	dc800215 	stw	r18,8(sp)
 8009704:	dc000015 	stw	r16,0(sp)
 8009708:	dfc00515 	stw	ra,20(sp)
 800970c:	dd000415 	stw	r20,16(sp)
 8009710:	dc400115 	stw	r17,4(sp)
 8009714:	308000cc 	andi	r2,r6,3
 8009718:	3021883a 	mov	r16,r6
 800971c:	2027883a 	mov	r19,r4
 8009720:	2825883a 	mov	r18,r5
 8009724:	10002e1e 	bne	r2,zero,80097e0 <__pow5mult+0xe8>
 8009728:	8021d0ba 	srai	r16,r16,2
 800972c:	80001a26 	beq	r16,zero,8009798 <__pow5mult+0xa0>
 8009730:	9c401217 	ldw	r17,72(r19)
 8009734:	8800061e 	bne	r17,zero,8009750 <__pow5mult+0x58>
 8009738:	00003406 	br	800980c <__pow5mult+0x114>
 800973c:	8021d07a 	srai	r16,r16,1
 8009740:	80001526 	beq	r16,zero,8009798 <__pow5mult+0xa0>
 8009744:	88800017 	ldw	r2,0(r17)
 8009748:	10001c26 	beq	r2,zero,80097bc <__pow5mult+0xc4>
 800974c:	1023883a 	mov	r17,r2
 8009750:	80c0004c 	andi	r3,r16,1
 8009754:	183ff926 	beq	r3,zero,800973c <__alt_data_end+0xfc00973c>
 8009758:	900b883a 	mov	r5,r18
 800975c:	880d883a 	mov	r6,r17
 8009760:	9809883a 	mov	r4,r19
 8009764:	80094fc0 	call	80094fc <__multiply>
 8009768:	90001b26 	beq	r18,zero,80097d8 <__pow5mult+0xe0>
 800976c:	91c00117 	ldw	r7,4(r18)
 8009770:	98c01317 	ldw	r3,76(r19)
 8009774:	8021d07a 	srai	r16,r16,1
 8009778:	39cf883a 	add	r7,r7,r7
 800977c:	39cf883a 	add	r7,r7,r7
 8009780:	19c7883a 	add	r3,r3,r7
 8009784:	19000017 	ldw	r4,0(r3)
 8009788:	91000015 	stw	r4,0(r18)
 800978c:	1c800015 	stw	r18,0(r3)
 8009790:	1025883a 	mov	r18,r2
 8009794:	803feb1e 	bne	r16,zero,8009744 <__alt_data_end+0xfc009744>
 8009798:	9005883a 	mov	r2,r18
 800979c:	dfc00517 	ldw	ra,20(sp)
 80097a0:	dd000417 	ldw	r20,16(sp)
 80097a4:	dcc00317 	ldw	r19,12(sp)
 80097a8:	dc800217 	ldw	r18,8(sp)
 80097ac:	dc400117 	ldw	r17,4(sp)
 80097b0:	dc000017 	ldw	r16,0(sp)
 80097b4:	dec00604 	addi	sp,sp,24
 80097b8:	f800283a 	ret
 80097bc:	9809883a 	mov	r4,r19
 80097c0:	880b883a 	mov	r5,r17
 80097c4:	880d883a 	mov	r6,r17
 80097c8:	80094fc0 	call	80094fc <__multiply>
 80097cc:	88800015 	stw	r2,0(r17)
 80097d0:	10000015 	stw	zero,0(r2)
 80097d4:	003fdd06 	br	800974c <__alt_data_end+0xfc00974c>
 80097d8:	1025883a 	mov	r18,r2
 80097dc:	003fd706 	br	800973c <__alt_data_end+0xfc00973c>
 80097e0:	10bfffc4 	addi	r2,r2,-1
 80097e4:	1085883a 	add	r2,r2,r2
 80097e8:	00c200b4 	movhi	r3,2050
 80097ec:	18f35304 	addi	r3,r3,-12980
 80097f0:	1085883a 	add	r2,r2,r2
 80097f4:	1885883a 	add	r2,r3,r2
 80097f8:	11800017 	ldw	r6,0(r2)
 80097fc:	000f883a 	mov	r7,zero
 8009800:	80091900 	call	8009190 <__multadd>
 8009804:	1025883a 	mov	r18,r2
 8009808:	003fc706 	br	8009728 <__alt_data_end+0xfc009728>
 800980c:	05000044 	movi	r20,1
 8009810:	9809883a 	mov	r4,r19
 8009814:	a00b883a 	mov	r5,r20
 8009818:	80090c00 	call	80090c0 <_Balloc>
 800981c:	1023883a 	mov	r17,r2
 8009820:	00809c44 	movi	r2,625
 8009824:	88800515 	stw	r2,20(r17)
 8009828:	8d000415 	stw	r20,16(r17)
 800982c:	9c401215 	stw	r17,72(r19)
 8009830:	88000015 	stw	zero,0(r17)
 8009834:	003fc606 	br	8009750 <__alt_data_end+0xfc009750>

08009838 <__lshift>:
 8009838:	defff904 	addi	sp,sp,-28
 800983c:	dd000415 	stw	r20,16(sp)
 8009840:	dcc00315 	stw	r19,12(sp)
 8009844:	3029d17a 	srai	r20,r6,5
 8009848:	2cc00417 	ldw	r19,16(r5)
 800984c:	28800217 	ldw	r2,8(r5)
 8009850:	dd400515 	stw	r21,20(sp)
 8009854:	a4e7883a 	add	r19,r20,r19
 8009858:	dc800215 	stw	r18,8(sp)
 800985c:	dc400115 	stw	r17,4(sp)
 8009860:	dc000015 	stw	r16,0(sp)
 8009864:	dfc00615 	stw	ra,24(sp)
 8009868:	9c000044 	addi	r16,r19,1
 800986c:	2823883a 	mov	r17,r5
 8009870:	302b883a 	mov	r21,r6
 8009874:	2025883a 	mov	r18,r4
 8009878:	29400117 	ldw	r5,4(r5)
 800987c:	1400030e 	bge	r2,r16,800988c <__lshift+0x54>
 8009880:	1085883a 	add	r2,r2,r2
 8009884:	29400044 	addi	r5,r5,1
 8009888:	143ffd16 	blt	r2,r16,8009880 <__alt_data_end+0xfc009880>
 800988c:	9009883a 	mov	r4,r18
 8009890:	80090c00 	call	80090c0 <_Balloc>
 8009894:	11c00504 	addi	r7,r2,20
 8009898:	0500090e 	bge	zero,r20,80098c0 <__lshift+0x88>
 800989c:	3811883a 	mov	r8,r7
 80098a0:	0007883a 	mov	r3,zero
 80098a4:	40000015 	stw	zero,0(r8)
 80098a8:	18c00044 	addi	r3,r3,1
 80098ac:	42000104 	addi	r8,r8,4
 80098b0:	1d3ffc1e 	bne	r3,r20,80098a4 <__alt_data_end+0xfc0098a4>
 80098b4:	18c7883a 	add	r3,r3,r3
 80098b8:	18c7883a 	add	r3,r3,r3
 80098bc:	38cf883a 	add	r7,r7,r3
 80098c0:	89000417 	ldw	r4,16(r17)
 80098c4:	88c00504 	addi	r3,r17,20
 80098c8:	a98007cc 	andi	r6,r21,31
 80098cc:	2109883a 	add	r4,r4,r4
 80098d0:	2109883a 	add	r4,r4,r4
 80098d4:	1909883a 	add	r4,r3,r4
 80098d8:	30002326 	beq	r6,zero,8009968 <__lshift+0x130>
 80098dc:	01400804 	movi	r5,32
 80098e0:	298bc83a 	sub	r5,r5,r6
 80098e4:	0013883a 	mov	r9,zero
 80098e8:	1a000017 	ldw	r8,0(r3)
 80098ec:	3815883a 	mov	r10,r7
 80098f0:	39c00104 	addi	r7,r7,4
 80098f4:	4190983a 	sll	r8,r8,r6
 80098f8:	18c00104 	addi	r3,r3,4
 80098fc:	4a10b03a 	or	r8,r9,r8
 8009900:	3a3fff15 	stw	r8,-4(r7)
 8009904:	1a3fff17 	ldw	r8,-4(r3)
 8009908:	4152d83a 	srl	r9,r8,r5
 800990c:	193ff636 	bltu	r3,r4,80098e8 <__alt_data_end+0xfc0098e8>
 8009910:	52400115 	stw	r9,4(r10)
 8009914:	48000126 	beq	r9,zero,800991c <__lshift+0xe4>
 8009918:	9c000084 	addi	r16,r19,2
 800991c:	89000117 	ldw	r4,4(r17)
 8009920:	90c01317 	ldw	r3,76(r18)
 8009924:	843fffc4 	addi	r16,r16,-1
 8009928:	2109883a 	add	r4,r4,r4
 800992c:	2109883a 	add	r4,r4,r4
 8009930:	1907883a 	add	r3,r3,r4
 8009934:	19000017 	ldw	r4,0(r3)
 8009938:	14000415 	stw	r16,16(r2)
 800993c:	89000015 	stw	r4,0(r17)
 8009940:	1c400015 	stw	r17,0(r3)
 8009944:	dfc00617 	ldw	ra,24(sp)
 8009948:	dd400517 	ldw	r21,20(sp)
 800994c:	dd000417 	ldw	r20,16(sp)
 8009950:	dcc00317 	ldw	r19,12(sp)
 8009954:	dc800217 	ldw	r18,8(sp)
 8009958:	dc400117 	ldw	r17,4(sp)
 800995c:	dc000017 	ldw	r16,0(sp)
 8009960:	dec00704 	addi	sp,sp,28
 8009964:	f800283a 	ret
 8009968:	19400017 	ldw	r5,0(r3)
 800996c:	39c00104 	addi	r7,r7,4
 8009970:	18c00104 	addi	r3,r3,4
 8009974:	397fff15 	stw	r5,-4(r7)
 8009978:	193ffb36 	bltu	r3,r4,8009968 <__alt_data_end+0xfc009968>
 800997c:	003fe706 	br	800991c <__alt_data_end+0xfc00991c>

08009980 <__mcmp>:
 8009980:	20800417 	ldw	r2,16(r4)
 8009984:	28c00417 	ldw	r3,16(r5)
 8009988:	10c5c83a 	sub	r2,r2,r3
 800998c:	1000111e 	bne	r2,zero,80099d4 <__mcmp+0x54>
 8009990:	18c7883a 	add	r3,r3,r3
 8009994:	18c7883a 	add	r3,r3,r3
 8009998:	21000504 	addi	r4,r4,20
 800999c:	29400504 	addi	r5,r5,20
 80099a0:	20c5883a 	add	r2,r4,r3
 80099a4:	28cb883a 	add	r5,r5,r3
 80099a8:	00000106 	br	80099b0 <__mcmp+0x30>
 80099ac:	20800a2e 	bgeu	r4,r2,80099d8 <__mcmp+0x58>
 80099b0:	10bfff04 	addi	r2,r2,-4
 80099b4:	297fff04 	addi	r5,r5,-4
 80099b8:	11800017 	ldw	r6,0(r2)
 80099bc:	28c00017 	ldw	r3,0(r5)
 80099c0:	30fffa26 	beq	r6,r3,80099ac <__alt_data_end+0xfc0099ac>
 80099c4:	30c00236 	bltu	r6,r3,80099d0 <__mcmp+0x50>
 80099c8:	00800044 	movi	r2,1
 80099cc:	f800283a 	ret
 80099d0:	00bfffc4 	movi	r2,-1
 80099d4:	f800283a 	ret
 80099d8:	0005883a 	mov	r2,zero
 80099dc:	f800283a 	ret

080099e0 <__mdiff>:
 80099e0:	defffb04 	addi	sp,sp,-20
 80099e4:	dc000015 	stw	r16,0(sp)
 80099e8:	2821883a 	mov	r16,r5
 80099ec:	dcc00315 	stw	r19,12(sp)
 80099f0:	300b883a 	mov	r5,r6
 80099f4:	2027883a 	mov	r19,r4
 80099f8:	8009883a 	mov	r4,r16
 80099fc:	dc800215 	stw	r18,8(sp)
 8009a00:	dfc00415 	stw	ra,16(sp)
 8009a04:	dc400115 	stw	r17,4(sp)
 8009a08:	3025883a 	mov	r18,r6
 8009a0c:	80099800 	call	8009980 <__mcmp>
 8009a10:	10005226 	beq	r2,zero,8009b5c <__mdiff+0x17c>
 8009a14:	10004c16 	blt	r2,zero,8009b48 <__mdiff+0x168>
 8009a18:	0023883a 	mov	r17,zero
 8009a1c:	81400117 	ldw	r5,4(r16)
 8009a20:	9809883a 	mov	r4,r19
 8009a24:	80090c00 	call	80090c0 <_Balloc>
 8009a28:	83400417 	ldw	r13,16(r16)
 8009a2c:	93800417 	ldw	r14,16(r18)
 8009a30:	81000504 	addi	r4,r16,20
 8009a34:	6b59883a 	add	r12,r13,r13
 8009a38:	739d883a 	add	r14,r14,r14
 8009a3c:	6319883a 	add	r12,r12,r12
 8009a40:	91800504 	addi	r6,r18,20
 8009a44:	739d883a 	add	r14,r14,r14
 8009a48:	14400315 	stw	r17,12(r2)
 8009a4c:	2319883a 	add	r12,r4,r12
 8009a50:	339d883a 	add	r14,r6,r14
 8009a54:	12400504 	addi	r9,r2,20
 8009a58:	0007883a 	mov	r3,zero
 8009a5c:	22000017 	ldw	r8,0(r4)
 8009a60:	32800017 	ldw	r10,0(r6)
 8009a64:	4ac00104 	addi	r11,r9,4
 8009a68:	41ffffcc 	andi	r7,r8,65535
 8009a6c:	38c7883a 	add	r3,r7,r3
 8009a70:	51ffffcc 	andi	r7,r10,65535
 8009a74:	19cfc83a 	sub	r7,r3,r7
 8009a78:	4010d43a 	srli	r8,r8,16
 8009a7c:	5014d43a 	srli	r10,r10,16
 8009a80:	3807d43a 	srai	r3,r7,16
 8009a84:	39ffffcc 	andi	r7,r7,65535
 8009a88:	4291c83a 	sub	r8,r8,r10
 8009a8c:	40c7883a 	add	r3,r8,r3
 8009a90:	1810943a 	slli	r8,r3,16
 8009a94:	31800104 	addi	r6,r6,4
 8009a98:	21000104 	addi	r4,r4,4
 8009a9c:	41ceb03a 	or	r7,r8,r7
 8009aa0:	49c00015 	stw	r7,0(r9)
 8009aa4:	1807d43a 	srai	r3,r3,16
 8009aa8:	580b883a 	mov	r5,r11
 8009aac:	5813883a 	mov	r9,r11
 8009ab0:	33bfea36 	bltu	r6,r14,8009a5c <__alt_data_end+0xfc009a5c>
 8009ab4:	2011883a 	mov	r8,r4
 8009ab8:	2300152e 	bgeu	r4,r12,8009b10 <__mdiff+0x130>
 8009abc:	21400017 	ldw	r5,0(r4)
 8009ac0:	4a400104 	addi	r9,r9,4
 8009ac4:	21000104 	addi	r4,r4,4
 8009ac8:	29ffffcc 	andi	r7,r5,65535
 8009acc:	38c7883a 	add	r3,r7,r3
 8009ad0:	280ad43a 	srli	r5,r5,16
 8009ad4:	180dd43a 	srai	r6,r3,16
 8009ad8:	19ffffcc 	andi	r7,r3,65535
 8009adc:	3147883a 	add	r3,r6,r5
 8009ae0:	180a943a 	slli	r5,r3,16
 8009ae4:	1807d43a 	srai	r3,r3,16
 8009ae8:	29ceb03a 	or	r7,r5,r7
 8009aec:	49ffff15 	stw	r7,-4(r9)
 8009af0:	233ff236 	bltu	r4,r12,8009abc <__alt_data_end+0xfc009abc>
 8009af4:	0206303a 	nor	r3,zero,r8
 8009af8:	1b07883a 	add	r3,r3,r12
 8009afc:	1806d0ba 	srli	r3,r3,2
 8009b00:	18c00044 	addi	r3,r3,1
 8009b04:	18c7883a 	add	r3,r3,r3
 8009b08:	18c7883a 	add	r3,r3,r3
 8009b0c:	58cb883a 	add	r5,r11,r3
 8009b10:	28ffff04 	addi	r3,r5,-4
 8009b14:	3800041e 	bne	r7,zero,8009b28 <__mdiff+0x148>
 8009b18:	18ffff04 	addi	r3,r3,-4
 8009b1c:	19000017 	ldw	r4,0(r3)
 8009b20:	6b7fffc4 	addi	r13,r13,-1
 8009b24:	203ffc26 	beq	r4,zero,8009b18 <__alt_data_end+0xfc009b18>
 8009b28:	13400415 	stw	r13,16(r2)
 8009b2c:	dfc00417 	ldw	ra,16(sp)
 8009b30:	dcc00317 	ldw	r19,12(sp)
 8009b34:	dc800217 	ldw	r18,8(sp)
 8009b38:	dc400117 	ldw	r17,4(sp)
 8009b3c:	dc000017 	ldw	r16,0(sp)
 8009b40:	dec00504 	addi	sp,sp,20
 8009b44:	f800283a 	ret
 8009b48:	8005883a 	mov	r2,r16
 8009b4c:	04400044 	movi	r17,1
 8009b50:	9021883a 	mov	r16,r18
 8009b54:	1025883a 	mov	r18,r2
 8009b58:	003fb006 	br	8009a1c <__alt_data_end+0xfc009a1c>
 8009b5c:	9809883a 	mov	r4,r19
 8009b60:	000b883a 	mov	r5,zero
 8009b64:	80090c00 	call	80090c0 <_Balloc>
 8009b68:	00c00044 	movi	r3,1
 8009b6c:	10c00415 	stw	r3,16(r2)
 8009b70:	10000515 	stw	zero,20(r2)
 8009b74:	003fed06 	br	8009b2c <__alt_data_end+0xfc009b2c>

08009b78 <__ulp>:
 8009b78:	295ffc2c 	andhi	r5,r5,32752
 8009b7c:	00bf3034 	movhi	r2,64704
 8009b80:	2887883a 	add	r3,r5,r2
 8009b84:	00c0020e 	bge	zero,r3,8009b90 <__ulp+0x18>
 8009b88:	0005883a 	mov	r2,zero
 8009b8c:	f800283a 	ret
 8009b90:	00c7c83a 	sub	r3,zero,r3
 8009b94:	180bd53a 	srai	r5,r3,20
 8009b98:	008004c4 	movi	r2,19
 8009b9c:	11400a0e 	bge	r2,r5,8009bc8 <__ulp+0x50>
 8009ba0:	00800c84 	movi	r2,50
 8009ba4:	0007883a 	mov	r3,zero
 8009ba8:	11400516 	blt	r2,r5,8009bc0 <__ulp+0x48>
 8009bac:	00800cc4 	movi	r2,51
 8009bb0:	114bc83a 	sub	r5,r2,r5
 8009bb4:	00800044 	movi	r2,1
 8009bb8:	1144983a 	sll	r2,r2,r5
 8009bbc:	f800283a 	ret
 8009bc0:	00800044 	movi	r2,1
 8009bc4:	f800283a 	ret
 8009bc8:	00800234 	movhi	r2,8
 8009bcc:	1147d83a 	sra	r3,r2,r5
 8009bd0:	0005883a 	mov	r2,zero
 8009bd4:	f800283a 	ret

08009bd8 <__b2d>:
 8009bd8:	defffa04 	addi	sp,sp,-24
 8009bdc:	dc000015 	stw	r16,0(sp)
 8009be0:	24000417 	ldw	r16,16(r4)
 8009be4:	dc400115 	stw	r17,4(sp)
 8009be8:	24400504 	addi	r17,r4,20
 8009bec:	8421883a 	add	r16,r16,r16
 8009bf0:	8421883a 	add	r16,r16,r16
 8009bf4:	8c21883a 	add	r16,r17,r16
 8009bf8:	dc800215 	stw	r18,8(sp)
 8009bfc:	84bfff17 	ldw	r18,-4(r16)
 8009c00:	dd000415 	stw	r20,16(sp)
 8009c04:	dcc00315 	stw	r19,12(sp)
 8009c08:	9009883a 	mov	r4,r18
 8009c0c:	2829883a 	mov	r20,r5
 8009c10:	dfc00515 	stw	ra,20(sp)
 8009c14:	80093a80 	call	80093a8 <__hi0bits>
 8009c18:	00c00804 	movi	r3,32
 8009c1c:	1887c83a 	sub	r3,r3,r2
 8009c20:	a0c00015 	stw	r3,0(r20)
 8009c24:	00c00284 	movi	r3,10
 8009c28:	84ffff04 	addi	r19,r16,-4
 8009c2c:	18801216 	blt	r3,r2,8009c78 <__b2d+0xa0>
 8009c30:	014002c4 	movi	r5,11
 8009c34:	2889c83a 	sub	r4,r5,r2
 8009c38:	9106d83a 	srl	r3,r18,r4
 8009c3c:	18cffc34 	orhi	r3,r3,16368
 8009c40:	8cc0282e 	bgeu	r17,r19,8009ce4 <__b2d+0x10c>
 8009c44:	817ffe17 	ldw	r5,-8(r16)
 8009c48:	290ad83a 	srl	r5,r5,r4
 8009c4c:	10800544 	addi	r2,r2,21
 8009c50:	9084983a 	sll	r2,r18,r2
 8009c54:	2884b03a 	or	r2,r5,r2
 8009c58:	dfc00517 	ldw	ra,20(sp)
 8009c5c:	dd000417 	ldw	r20,16(sp)
 8009c60:	dcc00317 	ldw	r19,12(sp)
 8009c64:	dc800217 	ldw	r18,8(sp)
 8009c68:	dc400117 	ldw	r17,4(sp)
 8009c6c:	dc000017 	ldw	r16,0(sp)
 8009c70:	dec00604 	addi	sp,sp,24
 8009c74:	f800283a 	ret
 8009c78:	113ffd44 	addi	r4,r2,-11
 8009c7c:	8cc00f2e 	bgeu	r17,r19,8009cbc <__b2d+0xe4>
 8009c80:	81bffe04 	addi	r6,r16,-8
 8009c84:	817ffe17 	ldw	r5,-8(r16)
 8009c88:	20001326 	beq	r4,zero,8009cd8 <__b2d+0x100>
 8009c8c:	00c00ac4 	movi	r3,43
 8009c90:	1885c83a 	sub	r2,r3,r2
 8009c94:	2886d83a 	srl	r3,r5,r2
 8009c98:	9124983a 	sll	r18,r18,r4
 8009c9c:	90e4b03a 	or	r18,r18,r3
 8009ca0:	90cffc34 	orhi	r3,r18,16368
 8009ca4:	8980112e 	bgeu	r17,r6,8009cec <__b2d+0x114>
 8009ca8:	81bffd17 	ldw	r6,-12(r16)
 8009cac:	308cd83a 	srl	r6,r6,r2
 8009cb0:	2904983a 	sll	r2,r5,r4
 8009cb4:	1184b03a 	or	r2,r2,r6
 8009cb8:	003fe706 	br	8009c58 <__alt_data_end+0xfc009c58>
 8009cbc:	20000526 	beq	r4,zero,8009cd4 <__b2d+0xfc>
 8009cc0:	9124983a 	sll	r18,r18,r4
 8009cc4:	000d883a 	mov	r6,zero
 8009cc8:	000b883a 	mov	r5,zero
 8009ccc:	90cffc34 	orhi	r3,r18,16368
 8009cd0:	003ff706 	br	8009cb0 <__alt_data_end+0xfc009cb0>
 8009cd4:	000b883a 	mov	r5,zero
 8009cd8:	90cffc34 	orhi	r3,r18,16368
 8009cdc:	2805883a 	mov	r2,r5
 8009ce0:	003fdd06 	br	8009c58 <__alt_data_end+0xfc009c58>
 8009ce4:	000b883a 	mov	r5,zero
 8009ce8:	003fd806 	br	8009c4c <__alt_data_end+0xfc009c4c>
 8009cec:	000d883a 	mov	r6,zero
 8009cf0:	003fef06 	br	8009cb0 <__alt_data_end+0xfc009cb0>

08009cf4 <__d2b>:
 8009cf4:	defff704 	addi	sp,sp,-36
 8009cf8:	dc000215 	stw	r16,8(sp)
 8009cfc:	3021883a 	mov	r16,r6
 8009d00:	dc400315 	stw	r17,12(sp)
 8009d04:	8022907a 	slli	r17,r16,1
 8009d08:	dd400715 	stw	r21,28(sp)
 8009d0c:	282b883a 	mov	r21,r5
 8009d10:	01400044 	movi	r5,1
 8009d14:	dd000615 	stw	r20,24(sp)
 8009d18:	dcc00515 	stw	r19,20(sp)
 8009d1c:	dc800415 	stw	r18,16(sp)
 8009d20:	dfc00815 	stw	ra,32(sp)
 8009d24:	3829883a 	mov	r20,r7
 8009d28:	dc800917 	ldw	r18,36(sp)
 8009d2c:	8822d57a 	srli	r17,r17,21
 8009d30:	80090c00 	call	80090c0 <_Balloc>
 8009d34:	1027883a 	mov	r19,r2
 8009d38:	00800434 	movhi	r2,16
 8009d3c:	10bfffc4 	addi	r2,r2,-1
 8009d40:	808c703a 	and	r6,r16,r2
 8009d44:	88000126 	beq	r17,zero,8009d4c <__d2b+0x58>
 8009d48:	31800434 	orhi	r6,r6,16
 8009d4c:	d9800015 	stw	r6,0(sp)
 8009d50:	a8001f26 	beq	r21,zero,8009dd0 <__d2b+0xdc>
 8009d54:	d9000104 	addi	r4,sp,4
 8009d58:	dd400115 	stw	r21,4(sp)
 8009d5c:	80094100 	call	8009410 <__lo0bits>
 8009d60:	d8c00017 	ldw	r3,0(sp)
 8009d64:	1000291e 	bne	r2,zero,8009e0c <__d2b+0x118>
 8009d68:	d9000117 	ldw	r4,4(sp)
 8009d6c:	99000515 	stw	r4,20(r19)
 8009d70:	1820c03a 	cmpne	r16,r3,zero
 8009d74:	84000044 	addi	r16,r16,1
 8009d78:	98c00615 	stw	r3,24(r19)
 8009d7c:	9c000415 	stw	r16,16(r19)
 8009d80:	88001b1e 	bne	r17,zero,8009df0 <__d2b+0xfc>
 8009d84:	800690ba 	slli	r3,r16,2
 8009d88:	10bef384 	addi	r2,r2,-1074
 8009d8c:	a0800015 	stw	r2,0(r20)
 8009d90:	98c5883a 	add	r2,r19,r3
 8009d94:	11000417 	ldw	r4,16(r2)
 8009d98:	8020917a 	slli	r16,r16,5
 8009d9c:	80093a80 	call	80093a8 <__hi0bits>
 8009da0:	8085c83a 	sub	r2,r16,r2
 8009da4:	90800015 	stw	r2,0(r18)
 8009da8:	9805883a 	mov	r2,r19
 8009dac:	dfc00817 	ldw	ra,32(sp)
 8009db0:	dd400717 	ldw	r21,28(sp)
 8009db4:	dd000617 	ldw	r20,24(sp)
 8009db8:	dcc00517 	ldw	r19,20(sp)
 8009dbc:	dc800417 	ldw	r18,16(sp)
 8009dc0:	dc400317 	ldw	r17,12(sp)
 8009dc4:	dc000217 	ldw	r16,8(sp)
 8009dc8:	dec00904 	addi	sp,sp,36
 8009dcc:	f800283a 	ret
 8009dd0:	d809883a 	mov	r4,sp
 8009dd4:	80094100 	call	8009410 <__lo0bits>
 8009dd8:	d8c00017 	ldw	r3,0(sp)
 8009ddc:	04000044 	movi	r16,1
 8009de0:	9c000415 	stw	r16,16(r19)
 8009de4:	98c00515 	stw	r3,20(r19)
 8009de8:	10800804 	addi	r2,r2,32
 8009dec:	883fe526 	beq	r17,zero,8009d84 <__alt_data_end+0xfc009d84>
 8009df0:	8c7ef344 	addi	r17,r17,-1075
 8009df4:	88a3883a 	add	r17,r17,r2
 8009df8:	00c00d44 	movi	r3,53
 8009dfc:	a4400015 	stw	r17,0(r20)
 8009e00:	1885c83a 	sub	r2,r3,r2
 8009e04:	90800015 	stw	r2,0(r18)
 8009e08:	003fe706 	br	8009da8 <__alt_data_end+0xfc009da8>
 8009e0c:	01000804 	movi	r4,32
 8009e10:	2089c83a 	sub	r4,r4,r2
 8009e14:	1908983a 	sll	r4,r3,r4
 8009e18:	d9400117 	ldw	r5,4(sp)
 8009e1c:	1886d83a 	srl	r3,r3,r2
 8009e20:	2148b03a 	or	r4,r4,r5
 8009e24:	99000515 	stw	r4,20(r19)
 8009e28:	d8c00015 	stw	r3,0(sp)
 8009e2c:	003fd006 	br	8009d70 <__alt_data_end+0xfc009d70>

08009e30 <__ratio>:
 8009e30:	defff904 	addi	sp,sp,-28
 8009e34:	dc400315 	stw	r17,12(sp)
 8009e38:	2823883a 	mov	r17,r5
 8009e3c:	d9400104 	addi	r5,sp,4
 8009e40:	dfc00615 	stw	ra,24(sp)
 8009e44:	dcc00515 	stw	r19,20(sp)
 8009e48:	dc800415 	stw	r18,16(sp)
 8009e4c:	2027883a 	mov	r19,r4
 8009e50:	dc000215 	stw	r16,8(sp)
 8009e54:	8009bd80 	call	8009bd8 <__b2d>
 8009e58:	8809883a 	mov	r4,r17
 8009e5c:	d80b883a 	mov	r5,sp
 8009e60:	1025883a 	mov	r18,r2
 8009e64:	1821883a 	mov	r16,r3
 8009e68:	8009bd80 	call	8009bd8 <__b2d>
 8009e6c:	8a400417 	ldw	r9,16(r17)
 8009e70:	9a000417 	ldw	r8,16(r19)
 8009e74:	100d883a 	mov	r6,r2
 8009e78:	d8800017 	ldw	r2,0(sp)
 8009e7c:	4251c83a 	sub	r8,r8,r9
 8009e80:	4012917a 	slli	r9,r8,5
 8009e84:	da000117 	ldw	r8,4(sp)
 8009e88:	4091c83a 	sub	r8,r8,r2
 8009e8c:	4251883a 	add	r8,r8,r9
 8009e90:	02000d0e 	bge	zero,r8,8009ec8 <__ratio+0x98>
 8009e94:	4010953a 	slli	r8,r8,20
 8009e98:	4421883a 	add	r16,r8,r16
 8009e9c:	9009883a 	mov	r4,r18
 8009ea0:	800b883a 	mov	r5,r16
 8009ea4:	180f883a 	mov	r7,r3
 8009ea8:	800db780 	call	800db78 <__divdf3>
 8009eac:	dfc00617 	ldw	ra,24(sp)
 8009eb0:	dcc00517 	ldw	r19,20(sp)
 8009eb4:	dc800417 	ldw	r18,16(sp)
 8009eb8:	dc400317 	ldw	r17,12(sp)
 8009ebc:	dc000217 	ldw	r16,8(sp)
 8009ec0:	dec00704 	addi	sp,sp,28
 8009ec4:	f800283a 	ret
 8009ec8:	4010953a 	slli	r8,r8,20
 8009ecc:	1a07c83a 	sub	r3,r3,r8
 8009ed0:	003ff206 	br	8009e9c <__alt_data_end+0xfc009e9c>

08009ed4 <_mprec_log10>:
 8009ed4:	defffe04 	addi	sp,sp,-8
 8009ed8:	dc000015 	stw	r16,0(sp)
 8009edc:	dfc00115 	stw	ra,4(sp)
 8009ee0:	008005c4 	movi	r2,23
 8009ee4:	2021883a 	mov	r16,r4
 8009ee8:	11000d0e 	bge	r2,r4,8009f20 <_mprec_log10+0x4c>
 8009eec:	0005883a 	mov	r2,zero
 8009ef0:	00cffc34 	movhi	r3,16368
 8009ef4:	843fffc4 	addi	r16,r16,-1
 8009ef8:	1009883a 	mov	r4,r2
 8009efc:	180b883a 	mov	r5,r3
 8009f00:	000d883a 	mov	r6,zero
 8009f04:	01d00934 	movhi	r7,16420
 8009f08:	800e6880 	call	800e688 <__muldf3>
 8009f0c:	803ff91e 	bne	r16,zero,8009ef4 <__alt_data_end+0xfc009ef4>
 8009f10:	dfc00117 	ldw	ra,4(sp)
 8009f14:	dc000017 	ldw	r16,0(sp)
 8009f18:	dec00204 	addi	sp,sp,8
 8009f1c:	f800283a 	ret
 8009f20:	202090fa 	slli	r16,r4,3
 8009f24:	008200b4 	movhi	r2,2050
 8009f28:	10b36a04 	addi	r2,r2,-12888
 8009f2c:	1421883a 	add	r16,r2,r16
 8009f30:	80800017 	ldw	r2,0(r16)
 8009f34:	80c00117 	ldw	r3,4(r16)
 8009f38:	dfc00117 	ldw	ra,4(sp)
 8009f3c:	dc000017 	ldw	r16,0(sp)
 8009f40:	dec00204 	addi	sp,sp,8
 8009f44:	f800283a 	ret

08009f48 <__copybits>:
 8009f48:	297fffc4 	addi	r5,r5,-1
 8009f4c:	280fd17a 	srai	r7,r5,5
 8009f50:	30c00417 	ldw	r3,16(r6)
 8009f54:	30800504 	addi	r2,r6,20
 8009f58:	39c00044 	addi	r7,r7,1
 8009f5c:	18c7883a 	add	r3,r3,r3
 8009f60:	39cf883a 	add	r7,r7,r7
 8009f64:	18c7883a 	add	r3,r3,r3
 8009f68:	39cf883a 	add	r7,r7,r7
 8009f6c:	10c7883a 	add	r3,r2,r3
 8009f70:	21cf883a 	add	r7,r4,r7
 8009f74:	10c00d2e 	bgeu	r2,r3,8009fac <__copybits+0x64>
 8009f78:	200b883a 	mov	r5,r4
 8009f7c:	12000017 	ldw	r8,0(r2)
 8009f80:	29400104 	addi	r5,r5,4
 8009f84:	10800104 	addi	r2,r2,4
 8009f88:	2a3fff15 	stw	r8,-4(r5)
 8009f8c:	10fffb36 	bltu	r2,r3,8009f7c <__alt_data_end+0xfc009f7c>
 8009f90:	1985c83a 	sub	r2,r3,r6
 8009f94:	10bffac4 	addi	r2,r2,-21
 8009f98:	1004d0ba 	srli	r2,r2,2
 8009f9c:	10800044 	addi	r2,r2,1
 8009fa0:	1085883a 	add	r2,r2,r2
 8009fa4:	1085883a 	add	r2,r2,r2
 8009fa8:	2089883a 	add	r4,r4,r2
 8009fac:	21c0032e 	bgeu	r4,r7,8009fbc <__copybits+0x74>
 8009fb0:	20000015 	stw	zero,0(r4)
 8009fb4:	21000104 	addi	r4,r4,4
 8009fb8:	21fffd36 	bltu	r4,r7,8009fb0 <__alt_data_end+0xfc009fb0>
 8009fbc:	f800283a 	ret

08009fc0 <__any_on>:
 8009fc0:	20c00417 	ldw	r3,16(r4)
 8009fc4:	2805d17a 	srai	r2,r5,5
 8009fc8:	21000504 	addi	r4,r4,20
 8009fcc:	18800d0e 	bge	r3,r2,800a004 <__any_on+0x44>
 8009fd0:	18c7883a 	add	r3,r3,r3
 8009fd4:	18c7883a 	add	r3,r3,r3
 8009fd8:	20c7883a 	add	r3,r4,r3
 8009fdc:	20c0192e 	bgeu	r4,r3,800a044 <__any_on+0x84>
 8009fe0:	18bfff17 	ldw	r2,-4(r3)
 8009fe4:	18ffff04 	addi	r3,r3,-4
 8009fe8:	1000041e 	bne	r2,zero,8009ffc <__any_on+0x3c>
 8009fec:	20c0142e 	bgeu	r4,r3,800a040 <__any_on+0x80>
 8009ff0:	18ffff04 	addi	r3,r3,-4
 8009ff4:	19400017 	ldw	r5,0(r3)
 8009ff8:	283ffc26 	beq	r5,zero,8009fec <__alt_data_end+0xfc009fec>
 8009ffc:	00800044 	movi	r2,1
 800a000:	f800283a 	ret
 800a004:	10c00a0e 	bge	r2,r3,800a030 <__any_on+0x70>
 800a008:	1085883a 	add	r2,r2,r2
 800a00c:	1085883a 	add	r2,r2,r2
 800a010:	294007cc 	andi	r5,r5,31
 800a014:	2087883a 	add	r3,r4,r2
 800a018:	283ff026 	beq	r5,zero,8009fdc <__alt_data_end+0xfc009fdc>
 800a01c:	19800017 	ldw	r6,0(r3)
 800a020:	3144d83a 	srl	r2,r6,r5
 800a024:	114a983a 	sll	r5,r2,r5
 800a028:	29bff41e 	bne	r5,r6,8009ffc <__alt_data_end+0xfc009ffc>
 800a02c:	003feb06 	br	8009fdc <__alt_data_end+0xfc009fdc>
 800a030:	1085883a 	add	r2,r2,r2
 800a034:	1085883a 	add	r2,r2,r2
 800a038:	2087883a 	add	r3,r4,r2
 800a03c:	003fe706 	br	8009fdc <__alt_data_end+0xfc009fdc>
 800a040:	f800283a 	ret
 800a044:	0005883a 	mov	r2,zero
 800a048:	f800283a 	ret

0800a04c <_realloc_r>:
 800a04c:	defff604 	addi	sp,sp,-40
 800a050:	dcc00315 	stw	r19,12(sp)
 800a054:	dc400115 	stw	r17,4(sp)
 800a058:	dfc00915 	stw	ra,36(sp)
 800a05c:	df000815 	stw	fp,32(sp)
 800a060:	ddc00715 	stw	r23,28(sp)
 800a064:	dd800615 	stw	r22,24(sp)
 800a068:	dd400515 	stw	r21,20(sp)
 800a06c:	dd000415 	stw	r20,16(sp)
 800a070:	dc800215 	stw	r18,8(sp)
 800a074:	dc000015 	stw	r16,0(sp)
 800a078:	2827883a 	mov	r19,r5
 800a07c:	3023883a 	mov	r17,r6
 800a080:	2800bf26 	beq	r5,zero,800a380 <_realloc_r+0x334>
 800a084:	2025883a 	mov	r18,r4
 800a088:	800fe9c0 	call	800fe9c <__malloc_lock>
 800a08c:	98ffff17 	ldw	r3,-4(r19)
 800a090:	01bfff04 	movi	r6,-4
 800a094:	890002c4 	addi	r4,r17,11
 800a098:	01c00584 	movi	r7,22
 800a09c:	9d7ffe04 	addi	r21,r19,-8
 800a0a0:	19a0703a 	and	r16,r3,r6
 800a0a4:	39003f2e 	bgeu	r7,r4,800a1a4 <_realloc_r+0x158>
 800a0a8:	053ffe04 	movi	r20,-8
 800a0ac:	2528703a 	and	r20,r4,r20
 800a0b0:	a00f883a 	mov	r7,r20
 800a0b4:	a0008216 	blt	r20,zero,800a2c0 <_realloc_r+0x274>
 800a0b8:	a4408136 	bltu	r20,r17,800a2c0 <_realloc_r+0x274>
 800a0bc:	81c03c0e 	bge	r16,r7,800a1b0 <_realloc_r+0x164>
 800a0c0:	070200b4 	movhi	fp,2050
 800a0c4:	e7351804 	addi	fp,fp,-11168
 800a0c8:	e1000217 	ldw	r4,8(fp)
 800a0cc:	ac05883a 	add	r2,r21,r16
 800a0d0:	2080bf26 	beq	r4,r2,800a3d0 <_realloc_r+0x384>
 800a0d4:	11000117 	ldw	r4,4(r2)
 800a0d8:	023fff84 	movi	r8,-2
 800a0dc:	2210703a 	and	r8,r4,r8
 800a0e0:	1211883a 	add	r8,r2,r8
 800a0e4:	41400117 	ldw	r5,4(r8)
 800a0e8:	2940004c 	andi	r5,r5,1
 800a0ec:	28004a1e 	bne	r5,zero,800a218 <_realloc_r+0x1cc>
 800a0f0:	017fff04 	movi	r5,-4
 800a0f4:	2148703a 	and	r4,r4,r5
 800a0f8:	2409883a 	add	r4,r4,r16
 800a0fc:	21c0ad0e 	bge	r4,r7,800a3b4 <_realloc_r+0x368>
 800a100:	18c0004c 	andi	r3,r3,1
 800a104:	18007f1e 	bne	r3,zero,800a304 <_realloc_r+0x2b8>
 800a108:	9dfffe17 	ldw	r23,-8(r19)
 800a10c:	adefc83a 	sub	r23,r21,r23
 800a110:	bd800117 	ldw	r22,4(r23)
 800a114:	b14a703a 	and	r5,r22,r5
 800a118:	216d883a 	add	r22,r4,r5
 800a11c:	b1c04516 	blt	r22,r7,800a234 <_realloc_r+0x1e8>
 800a120:	10c00317 	ldw	r3,12(r2)
 800a124:	10800217 	ldw	r2,8(r2)
 800a128:	81bfff04 	addi	r6,r16,-4
 800a12c:	bc400204 	addi	r17,r23,8
 800a130:	10c00315 	stw	r3,12(r2)
 800a134:	18800215 	stw	r2,8(r3)
 800a138:	b9400217 	ldw	r5,8(r23)
 800a13c:	b8c00317 	ldw	r3,12(r23)
 800a140:	00800904 	movi	r2,36
 800a144:	28c00315 	stw	r3,12(r5)
 800a148:	19400215 	stw	r5,8(r3)
 800a14c:	1180ef36 	bltu	r2,r6,800a50c <_realloc_r+0x4c0>
 800a150:	008004c4 	movi	r2,19
 800a154:	1180da2e 	bgeu	r2,r6,800a4c0 <_realloc_r+0x474>
 800a158:	98800017 	ldw	r2,0(r19)
 800a15c:	b8800215 	stw	r2,8(r23)
 800a160:	98800117 	ldw	r2,4(r19)
 800a164:	b8800315 	stw	r2,12(r23)
 800a168:	008006c4 	movi	r2,27
 800a16c:	1180fc2e 	bgeu	r2,r6,800a560 <_realloc_r+0x514>
 800a170:	98800217 	ldw	r2,8(r19)
 800a174:	b8800415 	stw	r2,16(r23)
 800a178:	98800317 	ldw	r2,12(r19)
 800a17c:	b8800515 	stw	r2,20(r23)
 800a180:	00800904 	movi	r2,36
 800a184:	3080421e 	bne	r6,r2,800a290 <_realloc_r+0x244>
 800a188:	98800417 	ldw	r2,16(r19)
 800a18c:	9cc00604 	addi	r19,r19,24
 800a190:	b8c00804 	addi	r3,r23,32
 800a194:	b8800615 	stw	r2,24(r23)
 800a198:	98bfff17 	ldw	r2,-4(r19)
 800a19c:	b8800715 	stw	r2,28(r23)
 800a1a0:	00003d06 	br	800a298 <_realloc_r+0x24c>
 800a1a4:	01c00404 	movi	r7,16
 800a1a8:	3829883a 	mov	r20,r7
 800a1ac:	003fc206 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a1b0:	9823883a 	mov	r17,r19
 800a1b4:	850fc83a 	sub	r7,r16,r20
 800a1b8:	008003c4 	movi	r2,15
 800a1bc:	18c0004c 	andi	r3,r3,1
 800a1c0:	11c04336 	bltu	r2,r7,800a2d0 <_realloc_r+0x284>
 800a1c4:	1c06b03a 	or	r3,r3,r16
 800a1c8:	a8c00115 	stw	r3,4(r21)
 800a1cc:	ac21883a 	add	r16,r21,r16
 800a1d0:	80c00117 	ldw	r3,4(r16)
 800a1d4:	18c00054 	ori	r3,r3,1
 800a1d8:	80c00115 	stw	r3,4(r16)
 800a1dc:	9009883a 	mov	r4,r18
 800a1e0:	800febc0 	call	800febc <__malloc_unlock>
 800a1e4:	8805883a 	mov	r2,r17
 800a1e8:	dfc00917 	ldw	ra,36(sp)
 800a1ec:	df000817 	ldw	fp,32(sp)
 800a1f0:	ddc00717 	ldw	r23,28(sp)
 800a1f4:	dd800617 	ldw	r22,24(sp)
 800a1f8:	dd400517 	ldw	r21,20(sp)
 800a1fc:	dd000417 	ldw	r20,16(sp)
 800a200:	dcc00317 	ldw	r19,12(sp)
 800a204:	dc800217 	ldw	r18,8(sp)
 800a208:	dc400117 	ldw	r17,4(sp)
 800a20c:	dc000017 	ldw	r16,0(sp)
 800a210:	dec00a04 	addi	sp,sp,40
 800a214:	f800283a 	ret
 800a218:	18c0004c 	andi	r3,r3,1
 800a21c:	1800391e 	bne	r3,zero,800a304 <_realloc_r+0x2b8>
 800a220:	9dfffe17 	ldw	r23,-8(r19)
 800a224:	00bfff04 	movi	r2,-4
 800a228:	adefc83a 	sub	r23,r21,r23
 800a22c:	b9400117 	ldw	r5,4(r23)
 800a230:	288a703a 	and	r5,r5,r2
 800a234:	2c2d883a 	add	r22,r5,r16
 800a238:	b1c03216 	blt	r22,r7,800a304 <_realloc_r+0x2b8>
 800a23c:	b8800317 	ldw	r2,12(r23)
 800a240:	b8c00217 	ldw	r3,8(r23)
 800a244:	81bfff04 	addi	r6,r16,-4
 800a248:	01000904 	movi	r4,36
 800a24c:	18800315 	stw	r2,12(r3)
 800a250:	10c00215 	stw	r3,8(r2)
 800a254:	bc400204 	addi	r17,r23,8
 800a258:	2180ac36 	bltu	r4,r6,800a50c <_realloc_r+0x4c0>
 800a25c:	008004c4 	movi	r2,19
 800a260:	1180972e 	bgeu	r2,r6,800a4c0 <_realloc_r+0x474>
 800a264:	98800017 	ldw	r2,0(r19)
 800a268:	b8800215 	stw	r2,8(r23)
 800a26c:	98800117 	ldw	r2,4(r19)
 800a270:	b8800315 	stw	r2,12(r23)
 800a274:	008006c4 	movi	r2,27
 800a278:	1180b92e 	bgeu	r2,r6,800a560 <_realloc_r+0x514>
 800a27c:	98800217 	ldw	r2,8(r19)
 800a280:	b8800415 	stw	r2,16(r23)
 800a284:	98800317 	ldw	r2,12(r19)
 800a288:	b8800515 	stw	r2,20(r23)
 800a28c:	313fbe26 	beq	r6,r4,800a188 <__alt_data_end+0xfc00a188>
 800a290:	b8c00604 	addi	r3,r23,24
 800a294:	9cc00404 	addi	r19,r19,16
 800a298:	98800017 	ldw	r2,0(r19)
 800a29c:	b021883a 	mov	r16,r22
 800a2a0:	b82b883a 	mov	r21,r23
 800a2a4:	18800015 	stw	r2,0(r3)
 800a2a8:	98800117 	ldw	r2,4(r19)
 800a2ac:	18800115 	stw	r2,4(r3)
 800a2b0:	98800217 	ldw	r2,8(r19)
 800a2b4:	18800215 	stw	r2,8(r3)
 800a2b8:	b8c00117 	ldw	r3,4(r23)
 800a2bc:	003fbd06 	br	800a1b4 <__alt_data_end+0xfc00a1b4>
 800a2c0:	00800304 	movi	r2,12
 800a2c4:	90800015 	stw	r2,0(r18)
 800a2c8:	0005883a 	mov	r2,zero
 800a2cc:	003fc606 	br	800a1e8 <__alt_data_end+0xfc00a1e8>
 800a2d0:	1d06b03a 	or	r3,r3,r20
 800a2d4:	ad0b883a 	add	r5,r21,r20
 800a2d8:	a8c00115 	stw	r3,4(r21)
 800a2dc:	38800054 	ori	r2,r7,1
 800a2e0:	28800115 	stw	r2,4(r5)
 800a2e4:	29cf883a 	add	r7,r5,r7
 800a2e8:	38800117 	ldw	r2,4(r7)
 800a2ec:	9009883a 	mov	r4,r18
 800a2f0:	29400204 	addi	r5,r5,8
 800a2f4:	10800054 	ori	r2,r2,1
 800a2f8:	38800115 	stw	r2,4(r7)
 800a2fc:	8007a140 	call	8007a14 <_free_r>
 800a300:	003fb606 	br	800a1dc <__alt_data_end+0xfc00a1dc>
 800a304:	880b883a 	mov	r5,r17
 800a308:	9009883a 	mov	r4,r18
 800a30c:	80085b00 	call	80085b0 <_malloc_r>
 800a310:	1023883a 	mov	r17,r2
 800a314:	1000aa26 	beq	r2,zero,800a5c0 <_realloc_r+0x574>
 800a318:	98ffff17 	ldw	r3,-4(r19)
 800a31c:	113ffe04 	addi	r4,r2,-8
 800a320:	00bfff84 	movi	r2,-2
 800a324:	1884703a 	and	r2,r3,r2
 800a328:	a885883a 	add	r2,r21,r2
 800a32c:	20808626 	beq	r4,r2,800a548 <_realloc_r+0x4fc>
 800a330:	81bfff04 	addi	r6,r16,-4
 800a334:	00800904 	movi	r2,36
 800a338:	11807036 	bltu	r2,r6,800a4fc <_realloc_r+0x4b0>
 800a33c:	00c004c4 	movi	r3,19
 800a340:	19805636 	bltu	r3,r6,800a49c <_realloc_r+0x450>
 800a344:	8805883a 	mov	r2,r17
 800a348:	9807883a 	mov	r3,r19
 800a34c:	19000017 	ldw	r4,0(r3)
 800a350:	11000015 	stw	r4,0(r2)
 800a354:	19000117 	ldw	r4,4(r3)
 800a358:	11000115 	stw	r4,4(r2)
 800a35c:	18c00217 	ldw	r3,8(r3)
 800a360:	10c00215 	stw	r3,8(r2)
 800a364:	980b883a 	mov	r5,r19
 800a368:	9009883a 	mov	r4,r18
 800a36c:	8007a140 	call	8007a14 <_free_r>
 800a370:	9009883a 	mov	r4,r18
 800a374:	800febc0 	call	800febc <__malloc_unlock>
 800a378:	8805883a 	mov	r2,r17
 800a37c:	003f9a06 	br	800a1e8 <__alt_data_end+0xfc00a1e8>
 800a380:	300b883a 	mov	r5,r6
 800a384:	dfc00917 	ldw	ra,36(sp)
 800a388:	df000817 	ldw	fp,32(sp)
 800a38c:	ddc00717 	ldw	r23,28(sp)
 800a390:	dd800617 	ldw	r22,24(sp)
 800a394:	dd400517 	ldw	r21,20(sp)
 800a398:	dd000417 	ldw	r20,16(sp)
 800a39c:	dcc00317 	ldw	r19,12(sp)
 800a3a0:	dc800217 	ldw	r18,8(sp)
 800a3a4:	dc400117 	ldw	r17,4(sp)
 800a3a8:	dc000017 	ldw	r16,0(sp)
 800a3ac:	dec00a04 	addi	sp,sp,40
 800a3b0:	80085b01 	jmpi	80085b0 <_malloc_r>
 800a3b4:	11400317 	ldw	r5,12(r2)
 800a3b8:	10800217 	ldw	r2,8(r2)
 800a3bc:	9823883a 	mov	r17,r19
 800a3c0:	2021883a 	mov	r16,r4
 800a3c4:	11400315 	stw	r5,12(r2)
 800a3c8:	28800215 	stw	r2,8(r5)
 800a3cc:	003f7906 	br	800a1b4 <__alt_data_end+0xfc00a1b4>
 800a3d0:	21000117 	ldw	r4,4(r4)
 800a3d4:	00bfff04 	movi	r2,-4
 800a3d8:	a1800404 	addi	r6,r20,16
 800a3dc:	2088703a 	and	r4,r4,r2
 800a3e0:	2409883a 	add	r4,r4,r16
 800a3e4:	2180380e 	bge	r4,r6,800a4c8 <_realloc_r+0x47c>
 800a3e8:	18c0004c 	andi	r3,r3,1
 800a3ec:	183fc51e 	bne	r3,zero,800a304 <__alt_data_end+0xfc00a304>
 800a3f0:	9dfffe17 	ldw	r23,-8(r19)
 800a3f4:	adefc83a 	sub	r23,r21,r23
 800a3f8:	b9400117 	ldw	r5,4(r23)
 800a3fc:	288a703a 	and	r5,r5,r2
 800a400:	216d883a 	add	r22,r4,r5
 800a404:	b1bf8b16 	blt	r22,r6,800a234 <__alt_data_end+0xfc00a234>
 800a408:	b8800317 	ldw	r2,12(r23)
 800a40c:	b8c00217 	ldw	r3,8(r23)
 800a410:	81bfff04 	addi	r6,r16,-4
 800a414:	01000904 	movi	r4,36
 800a418:	18800315 	stw	r2,12(r3)
 800a41c:	10c00215 	stw	r3,8(r2)
 800a420:	bc400204 	addi	r17,r23,8
 800a424:	21805a36 	bltu	r4,r6,800a590 <_realloc_r+0x544>
 800a428:	008004c4 	movi	r2,19
 800a42c:	1180562e 	bgeu	r2,r6,800a588 <_realloc_r+0x53c>
 800a430:	98800017 	ldw	r2,0(r19)
 800a434:	b8800215 	stw	r2,8(r23)
 800a438:	98800117 	ldw	r2,4(r19)
 800a43c:	b8800315 	stw	r2,12(r23)
 800a440:	008006c4 	movi	r2,27
 800a444:	11805636 	bltu	r2,r6,800a5a0 <_realloc_r+0x554>
 800a448:	b8800404 	addi	r2,r23,16
 800a44c:	9cc00204 	addi	r19,r19,8
 800a450:	98c00017 	ldw	r3,0(r19)
 800a454:	10c00015 	stw	r3,0(r2)
 800a458:	98c00117 	ldw	r3,4(r19)
 800a45c:	10c00115 	stw	r3,4(r2)
 800a460:	98c00217 	ldw	r3,8(r19)
 800a464:	10c00215 	stw	r3,8(r2)
 800a468:	bd07883a 	add	r3,r23,r20
 800a46c:	b505c83a 	sub	r2,r22,r20
 800a470:	e0c00215 	stw	r3,8(fp)
 800a474:	10800054 	ori	r2,r2,1
 800a478:	18800115 	stw	r2,4(r3)
 800a47c:	b8800117 	ldw	r2,4(r23)
 800a480:	9009883a 	mov	r4,r18
 800a484:	1080004c 	andi	r2,r2,1
 800a488:	a0a8b03a 	or	r20,r20,r2
 800a48c:	bd000115 	stw	r20,4(r23)
 800a490:	800febc0 	call	800febc <__malloc_unlock>
 800a494:	8805883a 	mov	r2,r17
 800a498:	003f5306 	br	800a1e8 <__alt_data_end+0xfc00a1e8>
 800a49c:	98c00017 	ldw	r3,0(r19)
 800a4a0:	88c00015 	stw	r3,0(r17)
 800a4a4:	98c00117 	ldw	r3,4(r19)
 800a4a8:	88c00115 	stw	r3,4(r17)
 800a4ac:	00c006c4 	movi	r3,27
 800a4b0:	19801d36 	bltu	r3,r6,800a528 <_realloc_r+0x4dc>
 800a4b4:	88800204 	addi	r2,r17,8
 800a4b8:	98c00204 	addi	r3,r19,8
 800a4bc:	003fa306 	br	800a34c <__alt_data_end+0xfc00a34c>
 800a4c0:	8807883a 	mov	r3,r17
 800a4c4:	003f7406 	br	800a298 <__alt_data_end+0xfc00a298>
 800a4c8:	ad2b883a 	add	r21,r21,r20
 800a4cc:	2505c83a 	sub	r2,r4,r20
 800a4d0:	e5400215 	stw	r21,8(fp)
 800a4d4:	10800054 	ori	r2,r2,1
 800a4d8:	a8800115 	stw	r2,4(r21)
 800a4dc:	98bfff17 	ldw	r2,-4(r19)
 800a4e0:	9009883a 	mov	r4,r18
 800a4e4:	1080004c 	andi	r2,r2,1
 800a4e8:	a0a8b03a 	or	r20,r20,r2
 800a4ec:	9d3fff15 	stw	r20,-4(r19)
 800a4f0:	800febc0 	call	800febc <__malloc_unlock>
 800a4f4:	9805883a 	mov	r2,r19
 800a4f8:	003f3b06 	br	800a1e8 <__alt_data_end+0xfc00a1e8>
 800a4fc:	8809883a 	mov	r4,r17
 800a500:	980b883a 	mov	r5,r19
 800a504:	8008e400 	call	8008e40 <memmove>
 800a508:	003f9606 	br	800a364 <__alt_data_end+0xfc00a364>
 800a50c:	8809883a 	mov	r4,r17
 800a510:	980b883a 	mov	r5,r19
 800a514:	8008e400 	call	8008e40 <memmove>
 800a518:	b8c00117 	ldw	r3,4(r23)
 800a51c:	b021883a 	mov	r16,r22
 800a520:	b82b883a 	mov	r21,r23
 800a524:	003f2306 	br	800a1b4 <__alt_data_end+0xfc00a1b4>
 800a528:	98c00217 	ldw	r3,8(r19)
 800a52c:	88c00215 	stw	r3,8(r17)
 800a530:	98c00317 	ldw	r3,12(r19)
 800a534:	88c00315 	stw	r3,12(r17)
 800a538:	30800c26 	beq	r6,r2,800a56c <_realloc_r+0x520>
 800a53c:	88800404 	addi	r2,r17,16
 800a540:	98c00404 	addi	r3,r19,16
 800a544:	003f8106 	br	800a34c <__alt_data_end+0xfc00a34c>
 800a548:	893fff17 	ldw	r4,-4(r17)
 800a54c:	00bfff04 	movi	r2,-4
 800a550:	9823883a 	mov	r17,r19
 800a554:	2084703a 	and	r2,r4,r2
 800a558:	80a1883a 	add	r16,r16,r2
 800a55c:	003f1506 	br	800a1b4 <__alt_data_end+0xfc00a1b4>
 800a560:	b8c00404 	addi	r3,r23,16
 800a564:	9cc00204 	addi	r19,r19,8
 800a568:	003f4b06 	br	800a298 <__alt_data_end+0xfc00a298>
 800a56c:	99000417 	ldw	r4,16(r19)
 800a570:	88800604 	addi	r2,r17,24
 800a574:	98c00604 	addi	r3,r19,24
 800a578:	89000415 	stw	r4,16(r17)
 800a57c:	99000517 	ldw	r4,20(r19)
 800a580:	89000515 	stw	r4,20(r17)
 800a584:	003f7106 	br	800a34c <__alt_data_end+0xfc00a34c>
 800a588:	8805883a 	mov	r2,r17
 800a58c:	003fb006 	br	800a450 <__alt_data_end+0xfc00a450>
 800a590:	8809883a 	mov	r4,r17
 800a594:	980b883a 	mov	r5,r19
 800a598:	8008e400 	call	8008e40 <memmove>
 800a59c:	003fb206 	br	800a468 <__alt_data_end+0xfc00a468>
 800a5a0:	98800217 	ldw	r2,8(r19)
 800a5a4:	b8800415 	stw	r2,16(r23)
 800a5a8:	98800317 	ldw	r2,12(r19)
 800a5ac:	b8800515 	stw	r2,20(r23)
 800a5b0:	31000726 	beq	r6,r4,800a5d0 <_realloc_r+0x584>
 800a5b4:	b8800604 	addi	r2,r23,24
 800a5b8:	9cc00404 	addi	r19,r19,16
 800a5bc:	003fa406 	br	800a450 <__alt_data_end+0xfc00a450>
 800a5c0:	9009883a 	mov	r4,r18
 800a5c4:	800febc0 	call	800febc <__malloc_unlock>
 800a5c8:	0005883a 	mov	r2,zero
 800a5cc:	003f0606 	br	800a1e8 <__alt_data_end+0xfc00a1e8>
 800a5d0:	98c00417 	ldw	r3,16(r19)
 800a5d4:	9cc00604 	addi	r19,r19,24
 800a5d8:	b8800804 	addi	r2,r23,32
 800a5dc:	b8c00615 	stw	r3,24(r23)
 800a5e0:	98ffff17 	ldw	r3,-4(r19)
 800a5e4:	b8c00715 	stw	r3,28(r23)
 800a5e8:	003f9906 	br	800a450 <__alt_data_end+0xfc00a450>

0800a5ec <__fpclassifyd>:
 800a5ec:	00a00034 	movhi	r2,32768
 800a5f0:	10bfffc4 	addi	r2,r2,-1
 800a5f4:	2884703a 	and	r2,r5,r2
 800a5f8:	10000726 	beq	r2,zero,800a618 <__fpclassifyd+0x2c>
 800a5fc:	00fffc34 	movhi	r3,65520
 800a600:	019ff834 	movhi	r6,32736
 800a604:	28c7883a 	add	r3,r5,r3
 800a608:	31bfffc4 	addi	r6,r6,-1
 800a60c:	30c00536 	bltu	r6,r3,800a624 <__fpclassifyd+0x38>
 800a610:	00800104 	movi	r2,4
 800a614:	f800283a 	ret
 800a618:	2000021e 	bne	r4,zero,800a624 <__fpclassifyd+0x38>
 800a61c:	00800084 	movi	r2,2
 800a620:	f800283a 	ret
 800a624:	00dffc34 	movhi	r3,32752
 800a628:	019ff834 	movhi	r6,32736
 800a62c:	28cb883a 	add	r5,r5,r3
 800a630:	31bfffc4 	addi	r6,r6,-1
 800a634:	317ff62e 	bgeu	r6,r5,800a610 <__alt_data_end+0xfc00a610>
 800a638:	01400434 	movhi	r5,16
 800a63c:	297fffc4 	addi	r5,r5,-1
 800a640:	28800236 	bltu	r5,r2,800a64c <__fpclassifyd+0x60>
 800a644:	008000c4 	movi	r2,3
 800a648:	f800283a 	ret
 800a64c:	10c00226 	beq	r2,r3,800a658 <__fpclassifyd+0x6c>
 800a650:	0005883a 	mov	r2,zero
 800a654:	f800283a 	ret
 800a658:	2005003a 	cmpeq	r2,r4,zero
 800a65c:	f800283a 	ret

0800a660 <_sbrk_r>:
 800a660:	defffd04 	addi	sp,sp,-12
 800a664:	dc000015 	stw	r16,0(sp)
 800a668:	040200b4 	movhi	r16,2050
 800a66c:	dc400115 	stw	r17,4(sp)
 800a670:	84017004 	addi	r16,r16,1472
 800a674:	2023883a 	mov	r17,r4
 800a678:	2809883a 	mov	r4,r5
 800a67c:	dfc00215 	stw	ra,8(sp)
 800a680:	80000015 	stw	zero,0(r16)
 800a684:	80100880 	call	8010088 <sbrk>
 800a688:	00ffffc4 	movi	r3,-1
 800a68c:	10c00526 	beq	r2,r3,800a6a4 <_sbrk_r+0x44>
 800a690:	dfc00217 	ldw	ra,8(sp)
 800a694:	dc400117 	ldw	r17,4(sp)
 800a698:	dc000017 	ldw	r16,0(sp)
 800a69c:	dec00304 	addi	sp,sp,12
 800a6a0:	f800283a 	ret
 800a6a4:	80c00017 	ldw	r3,0(r16)
 800a6a8:	183ff926 	beq	r3,zero,800a690 <__alt_data_end+0xfc00a690>
 800a6ac:	88c00015 	stw	r3,0(r17)
 800a6b0:	003ff706 	br	800a690 <__alt_data_end+0xfc00a690>

0800a6b4 <__sread>:
 800a6b4:	defffe04 	addi	sp,sp,-8
 800a6b8:	dc000015 	stw	r16,0(sp)
 800a6bc:	2821883a 	mov	r16,r5
 800a6c0:	2940038f 	ldh	r5,14(r5)
 800a6c4:	dfc00115 	stw	ra,4(sp)
 800a6c8:	800c2940 	call	800c294 <_read_r>
 800a6cc:	10000716 	blt	r2,zero,800a6ec <__sread+0x38>
 800a6d0:	80c01417 	ldw	r3,80(r16)
 800a6d4:	1887883a 	add	r3,r3,r2
 800a6d8:	80c01415 	stw	r3,80(r16)
 800a6dc:	dfc00117 	ldw	ra,4(sp)
 800a6e0:	dc000017 	ldw	r16,0(sp)
 800a6e4:	dec00204 	addi	sp,sp,8
 800a6e8:	f800283a 	ret
 800a6ec:	80c0030b 	ldhu	r3,12(r16)
 800a6f0:	18fbffcc 	andi	r3,r3,61439
 800a6f4:	80c0030d 	sth	r3,12(r16)
 800a6f8:	dfc00117 	ldw	ra,4(sp)
 800a6fc:	dc000017 	ldw	r16,0(sp)
 800a700:	dec00204 	addi	sp,sp,8
 800a704:	f800283a 	ret

0800a708 <__seofread>:
 800a708:	0005883a 	mov	r2,zero
 800a70c:	f800283a 	ret

0800a710 <__swrite>:
 800a710:	2880030b 	ldhu	r2,12(r5)
 800a714:	defffb04 	addi	sp,sp,-20
 800a718:	dcc00315 	stw	r19,12(sp)
 800a71c:	dc800215 	stw	r18,8(sp)
 800a720:	dc400115 	stw	r17,4(sp)
 800a724:	dc000015 	stw	r16,0(sp)
 800a728:	dfc00415 	stw	ra,16(sp)
 800a72c:	10c0400c 	andi	r3,r2,256
 800a730:	2821883a 	mov	r16,r5
 800a734:	2027883a 	mov	r19,r4
 800a738:	3025883a 	mov	r18,r6
 800a73c:	3823883a 	mov	r17,r7
 800a740:	18000526 	beq	r3,zero,800a758 <__swrite+0x48>
 800a744:	2940038f 	ldh	r5,14(r5)
 800a748:	000d883a 	mov	r6,zero
 800a74c:	01c00084 	movi	r7,2
 800a750:	800c2380 	call	800c238 <_lseek_r>
 800a754:	8080030b 	ldhu	r2,12(r16)
 800a758:	8140038f 	ldh	r5,14(r16)
 800a75c:	10bbffcc 	andi	r2,r2,61439
 800a760:	9809883a 	mov	r4,r19
 800a764:	900d883a 	mov	r6,r18
 800a768:	880f883a 	mov	r7,r17
 800a76c:	8080030d 	sth	r2,12(r16)
 800a770:	dfc00417 	ldw	ra,16(sp)
 800a774:	dcc00317 	ldw	r19,12(sp)
 800a778:	dc800217 	ldw	r18,8(sp)
 800a77c:	dc400117 	ldw	r17,4(sp)
 800a780:	dc000017 	ldw	r16,0(sp)
 800a784:	dec00504 	addi	sp,sp,20
 800a788:	800bd281 	jmpi	800bd28 <_write_r>

0800a78c <__sseek>:
 800a78c:	defffe04 	addi	sp,sp,-8
 800a790:	dc000015 	stw	r16,0(sp)
 800a794:	2821883a 	mov	r16,r5
 800a798:	2940038f 	ldh	r5,14(r5)
 800a79c:	dfc00115 	stw	ra,4(sp)
 800a7a0:	800c2380 	call	800c238 <_lseek_r>
 800a7a4:	00ffffc4 	movi	r3,-1
 800a7a8:	10c00826 	beq	r2,r3,800a7cc <__sseek+0x40>
 800a7ac:	80c0030b 	ldhu	r3,12(r16)
 800a7b0:	80801415 	stw	r2,80(r16)
 800a7b4:	18c40014 	ori	r3,r3,4096
 800a7b8:	80c0030d 	sth	r3,12(r16)
 800a7bc:	dfc00117 	ldw	ra,4(sp)
 800a7c0:	dc000017 	ldw	r16,0(sp)
 800a7c4:	dec00204 	addi	sp,sp,8
 800a7c8:	f800283a 	ret
 800a7cc:	80c0030b 	ldhu	r3,12(r16)
 800a7d0:	18fbffcc 	andi	r3,r3,61439
 800a7d4:	80c0030d 	sth	r3,12(r16)
 800a7d8:	dfc00117 	ldw	ra,4(sp)
 800a7dc:	dc000017 	ldw	r16,0(sp)
 800a7e0:	dec00204 	addi	sp,sp,8
 800a7e4:	f800283a 	ret

0800a7e8 <__sclose>:
 800a7e8:	2940038f 	ldh	r5,14(r5)
 800a7ec:	800bd841 	jmpi	800bd84 <_close_r>

0800a7f0 <strcmp>:
 800a7f0:	2144b03a 	or	r2,r4,r5
 800a7f4:	108000cc 	andi	r2,r2,3
 800a7f8:	1000171e 	bne	r2,zero,800a858 <strcmp+0x68>
 800a7fc:	20800017 	ldw	r2,0(r4)
 800a800:	28c00017 	ldw	r3,0(r5)
 800a804:	10c0141e 	bne	r2,r3,800a858 <strcmp+0x68>
 800a808:	027fbff4 	movhi	r9,65279
 800a80c:	4a7fbfc4 	addi	r9,r9,-257
 800a810:	0086303a 	nor	r3,zero,r2
 800a814:	02202074 	movhi	r8,32897
 800a818:	1245883a 	add	r2,r2,r9
 800a81c:	42202004 	addi	r8,r8,-32640
 800a820:	10c4703a 	and	r2,r2,r3
 800a824:	1204703a 	and	r2,r2,r8
 800a828:	10000226 	beq	r2,zero,800a834 <strcmp+0x44>
 800a82c:	00001706 	br	800a88c <strcmp+0x9c>
 800a830:	1000161e 	bne	r2,zero,800a88c <strcmp+0x9c>
 800a834:	21000104 	addi	r4,r4,4
 800a838:	20c00017 	ldw	r3,0(r4)
 800a83c:	29400104 	addi	r5,r5,4
 800a840:	29800017 	ldw	r6,0(r5)
 800a844:	1a4f883a 	add	r7,r3,r9
 800a848:	00c4303a 	nor	r2,zero,r3
 800a84c:	3884703a 	and	r2,r7,r2
 800a850:	1204703a 	and	r2,r2,r8
 800a854:	19bff626 	beq	r3,r6,800a830 <__alt_data_end+0xfc00a830>
 800a858:	20800007 	ldb	r2,0(r4)
 800a85c:	1000051e 	bne	r2,zero,800a874 <strcmp+0x84>
 800a860:	00000606 	br	800a87c <strcmp+0x8c>
 800a864:	21000044 	addi	r4,r4,1
 800a868:	20800007 	ldb	r2,0(r4)
 800a86c:	29400044 	addi	r5,r5,1
 800a870:	10000226 	beq	r2,zero,800a87c <strcmp+0x8c>
 800a874:	28c00007 	ldb	r3,0(r5)
 800a878:	10fffa26 	beq	r2,r3,800a864 <__alt_data_end+0xfc00a864>
 800a87c:	20800003 	ldbu	r2,0(r4)
 800a880:	28c00003 	ldbu	r3,0(r5)
 800a884:	10c5c83a 	sub	r2,r2,r3
 800a888:	f800283a 	ret
 800a88c:	0005883a 	mov	r2,zero
 800a890:	f800283a 	ret

0800a894 <__sprint_r.part.0>:
 800a894:	28801917 	ldw	r2,100(r5)
 800a898:	defff604 	addi	sp,sp,-40
 800a89c:	dd400515 	stw	r21,20(sp)
 800a8a0:	dcc00315 	stw	r19,12(sp)
 800a8a4:	dfc00915 	stw	ra,36(sp)
 800a8a8:	df000815 	stw	fp,32(sp)
 800a8ac:	ddc00715 	stw	r23,28(sp)
 800a8b0:	dd800615 	stw	r22,24(sp)
 800a8b4:	dd000415 	stw	r20,16(sp)
 800a8b8:	dc800215 	stw	r18,8(sp)
 800a8bc:	dc400115 	stw	r17,4(sp)
 800a8c0:	dc000015 	stw	r16,0(sp)
 800a8c4:	1088000c 	andi	r2,r2,8192
 800a8c8:	2827883a 	mov	r19,r5
 800a8cc:	302b883a 	mov	r21,r6
 800a8d0:	10002d26 	beq	r2,zero,800a988 <__sprint_r.part.0+0xf4>
 800a8d4:	30800217 	ldw	r2,8(r6)
 800a8d8:	35800017 	ldw	r22,0(r6)
 800a8dc:	10002826 	beq	r2,zero,800a980 <__sprint_r.part.0+0xec>
 800a8e0:	2029883a 	mov	r20,r4
 800a8e4:	b5c00104 	addi	r23,r22,4
 800a8e8:	04bfffc4 	movi	r18,-1
 800a8ec:	bc400017 	ldw	r17,0(r23)
 800a8f0:	b4000017 	ldw	r16,0(r22)
 800a8f4:	0039883a 	mov	fp,zero
 800a8f8:	8822d0ba 	srli	r17,r17,2
 800a8fc:	04400316 	blt	zero,r17,800a90c <__sprint_r.part.0+0x78>
 800a900:	00001706 	br	800a960 <__sprint_r.part.0+0xcc>
 800a904:	84000104 	addi	r16,r16,4
 800a908:	8f001526 	beq	r17,fp,800a960 <__sprint_r.part.0+0xcc>
 800a90c:	81400017 	ldw	r5,0(r16)
 800a910:	a009883a 	mov	r4,r20
 800a914:	980d883a 	mov	r6,r19
 800a918:	800bfb00 	call	800bfb0 <_fputwc_r>
 800a91c:	e7000044 	addi	fp,fp,1
 800a920:	14bff81e 	bne	r2,r18,800a904 <__alt_data_end+0xfc00a904>
 800a924:	9005883a 	mov	r2,r18
 800a928:	a8000215 	stw	zero,8(r21)
 800a92c:	a8000115 	stw	zero,4(r21)
 800a930:	dfc00917 	ldw	ra,36(sp)
 800a934:	df000817 	ldw	fp,32(sp)
 800a938:	ddc00717 	ldw	r23,28(sp)
 800a93c:	dd800617 	ldw	r22,24(sp)
 800a940:	dd400517 	ldw	r21,20(sp)
 800a944:	dd000417 	ldw	r20,16(sp)
 800a948:	dcc00317 	ldw	r19,12(sp)
 800a94c:	dc800217 	ldw	r18,8(sp)
 800a950:	dc400117 	ldw	r17,4(sp)
 800a954:	dc000017 	ldw	r16,0(sp)
 800a958:	dec00a04 	addi	sp,sp,40
 800a95c:	f800283a 	ret
 800a960:	a8c00217 	ldw	r3,8(r21)
 800a964:	8c63883a 	add	r17,r17,r17
 800a968:	8c63883a 	add	r17,r17,r17
 800a96c:	1c45c83a 	sub	r2,r3,r17
 800a970:	a8800215 	stw	r2,8(r21)
 800a974:	b5800204 	addi	r22,r22,8
 800a978:	bdc00204 	addi	r23,r23,8
 800a97c:	103fdb1e 	bne	r2,zero,800a8ec <__alt_data_end+0xfc00a8ec>
 800a980:	0005883a 	mov	r2,zero
 800a984:	003fe806 	br	800a928 <__alt_data_end+0xfc00a928>
 800a988:	8007d040 	call	8007d04 <__sfvwrite_r>
 800a98c:	003fe606 	br	800a928 <__alt_data_end+0xfc00a928>

0800a990 <__sprint_r>:
 800a990:	30c00217 	ldw	r3,8(r6)
 800a994:	18000126 	beq	r3,zero,800a99c <__sprint_r+0xc>
 800a998:	800a8941 	jmpi	800a894 <__sprint_r.part.0>
 800a99c:	30000115 	stw	zero,4(r6)
 800a9a0:	0005883a 	mov	r2,zero
 800a9a4:	f800283a 	ret

0800a9a8 <___vfiprintf_internal_r>:
 800a9a8:	defeca04 	addi	sp,sp,-1240
 800a9ac:	dd813215 	stw	r22,1224(sp)
 800a9b0:	dd013015 	stw	r20,1216(sp)
 800a9b4:	dfc13515 	stw	ra,1236(sp)
 800a9b8:	df013415 	stw	fp,1232(sp)
 800a9bc:	ddc13315 	stw	r23,1228(sp)
 800a9c0:	dd413115 	stw	r21,1220(sp)
 800a9c4:	dcc12f15 	stw	r19,1212(sp)
 800a9c8:	dc812e15 	stw	r18,1208(sp)
 800a9cc:	dc412d15 	stw	r17,1204(sp)
 800a9d0:	dc012c15 	stw	r16,1200(sp)
 800a9d4:	d9012015 	stw	r4,1152(sp)
 800a9d8:	d9c12115 	stw	r7,1156(sp)
 800a9dc:	2829883a 	mov	r20,r5
 800a9e0:	302d883a 	mov	r22,r6
 800a9e4:	20000226 	beq	r4,zero,800a9f0 <___vfiprintf_internal_r+0x48>
 800a9e8:	20800e17 	ldw	r2,56(r4)
 800a9ec:	1001d326 	beq	r2,zero,800b13c <___vfiprintf_internal_r+0x794>
 800a9f0:	a0c0030b 	ldhu	r3,12(r20)
 800a9f4:	1908000c 	andi	r4,r3,8192
 800a9f8:	1805883a 	mov	r2,r3
 800a9fc:	2000071e 	bne	r4,zero,800aa1c <___vfiprintf_internal_r+0x74>
 800aa00:	a1001917 	ldw	r4,100(r20)
 800aa04:	18880014 	ori	r2,r3,8192
 800aa08:	00f7ffc4 	movi	r3,-8193
 800aa0c:	20c8703a 	and	r4,r4,r3
 800aa10:	a080030d 	sth	r2,12(r20)
 800aa14:	1007883a 	mov	r3,r2
 800aa18:	a1001915 	stw	r4,100(r20)
 800aa1c:	1100020c 	andi	r4,r2,8
 800aa20:	20018926 	beq	r4,zero,800b048 <___vfiprintf_internal_r+0x6a0>
 800aa24:	a1000417 	ldw	r4,16(r20)
 800aa28:	20018726 	beq	r4,zero,800b048 <___vfiprintf_internal_r+0x6a0>
 800aa2c:	1080068c 	andi	r2,r2,26
 800aa30:	01000284 	movi	r4,10
 800aa34:	11018d26 	beq	r2,r4,800b06c <___vfiprintf_internal_r+0x6c4>
 800aa38:	da810a04 	addi	r10,sp,1064
 800aa3c:	dac109c4 	addi	r11,sp,1063
 800aa40:	070200b4 	movhi	fp,2050
 800aa44:	05c200b4 	movhi	r23,2050
 800aa48:	da811e15 	stw	r10,1144(sp)
 800aa4c:	52d5c83a 	sub	r10,r10,r11
 800aa50:	e733a004 	addi	fp,fp,-12672
 800aa54:	bdf39c04 	addi	r23,r23,-12688
 800aa58:	dac11f15 	stw	r11,1148(sp)
 800aa5c:	dec11a15 	stw	sp,1128(sp)
 800aa60:	d8011c15 	stw	zero,1136(sp)
 800aa64:	d8011b15 	stw	zero,1132(sp)
 800aa68:	d8012615 	stw	zero,1176(sp)
 800aa6c:	d8012215 	stw	zero,1160(sp)
 800aa70:	da812715 	stw	r10,1180(sp)
 800aa74:	d811883a 	mov	r8,sp
 800aa78:	b021883a 	mov	r16,r22
 800aa7c:	80800007 	ldb	r2,0(r16)
 800aa80:	10039c26 	beq	r2,zero,800b8f4 <___vfiprintf_internal_r+0xf4c>
 800aa84:	01000944 	movi	r4,37
 800aa88:	11039a26 	beq	r2,r4,800b8f4 <___vfiprintf_internal_r+0xf4c>
 800aa8c:	8005883a 	mov	r2,r16
 800aa90:	00000106 	br	800aa98 <___vfiprintf_internal_r+0xf0>
 800aa94:	19000326 	beq	r3,r4,800aaa4 <___vfiprintf_internal_r+0xfc>
 800aa98:	10800044 	addi	r2,r2,1
 800aa9c:	10c00007 	ldb	r3,0(r2)
 800aaa0:	183ffc1e 	bne	r3,zero,800aa94 <__alt_data_end+0xfc00aa94>
 800aaa4:	1425c83a 	sub	r18,r2,r16
 800aaa8:	1023883a 	mov	r17,r2
 800aaac:	90001026 	beq	r18,zero,800aaf0 <___vfiprintf_internal_r+0x148>
 800aab0:	d8c11c17 	ldw	r3,1136(sp)
 800aab4:	d8811b17 	ldw	r2,1132(sp)
 800aab8:	44000015 	stw	r16,0(r8)
 800aabc:	90c7883a 	add	r3,r18,r3
 800aac0:	10800044 	addi	r2,r2,1
 800aac4:	44800115 	stw	r18,4(r8)
 800aac8:	d8c11c15 	stw	r3,1136(sp)
 800aacc:	d8811b15 	stw	r2,1132(sp)
 800aad0:	010001c4 	movi	r4,7
 800aad4:	2080750e 	bge	r4,r2,800acac <___vfiprintf_internal_r+0x304>
 800aad8:	18039d1e 	bne	r3,zero,800b950 <___vfiprintf_internal_r+0xfa8>
 800aadc:	dac12217 	ldw	r11,1160(sp)
 800aae0:	d8011b15 	stw	zero,1132(sp)
 800aae4:	d811883a 	mov	r8,sp
 800aae8:	5c97883a 	add	r11,r11,r18
 800aaec:	dac12215 	stw	r11,1160(sp)
 800aaf0:	88800007 	ldb	r2,0(r17)
 800aaf4:	1002e026 	beq	r2,zero,800b678 <___vfiprintf_internal_r+0xcd0>
 800aaf8:	88c00047 	ldb	r3,1(r17)
 800aafc:	8c000044 	addi	r16,r17,1
 800ab00:	d8011d85 	stb	zero,1142(sp)
 800ab04:	000d883a 	mov	r6,zero
 800ab08:	027fffc4 	movi	r9,-1
 800ab0c:	0027883a 	mov	r19,zero
 800ab10:	002b883a 	mov	r21,zero
 800ab14:	01001604 	movi	r4,88
 800ab18:	01400244 	movi	r5,9
 800ab1c:	03000a84 	movi	r12,42
 800ab20:	01c01b04 	movi	r7,108
 800ab24:	84000044 	addi	r16,r16,1
 800ab28:	18bff804 	addi	r2,r3,-32
 800ab2c:	20825f36 	bltu	r4,r2,800b4ac <___vfiprintf_internal_r+0xb04>
 800ab30:	100490ba 	slli	r2,r2,2
 800ab34:	02820074 	movhi	r10,2049
 800ab38:	52aad204 	addi	r10,r10,-21688
 800ab3c:	1285883a 	add	r2,r2,r10
 800ab40:	10800017 	ldw	r2,0(r2)
 800ab44:	1000683a 	jmp	r2
 800ab48:	0800b31c 	xori	zero,at,716
 800ab4c:	0800b4ac 	andhi	zero,at,722
 800ab50:	0800b4ac 	andhi	zero,at,722
 800ab54:	0800b4a0 	cmpeqi	zero,at,722
 800ab58:	0800b4ac 	andhi	zero,at,722
 800ab5c:	0800b4ac 	andhi	zero,at,722
 800ab60:	0800b4ac 	andhi	zero,at,722
 800ab64:	0800b4ac 	andhi	zero,at,722
 800ab68:	0800b4ac 	andhi	zero,at,722
 800ab6c:	0800b4ac 	andhi	zero,at,722
 800ab70:	0800b478 	rdprs	zero,at,721
 800ab74:	0800b494 	ori	zero,at,722
 800ab78:	0800b4ac 	andhi	zero,at,722
 800ab7c:	0800b14c 	andi	zero,at,709
 800ab80:	0800b2ac 	andhi	zero,at,714
 800ab84:	0800b4ac 	andhi	zero,at,722
 800ab88:	0800b230 	cmpltui	zero,at,712
 800ab8c:	0800b23c 	xorhi	zero,at,712
 800ab90:	0800b23c 	xorhi	zero,at,712
 800ab94:	0800b23c 	xorhi	zero,at,712
 800ab98:	0800b23c 	xorhi	zero,at,712
 800ab9c:	0800b23c 	xorhi	zero,at,712
 800aba0:	0800b23c 	xorhi	zero,at,712
 800aba4:	0800b23c 	xorhi	zero,at,712
 800aba8:	0800b23c 	xorhi	zero,at,712
 800abac:	0800b23c 	xorhi	zero,at,712
 800abb0:	0800b4ac 	andhi	zero,at,722
 800abb4:	0800b4ac 	andhi	zero,at,722
 800abb8:	0800b4ac 	andhi	zero,at,722
 800abbc:	0800b4ac 	andhi	zero,at,722
 800abc0:	0800b4ac 	andhi	zero,at,722
 800abc4:	0800b4ac 	andhi	zero,at,722
 800abc8:	0800b4ac 	andhi	zero,at,722
 800abcc:	0800b4ac 	andhi	zero,at,722
 800abd0:	0800b4ac 	andhi	zero,at,722
 800abd4:	0800b4ac 	andhi	zero,at,722
 800abd8:	0800b268 	cmpgeui	zero,at,713
 800abdc:	0800b4ac 	andhi	zero,at,722
 800abe0:	0800b4ac 	andhi	zero,at,722
 800abe4:	0800b4ac 	andhi	zero,at,722
 800abe8:	0800b4ac 	andhi	zero,at,722
 800abec:	0800b4ac 	andhi	zero,at,722
 800abf0:	0800b4ac 	andhi	zero,at,722
 800abf4:	0800b4ac 	andhi	zero,at,722
 800abf8:	0800b4ac 	andhi	zero,at,722
 800abfc:	0800b4ac 	andhi	zero,at,722
 800ac00:	0800b4ac 	andhi	zero,at,722
 800ac04:	0800acfc 	xorhi	zero,at,691
 800ac08:	0800b4ac 	andhi	zero,at,722
 800ac0c:	0800b4ac 	andhi	zero,at,722
 800ac10:	0800b4ac 	andhi	zero,at,722
 800ac14:	0800b4ac 	andhi	zero,at,722
 800ac18:	0800b4ac 	andhi	zero,at,722
 800ac1c:	0800acc0 	call	800acc <__reset-0x77ff534>
 800ac20:	0800b4ac 	andhi	zero,at,722
 800ac24:	0800b4ac 	andhi	zero,at,722
 800ac28:	0800b1a8 	cmpgeui	zero,at,710
 800ac2c:	0800b4ac 	andhi	zero,at,722
 800ac30:	0800b4ac 	andhi	zero,at,722
 800ac34:	0800b4ac 	andhi	zero,at,722
 800ac38:	0800b4ac 	andhi	zero,at,722
 800ac3c:	0800b4ac 	andhi	zero,at,722
 800ac40:	0800b4ac 	andhi	zero,at,722
 800ac44:	0800b4ac 	andhi	zero,at,722
 800ac48:	0800b4ac 	andhi	zero,at,722
 800ac4c:	0800b4ac 	andhi	zero,at,722
 800ac50:	0800b4ac 	andhi	zero,at,722
 800ac54:	0800b200 	call	800b20 <__reset-0x77ff4e0>
 800ac58:	0800b398 	cmpnei	zero,at,718
 800ac5c:	0800b4ac 	andhi	zero,at,722
 800ac60:	0800b4ac 	andhi	zero,at,722
 800ac64:	0800b4ac 	andhi	zero,at,722
 800ac68:	0800b420 	cmpeqi	zero,at,720
 800ac6c:	0800b398 	cmpnei	zero,at,718
 800ac70:	0800b4ac 	andhi	zero,at,722
 800ac74:	0800b4ac 	andhi	zero,at,722
 800ac78:	0800b42c 	andhi	zero,at,720
 800ac7c:	0800b4ac 	andhi	zero,at,722
 800ac80:	0800b2ec 	andhi	zero,at,715
 800ac84:	0800ad00 	call	800ad0 <__reset-0x77ff530>
 800ac88:	0800b3d4 	ori	zero,at,719
 800ac8c:	0800b414 	ori	zero,at,720
 800ac90:	0800b4ac 	andhi	zero,at,722
 800ac94:	0800b338 	rdprs	zero,at,716
 800ac98:	0800b4ac 	andhi	zero,at,722
 800ac9c:	0800acc4 	addi	zero,at,691
 800aca0:	0800b4ac 	andhi	zero,at,722
 800aca4:	0800b4ac 	andhi	zero,at,722
 800aca8:	0800b43c 	xorhi	zero,at,720
 800acac:	42000204 	addi	r8,r8,8
 800acb0:	dac12217 	ldw	r11,1160(sp)
 800acb4:	5c97883a 	add	r11,r11,r18
 800acb8:	dac12215 	stw	r11,1160(sp)
 800acbc:	003f8c06 	br	800aaf0 <__alt_data_end+0xfc00aaf0>
 800acc0:	ad400414 	ori	r21,r21,16
 800acc4:	a880080c 	andi	r2,r21,32
 800acc8:	10012f1e 	bne	r2,zero,800b188 <___vfiprintf_internal_r+0x7e0>
 800accc:	a880040c 	andi	r2,r21,16
 800acd0:	1001ff1e 	bne	r2,zero,800b4d0 <___vfiprintf_internal_r+0xb28>
 800acd4:	a880100c 	andi	r2,r21,64
 800acd8:	1001fd26 	beq	r2,zero,800b4d0 <___vfiprintf_internal_r+0xb28>
 800acdc:	da812117 	ldw	r10,1156(sp)
 800ace0:	002d883a 	mov	r22,zero
 800ace4:	00800044 	movi	r2,1
 800ace8:	5480000b 	ldhu	r18,0(r10)
 800acec:	52800104 	addi	r10,r10,4
 800acf0:	da812115 	stw	r10,1156(sp)
 800acf4:	9009883a 	mov	r4,r18
 800acf8:	00000a06 	br	800ad24 <___vfiprintf_internal_r+0x37c>
 800acfc:	ad400414 	ori	r21,r21,16
 800ad00:	a880080c 	andi	r2,r21,32
 800ad04:	10011426 	beq	r2,zero,800b158 <___vfiprintf_internal_r+0x7b0>
 800ad08:	da812117 	ldw	r10,1156(sp)
 800ad0c:	0005883a 	mov	r2,zero
 800ad10:	54800017 	ldw	r18,0(r10)
 800ad14:	55800117 	ldw	r22,4(r10)
 800ad18:	52800204 	addi	r10,r10,8
 800ad1c:	da812115 	stw	r10,1156(sp)
 800ad20:	9588b03a 	or	r4,r18,r22
 800ad24:	d8011d85 	stb	zero,1142(sp)
 800ad28:	4823883a 	mov	r17,r9
 800ad2c:	0019883a 	mov	r12,zero
 800ad30:	48000216 	blt	r9,zero,800ad3c <___vfiprintf_internal_r+0x394>
 800ad34:	00ffdfc4 	movi	r3,-129
 800ad38:	a8ea703a 	and	r21,r21,r3
 800ad3c:	2002221e 	bne	r4,zero,800b5c8 <___vfiprintf_internal_r+0xc20>
 800ad40:	4802c726 	beq	r9,zero,800b860 <___vfiprintf_internal_r+0xeb8>
 800ad44:	10803fcc 	andi	r2,r2,255
 800ad48:	00c00044 	movi	r3,1
 800ad4c:	10c24426 	beq	r2,r3,800b660 <___vfiprintf_internal_r+0xcb8>
 800ad50:	00c00084 	movi	r3,2
 800ad54:	10c2cc26 	beq	r2,r3,800b888 <___vfiprintf_internal_r+0xee0>
 800ad58:	d8c10a04 	addi	r3,sp,1064
 800ad5c:	9008d0fa 	srli	r4,r18,3
 800ad60:	b00a977a 	slli	r5,r22,29
 800ad64:	b02cd0fa 	srli	r22,r22,3
 800ad68:	948001cc 	andi	r18,r18,7
 800ad6c:	90800c04 	addi	r2,r18,48
 800ad70:	18ffffc4 	addi	r3,r3,-1
 800ad74:	2924b03a 	or	r18,r5,r4
 800ad78:	18800005 	stb	r2,0(r3)
 800ad7c:	9588b03a 	or	r4,r18,r22
 800ad80:	203ff61e 	bne	r4,zero,800ad5c <__alt_data_end+0xfc00ad5c>
 800ad84:	a900004c 	andi	r4,r21,1
 800ad88:	d8c12415 	stw	r3,1168(sp)
 800ad8c:	2002fb1e 	bne	r4,zero,800b97c <___vfiprintf_internal_r+0xfd4>
 800ad90:	da811e17 	ldw	r10,1144(sp)
 800ad94:	50e3c83a 	sub	r17,r10,r3
 800ad98:	8825883a 	mov	r18,r17
 800ad9c:	8a40010e 	bge	r17,r9,800ada4 <___vfiprintf_internal_r+0x3fc>
 800ada0:	4825883a 	mov	r18,r9
 800ada4:	63003fcc 	andi	r12,r12,255
 800ada8:	6300201c 	xori	r12,r12,128
 800adac:	633fe004 	addi	r12,r12,-128
 800adb0:	60000126 	beq	r12,zero,800adb8 <___vfiprintf_internal_r+0x410>
 800adb4:	94800044 	addi	r18,r18,1
 800adb8:	ab80008c 	andi	r14,r21,2
 800adbc:	70000126 	beq	r14,zero,800adc4 <___vfiprintf_internal_r+0x41c>
 800adc0:	94800084 	addi	r18,r18,2
 800adc4:	ad80210c 	andi	r22,r21,132
 800adc8:	b001df1e 	bne	r22,zero,800b548 <___vfiprintf_internal_r+0xba0>
 800adcc:	9c8fc83a 	sub	r7,r19,r18
 800add0:	01c1dd0e 	bge	zero,r7,800b548 <___vfiprintf_internal_r+0xba0>
 800add4:	03000404 	movi	r12,16
 800add8:	d8811c17 	ldw	r2,1136(sp)
 800addc:	61c3920e 	bge	r12,r7,800bc28 <___vfiprintf_internal_r+0x1280>
 800ade0:	028200b4 	movhi	r10,2050
 800ade4:	52b3a004 	addi	r10,r10,-12672
 800ade8:	dc012915 	stw	r16,1188(sp)
 800adec:	d9811b17 	ldw	r6,1132(sp)
 800adf0:	da812315 	stw	r10,1164(sp)
 800adf4:	00c001c4 	movi	r3,7
 800adf8:	da412515 	stw	r9,1172(sp)
 800adfc:	db812815 	stw	r14,1184(sp)
 800ae00:	3821883a 	mov	r16,r7
 800ae04:	00000506 	br	800ae1c <___vfiprintf_internal_r+0x474>
 800ae08:	31400084 	addi	r5,r6,2
 800ae0c:	42000204 	addi	r8,r8,8
 800ae10:	200d883a 	mov	r6,r4
 800ae14:	843ffc04 	addi	r16,r16,-16
 800ae18:	64000d0e 	bge	r12,r16,800ae50 <___vfiprintf_internal_r+0x4a8>
 800ae1c:	10800404 	addi	r2,r2,16
 800ae20:	31000044 	addi	r4,r6,1
 800ae24:	47000015 	stw	fp,0(r8)
 800ae28:	43000115 	stw	r12,4(r8)
 800ae2c:	d8811c15 	stw	r2,1136(sp)
 800ae30:	d9011b15 	stw	r4,1132(sp)
 800ae34:	193ff40e 	bge	r3,r4,800ae08 <__alt_data_end+0xfc00ae08>
 800ae38:	1001b51e 	bne	r2,zero,800b510 <___vfiprintf_internal_r+0xb68>
 800ae3c:	843ffc04 	addi	r16,r16,-16
 800ae40:	000d883a 	mov	r6,zero
 800ae44:	01400044 	movi	r5,1
 800ae48:	d811883a 	mov	r8,sp
 800ae4c:	643ff316 	blt	r12,r16,800ae1c <__alt_data_end+0xfc00ae1c>
 800ae50:	800f883a 	mov	r7,r16
 800ae54:	da412517 	ldw	r9,1172(sp)
 800ae58:	db812817 	ldw	r14,1184(sp)
 800ae5c:	dc012917 	ldw	r16,1188(sp)
 800ae60:	dac12317 	ldw	r11,1164(sp)
 800ae64:	3887883a 	add	r3,r7,r2
 800ae68:	41c00115 	stw	r7,4(r8)
 800ae6c:	42c00015 	stw	r11,0(r8)
 800ae70:	d8c11c15 	stw	r3,1136(sp)
 800ae74:	d9411b15 	stw	r5,1132(sp)
 800ae78:	008001c4 	movi	r2,7
 800ae7c:	11429316 	blt	r2,r5,800b8cc <___vfiprintf_internal_r+0xf24>
 800ae80:	d9011d87 	ldb	r4,1142(sp)
 800ae84:	42000204 	addi	r8,r8,8
 800ae88:	28800044 	addi	r2,r5,1
 800ae8c:	2001b31e 	bne	r4,zero,800b55c <___vfiprintf_internal_r+0xbb4>
 800ae90:	70000c26 	beq	r14,zero,800aec4 <___vfiprintf_internal_r+0x51c>
 800ae94:	d9011d04 	addi	r4,sp,1140
 800ae98:	18c00084 	addi	r3,r3,2
 800ae9c:	41000015 	stw	r4,0(r8)
 800aea0:	01000084 	movi	r4,2
 800aea4:	41000115 	stw	r4,4(r8)
 800aea8:	d8c11c15 	stw	r3,1136(sp)
 800aeac:	d8811b15 	stw	r2,1132(sp)
 800aeb0:	010001c4 	movi	r4,7
 800aeb4:	20826516 	blt	r4,r2,800b84c <___vfiprintf_internal_r+0xea4>
 800aeb8:	100b883a 	mov	r5,r2
 800aebc:	42000204 	addi	r8,r8,8
 800aec0:	10800044 	addi	r2,r2,1
 800aec4:	01002004 	movi	r4,128
 800aec8:	b1021a26 	beq	r22,r4,800b734 <___vfiprintf_internal_r+0xd8c>
 800aecc:	4c6dc83a 	sub	r22,r9,r17
 800aed0:	0580230e 	bge	zero,r22,800af60 <___vfiprintf_internal_r+0x5b8>
 800aed4:	01c00404 	movi	r7,16
 800aed8:	3d83300e 	bge	r7,r22,800bb9c <___vfiprintf_internal_r+0x11f4>
 800aedc:	008200b4 	movhi	r2,2050
 800aee0:	10b39c04 	addi	r2,r2,-12688
 800aee4:	d8812315 	stw	r2,1164(sp)
 800aee8:	030001c4 	movi	r12,7
 800aeec:	00000506 	br	800af04 <___vfiprintf_internal_r+0x55c>
 800aef0:	28800084 	addi	r2,r5,2
 800aef4:	42000204 	addi	r8,r8,8
 800aef8:	200b883a 	mov	r5,r4
 800aefc:	b5bffc04 	addi	r22,r22,-16
 800af00:	3d800d0e 	bge	r7,r22,800af38 <___vfiprintf_internal_r+0x590>
 800af04:	18c00404 	addi	r3,r3,16
 800af08:	29000044 	addi	r4,r5,1
 800af0c:	45c00015 	stw	r23,0(r8)
 800af10:	41c00115 	stw	r7,4(r8)
 800af14:	d8c11c15 	stw	r3,1136(sp)
 800af18:	d9011b15 	stw	r4,1132(sp)
 800af1c:	613ff40e 	bge	r12,r4,800aef0 <__alt_data_end+0xfc00aef0>
 800af20:	18019b1e 	bne	r3,zero,800b590 <___vfiprintf_internal_r+0xbe8>
 800af24:	b5bffc04 	addi	r22,r22,-16
 800af28:	000b883a 	mov	r5,zero
 800af2c:	00800044 	movi	r2,1
 800af30:	d811883a 	mov	r8,sp
 800af34:	3dbff316 	blt	r7,r22,800af04 <__alt_data_end+0xfc00af04>
 800af38:	da812317 	ldw	r10,1164(sp)
 800af3c:	1d87883a 	add	r3,r3,r22
 800af40:	45800115 	stw	r22,4(r8)
 800af44:	42800015 	stw	r10,0(r8)
 800af48:	d8c11c15 	stw	r3,1136(sp)
 800af4c:	d8811b15 	stw	r2,1132(sp)
 800af50:	010001c4 	movi	r4,7
 800af54:	2081dd16 	blt	r4,r2,800b6cc <___vfiprintf_internal_r+0xd24>
 800af58:	42000204 	addi	r8,r8,8
 800af5c:	10800044 	addi	r2,r2,1
 800af60:	da812417 	ldw	r10,1168(sp)
 800af64:	1c47883a 	add	r3,r3,r17
 800af68:	44400115 	stw	r17,4(r8)
 800af6c:	42800015 	stw	r10,0(r8)
 800af70:	d8c11c15 	stw	r3,1136(sp)
 800af74:	d8811b15 	stw	r2,1132(sp)
 800af78:	010001c4 	movi	r4,7
 800af7c:	2081dc0e 	bge	r4,r2,800b6f0 <___vfiprintf_internal_r+0xd48>
 800af80:	1802611e 	bne	r3,zero,800b908 <___vfiprintf_internal_r+0xf60>
 800af84:	d8011b15 	stw	zero,1132(sp)
 800af88:	aac0010c 	andi	r11,r21,4
 800af8c:	58002726 	beq	r11,zero,800b02c <___vfiprintf_internal_r+0x684>
 800af90:	9ca3c83a 	sub	r17,r19,r18
 800af94:	d811883a 	mov	r8,sp
 800af98:	0443510e 	bge	zero,r17,800bce0 <___vfiprintf_internal_r+0x1338>
 800af9c:	01c00404 	movi	r7,16
 800afa0:	3c43320e 	bge	r7,r17,800bc6c <___vfiprintf_internal_r+0x12c4>
 800afa4:	008200b4 	movhi	r2,2050
 800afa8:	10b3a004 	addi	r2,r2,-12672
 800afac:	d9011b17 	ldw	r4,1132(sp)
 800afb0:	d8812315 	stw	r2,1164(sp)
 800afb4:	382d883a 	mov	r22,r7
 800afb8:	054001c4 	movi	r21,7
 800afbc:	00000506 	br	800afd4 <___vfiprintf_internal_r+0x62c>
 800afc0:	21400084 	addi	r5,r4,2
 800afc4:	42000204 	addi	r8,r8,8
 800afc8:	1009883a 	mov	r4,r2
 800afcc:	8c7ffc04 	addi	r17,r17,-16
 800afd0:	b4400d0e 	bge	r22,r17,800b008 <___vfiprintf_internal_r+0x660>
 800afd4:	18c00404 	addi	r3,r3,16
 800afd8:	20800044 	addi	r2,r4,1
 800afdc:	47000015 	stw	fp,0(r8)
 800afe0:	45800115 	stw	r22,4(r8)
 800afe4:	d8c11c15 	stw	r3,1136(sp)
 800afe8:	d8811b15 	stw	r2,1132(sp)
 800afec:	a8bff40e 	bge	r21,r2,800afc0 <__alt_data_end+0xfc00afc0>
 800aff0:	1801ac1e 	bne	r3,zero,800b6a4 <___vfiprintf_internal_r+0xcfc>
 800aff4:	8c7ffc04 	addi	r17,r17,-16
 800aff8:	0009883a 	mov	r4,zero
 800affc:	01400044 	movi	r5,1
 800b000:	d811883a 	mov	r8,sp
 800b004:	b47ff316 	blt	r22,r17,800afd4 <__alt_data_end+0xfc00afd4>
 800b008:	da812317 	ldw	r10,1164(sp)
 800b00c:	1c47883a 	add	r3,r3,r17
 800b010:	44400115 	stw	r17,4(r8)
 800b014:	42800015 	stw	r10,0(r8)
 800b018:	d8c11c15 	stw	r3,1136(sp)
 800b01c:	d9411b15 	stw	r5,1132(sp)
 800b020:	008001c4 	movi	r2,7
 800b024:	1141b70e 	bge	r2,r5,800b704 <___vfiprintf_internal_r+0xd5c>
 800b028:	1802cf1e 	bne	r3,zero,800bb68 <___vfiprintf_internal_r+0x11c0>
 800b02c:	94c2ca16 	blt	r18,r19,800bb58 <___vfiprintf_internal_r+0x11b0>
 800b030:	dac12217 	ldw	r11,1160(sp)
 800b034:	5c97883a 	add	r11,r11,r18
 800b038:	dac12215 	stw	r11,1160(sp)
 800b03c:	d8011b15 	stw	zero,1132(sp)
 800b040:	d811883a 	mov	r8,sp
 800b044:	003e8d06 	br	800aa7c <__alt_data_end+0xfc00aa7c>
 800b048:	d9012017 	ldw	r4,1152(sp)
 800b04c:	a00b883a 	mov	r5,r20
 800b050:	80058a00 	call	80058a0 <__swsetup_r>
 800b054:	10002c1e 	bne	r2,zero,800b108 <___vfiprintf_internal_r+0x760>
 800b058:	a0c0030b 	ldhu	r3,12(r20)
 800b05c:	01000284 	movi	r4,10
 800b060:	1805883a 	mov	r2,r3
 800b064:	1080068c 	andi	r2,r2,26
 800b068:	113e731e 	bne	r2,r4,800aa38 <__alt_data_end+0xfc00aa38>
 800b06c:	a080038b 	ldhu	r2,14(r20)
 800b070:	113fffcc 	andi	r4,r2,65535
 800b074:	2120001c 	xori	r4,r4,32768
 800b078:	21200004 	addi	r4,r4,-32768
 800b07c:	203e6e16 	blt	r4,zero,800aa38 <__alt_data_end+0xfc00aa38>
 800b080:	a3001917 	ldw	r12,100(r20)
 800b084:	a2c00717 	ldw	r11,28(r20)
 800b088:	a2800917 	ldw	r10,36(r20)
 800b08c:	d9012017 	ldw	r4,1152(sp)
 800b090:	d9c12117 	ldw	r7,1156(sp)
 800b094:	02410004 	movi	r9,1024
 800b098:	18ffff4c 	andi	r3,r3,65533
 800b09c:	da4b883a 	add	r5,sp,r9
 800b0a0:	b00d883a 	mov	r6,r22
 800b0a4:	d8c1030d 	sth	r3,1036(sp)
 800b0a8:	db011915 	stw	r12,1124(sp)
 800b0ac:	d881038d 	sth	r2,1038(sp)
 800b0b0:	dac10715 	stw	r11,1052(sp)
 800b0b4:	da810915 	stw	r10,1060(sp)
 800b0b8:	dec10015 	stw	sp,1024(sp)
 800b0bc:	dec10415 	stw	sp,1040(sp)
 800b0c0:	da410215 	stw	r9,1032(sp)
 800b0c4:	da410515 	stw	r9,1044(sp)
 800b0c8:	d8010615 	stw	zero,1048(sp)
 800b0cc:	800a9a80 	call	800a9a8 <___vfiprintf_internal_r>
 800b0d0:	1021883a 	mov	r16,r2
 800b0d4:	10000416 	blt	r2,zero,800b0e8 <___vfiprintf_internal_r+0x740>
 800b0d8:	d9012017 	ldw	r4,1152(sp)
 800b0dc:	d9410004 	addi	r5,sp,1024
 800b0e0:	80072f80 	call	80072f8 <_fflush_r>
 800b0e4:	1002fc1e 	bne	r2,zero,800bcd8 <___vfiprintf_internal_r+0x1330>
 800b0e8:	d881030b 	ldhu	r2,1036(sp)
 800b0ec:	1080100c 	andi	r2,r2,64
 800b0f0:	10000326 	beq	r2,zero,800b100 <___vfiprintf_internal_r+0x758>
 800b0f4:	a080030b 	ldhu	r2,12(r20)
 800b0f8:	10801014 	ori	r2,r2,64
 800b0fc:	a080030d 	sth	r2,12(r20)
 800b100:	8005883a 	mov	r2,r16
 800b104:	00000106 	br	800b10c <___vfiprintf_internal_r+0x764>
 800b108:	00bfffc4 	movi	r2,-1
 800b10c:	dfc13517 	ldw	ra,1236(sp)
 800b110:	df013417 	ldw	fp,1232(sp)
 800b114:	ddc13317 	ldw	r23,1228(sp)
 800b118:	dd813217 	ldw	r22,1224(sp)
 800b11c:	dd413117 	ldw	r21,1220(sp)
 800b120:	dd013017 	ldw	r20,1216(sp)
 800b124:	dcc12f17 	ldw	r19,1212(sp)
 800b128:	dc812e17 	ldw	r18,1208(sp)
 800b12c:	dc412d17 	ldw	r17,1204(sp)
 800b130:	dc012c17 	ldw	r16,1200(sp)
 800b134:	dec13604 	addi	sp,sp,1240
 800b138:	f800283a 	ret
 800b13c:	80078a00 	call	80078a0 <__sinit>
 800b140:	003e2b06 	br	800a9f0 <__alt_data_end+0xfc00a9f0>
 800b144:	04e7c83a 	sub	r19,zero,r19
 800b148:	d8812115 	stw	r2,1156(sp)
 800b14c:	ad400114 	ori	r21,r21,4
 800b150:	80c00007 	ldb	r3,0(r16)
 800b154:	003e7306 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b158:	a880040c 	andi	r2,r21,16
 800b15c:	1000e41e 	bne	r2,zero,800b4f0 <___vfiprintf_internal_r+0xb48>
 800b160:	a880100c 	andi	r2,r21,64
 800b164:	1000e226 	beq	r2,zero,800b4f0 <___vfiprintf_internal_r+0xb48>
 800b168:	da812117 	ldw	r10,1156(sp)
 800b16c:	002d883a 	mov	r22,zero
 800b170:	0005883a 	mov	r2,zero
 800b174:	5480000b 	ldhu	r18,0(r10)
 800b178:	52800104 	addi	r10,r10,4
 800b17c:	da812115 	stw	r10,1156(sp)
 800b180:	9009883a 	mov	r4,r18
 800b184:	003ee706 	br	800ad24 <__alt_data_end+0xfc00ad24>
 800b188:	da812117 	ldw	r10,1156(sp)
 800b18c:	00800044 	movi	r2,1
 800b190:	54800017 	ldw	r18,0(r10)
 800b194:	55800117 	ldw	r22,4(r10)
 800b198:	52800204 	addi	r10,r10,8
 800b19c:	da812115 	stw	r10,1156(sp)
 800b1a0:	9588b03a 	or	r4,r18,r22
 800b1a4:	003edf06 	br	800ad24 <__alt_data_end+0xfc00ad24>
 800b1a8:	02c200b4 	movhi	r11,2050
 800b1ac:	5af29604 	addi	r11,r11,-13736
 800b1b0:	d9811d85 	stb	r6,1142(sp)
 800b1b4:	dac12615 	stw	r11,1176(sp)
 800b1b8:	a900080c 	andi	r4,r21,32
 800b1bc:	d8812117 	ldw	r2,1156(sp)
 800b1c0:	2000a526 	beq	r4,zero,800b458 <___vfiprintf_internal_r+0xab0>
 800b1c4:	da812117 	ldw	r10,1156(sp)
 800b1c8:	14800017 	ldw	r18,0(r2)
 800b1cc:	15800117 	ldw	r22,4(r2)
 800b1d0:	52800204 	addi	r10,r10,8
 800b1d4:	da812115 	stw	r10,1156(sp)
 800b1d8:	a880004c 	andi	r2,r21,1
 800b1dc:	1001d926 	beq	r2,zero,800b944 <___vfiprintf_internal_r+0xf9c>
 800b1e0:	9588b03a 	or	r4,r18,r22
 800b1e4:	20024426 	beq	r4,zero,800baf8 <___vfiprintf_internal_r+0x1150>
 800b1e8:	00800c04 	movi	r2,48
 800b1ec:	d8811d05 	stb	r2,1140(sp)
 800b1f0:	d8c11d45 	stb	r3,1141(sp)
 800b1f4:	ad400094 	ori	r21,r21,2
 800b1f8:	00800084 	movi	r2,2
 800b1fc:	003ec906 	br	800ad24 <__alt_data_end+0xfc00ad24>
 800b200:	da812117 	ldw	r10,1156(sp)
 800b204:	04800044 	movi	r18,1
 800b208:	dac10004 	addi	r11,sp,1024
 800b20c:	50800017 	ldw	r2,0(r10)
 800b210:	52800104 	addi	r10,r10,4
 800b214:	d8011d85 	stb	zero,1142(sp)
 800b218:	d8810005 	stb	r2,1024(sp)
 800b21c:	da812115 	stw	r10,1156(sp)
 800b220:	9023883a 	mov	r17,r18
 800b224:	dac12415 	stw	r11,1168(sp)
 800b228:	0013883a 	mov	r9,zero
 800b22c:	003ee206 	br	800adb8 <__alt_data_end+0xfc00adb8>
 800b230:	ad402014 	ori	r21,r21,128
 800b234:	80c00007 	ldb	r3,0(r16)
 800b238:	003e3a06 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b23c:	8015883a 	mov	r10,r16
 800b240:	0027883a 	mov	r19,zero
 800b244:	18bff404 	addi	r2,r3,-48
 800b248:	50c00007 	ldb	r3,0(r10)
 800b24c:	9cc002a4 	muli	r19,r19,10
 800b250:	84000044 	addi	r16,r16,1
 800b254:	8015883a 	mov	r10,r16
 800b258:	98a7883a 	add	r19,r19,r2
 800b25c:	18bff404 	addi	r2,r3,-48
 800b260:	28bff92e 	bgeu	r5,r2,800b248 <__alt_data_end+0xfc00b248>
 800b264:	003e3006 	br	800ab28 <__alt_data_end+0xfc00ab28>
 800b268:	ad400414 	ori	r21,r21,16
 800b26c:	d9811d85 	stb	r6,1142(sp)
 800b270:	a880080c 	andi	r2,r21,32
 800b274:	d8c12117 	ldw	r3,1156(sp)
 800b278:	10004b26 	beq	r2,zero,800b3a8 <___vfiprintf_internal_r+0xa00>
 800b27c:	da812117 	ldw	r10,1156(sp)
 800b280:	18800117 	ldw	r2,4(r3)
 800b284:	1c800017 	ldw	r18,0(r3)
 800b288:	52800204 	addi	r10,r10,8
 800b28c:	da812115 	stw	r10,1156(sp)
 800b290:	102d883a 	mov	r22,r2
 800b294:	1001f116 	blt	r2,zero,800ba5c <___vfiprintf_internal_r+0x10b4>
 800b298:	db011d83 	ldbu	r12,1142(sp)
 800b29c:	4823883a 	mov	r17,r9
 800b2a0:	00800044 	movi	r2,1
 800b2a4:	9588b03a 	or	r4,r18,r22
 800b2a8:	003ea106 	br	800ad30 <__alt_data_end+0xfc00ad30>
 800b2ac:	80c00007 	ldb	r3,0(r16)
 800b2b0:	82800044 	addi	r10,r16,1
 800b2b4:	1b027f26 	beq	r3,r12,800bcb4 <___vfiprintf_internal_r+0x130c>
 800b2b8:	18bff404 	addi	r2,r3,-48
 800b2bc:	5021883a 	mov	r16,r10
 800b2c0:	0013883a 	mov	r9,zero
 800b2c4:	28be1836 	bltu	r5,r2,800ab28 <__alt_data_end+0xfc00ab28>
 800b2c8:	80c00007 	ldb	r3,0(r16)
 800b2cc:	4a4002a4 	muli	r9,r9,10
 800b2d0:	84000044 	addi	r16,r16,1
 800b2d4:	1253883a 	add	r9,r2,r9
 800b2d8:	18bff404 	addi	r2,r3,-48
 800b2dc:	28bffa2e 	bgeu	r5,r2,800b2c8 <__alt_data_end+0xfc00b2c8>
 800b2e0:	483e110e 	bge	r9,zero,800ab28 <__alt_data_end+0xfc00ab28>
 800b2e4:	027fffc4 	movi	r9,-1
 800b2e8:	003e0f06 	br	800ab28 <__alt_data_end+0xfc00ab28>
 800b2ec:	d9811d85 	stb	r6,1142(sp)
 800b2f0:	a880080c 	andi	r2,r21,32
 800b2f4:	1001ee26 	beq	r2,zero,800bab0 <___vfiprintf_internal_r+0x1108>
 800b2f8:	da812117 	ldw	r10,1156(sp)
 800b2fc:	dac12217 	ldw	r11,1160(sp)
 800b300:	50800017 	ldw	r2,0(r10)
 800b304:	5807d7fa 	srai	r3,r11,31
 800b308:	52800104 	addi	r10,r10,4
 800b30c:	da812115 	stw	r10,1156(sp)
 800b310:	12c00015 	stw	r11,0(r2)
 800b314:	10c00115 	stw	r3,4(r2)
 800b318:	003dd806 	br	800aa7c <__alt_data_end+0xfc00aa7c>
 800b31c:	30803fcc 	andi	r2,r6,255
 800b320:	1080201c 	xori	r2,r2,128
 800b324:	10bfe004 	addi	r2,r2,-128
 800b328:	1001df1e 	bne	r2,zero,800baa8 <___vfiprintf_internal_r+0x1100>
 800b32c:	01800804 	movi	r6,32
 800b330:	80c00007 	ldb	r3,0(r16)
 800b334:	003dfb06 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b338:	da812117 	ldw	r10,1156(sp)
 800b33c:	dac12117 	ldw	r11,1156(sp)
 800b340:	d8011d85 	stb	zero,1142(sp)
 800b344:	52800017 	ldw	r10,0(r10)
 800b348:	5d800104 	addi	r22,r11,4
 800b34c:	da812415 	stw	r10,1168(sp)
 800b350:	50023b26 	beq	r10,zero,800bc40 <___vfiprintf_internal_r+0x1298>
 800b354:	d9012417 	ldw	r4,1168(sp)
 800b358:	48021f16 	blt	r9,zero,800bbd8 <___vfiprintf_internal_r+0x1230>
 800b35c:	480d883a 	mov	r6,r9
 800b360:	000b883a 	mov	r5,zero
 800b364:	da012a15 	stw	r8,1192(sp)
 800b368:	da412b15 	stw	r9,1196(sp)
 800b36c:	8008d580 	call	8008d58 <memchr>
 800b370:	da012a17 	ldw	r8,1192(sp)
 800b374:	da412b17 	ldw	r9,1196(sp)
 800b378:	10024726 	beq	r2,zero,800bc98 <___vfiprintf_internal_r+0x12f0>
 800b37c:	d8c12417 	ldw	r3,1168(sp)
 800b380:	10e3c83a 	sub	r17,r2,r3
 800b384:	4c41f616 	blt	r9,r17,800bb60 <___vfiprintf_internal_r+0x11b8>
 800b388:	db011d83 	ldbu	r12,1142(sp)
 800b38c:	dd812115 	stw	r22,1156(sp)
 800b390:	0013883a 	mov	r9,zero
 800b394:	003e8006 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800b398:	d9811d85 	stb	r6,1142(sp)
 800b39c:	a880080c 	andi	r2,r21,32
 800b3a0:	d8c12117 	ldw	r3,1156(sp)
 800b3a4:	103fb51e 	bne	r2,zero,800b27c <__alt_data_end+0xfc00b27c>
 800b3a8:	a880040c 	andi	r2,r21,16
 800b3ac:	10015e1e 	bne	r2,zero,800b928 <___vfiprintf_internal_r+0xf80>
 800b3b0:	a880100c 	andi	r2,r21,64
 800b3b4:	10015c26 	beq	r2,zero,800b928 <___vfiprintf_internal_r+0xf80>
 800b3b8:	1c80000f 	ldh	r18,0(r3)
 800b3bc:	da812117 	ldw	r10,1156(sp)
 800b3c0:	902dd7fa 	srai	r22,r18,31
 800b3c4:	52800104 	addi	r10,r10,4
 800b3c8:	da812115 	stw	r10,1156(sp)
 800b3cc:	b005883a 	mov	r2,r22
 800b3d0:	003fb006 	br	800b294 <__alt_data_end+0xfc00b294>
 800b3d4:	da812117 	ldw	r10,1156(sp)
 800b3d8:	00800c04 	movi	r2,48
 800b3dc:	02c200b4 	movhi	r11,2050
 800b3e0:	54800017 	ldw	r18,0(r10)
 800b3e4:	d8811d05 	stb	r2,1140(sp)
 800b3e8:	52800104 	addi	r10,r10,4
 800b3ec:	00801e04 	movi	r2,120
 800b3f0:	5af29b04 	addi	r11,r11,-13716
 800b3f4:	d8811d45 	stb	r2,1141(sp)
 800b3f8:	002d883a 	mov	r22,zero
 800b3fc:	ad400094 	ori	r21,r21,2
 800b400:	da812115 	stw	r10,1156(sp)
 800b404:	dac12615 	stw	r11,1176(sp)
 800b408:	00800084 	movi	r2,2
 800b40c:	9009883a 	mov	r4,r18
 800b410:	003e4406 	br	800ad24 <__alt_data_end+0xfc00ad24>
 800b414:	ad400814 	ori	r21,r21,32
 800b418:	80c00007 	ldb	r3,0(r16)
 800b41c:	003dc106 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b420:	ad401014 	ori	r21,r21,64
 800b424:	80c00007 	ldb	r3,0(r16)
 800b428:	003dbe06 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b42c:	80c00007 	ldb	r3,0(r16)
 800b430:	19c1de26 	beq	r3,r7,800bbac <___vfiprintf_internal_r+0x1204>
 800b434:	ad400414 	ori	r21,r21,16
 800b438:	003dba06 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b43c:	008200b4 	movhi	r2,2050
 800b440:	10b29b04 	addi	r2,r2,-13716
 800b444:	d8812615 	stw	r2,1176(sp)
 800b448:	d9811d85 	stb	r6,1142(sp)
 800b44c:	a900080c 	andi	r4,r21,32
 800b450:	d8812117 	ldw	r2,1156(sp)
 800b454:	203f5b1e 	bne	r4,zero,800b1c4 <__alt_data_end+0xfc00b1c4>
 800b458:	a900040c 	andi	r4,r21,16
 800b45c:	2001a826 	beq	r4,zero,800bb00 <___vfiprintf_internal_r+0x1158>
 800b460:	dac12117 	ldw	r11,1156(sp)
 800b464:	14800017 	ldw	r18,0(r2)
 800b468:	002d883a 	mov	r22,zero
 800b46c:	5ac00104 	addi	r11,r11,4
 800b470:	dac12115 	stw	r11,1156(sp)
 800b474:	003f5806 	br	800b1d8 <__alt_data_end+0xfc00b1d8>
 800b478:	da812117 	ldw	r10,1156(sp)
 800b47c:	54c00017 	ldw	r19,0(r10)
 800b480:	50800104 	addi	r2,r10,4
 800b484:	983f2f16 	blt	r19,zero,800b144 <__alt_data_end+0xfc00b144>
 800b488:	d8812115 	stw	r2,1156(sp)
 800b48c:	80c00007 	ldb	r3,0(r16)
 800b490:	003da406 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b494:	01800ac4 	movi	r6,43
 800b498:	80c00007 	ldb	r3,0(r16)
 800b49c:	003da106 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b4a0:	ad400054 	ori	r21,r21,1
 800b4a4:	80c00007 	ldb	r3,0(r16)
 800b4a8:	003d9e06 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800b4ac:	d9811d85 	stb	r6,1142(sp)
 800b4b0:	18007126 	beq	r3,zero,800b678 <___vfiprintf_internal_r+0xcd0>
 800b4b4:	04800044 	movi	r18,1
 800b4b8:	d8c10005 	stb	r3,1024(sp)
 800b4bc:	d8c10004 	addi	r3,sp,1024
 800b4c0:	d8011d85 	stb	zero,1142(sp)
 800b4c4:	9023883a 	mov	r17,r18
 800b4c8:	d8c12415 	stw	r3,1168(sp)
 800b4cc:	003f5606 	br	800b228 <__alt_data_end+0xfc00b228>
 800b4d0:	dac12117 	ldw	r11,1156(sp)
 800b4d4:	002d883a 	mov	r22,zero
 800b4d8:	00800044 	movi	r2,1
 800b4dc:	5c800017 	ldw	r18,0(r11)
 800b4e0:	5ac00104 	addi	r11,r11,4
 800b4e4:	dac12115 	stw	r11,1156(sp)
 800b4e8:	9009883a 	mov	r4,r18
 800b4ec:	003e0d06 	br	800ad24 <__alt_data_end+0xfc00ad24>
 800b4f0:	dac12117 	ldw	r11,1156(sp)
 800b4f4:	002d883a 	mov	r22,zero
 800b4f8:	0005883a 	mov	r2,zero
 800b4fc:	5c800017 	ldw	r18,0(r11)
 800b500:	5ac00104 	addi	r11,r11,4
 800b504:	dac12115 	stw	r11,1156(sp)
 800b508:	9009883a 	mov	r4,r18
 800b50c:	003e0506 	br	800ad24 <__alt_data_end+0xfc00ad24>
 800b510:	d9012017 	ldw	r4,1152(sp)
 800b514:	a00b883a 	mov	r5,r20
 800b518:	d9811a04 	addi	r6,sp,1128
 800b51c:	d8c12a15 	stw	r3,1192(sp)
 800b520:	db012b15 	stw	r12,1196(sp)
 800b524:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b528:	d8c12a17 	ldw	r3,1192(sp)
 800b52c:	db012b17 	ldw	r12,1196(sp)
 800b530:	1000571e 	bne	r2,zero,800b690 <___vfiprintf_internal_r+0xce8>
 800b534:	d9811b17 	ldw	r6,1132(sp)
 800b538:	d8811c17 	ldw	r2,1136(sp)
 800b53c:	d811883a 	mov	r8,sp
 800b540:	31400044 	addi	r5,r6,1
 800b544:	003e3306 	br	800ae14 <__alt_data_end+0xfc00ae14>
 800b548:	d9411b17 	ldw	r5,1132(sp)
 800b54c:	d8c11c17 	ldw	r3,1136(sp)
 800b550:	28800044 	addi	r2,r5,1
 800b554:	d9011d87 	ldb	r4,1142(sp)
 800b558:	203e4d26 	beq	r4,zero,800ae90 <__alt_data_end+0xfc00ae90>
 800b55c:	01000044 	movi	r4,1
 800b560:	d9411d84 	addi	r5,sp,1142
 800b564:	1907883a 	add	r3,r3,r4
 800b568:	41400015 	stw	r5,0(r8)
 800b56c:	41000115 	stw	r4,4(r8)
 800b570:	d8c11c15 	stw	r3,1136(sp)
 800b574:	d8811b15 	stw	r2,1132(sp)
 800b578:	014001c4 	movi	r5,7
 800b57c:	2880aa16 	blt	r5,r2,800b828 <___vfiprintf_internal_r+0xe80>
 800b580:	100b883a 	mov	r5,r2
 800b584:	42000204 	addi	r8,r8,8
 800b588:	10800044 	addi	r2,r2,1
 800b58c:	003e4006 	br	800ae90 <__alt_data_end+0xfc00ae90>
 800b590:	d9012017 	ldw	r4,1152(sp)
 800b594:	a00b883a 	mov	r5,r20
 800b598:	d9811a04 	addi	r6,sp,1128
 800b59c:	d9c12a15 	stw	r7,1192(sp)
 800b5a0:	db012b15 	stw	r12,1196(sp)
 800b5a4:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b5a8:	d9c12a17 	ldw	r7,1192(sp)
 800b5ac:	db012b17 	ldw	r12,1196(sp)
 800b5b0:	1000371e 	bne	r2,zero,800b690 <___vfiprintf_internal_r+0xce8>
 800b5b4:	d9411b17 	ldw	r5,1132(sp)
 800b5b8:	d8c11c17 	ldw	r3,1136(sp)
 800b5bc:	d811883a 	mov	r8,sp
 800b5c0:	28800044 	addi	r2,r5,1
 800b5c4:	003e4d06 	br	800aefc <__alt_data_end+0xfc00aefc>
 800b5c8:	10803fcc 	andi	r2,r2,255
 800b5cc:	00c00044 	movi	r3,1
 800b5d0:	10fddf1e 	bne	r2,r3,800ad50 <__alt_data_end+0xfc00ad50>
 800b5d4:	b000021e 	bne	r22,zero,800b5e0 <___vfiprintf_internal_r+0xc38>
 800b5d8:	00800244 	movi	r2,9
 800b5dc:	1480202e 	bgeu	r2,r18,800b660 <___vfiprintf_internal_r+0xcb8>
 800b5e0:	dc012515 	stw	r16,1172(sp)
 800b5e4:	dc410a04 	addi	r17,sp,1064
 800b5e8:	9021883a 	mov	r16,r18
 800b5ec:	da012415 	stw	r8,1168(sp)
 800b5f0:	b025883a 	mov	r18,r22
 800b5f4:	da412315 	stw	r9,1164(sp)
 800b5f8:	602d883a 	mov	r22,r12
 800b5fc:	8009883a 	mov	r4,r16
 800b600:	900b883a 	mov	r5,r18
 800b604:	01800284 	movi	r6,10
 800b608:	000f883a 	mov	r7,zero
 800b60c:	800cc200 	call	800cc20 <__umoddi3>
 800b610:	10800c04 	addi	r2,r2,48
 800b614:	8c7fffc4 	addi	r17,r17,-1
 800b618:	8009883a 	mov	r4,r16
 800b61c:	900b883a 	mov	r5,r18
 800b620:	01800284 	movi	r6,10
 800b624:	000f883a 	mov	r7,zero
 800b628:	88800005 	stb	r2,0(r17)
 800b62c:	800c6600 	call	800c660 <__udivdi3>
 800b630:	1021883a 	mov	r16,r2
 800b634:	10c4b03a 	or	r2,r2,r3
 800b638:	1825883a 	mov	r18,r3
 800b63c:	103fef1e 	bne	r2,zero,800b5fc <__alt_data_end+0xfc00b5fc>
 800b640:	da811e17 	ldw	r10,1144(sp)
 800b644:	da012417 	ldw	r8,1168(sp)
 800b648:	da412317 	ldw	r9,1164(sp)
 800b64c:	dc412415 	stw	r17,1168(sp)
 800b650:	b019883a 	mov	r12,r22
 800b654:	dc012517 	ldw	r16,1172(sp)
 800b658:	5463c83a 	sub	r17,r10,r17
 800b65c:	003dce06 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800b660:	94800c04 	addi	r18,r18,48
 800b664:	d8c109c4 	addi	r3,sp,1063
 800b668:	dc8109c5 	stb	r18,1063(sp)
 800b66c:	dc412717 	ldw	r17,1180(sp)
 800b670:	d8c12415 	stw	r3,1168(sp)
 800b674:	003dc806 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800b678:	d8811c17 	ldw	r2,1136(sp)
 800b67c:	10000426 	beq	r2,zero,800b690 <___vfiprintf_internal_r+0xce8>
 800b680:	d9012017 	ldw	r4,1152(sp)
 800b684:	a00b883a 	mov	r5,r20
 800b688:	d9811a04 	addi	r6,sp,1128
 800b68c:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b690:	a080030b 	ldhu	r2,12(r20)
 800b694:	1080100c 	andi	r2,r2,64
 800b698:	103e9b1e 	bne	r2,zero,800b108 <__alt_data_end+0xfc00b108>
 800b69c:	d8812217 	ldw	r2,1160(sp)
 800b6a0:	003e9a06 	br	800b10c <__alt_data_end+0xfc00b10c>
 800b6a4:	d9012017 	ldw	r4,1152(sp)
 800b6a8:	a00b883a 	mov	r5,r20
 800b6ac:	d9811a04 	addi	r6,sp,1128
 800b6b0:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b6b4:	103ff61e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800b6b8:	d9011b17 	ldw	r4,1132(sp)
 800b6bc:	d8c11c17 	ldw	r3,1136(sp)
 800b6c0:	d811883a 	mov	r8,sp
 800b6c4:	21400044 	addi	r5,r4,1
 800b6c8:	003e4006 	br	800afcc <__alt_data_end+0xfc00afcc>
 800b6cc:	1800d61e 	bne	r3,zero,800ba28 <___vfiprintf_internal_r+0x1080>
 800b6d0:	dac12417 	ldw	r11,1168(sp)
 800b6d4:	00800044 	movi	r2,1
 800b6d8:	dc400115 	stw	r17,4(sp)
 800b6dc:	dac00015 	stw	r11,0(sp)
 800b6e0:	dc411c15 	stw	r17,1136(sp)
 800b6e4:	d8811b15 	stw	r2,1132(sp)
 800b6e8:	8807883a 	mov	r3,r17
 800b6ec:	d811883a 	mov	r8,sp
 800b6f0:	42000204 	addi	r8,r8,8
 800b6f4:	aac0010c 	andi	r11,r21,4
 800b6f8:	58000226 	beq	r11,zero,800b704 <___vfiprintf_internal_r+0xd5c>
 800b6fc:	9ca3c83a 	sub	r17,r19,r18
 800b700:	047e2616 	blt	zero,r17,800af9c <__alt_data_end+0xfc00af9c>
 800b704:	94c0010e 	bge	r18,r19,800b70c <___vfiprintf_internal_r+0xd64>
 800b708:	9825883a 	mov	r18,r19
 800b70c:	da812217 	ldw	r10,1160(sp)
 800b710:	5495883a 	add	r10,r10,r18
 800b714:	da812215 	stw	r10,1160(sp)
 800b718:	183e4826 	beq	r3,zero,800b03c <__alt_data_end+0xfc00b03c>
 800b71c:	d9012017 	ldw	r4,1152(sp)
 800b720:	a00b883a 	mov	r5,r20
 800b724:	d9811a04 	addi	r6,sp,1128
 800b728:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b72c:	103e4326 	beq	r2,zero,800b03c <__alt_data_end+0xfc00b03c>
 800b730:	003fd706 	br	800b690 <__alt_data_end+0xfc00b690>
 800b734:	9cadc83a 	sub	r22,r19,r18
 800b738:	05bde40e 	bge	zero,r22,800aecc <__alt_data_end+0xfc00aecc>
 800b73c:	03000404 	movi	r12,16
 800b740:	6581500e 	bge	r12,r22,800bc84 <___vfiprintf_internal_r+0x12dc>
 800b744:	008200b4 	movhi	r2,2050
 800b748:	10b39c04 	addi	r2,r2,-12688
 800b74c:	d8812315 	stw	r2,1164(sp)
 800b750:	8005883a 	mov	r2,r16
 800b754:	038001c4 	movi	r14,7
 800b758:	b021883a 	mov	r16,r22
 800b75c:	da412515 	stw	r9,1172(sp)
 800b760:	102d883a 	mov	r22,r2
 800b764:	00000506 	br	800b77c <___vfiprintf_internal_r+0xdd4>
 800b768:	29000084 	addi	r4,r5,2
 800b76c:	42000204 	addi	r8,r8,8
 800b770:	100b883a 	mov	r5,r2
 800b774:	843ffc04 	addi	r16,r16,-16
 800b778:	64000d0e 	bge	r12,r16,800b7b0 <___vfiprintf_internal_r+0xe08>
 800b77c:	18c00404 	addi	r3,r3,16
 800b780:	28800044 	addi	r2,r5,1
 800b784:	45c00015 	stw	r23,0(r8)
 800b788:	43000115 	stw	r12,4(r8)
 800b78c:	d8c11c15 	stw	r3,1136(sp)
 800b790:	d8811b15 	stw	r2,1132(sp)
 800b794:	70bff40e 	bge	r14,r2,800b768 <__alt_data_end+0xfc00b768>
 800b798:	1800151e 	bne	r3,zero,800b7f0 <___vfiprintf_internal_r+0xe48>
 800b79c:	843ffc04 	addi	r16,r16,-16
 800b7a0:	000b883a 	mov	r5,zero
 800b7a4:	01000044 	movi	r4,1
 800b7a8:	d811883a 	mov	r8,sp
 800b7ac:	643ff316 	blt	r12,r16,800b77c <__alt_data_end+0xfc00b77c>
 800b7b0:	da412517 	ldw	r9,1172(sp)
 800b7b4:	b005883a 	mov	r2,r22
 800b7b8:	802d883a 	mov	r22,r16
 800b7bc:	1021883a 	mov	r16,r2
 800b7c0:	da812317 	ldw	r10,1164(sp)
 800b7c4:	1d87883a 	add	r3,r3,r22
 800b7c8:	45800115 	stw	r22,4(r8)
 800b7cc:	42800015 	stw	r10,0(r8)
 800b7d0:	d8c11c15 	stw	r3,1136(sp)
 800b7d4:	d9011b15 	stw	r4,1132(sp)
 800b7d8:	008001c4 	movi	r2,7
 800b7dc:	11008d16 	blt	r2,r4,800ba14 <___vfiprintf_internal_r+0x106c>
 800b7e0:	42000204 	addi	r8,r8,8
 800b7e4:	20800044 	addi	r2,r4,1
 800b7e8:	200b883a 	mov	r5,r4
 800b7ec:	003db706 	br	800aecc <__alt_data_end+0xfc00aecc>
 800b7f0:	d9012017 	ldw	r4,1152(sp)
 800b7f4:	a00b883a 	mov	r5,r20
 800b7f8:	d9811a04 	addi	r6,sp,1128
 800b7fc:	db012b15 	stw	r12,1196(sp)
 800b800:	db812a15 	stw	r14,1192(sp)
 800b804:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b808:	db012b17 	ldw	r12,1196(sp)
 800b80c:	db812a17 	ldw	r14,1192(sp)
 800b810:	103f9f1e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800b814:	d9411b17 	ldw	r5,1132(sp)
 800b818:	d8c11c17 	ldw	r3,1136(sp)
 800b81c:	d811883a 	mov	r8,sp
 800b820:	29000044 	addi	r4,r5,1
 800b824:	003fd306 	br	800b774 <__alt_data_end+0xfc00b774>
 800b828:	18006c1e 	bne	r3,zero,800b9dc <___vfiprintf_internal_r+0x1034>
 800b82c:	70004f26 	beq	r14,zero,800b96c <___vfiprintf_internal_r+0xfc4>
 800b830:	d8811d04 	addi	r2,sp,1140
 800b834:	00c00084 	movi	r3,2
 800b838:	d8800015 	stw	r2,0(sp)
 800b83c:	d8c00115 	stw	r3,4(sp)
 800b840:	2005883a 	mov	r2,r4
 800b844:	d811883a 	mov	r8,sp
 800b848:	003d9b06 	br	800aeb8 <__alt_data_end+0xfc00aeb8>
 800b84c:	1800571e 	bne	r3,zero,800b9ac <___vfiprintf_internal_r+0x1004>
 800b850:	000b883a 	mov	r5,zero
 800b854:	00800044 	movi	r2,1
 800b858:	d811883a 	mov	r8,sp
 800b85c:	003d9906 	br	800aec4 <__alt_data_end+0xfc00aec4>
 800b860:	10803fcc 	andi	r2,r2,255
 800b864:	1000251e 	bne	r2,zero,800b8fc <___vfiprintf_internal_r+0xf54>
 800b868:	a880004c 	andi	r2,r21,1
 800b86c:	10007826 	beq	r2,zero,800ba50 <___vfiprintf_internal_r+0x10a8>
 800b870:	00800c04 	movi	r2,48
 800b874:	d8c109c4 	addi	r3,sp,1063
 800b878:	d88109c5 	stb	r2,1063(sp)
 800b87c:	dc412717 	ldw	r17,1180(sp)
 800b880:	d8c12415 	stw	r3,1168(sp)
 800b884:	003d4406 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800b888:	d9012617 	ldw	r4,1176(sp)
 800b88c:	dc410a04 	addi	r17,sp,1064
 800b890:	908003cc 	andi	r2,r18,15
 800b894:	b006973a 	slli	r3,r22,28
 800b898:	2085883a 	add	r2,r4,r2
 800b89c:	9024d13a 	srli	r18,r18,4
 800b8a0:	10800003 	ldbu	r2,0(r2)
 800b8a4:	b02cd13a 	srli	r22,r22,4
 800b8a8:	8c7fffc4 	addi	r17,r17,-1
 800b8ac:	1ca4b03a 	or	r18,r3,r18
 800b8b0:	88800005 	stb	r2,0(r17)
 800b8b4:	9584b03a 	or	r2,r18,r22
 800b8b8:	103ff51e 	bne	r2,zero,800b890 <__alt_data_end+0xfc00b890>
 800b8bc:	dac11e17 	ldw	r11,1144(sp)
 800b8c0:	dc412415 	stw	r17,1168(sp)
 800b8c4:	5c63c83a 	sub	r17,r11,r17
 800b8c8:	003d3306 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800b8cc:	1800941e 	bne	r3,zero,800bb20 <___vfiprintf_internal_r+0x1178>
 800b8d0:	d8811d87 	ldb	r2,1142(sp)
 800b8d4:	10006b26 	beq	r2,zero,800ba84 <___vfiprintf_internal_r+0x10dc>
 800b8d8:	00c00044 	movi	r3,1
 800b8dc:	d9011d84 	addi	r4,sp,1142
 800b8e0:	1805883a 	mov	r2,r3
 800b8e4:	d9000015 	stw	r4,0(sp)
 800b8e8:	d8c00115 	stw	r3,4(sp)
 800b8ec:	d811883a 	mov	r8,sp
 800b8f0:	003f2306 	br	800b580 <__alt_data_end+0xfc00b580>
 800b8f4:	8023883a 	mov	r17,r16
 800b8f8:	003c7d06 	br	800aaf0 <__alt_data_end+0xfc00aaf0>
 800b8fc:	da810a04 	addi	r10,sp,1064
 800b900:	da812415 	stw	r10,1168(sp)
 800b904:	003d2406 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800b908:	d9012017 	ldw	r4,1152(sp)
 800b90c:	a00b883a 	mov	r5,r20
 800b910:	d9811a04 	addi	r6,sp,1128
 800b914:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b918:	103f5d1e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800b91c:	d8c11c17 	ldw	r3,1136(sp)
 800b920:	d811883a 	mov	r8,sp
 800b924:	003f7306 	br	800b6f4 <__alt_data_end+0xfc00b6f4>
 800b928:	1c800017 	ldw	r18,0(r3)
 800b92c:	dac12117 	ldw	r11,1156(sp)
 800b930:	902dd7fa 	srai	r22,r18,31
 800b934:	5ac00104 	addi	r11,r11,4
 800b938:	dac12115 	stw	r11,1156(sp)
 800b93c:	b005883a 	mov	r2,r22
 800b940:	003e5406 	br	800b294 <__alt_data_end+0xfc00b294>
 800b944:	00800084 	movi	r2,2
 800b948:	9588b03a 	or	r4,r18,r22
 800b94c:	003cf506 	br	800ad24 <__alt_data_end+0xfc00ad24>
 800b950:	d9012017 	ldw	r4,1152(sp)
 800b954:	a00b883a 	mov	r5,r20
 800b958:	d9811a04 	addi	r6,sp,1128
 800b95c:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b960:	103f4b1e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800b964:	d811883a 	mov	r8,sp
 800b968:	003cd106 	br	800acb0 <__alt_data_end+0xfc00acb0>
 800b96c:	000b883a 	mov	r5,zero
 800b970:	2005883a 	mov	r2,r4
 800b974:	d811883a 	mov	r8,sp
 800b978:	003d5206 	br	800aec4 <__alt_data_end+0xfc00aec4>
 800b97c:	10803fcc 	andi	r2,r2,255
 800b980:	1080201c 	xori	r2,r2,128
 800b984:	10bfe004 	addi	r2,r2,-128
 800b988:	01000c04 	movi	r4,48
 800b98c:	11008e26 	beq	r2,r4,800bbc8 <___vfiprintf_internal_r+0x1220>
 800b990:	da812417 	ldw	r10,1168(sp)
 800b994:	dac11e17 	ldw	r11,1144(sp)
 800b998:	193fffc5 	stb	r4,-1(r3)
 800b99c:	52bfffc4 	addi	r10,r10,-1
 800b9a0:	da812415 	stw	r10,1168(sp)
 800b9a4:	5aa3c83a 	sub	r17,r11,r10
 800b9a8:	003cfb06 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800b9ac:	d9012017 	ldw	r4,1152(sp)
 800b9b0:	a00b883a 	mov	r5,r20
 800b9b4:	d9811a04 	addi	r6,sp,1128
 800b9b8:	da412b15 	stw	r9,1196(sp)
 800b9bc:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b9c0:	da412b17 	ldw	r9,1196(sp)
 800b9c4:	103f321e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800b9c8:	d9411b17 	ldw	r5,1132(sp)
 800b9cc:	d8c11c17 	ldw	r3,1136(sp)
 800b9d0:	d811883a 	mov	r8,sp
 800b9d4:	28800044 	addi	r2,r5,1
 800b9d8:	003d3a06 	br	800aec4 <__alt_data_end+0xfc00aec4>
 800b9dc:	d9012017 	ldw	r4,1152(sp)
 800b9e0:	a00b883a 	mov	r5,r20
 800b9e4:	d9811a04 	addi	r6,sp,1128
 800b9e8:	da412b15 	stw	r9,1196(sp)
 800b9ec:	db812a15 	stw	r14,1192(sp)
 800b9f0:	800a8940 	call	800a894 <__sprint_r.part.0>
 800b9f4:	da412b17 	ldw	r9,1196(sp)
 800b9f8:	db812a17 	ldw	r14,1192(sp)
 800b9fc:	103f241e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800ba00:	d9411b17 	ldw	r5,1132(sp)
 800ba04:	d8c11c17 	ldw	r3,1136(sp)
 800ba08:	d811883a 	mov	r8,sp
 800ba0c:	28800044 	addi	r2,r5,1
 800ba10:	003d1f06 	br	800ae90 <__alt_data_end+0xfc00ae90>
 800ba14:	1800781e 	bne	r3,zero,800bbf8 <___vfiprintf_internal_r+0x1250>
 800ba18:	000b883a 	mov	r5,zero
 800ba1c:	00800044 	movi	r2,1
 800ba20:	d811883a 	mov	r8,sp
 800ba24:	003d2906 	br	800aecc <__alt_data_end+0xfc00aecc>
 800ba28:	d9012017 	ldw	r4,1152(sp)
 800ba2c:	a00b883a 	mov	r5,r20
 800ba30:	d9811a04 	addi	r6,sp,1128
 800ba34:	800a8940 	call	800a894 <__sprint_r.part.0>
 800ba38:	103f151e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800ba3c:	d8811b17 	ldw	r2,1132(sp)
 800ba40:	d8c11c17 	ldw	r3,1136(sp)
 800ba44:	d811883a 	mov	r8,sp
 800ba48:	10800044 	addi	r2,r2,1
 800ba4c:	003d4406 	br	800af60 <__alt_data_end+0xfc00af60>
 800ba50:	dac10a04 	addi	r11,sp,1064
 800ba54:	dac12415 	stw	r11,1168(sp)
 800ba58:	003ccf06 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800ba5c:	04a5c83a 	sub	r18,zero,r18
 800ba60:	9004c03a 	cmpne	r2,r18,zero
 800ba64:	05adc83a 	sub	r22,zero,r22
 800ba68:	b0adc83a 	sub	r22,r22,r2
 800ba6c:	03000b44 	movi	r12,45
 800ba70:	db011d85 	stb	r12,1142(sp)
 800ba74:	4823883a 	mov	r17,r9
 800ba78:	00800044 	movi	r2,1
 800ba7c:	9588b03a 	or	r4,r18,r22
 800ba80:	003cab06 	br	800ad30 <__alt_data_end+0xfc00ad30>
 800ba84:	000b883a 	mov	r5,zero
 800ba88:	00800044 	movi	r2,1
 800ba8c:	d811883a 	mov	r8,sp
 800ba90:	703d0c26 	beq	r14,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800ba94:	00c00084 	movi	r3,2
 800ba98:	d9011d04 	addi	r4,sp,1140
 800ba9c:	d9000015 	stw	r4,0(sp)
 800baa0:	d8c00115 	stw	r3,4(sp)
 800baa4:	003d0406 	br	800aeb8 <__alt_data_end+0xfc00aeb8>
 800baa8:	80c00007 	ldb	r3,0(r16)
 800baac:	003c1d06 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800bab0:	a880040c 	andi	r2,r21,16
 800bab4:	1000091e 	bne	r2,zero,800badc <___vfiprintf_internal_r+0x1134>
 800bab8:	aac0100c 	andi	r11,r21,64
 800babc:	58000726 	beq	r11,zero,800badc <___vfiprintf_internal_r+0x1134>
 800bac0:	da812117 	ldw	r10,1156(sp)
 800bac4:	dac12217 	ldw	r11,1160(sp)
 800bac8:	50800017 	ldw	r2,0(r10)
 800bacc:	52800104 	addi	r10,r10,4
 800bad0:	da812115 	stw	r10,1156(sp)
 800bad4:	12c0000d 	sth	r11,0(r2)
 800bad8:	003be806 	br	800aa7c <__alt_data_end+0xfc00aa7c>
 800badc:	da812117 	ldw	r10,1156(sp)
 800bae0:	dac12217 	ldw	r11,1160(sp)
 800bae4:	50800017 	ldw	r2,0(r10)
 800bae8:	52800104 	addi	r10,r10,4
 800baec:	da812115 	stw	r10,1156(sp)
 800baf0:	12c00015 	stw	r11,0(r2)
 800baf4:	003be106 	br	800aa7c <__alt_data_end+0xfc00aa7c>
 800baf8:	00800084 	movi	r2,2
 800bafc:	003c8906 	br	800ad24 <__alt_data_end+0xfc00ad24>
 800bb00:	a900100c 	andi	r4,r21,64
 800bb04:	20001f26 	beq	r4,zero,800bb84 <___vfiprintf_internal_r+0x11dc>
 800bb08:	da812117 	ldw	r10,1156(sp)
 800bb0c:	1480000b 	ldhu	r18,0(r2)
 800bb10:	002d883a 	mov	r22,zero
 800bb14:	52800104 	addi	r10,r10,4
 800bb18:	da812115 	stw	r10,1156(sp)
 800bb1c:	003dae06 	br	800b1d8 <__alt_data_end+0xfc00b1d8>
 800bb20:	d9012017 	ldw	r4,1152(sp)
 800bb24:	a00b883a 	mov	r5,r20
 800bb28:	d9811a04 	addi	r6,sp,1128
 800bb2c:	da412b15 	stw	r9,1196(sp)
 800bb30:	db812a15 	stw	r14,1192(sp)
 800bb34:	800a8940 	call	800a894 <__sprint_r.part.0>
 800bb38:	da412b17 	ldw	r9,1196(sp)
 800bb3c:	db812a17 	ldw	r14,1192(sp)
 800bb40:	103ed31e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800bb44:	d9411b17 	ldw	r5,1132(sp)
 800bb48:	d8c11c17 	ldw	r3,1136(sp)
 800bb4c:	d811883a 	mov	r8,sp
 800bb50:	28800044 	addi	r2,r5,1
 800bb54:	003e7f06 	br	800b554 <__alt_data_end+0xfc00b554>
 800bb58:	9825883a 	mov	r18,r19
 800bb5c:	003d3406 	br	800b030 <__alt_data_end+0xfc00b030>
 800bb60:	4823883a 	mov	r17,r9
 800bb64:	003e0806 	br	800b388 <__alt_data_end+0xfc00b388>
 800bb68:	d9012017 	ldw	r4,1152(sp)
 800bb6c:	a00b883a 	mov	r5,r20
 800bb70:	d9811a04 	addi	r6,sp,1128
 800bb74:	800a8940 	call	800a894 <__sprint_r.part.0>
 800bb78:	103ec51e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800bb7c:	d8c11c17 	ldw	r3,1136(sp)
 800bb80:	003ee006 	br	800b704 <__alt_data_end+0xfc00b704>
 800bb84:	dac12117 	ldw	r11,1156(sp)
 800bb88:	14800017 	ldw	r18,0(r2)
 800bb8c:	002d883a 	mov	r22,zero
 800bb90:	5ac00104 	addi	r11,r11,4
 800bb94:	dac12115 	stw	r11,1156(sp)
 800bb98:	003d8f06 	br	800b1d8 <__alt_data_end+0xfc00b1d8>
 800bb9c:	02c200b4 	movhi	r11,2050
 800bba0:	5af39c04 	addi	r11,r11,-12688
 800bba4:	dac12315 	stw	r11,1164(sp)
 800bba8:	003ce306 	br	800af38 <__alt_data_end+0xfc00af38>
 800bbac:	80c00043 	ldbu	r3,1(r16)
 800bbb0:	ad400814 	ori	r21,r21,32
 800bbb4:	84000044 	addi	r16,r16,1
 800bbb8:	18c03fcc 	andi	r3,r3,255
 800bbbc:	18c0201c 	xori	r3,r3,128
 800bbc0:	18ffe004 	addi	r3,r3,-128
 800bbc4:	003bd706 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800bbc8:	dac11e17 	ldw	r11,1144(sp)
 800bbcc:	d8c12417 	ldw	r3,1168(sp)
 800bbd0:	58e3c83a 	sub	r17,r11,r3
 800bbd4:	003c7006 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800bbd8:	da012a15 	stw	r8,1192(sp)
 800bbdc:	80035640 	call	8003564 <strlen>
 800bbe0:	1023883a 	mov	r17,r2
 800bbe4:	db011d83 	ldbu	r12,1142(sp)
 800bbe8:	dd812115 	stw	r22,1156(sp)
 800bbec:	0013883a 	mov	r9,zero
 800bbf0:	da012a17 	ldw	r8,1192(sp)
 800bbf4:	003c6806 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800bbf8:	d9012017 	ldw	r4,1152(sp)
 800bbfc:	a00b883a 	mov	r5,r20
 800bc00:	d9811a04 	addi	r6,sp,1128
 800bc04:	da412b15 	stw	r9,1196(sp)
 800bc08:	800a8940 	call	800a894 <__sprint_r.part.0>
 800bc0c:	da412b17 	ldw	r9,1196(sp)
 800bc10:	103e9f1e 	bne	r2,zero,800b690 <__alt_data_end+0xfc00b690>
 800bc14:	d9411b17 	ldw	r5,1132(sp)
 800bc18:	d8c11c17 	ldw	r3,1136(sp)
 800bc1c:	d811883a 	mov	r8,sp
 800bc20:	28800044 	addi	r2,r5,1
 800bc24:	003ca906 	br	800aecc <__alt_data_end+0xfc00aecc>
 800bc28:	d9411b17 	ldw	r5,1132(sp)
 800bc2c:	010200b4 	movhi	r4,2050
 800bc30:	2133a004 	addi	r4,r4,-12672
 800bc34:	d9012315 	stw	r4,1164(sp)
 800bc38:	29400044 	addi	r5,r5,1
 800bc3c:	003c8806 	br	800ae60 <__alt_data_end+0xfc00ae60>
 800bc40:	00800184 	movi	r2,6
 800bc44:	1240012e 	bgeu	r2,r9,800bc4c <___vfiprintf_internal_r+0x12a4>
 800bc48:	1013883a 	mov	r9,r2
 800bc4c:	4823883a 	mov	r17,r9
 800bc50:	4825883a 	mov	r18,r9
 800bc54:	48001516 	blt	r9,zero,800bcac <___vfiprintf_internal_r+0x1304>
 800bc58:	008200b4 	movhi	r2,2050
 800bc5c:	10b2a004 	addi	r2,r2,-13696
 800bc60:	dd812115 	stw	r22,1156(sp)
 800bc64:	d8812415 	stw	r2,1168(sp)
 800bc68:	003d6f06 	br	800b228 <__alt_data_end+0xfc00b228>
 800bc6c:	d9411b17 	ldw	r5,1132(sp)
 800bc70:	02c200b4 	movhi	r11,2050
 800bc74:	5af3a004 	addi	r11,r11,-12672
 800bc78:	dac12315 	stw	r11,1164(sp)
 800bc7c:	29400044 	addi	r5,r5,1
 800bc80:	003ce106 	br	800b008 <__alt_data_end+0xfc00b008>
 800bc84:	010200b4 	movhi	r4,2050
 800bc88:	21339c04 	addi	r4,r4,-12688
 800bc8c:	d9012315 	stw	r4,1164(sp)
 800bc90:	1009883a 	mov	r4,r2
 800bc94:	003eca06 	br	800b7c0 <__alt_data_end+0xfc00b7c0>
 800bc98:	4823883a 	mov	r17,r9
 800bc9c:	db011d83 	ldbu	r12,1142(sp)
 800bca0:	dd812115 	stw	r22,1156(sp)
 800bca4:	0013883a 	mov	r9,zero
 800bca8:	003c3b06 	br	800ad98 <__alt_data_end+0xfc00ad98>
 800bcac:	0025883a 	mov	r18,zero
 800bcb0:	003fe906 	br	800bc58 <__alt_data_end+0xfc00bc58>
 800bcb4:	dac12117 	ldw	r11,1156(sp)
 800bcb8:	8005883a 	mov	r2,r16
 800bcbc:	5021883a 	mov	r16,r10
 800bcc0:	5a400017 	ldw	r9,0(r11)
 800bcc4:	58c00104 	addi	r3,r11,4
 800bcc8:	d8c12115 	stw	r3,1156(sp)
 800bccc:	48000a16 	blt	r9,zero,800bcf8 <___vfiprintf_internal_r+0x1350>
 800bcd0:	10c00047 	ldb	r3,1(r2)
 800bcd4:	003b9306 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800bcd8:	043fffc4 	movi	r16,-1
 800bcdc:	003d0206 	br	800b0e8 <__alt_data_end+0xfc00b0e8>
 800bce0:	94c0010e 	bge	r18,r19,800bce8 <___vfiprintf_internal_r+0x1340>
 800bce4:	9825883a 	mov	r18,r19
 800bce8:	da812217 	ldw	r10,1160(sp)
 800bcec:	5495883a 	add	r10,r10,r18
 800bcf0:	da812215 	stw	r10,1160(sp)
 800bcf4:	003cd106 	br	800b03c <__alt_data_end+0xfc00b03c>
 800bcf8:	027fffc4 	movi	r9,-1
 800bcfc:	10c00047 	ldb	r3,1(r2)
 800bd00:	003b8806 	br	800ab24 <__alt_data_end+0xfc00ab24>

0800bd04 <__vfiprintf_internal>:
 800bd04:	2007883a 	mov	r3,r4
 800bd08:	010200b4 	movhi	r4,2050
 800bd0c:	213a9e04 	addi	r4,r4,-5512
 800bd10:	21000017 	ldw	r4,0(r4)
 800bd14:	2805883a 	mov	r2,r5
 800bd18:	300f883a 	mov	r7,r6
 800bd1c:	180b883a 	mov	r5,r3
 800bd20:	100d883a 	mov	r6,r2
 800bd24:	800a9a81 	jmpi	800a9a8 <___vfiprintf_internal_r>

0800bd28 <_write_r>:
 800bd28:	defffd04 	addi	sp,sp,-12
 800bd2c:	dc000015 	stw	r16,0(sp)
 800bd30:	040200b4 	movhi	r16,2050
 800bd34:	dc400115 	stw	r17,4(sp)
 800bd38:	84017004 	addi	r16,r16,1472
 800bd3c:	2023883a 	mov	r17,r4
 800bd40:	2809883a 	mov	r4,r5
 800bd44:	300b883a 	mov	r5,r6
 800bd48:	380d883a 	mov	r6,r7
 800bd4c:	dfc00215 	stw	ra,8(sp)
 800bd50:	80000015 	stw	zero,0(r16)
 800bd54:	80101b80 	call	80101b8 <write>
 800bd58:	00ffffc4 	movi	r3,-1
 800bd5c:	10c00526 	beq	r2,r3,800bd74 <_write_r+0x4c>
 800bd60:	dfc00217 	ldw	ra,8(sp)
 800bd64:	dc400117 	ldw	r17,4(sp)
 800bd68:	dc000017 	ldw	r16,0(sp)
 800bd6c:	dec00304 	addi	sp,sp,12
 800bd70:	f800283a 	ret
 800bd74:	80c00017 	ldw	r3,0(r16)
 800bd78:	183ff926 	beq	r3,zero,800bd60 <__alt_data_end+0xfc00bd60>
 800bd7c:	88c00015 	stw	r3,0(r17)
 800bd80:	003ff706 	br	800bd60 <__alt_data_end+0xfc00bd60>

0800bd84 <_close_r>:
 800bd84:	defffd04 	addi	sp,sp,-12
 800bd88:	dc000015 	stw	r16,0(sp)
 800bd8c:	040200b4 	movhi	r16,2050
 800bd90:	dc400115 	stw	r17,4(sp)
 800bd94:	84017004 	addi	r16,r16,1472
 800bd98:	2023883a 	mov	r17,r4
 800bd9c:	2809883a 	mov	r4,r5
 800bda0:	dfc00215 	stw	ra,8(sp)
 800bda4:	80000015 	stw	zero,0(r16)
 800bda8:	800f92c0 	call	800f92c <close>
 800bdac:	00ffffc4 	movi	r3,-1
 800bdb0:	10c00526 	beq	r2,r3,800bdc8 <_close_r+0x44>
 800bdb4:	dfc00217 	ldw	ra,8(sp)
 800bdb8:	dc400117 	ldw	r17,4(sp)
 800bdbc:	dc000017 	ldw	r16,0(sp)
 800bdc0:	dec00304 	addi	sp,sp,12
 800bdc4:	f800283a 	ret
 800bdc8:	80c00017 	ldw	r3,0(r16)
 800bdcc:	183ff926 	beq	r3,zero,800bdb4 <__alt_data_end+0xfc00bdb4>
 800bdd0:	88c00015 	stw	r3,0(r17)
 800bdd4:	003ff706 	br	800bdb4 <__alt_data_end+0xfc00bdb4>

0800bdd8 <_calloc_r>:
 800bdd8:	298b383a 	mul	r5,r5,r6
 800bddc:	defffe04 	addi	sp,sp,-8
 800bde0:	dc000015 	stw	r16,0(sp)
 800bde4:	dfc00115 	stw	ra,4(sp)
 800bde8:	80085b00 	call	80085b0 <_malloc_r>
 800bdec:	1021883a 	mov	r16,r2
 800bdf0:	10002826 	beq	r2,zero,800be94 <_calloc_r+0xbc>
 800bdf4:	11bfff17 	ldw	r6,-4(r2)
 800bdf8:	00bfff04 	movi	r2,-4
 800bdfc:	00c00904 	movi	r3,36
 800be00:	308c703a 	and	r6,r6,r2
 800be04:	308d883a 	add	r6,r6,r2
 800be08:	19801436 	bltu	r3,r6,800be5c <_calloc_r+0x84>
 800be0c:	008004c4 	movi	r2,19
 800be10:	11800936 	bltu	r2,r6,800be38 <_calloc_r+0x60>
 800be14:	8005883a 	mov	r2,r16
 800be18:	10000015 	stw	zero,0(r2)
 800be1c:	10000115 	stw	zero,4(r2)
 800be20:	10000215 	stw	zero,8(r2)
 800be24:	8005883a 	mov	r2,r16
 800be28:	dfc00117 	ldw	ra,4(sp)
 800be2c:	dc000017 	ldw	r16,0(sp)
 800be30:	dec00204 	addi	sp,sp,8
 800be34:	f800283a 	ret
 800be38:	80000015 	stw	zero,0(r16)
 800be3c:	80000115 	stw	zero,4(r16)
 800be40:	008006c4 	movi	r2,27
 800be44:	11800d2e 	bgeu	r2,r6,800be7c <_calloc_r+0xa4>
 800be48:	80000215 	stw	zero,8(r16)
 800be4c:	80000315 	stw	zero,12(r16)
 800be50:	30c00c26 	beq	r6,r3,800be84 <_calloc_r+0xac>
 800be54:	80800404 	addi	r2,r16,16
 800be58:	003fef06 	br	800be18 <__alt_data_end+0xfc00be18>
 800be5c:	8009883a 	mov	r4,r16
 800be60:	000b883a 	mov	r5,zero
 800be64:	8008f9c0 	call	8008f9c <memset>
 800be68:	8005883a 	mov	r2,r16
 800be6c:	dfc00117 	ldw	ra,4(sp)
 800be70:	dc000017 	ldw	r16,0(sp)
 800be74:	dec00204 	addi	sp,sp,8
 800be78:	f800283a 	ret
 800be7c:	80800204 	addi	r2,r16,8
 800be80:	003fe506 	br	800be18 <__alt_data_end+0xfc00be18>
 800be84:	80000415 	stw	zero,16(r16)
 800be88:	80800604 	addi	r2,r16,24
 800be8c:	80000515 	stw	zero,20(r16)
 800be90:	003fe106 	br	800be18 <__alt_data_end+0xfc00be18>
 800be94:	0005883a 	mov	r2,zero
 800be98:	003fe306 	br	800be28 <__alt_data_end+0xfc00be28>

0800be9c <_fclose_r>:
 800be9c:	28003226 	beq	r5,zero,800bf68 <_fclose_r+0xcc>
 800bea0:	defffc04 	addi	sp,sp,-16
 800bea4:	dc400115 	stw	r17,4(sp)
 800bea8:	2023883a 	mov	r17,r4
 800beac:	dc000015 	stw	r16,0(sp)
 800beb0:	dfc00315 	stw	ra,12(sp)
 800beb4:	dc800215 	stw	r18,8(sp)
 800beb8:	2821883a 	mov	r16,r5
 800bebc:	80078b00 	call	80078b0 <__sfp_lock_acquire>
 800bec0:	88000226 	beq	r17,zero,800becc <_fclose_r+0x30>
 800bec4:	88800e17 	ldw	r2,56(r17)
 800bec8:	10002926 	beq	r2,zero,800bf70 <_fclose_r+0xd4>
 800becc:	8080030f 	ldh	r2,12(r16)
 800bed0:	10002226 	beq	r2,zero,800bf5c <_fclose_r+0xc0>
 800bed4:	8809883a 	mov	r4,r17
 800bed8:	800b883a 	mov	r5,r16
 800bedc:	80072f80 	call	80072f8 <_fflush_r>
 800bee0:	1025883a 	mov	r18,r2
 800bee4:	80800b17 	ldw	r2,44(r16)
 800bee8:	10000426 	beq	r2,zero,800befc <_fclose_r+0x60>
 800beec:	81400717 	ldw	r5,28(r16)
 800bef0:	8809883a 	mov	r4,r17
 800bef4:	103ee83a 	callr	r2
 800bef8:	10002616 	blt	r2,zero,800bf94 <_fclose_r+0xf8>
 800befc:	8080030b 	ldhu	r2,12(r16)
 800bf00:	1080200c 	andi	r2,r2,128
 800bf04:	10001f1e 	bne	r2,zero,800bf84 <_fclose_r+0xe8>
 800bf08:	81400c17 	ldw	r5,48(r16)
 800bf0c:	28000526 	beq	r5,zero,800bf24 <_fclose_r+0x88>
 800bf10:	80801004 	addi	r2,r16,64
 800bf14:	28800226 	beq	r5,r2,800bf20 <_fclose_r+0x84>
 800bf18:	8809883a 	mov	r4,r17
 800bf1c:	8007a140 	call	8007a14 <_free_r>
 800bf20:	80000c15 	stw	zero,48(r16)
 800bf24:	81401117 	ldw	r5,68(r16)
 800bf28:	28000326 	beq	r5,zero,800bf38 <_fclose_r+0x9c>
 800bf2c:	8809883a 	mov	r4,r17
 800bf30:	8007a140 	call	8007a14 <_free_r>
 800bf34:	80001115 	stw	zero,68(r16)
 800bf38:	8000030d 	sth	zero,12(r16)
 800bf3c:	80078b40 	call	80078b4 <__sfp_lock_release>
 800bf40:	9005883a 	mov	r2,r18
 800bf44:	dfc00317 	ldw	ra,12(sp)
 800bf48:	dc800217 	ldw	r18,8(sp)
 800bf4c:	dc400117 	ldw	r17,4(sp)
 800bf50:	dc000017 	ldw	r16,0(sp)
 800bf54:	dec00404 	addi	sp,sp,16
 800bf58:	f800283a 	ret
 800bf5c:	80078b40 	call	80078b4 <__sfp_lock_release>
 800bf60:	0005883a 	mov	r2,zero
 800bf64:	003ff706 	br	800bf44 <__alt_data_end+0xfc00bf44>
 800bf68:	0005883a 	mov	r2,zero
 800bf6c:	f800283a 	ret
 800bf70:	8809883a 	mov	r4,r17
 800bf74:	80078a00 	call	80078a0 <__sinit>
 800bf78:	8080030f 	ldh	r2,12(r16)
 800bf7c:	103fd51e 	bne	r2,zero,800bed4 <__alt_data_end+0xfc00bed4>
 800bf80:	003ff606 	br	800bf5c <__alt_data_end+0xfc00bf5c>
 800bf84:	81400417 	ldw	r5,16(r16)
 800bf88:	8809883a 	mov	r4,r17
 800bf8c:	8007a140 	call	8007a14 <_free_r>
 800bf90:	003fdd06 	br	800bf08 <__alt_data_end+0xfc00bf08>
 800bf94:	04bfffc4 	movi	r18,-1
 800bf98:	003fd806 	br	800befc <__alt_data_end+0xfc00befc>

0800bf9c <fclose>:
 800bf9c:	008200b4 	movhi	r2,2050
 800bfa0:	10ba9e04 	addi	r2,r2,-5512
 800bfa4:	200b883a 	mov	r5,r4
 800bfa8:	11000017 	ldw	r4,0(r2)
 800bfac:	800be9c1 	jmpi	800be9c <_fclose_r>

0800bfb0 <_fputwc_r>:
 800bfb0:	3080030b 	ldhu	r2,12(r6)
 800bfb4:	defff804 	addi	sp,sp,-32
 800bfb8:	dcc00415 	stw	r19,16(sp)
 800bfbc:	dc800315 	stw	r18,12(sp)
 800bfc0:	dc000115 	stw	r16,4(sp)
 800bfc4:	dfc00715 	stw	ra,28(sp)
 800bfc8:	dd400615 	stw	r21,24(sp)
 800bfcc:	dd000515 	stw	r20,20(sp)
 800bfd0:	dc400215 	stw	r17,8(sp)
 800bfd4:	10c8000c 	andi	r3,r2,8192
 800bfd8:	3021883a 	mov	r16,r6
 800bfdc:	2027883a 	mov	r19,r4
 800bfe0:	2825883a 	mov	r18,r5
 800bfe4:	1800051e 	bne	r3,zero,800bffc <_fputwc_r+0x4c>
 800bfe8:	30c01917 	ldw	r3,100(r6)
 800bfec:	10880014 	ori	r2,r2,8192
 800bff0:	3080030d 	sth	r2,12(r6)
 800bff4:	18880014 	ori	r2,r3,8192
 800bff8:	30801915 	stw	r2,100(r6)
 800bffc:	80083a00 	call	80083a0 <__locale_mb_cur_max>
 800c000:	00c00044 	movi	r3,1
 800c004:	10c03e26 	beq	r2,r3,800c100 <_fputwc_r+0x150>
 800c008:	9809883a 	mov	r4,r19
 800c00c:	d80b883a 	mov	r5,sp
 800c010:	900d883a 	mov	r6,r18
 800c014:	81c01704 	addi	r7,r16,92
 800c018:	800c4600 	call	800c460 <_wcrtomb_r>
 800c01c:	1029883a 	mov	r20,r2
 800c020:	00bfffc4 	movi	r2,-1
 800c024:	a0802026 	beq	r20,r2,800c0a8 <_fputwc_r+0xf8>
 800c028:	d9400003 	ldbu	r5,0(sp)
 800c02c:	a0001c26 	beq	r20,zero,800c0a0 <_fputwc_r+0xf0>
 800c030:	0023883a 	mov	r17,zero
 800c034:	05400284 	movi	r21,10
 800c038:	00000906 	br	800c060 <_fputwc_r+0xb0>
 800c03c:	80800017 	ldw	r2,0(r16)
 800c040:	11400005 	stb	r5,0(r2)
 800c044:	80c00017 	ldw	r3,0(r16)
 800c048:	18c00044 	addi	r3,r3,1
 800c04c:	80c00015 	stw	r3,0(r16)
 800c050:	8c400044 	addi	r17,r17,1
 800c054:	dc45883a 	add	r2,sp,r17
 800c058:	8d00112e 	bgeu	r17,r20,800c0a0 <_fputwc_r+0xf0>
 800c05c:	11400003 	ldbu	r5,0(r2)
 800c060:	80c00217 	ldw	r3,8(r16)
 800c064:	18ffffc4 	addi	r3,r3,-1
 800c068:	80c00215 	stw	r3,8(r16)
 800c06c:	183ff30e 	bge	r3,zero,800c03c <__alt_data_end+0xfc00c03c>
 800c070:	80800617 	ldw	r2,24(r16)
 800c074:	18801916 	blt	r3,r2,800c0dc <_fputwc_r+0x12c>
 800c078:	80800017 	ldw	r2,0(r16)
 800c07c:	11400005 	stb	r5,0(r2)
 800c080:	80800017 	ldw	r2,0(r16)
 800c084:	10c00003 	ldbu	r3,0(r2)
 800c088:	10800044 	addi	r2,r2,1
 800c08c:	1d402326 	beq	r3,r21,800c11c <_fputwc_r+0x16c>
 800c090:	80800015 	stw	r2,0(r16)
 800c094:	8c400044 	addi	r17,r17,1
 800c098:	dc45883a 	add	r2,sp,r17
 800c09c:	8d3fef36 	bltu	r17,r20,800c05c <__alt_data_end+0xfc00c05c>
 800c0a0:	9005883a 	mov	r2,r18
 800c0a4:	00000406 	br	800c0b8 <_fputwc_r+0x108>
 800c0a8:	80c0030b 	ldhu	r3,12(r16)
 800c0ac:	a005883a 	mov	r2,r20
 800c0b0:	18c01014 	ori	r3,r3,64
 800c0b4:	80c0030d 	sth	r3,12(r16)
 800c0b8:	dfc00717 	ldw	ra,28(sp)
 800c0bc:	dd400617 	ldw	r21,24(sp)
 800c0c0:	dd000517 	ldw	r20,20(sp)
 800c0c4:	dcc00417 	ldw	r19,16(sp)
 800c0c8:	dc800317 	ldw	r18,12(sp)
 800c0cc:	dc400217 	ldw	r17,8(sp)
 800c0d0:	dc000117 	ldw	r16,4(sp)
 800c0d4:	dec00804 	addi	sp,sp,32
 800c0d8:	f800283a 	ret
 800c0dc:	9809883a 	mov	r4,r19
 800c0e0:	29403fcc 	andi	r5,r5,255
 800c0e4:	800d883a 	mov	r6,r16
 800c0e8:	800c2f00 	call	800c2f0 <__swbuf_r>
 800c0ec:	10bfffe0 	cmpeqi	r2,r2,-1
 800c0f0:	10803fcc 	andi	r2,r2,255
 800c0f4:	103fd626 	beq	r2,zero,800c050 <__alt_data_end+0xfc00c050>
 800c0f8:	00bfffc4 	movi	r2,-1
 800c0fc:	003fee06 	br	800c0b8 <__alt_data_end+0xfc00c0b8>
 800c100:	90ffffc4 	addi	r3,r18,-1
 800c104:	01003f84 	movi	r4,254
 800c108:	20ffbf36 	bltu	r4,r3,800c008 <__alt_data_end+0xfc00c008>
 800c10c:	900b883a 	mov	r5,r18
 800c110:	dc800005 	stb	r18,0(sp)
 800c114:	1029883a 	mov	r20,r2
 800c118:	003fc506 	br	800c030 <__alt_data_end+0xfc00c030>
 800c11c:	9809883a 	mov	r4,r19
 800c120:	a80b883a 	mov	r5,r21
 800c124:	800d883a 	mov	r6,r16
 800c128:	800c2f00 	call	800c2f0 <__swbuf_r>
 800c12c:	10bfffe0 	cmpeqi	r2,r2,-1
 800c130:	003fef06 	br	800c0f0 <__alt_data_end+0xfc00c0f0>

0800c134 <fputwc>:
 800c134:	defffc04 	addi	sp,sp,-16
 800c138:	dc000115 	stw	r16,4(sp)
 800c13c:	040200b4 	movhi	r16,2050
 800c140:	843a9e04 	addi	r16,r16,-5512
 800c144:	dc400215 	stw	r17,8(sp)
 800c148:	2023883a 	mov	r17,r4
 800c14c:	81000017 	ldw	r4,0(r16)
 800c150:	dfc00315 	stw	ra,12(sp)
 800c154:	280d883a 	mov	r6,r5
 800c158:	20000626 	beq	r4,zero,800c174 <fputwc+0x40>
 800c15c:	20800e17 	ldw	r2,56(r4)
 800c160:	1000041e 	bne	r2,zero,800c174 <fputwc+0x40>
 800c164:	d9400015 	stw	r5,0(sp)
 800c168:	80078a00 	call	80078a0 <__sinit>
 800c16c:	81000017 	ldw	r4,0(r16)
 800c170:	d9800017 	ldw	r6,0(sp)
 800c174:	880b883a 	mov	r5,r17
 800c178:	dfc00317 	ldw	ra,12(sp)
 800c17c:	dc400217 	ldw	r17,8(sp)
 800c180:	dc000117 	ldw	r16,4(sp)
 800c184:	dec00404 	addi	sp,sp,16
 800c188:	800bfb01 	jmpi	800bfb0 <_fputwc_r>

0800c18c <_fstat_r>:
 800c18c:	defffd04 	addi	sp,sp,-12
 800c190:	dc000015 	stw	r16,0(sp)
 800c194:	040200b4 	movhi	r16,2050
 800c198:	dc400115 	stw	r17,4(sp)
 800c19c:	84017004 	addi	r16,r16,1472
 800c1a0:	2023883a 	mov	r17,r4
 800c1a4:	2809883a 	mov	r4,r5
 800c1a8:	300b883a 	mov	r5,r6
 800c1ac:	dfc00215 	stw	ra,8(sp)
 800c1b0:	80000015 	stw	zero,0(r16)
 800c1b4:	800fa780 	call	800fa78 <fstat>
 800c1b8:	00ffffc4 	movi	r3,-1
 800c1bc:	10c00526 	beq	r2,r3,800c1d4 <_fstat_r+0x48>
 800c1c0:	dfc00217 	ldw	ra,8(sp)
 800c1c4:	dc400117 	ldw	r17,4(sp)
 800c1c8:	dc000017 	ldw	r16,0(sp)
 800c1cc:	dec00304 	addi	sp,sp,12
 800c1d0:	f800283a 	ret
 800c1d4:	80c00017 	ldw	r3,0(r16)
 800c1d8:	183ff926 	beq	r3,zero,800c1c0 <__alt_data_end+0xfc00c1c0>
 800c1dc:	88c00015 	stw	r3,0(r17)
 800c1e0:	003ff706 	br	800c1c0 <__alt_data_end+0xfc00c1c0>

0800c1e4 <_isatty_r>:
 800c1e4:	defffd04 	addi	sp,sp,-12
 800c1e8:	dc000015 	stw	r16,0(sp)
 800c1ec:	040200b4 	movhi	r16,2050
 800c1f0:	dc400115 	stw	r17,4(sp)
 800c1f4:	84017004 	addi	r16,r16,1472
 800c1f8:	2023883a 	mov	r17,r4
 800c1fc:	2809883a 	mov	r4,r5
 800c200:	dfc00215 	stw	ra,8(sp)
 800c204:	80000015 	stw	zero,0(r16)
 800c208:	800fb780 	call	800fb78 <isatty>
 800c20c:	00ffffc4 	movi	r3,-1
 800c210:	10c00526 	beq	r2,r3,800c228 <_isatty_r+0x44>
 800c214:	dfc00217 	ldw	ra,8(sp)
 800c218:	dc400117 	ldw	r17,4(sp)
 800c21c:	dc000017 	ldw	r16,0(sp)
 800c220:	dec00304 	addi	sp,sp,12
 800c224:	f800283a 	ret
 800c228:	80c00017 	ldw	r3,0(r16)
 800c22c:	183ff926 	beq	r3,zero,800c214 <__alt_data_end+0xfc00c214>
 800c230:	88c00015 	stw	r3,0(r17)
 800c234:	003ff706 	br	800c214 <__alt_data_end+0xfc00c214>

0800c238 <_lseek_r>:
 800c238:	defffd04 	addi	sp,sp,-12
 800c23c:	dc000015 	stw	r16,0(sp)
 800c240:	040200b4 	movhi	r16,2050
 800c244:	dc400115 	stw	r17,4(sp)
 800c248:	84017004 	addi	r16,r16,1472
 800c24c:	2023883a 	mov	r17,r4
 800c250:	2809883a 	mov	r4,r5
 800c254:	300b883a 	mov	r5,r6
 800c258:	380d883a 	mov	r6,r7
 800c25c:	dfc00215 	stw	ra,8(sp)
 800c260:	80000015 	stw	zero,0(r16)
 800c264:	800fd500 	call	800fd50 <lseek>
 800c268:	00ffffc4 	movi	r3,-1
 800c26c:	10c00526 	beq	r2,r3,800c284 <_lseek_r+0x4c>
 800c270:	dfc00217 	ldw	ra,8(sp)
 800c274:	dc400117 	ldw	r17,4(sp)
 800c278:	dc000017 	ldw	r16,0(sp)
 800c27c:	dec00304 	addi	sp,sp,12
 800c280:	f800283a 	ret
 800c284:	80c00017 	ldw	r3,0(r16)
 800c288:	183ff926 	beq	r3,zero,800c270 <__alt_data_end+0xfc00c270>
 800c28c:	88c00015 	stw	r3,0(r17)
 800c290:	003ff706 	br	800c270 <__alt_data_end+0xfc00c270>

0800c294 <_read_r>:
 800c294:	defffd04 	addi	sp,sp,-12
 800c298:	dc000015 	stw	r16,0(sp)
 800c29c:	040200b4 	movhi	r16,2050
 800c2a0:	dc400115 	stw	r17,4(sp)
 800c2a4:	84017004 	addi	r16,r16,1472
 800c2a8:	2023883a 	mov	r17,r4
 800c2ac:	2809883a 	mov	r4,r5
 800c2b0:	300b883a 	mov	r5,r6
 800c2b4:	380d883a 	mov	r6,r7
 800c2b8:	dfc00215 	stw	ra,8(sp)
 800c2bc:	80000015 	stw	zero,0(r16)
 800c2c0:	800ff2c0 	call	800ff2c <read>
 800c2c4:	00ffffc4 	movi	r3,-1
 800c2c8:	10c00526 	beq	r2,r3,800c2e0 <_read_r+0x4c>
 800c2cc:	dfc00217 	ldw	ra,8(sp)
 800c2d0:	dc400117 	ldw	r17,4(sp)
 800c2d4:	dc000017 	ldw	r16,0(sp)
 800c2d8:	dec00304 	addi	sp,sp,12
 800c2dc:	f800283a 	ret
 800c2e0:	80c00017 	ldw	r3,0(r16)
 800c2e4:	183ff926 	beq	r3,zero,800c2cc <__alt_data_end+0xfc00c2cc>
 800c2e8:	88c00015 	stw	r3,0(r17)
 800c2ec:	003ff706 	br	800c2cc <__alt_data_end+0xfc00c2cc>

0800c2f0 <__swbuf_r>:
 800c2f0:	defffc04 	addi	sp,sp,-16
 800c2f4:	dc800215 	stw	r18,8(sp)
 800c2f8:	dc400115 	stw	r17,4(sp)
 800c2fc:	dc000015 	stw	r16,0(sp)
 800c300:	dfc00315 	stw	ra,12(sp)
 800c304:	2025883a 	mov	r18,r4
 800c308:	2823883a 	mov	r17,r5
 800c30c:	3021883a 	mov	r16,r6
 800c310:	20000226 	beq	r4,zero,800c31c <__swbuf_r+0x2c>
 800c314:	20800e17 	ldw	r2,56(r4)
 800c318:	10004126 	beq	r2,zero,800c420 <__swbuf_r+0x130>
 800c31c:	80c00617 	ldw	r3,24(r16)
 800c320:	8180030b 	ldhu	r6,12(r16)
 800c324:	80c00215 	stw	r3,8(r16)
 800c328:	30c0020c 	andi	r3,r6,8
 800c32c:	18003526 	beq	r3,zero,800c404 <__swbuf_r+0x114>
 800c330:	80c00417 	ldw	r3,16(r16)
 800c334:	18003326 	beq	r3,zero,800c404 <__swbuf_r+0x114>
 800c338:	3088000c 	andi	r2,r6,8192
 800c33c:	8c403fcc 	andi	r17,r17,255
 800c340:	10001726 	beq	r2,zero,800c3a0 <__swbuf_r+0xb0>
 800c344:	80800017 	ldw	r2,0(r16)
 800c348:	81000517 	ldw	r4,20(r16)
 800c34c:	10c7c83a 	sub	r3,r2,r3
 800c350:	19001d0e 	bge	r3,r4,800c3c8 <__swbuf_r+0xd8>
 800c354:	18c00044 	addi	r3,r3,1
 800c358:	81400217 	ldw	r5,8(r16)
 800c35c:	11000044 	addi	r4,r2,1
 800c360:	81000015 	stw	r4,0(r16)
 800c364:	297fffc4 	addi	r5,r5,-1
 800c368:	81400215 	stw	r5,8(r16)
 800c36c:	14400005 	stb	r17,0(r2)
 800c370:	80800517 	ldw	r2,20(r16)
 800c374:	10c01d26 	beq	r2,r3,800c3ec <__swbuf_r+0xfc>
 800c378:	8080030b 	ldhu	r2,12(r16)
 800c37c:	1080004c 	andi	r2,r2,1
 800c380:	1000181e 	bne	r2,zero,800c3e4 <__swbuf_r+0xf4>
 800c384:	8805883a 	mov	r2,r17
 800c388:	dfc00317 	ldw	ra,12(sp)
 800c38c:	dc800217 	ldw	r18,8(sp)
 800c390:	dc400117 	ldw	r17,4(sp)
 800c394:	dc000017 	ldw	r16,0(sp)
 800c398:	dec00404 	addi	sp,sp,16
 800c39c:	f800283a 	ret
 800c3a0:	81001917 	ldw	r4,100(r16)
 800c3a4:	00b7ffc4 	movi	r2,-8193
 800c3a8:	31880014 	ori	r6,r6,8192
 800c3ac:	2084703a 	and	r2,r4,r2
 800c3b0:	80801915 	stw	r2,100(r16)
 800c3b4:	80800017 	ldw	r2,0(r16)
 800c3b8:	81000517 	ldw	r4,20(r16)
 800c3bc:	8180030d 	sth	r6,12(r16)
 800c3c0:	10c7c83a 	sub	r3,r2,r3
 800c3c4:	193fe316 	blt	r3,r4,800c354 <__alt_data_end+0xfc00c354>
 800c3c8:	9009883a 	mov	r4,r18
 800c3cc:	800b883a 	mov	r5,r16
 800c3d0:	80072f80 	call	80072f8 <_fflush_r>
 800c3d4:	1000091e 	bne	r2,zero,800c3fc <__swbuf_r+0x10c>
 800c3d8:	80800017 	ldw	r2,0(r16)
 800c3dc:	00c00044 	movi	r3,1
 800c3e0:	003fdd06 	br	800c358 <__alt_data_end+0xfc00c358>
 800c3e4:	00800284 	movi	r2,10
 800c3e8:	88bfe61e 	bne	r17,r2,800c384 <__alt_data_end+0xfc00c384>
 800c3ec:	9009883a 	mov	r4,r18
 800c3f0:	800b883a 	mov	r5,r16
 800c3f4:	80072f80 	call	80072f8 <_fflush_r>
 800c3f8:	103fe226 	beq	r2,zero,800c384 <__alt_data_end+0xfc00c384>
 800c3fc:	00bfffc4 	movi	r2,-1
 800c400:	003fe106 	br	800c388 <__alt_data_end+0xfc00c388>
 800c404:	9009883a 	mov	r4,r18
 800c408:	800b883a 	mov	r5,r16
 800c40c:	80058a00 	call	80058a0 <__swsetup_r>
 800c410:	1000051e 	bne	r2,zero,800c428 <__swbuf_r+0x138>
 800c414:	8180030b 	ldhu	r6,12(r16)
 800c418:	80c00417 	ldw	r3,16(r16)
 800c41c:	003fc606 	br	800c338 <__alt_data_end+0xfc00c338>
 800c420:	80078a00 	call	80078a0 <__sinit>
 800c424:	003fbd06 	br	800c31c <__alt_data_end+0xfc00c31c>
 800c428:	80c0030b 	ldhu	r3,12(r16)
 800c42c:	00bfffc4 	movi	r2,-1
 800c430:	18c01014 	ori	r3,r3,64
 800c434:	80c0030d 	sth	r3,12(r16)
 800c438:	00c00244 	movi	r3,9
 800c43c:	90c00015 	stw	r3,0(r18)
 800c440:	003fd106 	br	800c388 <__alt_data_end+0xfc00c388>

0800c444 <__swbuf>:
 800c444:	00c200b4 	movhi	r3,2050
 800c448:	18fa9e04 	addi	r3,r3,-5512
 800c44c:	2005883a 	mov	r2,r4
 800c450:	19000017 	ldw	r4,0(r3)
 800c454:	280d883a 	mov	r6,r5
 800c458:	100b883a 	mov	r5,r2
 800c45c:	800c2f01 	jmpi	800c2f0 <__swbuf_r>

0800c460 <_wcrtomb_r>:
 800c460:	defff604 	addi	sp,sp,-40
 800c464:	008200b4 	movhi	r2,2050
 800c468:	dc800815 	stw	r18,32(sp)
 800c46c:	dc400715 	stw	r17,28(sp)
 800c470:	dc000615 	stw	r16,24(sp)
 800c474:	10baa204 	addi	r2,r2,-5496
 800c478:	dfc00915 	stw	ra,36(sp)
 800c47c:	2021883a 	mov	r16,r4
 800c480:	3823883a 	mov	r17,r7
 800c484:	14800017 	ldw	r18,0(r2)
 800c488:	28001426 	beq	r5,zero,800c4dc <_wcrtomb_r+0x7c>
 800c48c:	d9400415 	stw	r5,16(sp)
 800c490:	d9800515 	stw	r6,20(sp)
 800c494:	80083940 	call	8008394 <__locale_charset>
 800c498:	d9400417 	ldw	r5,16(sp)
 800c49c:	d9800517 	ldw	r6,20(sp)
 800c4a0:	8009883a 	mov	r4,r16
 800c4a4:	dc400015 	stw	r17,0(sp)
 800c4a8:	100f883a 	mov	r7,r2
 800c4ac:	903ee83a 	callr	r18
 800c4b0:	00ffffc4 	movi	r3,-1
 800c4b4:	10c0031e 	bne	r2,r3,800c4c4 <_wcrtomb_r+0x64>
 800c4b8:	88000015 	stw	zero,0(r17)
 800c4bc:	00c02284 	movi	r3,138
 800c4c0:	80c00015 	stw	r3,0(r16)
 800c4c4:	dfc00917 	ldw	ra,36(sp)
 800c4c8:	dc800817 	ldw	r18,32(sp)
 800c4cc:	dc400717 	ldw	r17,28(sp)
 800c4d0:	dc000617 	ldw	r16,24(sp)
 800c4d4:	dec00a04 	addi	sp,sp,40
 800c4d8:	f800283a 	ret
 800c4dc:	80083940 	call	8008394 <__locale_charset>
 800c4e0:	8009883a 	mov	r4,r16
 800c4e4:	dc400015 	stw	r17,0(sp)
 800c4e8:	d9400104 	addi	r5,sp,4
 800c4ec:	000d883a 	mov	r6,zero
 800c4f0:	100f883a 	mov	r7,r2
 800c4f4:	903ee83a 	callr	r18
 800c4f8:	003fed06 	br	800c4b0 <__alt_data_end+0xfc00c4b0>

0800c4fc <wcrtomb>:
 800c4fc:	defff504 	addi	sp,sp,-44
 800c500:	dc400515 	stw	r17,20(sp)
 800c504:	dc000415 	stw	r16,16(sp)
 800c508:	dfc00a15 	stw	ra,40(sp)
 800c50c:	dd400915 	stw	r21,36(sp)
 800c510:	dd000815 	stw	r20,32(sp)
 800c514:	dcc00715 	stw	r19,28(sp)
 800c518:	dc800615 	stw	r18,24(sp)
 800c51c:	2021883a 	mov	r16,r4
 800c520:	3023883a 	mov	r17,r6
 800c524:	20001d26 	beq	r4,zero,800c59c <wcrtomb+0xa0>
 800c528:	048200b4 	movhi	r18,2050
 800c52c:	94ba9e04 	addi	r18,r18,-5512
 800c530:	008200b4 	movhi	r2,2050
 800c534:	95400017 	ldw	r21,0(r18)
 800c538:	10baa204 	addi	r2,r2,-5496
 800c53c:	15000017 	ldw	r20,0(r2)
 800c540:	2827883a 	mov	r19,r5
 800c544:	80083940 	call	8008394 <__locale_charset>
 800c548:	a809883a 	mov	r4,r21
 800c54c:	dc400015 	stw	r17,0(sp)
 800c550:	800b883a 	mov	r5,r16
 800c554:	980d883a 	mov	r6,r19
 800c558:	100f883a 	mov	r7,r2
 800c55c:	a03ee83a 	callr	r20
 800c560:	00ffffc4 	movi	r3,-1
 800c564:	10c0041e 	bne	r2,r3,800c578 <wcrtomb+0x7c>
 800c568:	90c00017 	ldw	r3,0(r18)
 800c56c:	01002284 	movi	r4,138
 800c570:	88000015 	stw	zero,0(r17)
 800c574:	19000015 	stw	r4,0(r3)
 800c578:	dfc00a17 	ldw	ra,40(sp)
 800c57c:	dd400917 	ldw	r21,36(sp)
 800c580:	dd000817 	ldw	r20,32(sp)
 800c584:	dcc00717 	ldw	r19,28(sp)
 800c588:	dc800617 	ldw	r18,24(sp)
 800c58c:	dc400517 	ldw	r17,20(sp)
 800c590:	dc000417 	ldw	r16,16(sp)
 800c594:	dec00b04 	addi	sp,sp,44
 800c598:	f800283a 	ret
 800c59c:	048200b4 	movhi	r18,2050
 800c5a0:	94ba9e04 	addi	r18,r18,-5512
 800c5a4:	008200b4 	movhi	r2,2050
 800c5a8:	94c00017 	ldw	r19,0(r18)
 800c5ac:	10baa204 	addi	r2,r2,-5496
 800c5b0:	14000017 	ldw	r16,0(r2)
 800c5b4:	80083940 	call	8008394 <__locale_charset>
 800c5b8:	9809883a 	mov	r4,r19
 800c5bc:	dc400015 	stw	r17,0(sp)
 800c5c0:	d9400104 	addi	r5,sp,4
 800c5c4:	000d883a 	mov	r6,zero
 800c5c8:	100f883a 	mov	r7,r2
 800c5cc:	803ee83a 	callr	r16
 800c5d0:	003fe306 	br	800c560 <__alt_data_end+0xfc00c560>

0800c5d4 <__ascii_wctomb>:
 800c5d4:	28000526 	beq	r5,zero,800c5ec <__ascii_wctomb+0x18>
 800c5d8:	00803fc4 	movi	r2,255
 800c5dc:	11800536 	bltu	r2,r6,800c5f4 <__ascii_wctomb+0x20>
 800c5e0:	29800005 	stb	r6,0(r5)
 800c5e4:	00800044 	movi	r2,1
 800c5e8:	f800283a 	ret
 800c5ec:	0005883a 	mov	r2,zero
 800c5f0:	f800283a 	ret
 800c5f4:	00802284 	movi	r2,138
 800c5f8:	20800015 	stw	r2,0(r4)
 800c5fc:	00bfffc4 	movi	r2,-1
 800c600:	f800283a 	ret

0800c604 <_wctomb_r>:
 800c604:	008200b4 	movhi	r2,2050
 800c608:	defff904 	addi	sp,sp,-28
 800c60c:	10baa204 	addi	r2,r2,-5496
 800c610:	dfc00615 	stw	ra,24(sp)
 800c614:	dc400515 	stw	r17,20(sp)
 800c618:	dc000415 	stw	r16,16(sp)
 800c61c:	3823883a 	mov	r17,r7
 800c620:	14000017 	ldw	r16,0(r2)
 800c624:	d9000115 	stw	r4,4(sp)
 800c628:	d9400215 	stw	r5,8(sp)
 800c62c:	d9800315 	stw	r6,12(sp)
 800c630:	80083940 	call	8008394 <__locale_charset>
 800c634:	d9000117 	ldw	r4,4(sp)
 800c638:	d9400217 	ldw	r5,8(sp)
 800c63c:	d9800317 	ldw	r6,12(sp)
 800c640:	dc400015 	stw	r17,0(sp)
 800c644:	100f883a 	mov	r7,r2
 800c648:	803ee83a 	callr	r16
 800c64c:	dfc00617 	ldw	ra,24(sp)
 800c650:	dc400517 	ldw	r17,20(sp)
 800c654:	dc000417 	ldw	r16,16(sp)
 800c658:	dec00704 	addi	sp,sp,28
 800c65c:	f800283a 	ret

0800c660 <__udivdi3>:
 800c660:	defff504 	addi	sp,sp,-44
 800c664:	dcc00415 	stw	r19,16(sp)
 800c668:	dc000115 	stw	r16,4(sp)
 800c66c:	dfc00a15 	stw	ra,40(sp)
 800c670:	df000915 	stw	fp,36(sp)
 800c674:	ddc00815 	stw	r23,32(sp)
 800c678:	dd800715 	stw	r22,28(sp)
 800c67c:	dd400615 	stw	r21,24(sp)
 800c680:	dd000515 	stw	r20,20(sp)
 800c684:	dc800315 	stw	r18,12(sp)
 800c688:	dc400215 	stw	r17,8(sp)
 800c68c:	2027883a 	mov	r19,r4
 800c690:	2821883a 	mov	r16,r5
 800c694:	3800421e 	bne	r7,zero,800c7a0 <__udivdi3+0x140>
 800c698:	3025883a 	mov	r18,r6
 800c69c:	2023883a 	mov	r17,r4
 800c6a0:	2980542e 	bgeu	r5,r6,800c7f4 <__udivdi3+0x194>
 800c6a4:	00bfffd4 	movui	r2,65535
 800c6a8:	282d883a 	mov	r22,r5
 800c6ac:	1180a836 	bltu	r2,r6,800c950 <__udivdi3+0x2f0>
 800c6b0:	00803fc4 	movi	r2,255
 800c6b4:	1181422e 	bgeu	r2,r6,800cbc0 <__udivdi3+0x560>
 800c6b8:	00800204 	movi	r2,8
 800c6bc:	1007883a 	mov	r3,r2
 800c6c0:	3084d83a 	srl	r2,r6,r2
 800c6c4:	010200b4 	movhi	r4,2050
 800c6c8:	2133a404 	addi	r4,r4,-12656
 800c6cc:	2085883a 	add	r2,r4,r2
 800c6d0:	10800003 	ldbu	r2,0(r2)
 800c6d4:	10c7883a 	add	r3,r2,r3
 800c6d8:	00800804 	movi	r2,32
 800c6dc:	10c5c83a 	sub	r2,r2,r3
 800c6e0:	10000526 	beq	r2,zero,800c6f8 <__udivdi3+0x98>
 800c6e4:	80a0983a 	sll	r16,r16,r2
 800c6e8:	98c6d83a 	srl	r3,r19,r3
 800c6ec:	30a4983a 	sll	r18,r6,r2
 800c6f0:	98a2983a 	sll	r17,r19,r2
 800c6f4:	80ecb03a 	or	r22,r16,r3
 800c6f8:	902ad43a 	srli	r21,r18,16
 800c6fc:	b009883a 	mov	r4,r22
 800c700:	953fffcc 	andi	r20,r18,65535
 800c704:	a80b883a 	mov	r5,r21
 800c708:	800d2d40 	call	800d2d4 <__umodsi3>
 800c70c:	b009883a 	mov	r4,r22
 800c710:	a80b883a 	mov	r5,r21
 800c714:	1027883a 	mov	r19,r2
 800c718:	800d2cc0 	call	800d2cc <__udivsi3>
 800c71c:	1021883a 	mov	r16,r2
 800c720:	8806d43a 	srli	r3,r17,16
 800c724:	9804943a 	slli	r2,r19,16
 800c728:	8527383a 	mul	r19,r16,r20
 800c72c:	10c4b03a 	or	r2,r2,r3
 800c730:	14c0052e 	bgeu	r2,r19,800c748 <__udivdi3+0xe8>
 800c734:	1485883a 	add	r2,r2,r18
 800c738:	80ffffc4 	addi	r3,r16,-1
 800c73c:	14800136 	bltu	r2,r18,800c744 <__udivdi3+0xe4>
 800c740:	14c13436 	bltu	r2,r19,800cc14 <__udivdi3+0x5b4>
 800c744:	1821883a 	mov	r16,r3
 800c748:	14e7c83a 	sub	r19,r2,r19
 800c74c:	9809883a 	mov	r4,r19
 800c750:	a80b883a 	mov	r5,r21
 800c754:	800d2d40 	call	800d2d4 <__umodsi3>
 800c758:	102d883a 	mov	r22,r2
 800c75c:	9809883a 	mov	r4,r19
 800c760:	a80b883a 	mov	r5,r21
 800c764:	800d2cc0 	call	800d2cc <__udivsi3>
 800c768:	b02c943a 	slli	r22,r22,16
 800c76c:	1529383a 	mul	r20,r2,r20
 800c770:	8c7fffcc 	andi	r17,r17,65535
 800c774:	b462b03a 	or	r17,r22,r17
 800c778:	8d00052e 	bgeu	r17,r20,800c790 <__udivdi3+0x130>
 800c77c:	8ca3883a 	add	r17,r17,r18
 800c780:	10ffffc4 	addi	r3,r2,-1
 800c784:	8c80f636 	bltu	r17,r18,800cb60 <__udivdi3+0x500>
 800c788:	8d00f52e 	bgeu	r17,r20,800cb60 <__udivdi3+0x500>
 800c78c:	10bfff84 	addi	r2,r2,-2
 800c790:	8020943a 	slli	r16,r16,16
 800c794:	0007883a 	mov	r3,zero
 800c798:	1404b03a 	or	r2,r2,r16
 800c79c:	00005b06 	br	800c90c <__udivdi3+0x2ac>
 800c7a0:	29c05836 	bltu	r5,r7,800c904 <__udivdi3+0x2a4>
 800c7a4:	00bfffd4 	movui	r2,65535
 800c7a8:	11c0642e 	bgeu	r2,r7,800c93c <__udivdi3+0x2dc>
 800c7ac:	00804034 	movhi	r2,256
 800c7b0:	10bfffc4 	addi	r2,r2,-1
 800c7b4:	11c0f32e 	bgeu	r2,r7,800cb84 <__udivdi3+0x524>
 800c7b8:	00c00604 	movi	r3,24
 800c7bc:	180b883a 	mov	r5,r3
 800c7c0:	38c6d83a 	srl	r3,r7,r3
 800c7c4:	008200b4 	movhi	r2,2050
 800c7c8:	10b3a404 	addi	r2,r2,-12656
 800c7cc:	10c7883a 	add	r3,r2,r3
 800c7d0:	18c00003 	ldbu	r3,0(r3)
 800c7d4:	01000804 	movi	r4,32
 800c7d8:	1947883a 	add	r3,r3,r5
 800c7dc:	20e5c83a 	sub	r18,r4,r3
 800c7e0:	9000661e 	bne	r18,zero,800c97c <__udivdi3+0x31c>
 800c7e4:	3c00f936 	bltu	r7,r16,800cbcc <__udivdi3+0x56c>
 800c7e8:	9985403a 	cmpgeu	r2,r19,r6
 800c7ec:	0007883a 	mov	r3,zero
 800c7f0:	00004606 	br	800c90c <__udivdi3+0x2ac>
 800c7f4:	3000041e 	bne	r6,zero,800c808 <__udivdi3+0x1a8>
 800c7f8:	01000044 	movi	r4,1
 800c7fc:	000b883a 	mov	r5,zero
 800c800:	800d2cc0 	call	800d2cc <__udivsi3>
 800c804:	1025883a 	mov	r18,r2
 800c808:	00bfffd4 	movui	r2,65535
 800c80c:	1480562e 	bgeu	r2,r18,800c968 <__udivdi3+0x308>
 800c810:	00804034 	movhi	r2,256
 800c814:	10bfffc4 	addi	r2,r2,-1
 800c818:	1480e32e 	bgeu	r2,r18,800cba8 <__udivdi3+0x548>
 800c81c:	00800604 	movi	r2,24
 800c820:	1007883a 	mov	r3,r2
 800c824:	9084d83a 	srl	r2,r18,r2
 800c828:	010200b4 	movhi	r4,2050
 800c82c:	2133a404 	addi	r4,r4,-12656
 800c830:	2085883a 	add	r2,r4,r2
 800c834:	10800003 	ldbu	r2,0(r2)
 800c838:	10c5883a 	add	r2,r2,r3
 800c83c:	00c00804 	movi	r3,32
 800c840:	1887c83a 	sub	r3,r3,r2
 800c844:	1800911e 	bne	r3,zero,800ca8c <__udivdi3+0x42c>
 800c848:	9028d43a 	srli	r20,r18,16
 800c84c:	84a1c83a 	sub	r16,r16,r18
 800c850:	957fffcc 	andi	r21,r18,65535
 800c854:	00c00044 	movi	r3,1
 800c858:	8009883a 	mov	r4,r16
 800c85c:	a00b883a 	mov	r5,r20
 800c860:	d8c00015 	stw	r3,0(sp)
 800c864:	800d2d40 	call	800d2d4 <__umodsi3>
 800c868:	8009883a 	mov	r4,r16
 800c86c:	a00b883a 	mov	r5,r20
 800c870:	1027883a 	mov	r19,r2
 800c874:	800d2cc0 	call	800d2cc <__udivsi3>
 800c878:	1021883a 	mov	r16,r2
 800c87c:	880cd43a 	srli	r6,r17,16
 800c880:	9804943a 	slli	r2,r19,16
 800c884:	8567383a 	mul	r19,r16,r21
 800c888:	d8c00017 	ldw	r3,0(sp)
 800c88c:	1188b03a 	or	r4,r2,r6
 800c890:	24c0052e 	bgeu	r4,r19,800c8a8 <__udivdi3+0x248>
 800c894:	2489883a 	add	r4,r4,r18
 800c898:	80bfffc4 	addi	r2,r16,-1
 800c89c:	24800136 	bltu	r4,r18,800c8a4 <__udivdi3+0x244>
 800c8a0:	24c0d936 	bltu	r4,r19,800cc08 <__udivdi3+0x5a8>
 800c8a4:	1021883a 	mov	r16,r2
 800c8a8:	24e7c83a 	sub	r19,r4,r19
 800c8ac:	9809883a 	mov	r4,r19
 800c8b0:	a00b883a 	mov	r5,r20
 800c8b4:	d8c00015 	stw	r3,0(sp)
 800c8b8:	800d2d40 	call	800d2d4 <__umodsi3>
 800c8bc:	102d883a 	mov	r22,r2
 800c8c0:	9809883a 	mov	r4,r19
 800c8c4:	a00b883a 	mov	r5,r20
 800c8c8:	800d2cc0 	call	800d2cc <__udivsi3>
 800c8cc:	b02c943a 	slli	r22,r22,16
 800c8d0:	156b383a 	mul	r21,r2,r21
 800c8d4:	8c7fffcc 	andi	r17,r17,65535
 800c8d8:	b462b03a 	or	r17,r22,r17
 800c8dc:	d8c00017 	ldw	r3,0(sp)
 800c8e0:	8d40052e 	bgeu	r17,r21,800c8f8 <__udivdi3+0x298>
 800c8e4:	8ca3883a 	add	r17,r17,r18
 800c8e8:	113fffc4 	addi	r4,r2,-1
 800c8ec:	8c809a36 	bltu	r17,r18,800cb58 <__udivdi3+0x4f8>
 800c8f0:	8d40992e 	bgeu	r17,r21,800cb58 <__udivdi3+0x4f8>
 800c8f4:	10bfff84 	addi	r2,r2,-2
 800c8f8:	8020943a 	slli	r16,r16,16
 800c8fc:	1404b03a 	or	r2,r2,r16
 800c900:	00000206 	br	800c90c <__udivdi3+0x2ac>
 800c904:	0007883a 	mov	r3,zero
 800c908:	0005883a 	mov	r2,zero
 800c90c:	dfc00a17 	ldw	ra,40(sp)
 800c910:	df000917 	ldw	fp,36(sp)
 800c914:	ddc00817 	ldw	r23,32(sp)
 800c918:	dd800717 	ldw	r22,28(sp)
 800c91c:	dd400617 	ldw	r21,24(sp)
 800c920:	dd000517 	ldw	r20,20(sp)
 800c924:	dcc00417 	ldw	r19,16(sp)
 800c928:	dc800317 	ldw	r18,12(sp)
 800c92c:	dc400217 	ldw	r17,8(sp)
 800c930:	dc000117 	ldw	r16,4(sp)
 800c934:	dec00b04 	addi	sp,sp,44
 800c938:	f800283a 	ret
 800c93c:	00803fc4 	movi	r2,255
 800c940:	11c0932e 	bgeu	r2,r7,800cb90 <__udivdi3+0x530>
 800c944:	00c00204 	movi	r3,8
 800c948:	180b883a 	mov	r5,r3
 800c94c:	003f9c06 	br	800c7c0 <__alt_data_end+0xfc00c7c0>
 800c950:	00804034 	movhi	r2,256
 800c954:	10bfffc4 	addi	r2,r2,-1
 800c958:	1180902e 	bgeu	r2,r6,800cb9c <__udivdi3+0x53c>
 800c95c:	00800604 	movi	r2,24
 800c960:	1007883a 	mov	r3,r2
 800c964:	003f5606 	br	800c6c0 <__alt_data_end+0xfc00c6c0>
 800c968:	00803fc4 	movi	r2,255
 800c96c:	1480912e 	bgeu	r2,r18,800cbb4 <__udivdi3+0x554>
 800c970:	00800204 	movi	r2,8
 800c974:	1007883a 	mov	r3,r2
 800c978:	003faa06 	br	800c824 <__alt_data_end+0xfc00c824>
 800c97c:	30eed83a 	srl	r23,r6,r3
 800c980:	3c8e983a 	sll	r7,r7,r18
 800c984:	80f8d83a 	srl	fp,r16,r3
 800c988:	98c6d83a 	srl	r3,r19,r3
 800c98c:	3deeb03a 	or	r23,r7,r23
 800c990:	b828d43a 	srli	r20,r23,16
 800c994:	84a0983a 	sll	r16,r16,r18
 800c998:	e009883a 	mov	r4,fp
 800c99c:	a00b883a 	mov	r5,r20
 800c9a0:	80e2b03a 	or	r17,r16,r3
 800c9a4:	34aa983a 	sll	r21,r6,r18
 800c9a8:	800d2d40 	call	800d2d4 <__umodsi3>
 800c9ac:	e009883a 	mov	r4,fp
 800c9b0:	a00b883a 	mov	r5,r20
 800c9b4:	102d883a 	mov	r22,r2
 800c9b8:	800d2cc0 	call	800d2cc <__udivsi3>
 800c9bc:	1021883a 	mov	r16,r2
 800c9c0:	bf3fffcc 	andi	fp,r23,65535
 800c9c4:	b004943a 	slli	r2,r22,16
 800c9c8:	8808d43a 	srli	r4,r17,16
 800c9cc:	872d383a 	mul	r22,r16,fp
 800c9d0:	1104b03a 	or	r2,r2,r4
 800c9d4:	1580042e 	bgeu	r2,r22,800c9e8 <__udivdi3+0x388>
 800c9d8:	15c5883a 	add	r2,r2,r23
 800c9dc:	80ffffc4 	addi	r3,r16,-1
 800c9e0:	15c0812e 	bgeu	r2,r23,800cbe8 <__udivdi3+0x588>
 800c9e4:	1821883a 	mov	r16,r3
 800c9e8:	15adc83a 	sub	r22,r2,r22
 800c9ec:	b009883a 	mov	r4,r22
 800c9f0:	a00b883a 	mov	r5,r20
 800c9f4:	800d2d40 	call	800d2d4 <__umodsi3>
 800c9f8:	a00b883a 	mov	r5,r20
 800c9fc:	b009883a 	mov	r4,r22
 800ca00:	d8800015 	stw	r2,0(sp)
 800ca04:	800d2cc0 	call	800d2cc <__udivsi3>
 800ca08:	d8c00017 	ldw	r3,0(sp)
 800ca0c:	170b383a 	mul	r5,r2,fp
 800ca10:	8c7fffcc 	andi	r17,r17,65535
 800ca14:	1806943a 	slli	r3,r3,16
 800ca18:	1c46b03a 	or	r3,r3,r17
 800ca1c:	1940042e 	bgeu	r3,r5,800ca30 <__udivdi3+0x3d0>
 800ca20:	1dc7883a 	add	r3,r3,r23
 800ca24:	113fffc4 	addi	r4,r2,-1
 800ca28:	1dc06b2e 	bgeu	r3,r23,800cbd8 <__udivdi3+0x578>
 800ca2c:	2005883a 	mov	r2,r4
 800ca30:	8020943a 	slli	r16,r16,16
 800ca34:	a9ffffcc 	andi	r7,r21,65535
 800ca38:	a82ad43a 	srli	r21,r21,16
 800ca3c:	1404b03a 	or	r2,r2,r16
 800ca40:	113fffcc 	andi	r4,r2,65535
 800ca44:	100cd43a 	srli	r6,r2,16
 800ca48:	21d3383a 	mul	r9,r4,r7
 800ca4c:	2549383a 	mul	r4,r4,r21
 800ca50:	31cf383a 	mul	r7,r6,r7
 800ca54:	4810d43a 	srli	r8,r9,16
 800ca58:	1947c83a 	sub	r3,r3,r5
 800ca5c:	3909883a 	add	r4,r7,r4
 800ca60:	2209883a 	add	r4,r4,r8
 800ca64:	354d383a 	mul	r6,r6,r21
 800ca68:	21c0022e 	bgeu	r4,r7,800ca74 <__udivdi3+0x414>
 800ca6c:	01400074 	movhi	r5,1
 800ca70:	314d883a 	add	r6,r6,r5
 800ca74:	202ad43a 	srli	r21,r4,16
 800ca78:	354d883a 	add	r6,r6,r21
 800ca7c:	19803f36 	bltu	r3,r6,800cb7c <__udivdi3+0x51c>
 800ca80:	19803926 	beq	r3,r6,800cb68 <__udivdi3+0x508>
 800ca84:	0007883a 	mov	r3,zero
 800ca88:	003fa006 	br	800c90c <__alt_data_end+0xfc00c90c>
 800ca8c:	90e4983a 	sll	r18,r18,r3
 800ca90:	80aad83a 	srl	r21,r16,r2
 800ca94:	80e0983a 	sll	r16,r16,r3
 800ca98:	9028d43a 	srli	r20,r18,16
 800ca9c:	9884d83a 	srl	r2,r19,r2
 800caa0:	a809883a 	mov	r4,r21
 800caa4:	a00b883a 	mov	r5,r20
 800caa8:	80acb03a 	or	r22,r16,r2
 800caac:	98e2983a 	sll	r17,r19,r3
 800cab0:	800d2d40 	call	800d2d4 <__umodsi3>
 800cab4:	a809883a 	mov	r4,r21
 800cab8:	a00b883a 	mov	r5,r20
 800cabc:	1021883a 	mov	r16,r2
 800cac0:	800d2cc0 	call	800d2cc <__udivsi3>
 800cac4:	957fffcc 	andi	r21,r18,65535
 800cac8:	8020943a 	slli	r16,r16,16
 800cacc:	b00ad43a 	srli	r5,r22,16
 800cad0:	1567383a 	mul	r19,r2,r21
 800cad4:	102f883a 	mov	r23,r2
 800cad8:	8148b03a 	or	r4,r16,r5
 800cadc:	24c0062e 	bgeu	r4,r19,800caf8 <__udivdi3+0x498>
 800cae0:	2489883a 	add	r4,r4,r18
 800cae4:	10bfffc4 	addi	r2,r2,-1
 800cae8:	24804536 	bltu	r4,r18,800cc00 <__udivdi3+0x5a0>
 800caec:	24c0442e 	bgeu	r4,r19,800cc00 <__udivdi3+0x5a0>
 800caf0:	bdffff84 	addi	r23,r23,-2
 800caf4:	2489883a 	add	r4,r4,r18
 800caf8:	24e7c83a 	sub	r19,r4,r19
 800cafc:	9809883a 	mov	r4,r19
 800cb00:	a00b883a 	mov	r5,r20
 800cb04:	800d2d40 	call	800d2d4 <__umodsi3>
 800cb08:	1021883a 	mov	r16,r2
 800cb0c:	9809883a 	mov	r4,r19
 800cb10:	a00b883a 	mov	r5,r20
 800cb14:	800d2cc0 	call	800d2cc <__udivsi3>
 800cb18:	8020943a 	slli	r16,r16,16
 800cb1c:	1007883a 	mov	r3,r2
 800cb20:	1545383a 	mul	r2,r2,r21
 800cb24:	b13fffcc 	andi	r4,r22,65535
 800cb28:	8108b03a 	or	r4,r16,r4
 800cb2c:	2080062e 	bgeu	r4,r2,800cb48 <__udivdi3+0x4e8>
 800cb30:	2489883a 	add	r4,r4,r18
 800cb34:	197fffc4 	addi	r5,r3,-1
 800cb38:	24802f36 	bltu	r4,r18,800cbf8 <__udivdi3+0x598>
 800cb3c:	20802e2e 	bgeu	r4,r2,800cbf8 <__udivdi3+0x598>
 800cb40:	18ffff84 	addi	r3,r3,-2
 800cb44:	2489883a 	add	r4,r4,r18
 800cb48:	b82e943a 	slli	r23,r23,16
 800cb4c:	20a1c83a 	sub	r16,r4,r2
 800cb50:	1dc6b03a 	or	r3,r3,r23
 800cb54:	003f4006 	br	800c858 <__alt_data_end+0xfc00c858>
 800cb58:	2005883a 	mov	r2,r4
 800cb5c:	003f6606 	br	800c8f8 <__alt_data_end+0xfc00c8f8>
 800cb60:	1805883a 	mov	r2,r3
 800cb64:	003f0a06 	br	800c790 <__alt_data_end+0xfc00c790>
 800cb68:	2006943a 	slli	r3,r4,16
 800cb6c:	9c88983a 	sll	r4,r19,r18
 800cb70:	4a7fffcc 	andi	r9,r9,65535
 800cb74:	1a47883a 	add	r3,r3,r9
 800cb78:	20ffc22e 	bgeu	r4,r3,800ca84 <__alt_data_end+0xfc00ca84>
 800cb7c:	10bfffc4 	addi	r2,r2,-1
 800cb80:	003fc006 	br	800ca84 <__alt_data_end+0xfc00ca84>
 800cb84:	00c00404 	movi	r3,16
 800cb88:	180b883a 	mov	r5,r3
 800cb8c:	003f0c06 	br	800c7c0 <__alt_data_end+0xfc00c7c0>
 800cb90:	0007883a 	mov	r3,zero
 800cb94:	000b883a 	mov	r5,zero
 800cb98:	003f0906 	br	800c7c0 <__alt_data_end+0xfc00c7c0>
 800cb9c:	00800404 	movi	r2,16
 800cba0:	1007883a 	mov	r3,r2
 800cba4:	003ec606 	br	800c6c0 <__alt_data_end+0xfc00c6c0>
 800cba8:	00800404 	movi	r2,16
 800cbac:	1007883a 	mov	r3,r2
 800cbb0:	003f1c06 	br	800c824 <__alt_data_end+0xfc00c824>
 800cbb4:	0005883a 	mov	r2,zero
 800cbb8:	0007883a 	mov	r3,zero
 800cbbc:	003f1906 	br	800c824 <__alt_data_end+0xfc00c824>
 800cbc0:	0005883a 	mov	r2,zero
 800cbc4:	0007883a 	mov	r3,zero
 800cbc8:	003ebd06 	br	800c6c0 <__alt_data_end+0xfc00c6c0>
 800cbcc:	0007883a 	mov	r3,zero
 800cbd0:	00800044 	movi	r2,1
 800cbd4:	003f4d06 	br	800c90c <__alt_data_end+0xfc00c90c>
 800cbd8:	197f942e 	bgeu	r3,r5,800ca2c <__alt_data_end+0xfc00ca2c>
 800cbdc:	10bfff84 	addi	r2,r2,-2
 800cbe0:	1dc7883a 	add	r3,r3,r23
 800cbe4:	003f9206 	br	800ca30 <__alt_data_end+0xfc00ca30>
 800cbe8:	15bf7e2e 	bgeu	r2,r22,800c9e4 <__alt_data_end+0xfc00c9e4>
 800cbec:	843fff84 	addi	r16,r16,-2
 800cbf0:	15c5883a 	add	r2,r2,r23
 800cbf4:	003f7c06 	br	800c9e8 <__alt_data_end+0xfc00c9e8>
 800cbf8:	2807883a 	mov	r3,r5
 800cbfc:	003fd206 	br	800cb48 <__alt_data_end+0xfc00cb48>
 800cc00:	102f883a 	mov	r23,r2
 800cc04:	003fbc06 	br	800caf8 <__alt_data_end+0xfc00caf8>
 800cc08:	843fff84 	addi	r16,r16,-2
 800cc0c:	2489883a 	add	r4,r4,r18
 800cc10:	003f2506 	br	800c8a8 <__alt_data_end+0xfc00c8a8>
 800cc14:	843fff84 	addi	r16,r16,-2
 800cc18:	1485883a 	add	r2,r2,r18
 800cc1c:	003eca06 	br	800c748 <__alt_data_end+0xfc00c748>

0800cc20 <__umoddi3>:
 800cc20:	defff404 	addi	sp,sp,-48
 800cc24:	ddc00915 	stw	r23,36(sp)
 800cc28:	dc400315 	stw	r17,12(sp)
 800cc2c:	dc000215 	stw	r16,8(sp)
 800cc30:	dfc00b15 	stw	ra,44(sp)
 800cc34:	df000a15 	stw	fp,40(sp)
 800cc38:	dd800815 	stw	r22,32(sp)
 800cc3c:	dd400715 	stw	r21,28(sp)
 800cc40:	dd000615 	stw	r20,24(sp)
 800cc44:	dcc00515 	stw	r19,20(sp)
 800cc48:	dc800415 	stw	r18,16(sp)
 800cc4c:	2021883a 	mov	r16,r4
 800cc50:	2823883a 	mov	r17,r5
 800cc54:	282f883a 	mov	r23,r5
 800cc58:	3800381e 	bne	r7,zero,800cd3c <__umoddi3+0x11c>
 800cc5c:	3027883a 	mov	r19,r6
 800cc60:	2029883a 	mov	r20,r4
 800cc64:	29804e2e 	bgeu	r5,r6,800cda0 <__umoddi3+0x180>
 800cc68:	00bfffd4 	movui	r2,65535
 800cc6c:	11809c36 	bltu	r2,r6,800cee0 <__umoddi3+0x2c0>
 800cc70:	00803fc4 	movi	r2,255
 800cc74:	11813b2e 	bgeu	r2,r6,800d164 <__umoddi3+0x544>
 800cc78:	01400204 	movi	r5,8
 800cc7c:	2805883a 	mov	r2,r5
 800cc80:	314ad83a 	srl	r5,r6,r5
 800cc84:	00c200b4 	movhi	r3,2050
 800cc88:	18f3a404 	addi	r3,r3,-12656
 800cc8c:	194b883a 	add	r5,r3,r5
 800cc90:	29000003 	ldbu	r4,0(r5)
 800cc94:	2089883a 	add	r4,r4,r2
 800cc98:	00800804 	movi	r2,32
 800cc9c:	1105c83a 	sub	r2,r2,r4
 800cca0:	1000ec26 	beq	r2,zero,800d054 <__umoddi3+0x434>
 800cca4:	88a2983a 	sll	r17,r17,r2
 800cca8:	8108d83a 	srl	r4,r16,r4
 800ccac:	30a6983a 	sll	r19,r6,r2
 800ccb0:	80a8983a 	sll	r20,r16,r2
 800ccb4:	1025883a 	mov	r18,r2
 800ccb8:	892eb03a 	or	r23,r17,r4
 800ccbc:	982cd43a 	srli	r22,r19,16
 800ccc0:	b809883a 	mov	r4,r23
 800ccc4:	9d7fffcc 	andi	r21,r19,65535
 800ccc8:	b00b883a 	mov	r5,r22
 800cccc:	800d2d40 	call	800d2d4 <__umodsi3>
 800ccd0:	b809883a 	mov	r4,r23
 800ccd4:	b00b883a 	mov	r5,r22
 800ccd8:	1021883a 	mov	r16,r2
 800ccdc:	800d2cc0 	call	800d2cc <__udivsi3>
 800cce0:	8020943a 	slli	r16,r16,16
 800cce4:	a00cd43a 	srli	r6,r20,16
 800cce8:	1545383a 	mul	r2,r2,r21
 800ccec:	8188b03a 	or	r4,r16,r6
 800ccf0:	2080042e 	bgeu	r4,r2,800cd04 <__umoddi3+0xe4>
 800ccf4:	24c9883a 	add	r4,r4,r19
 800ccf8:	24c00236 	bltu	r4,r19,800cd04 <__umoddi3+0xe4>
 800ccfc:	2080012e 	bgeu	r4,r2,800cd04 <__umoddi3+0xe4>
 800cd00:	24c9883a 	add	r4,r4,r19
 800cd04:	20a3c83a 	sub	r17,r4,r2
 800cd08:	8809883a 	mov	r4,r17
 800cd0c:	b00b883a 	mov	r5,r22
 800cd10:	800d2d40 	call	800d2d4 <__umodsi3>
 800cd14:	8809883a 	mov	r4,r17
 800cd18:	b00b883a 	mov	r5,r22
 800cd1c:	1021883a 	mov	r16,r2
 800cd20:	800d2cc0 	call	800d2cc <__udivsi3>
 800cd24:	8006943a 	slli	r3,r16,16
 800cd28:	1545383a 	mul	r2,r2,r21
 800cd2c:	a13fffcc 	andi	r4,r20,65535
 800cd30:	1906b03a 	or	r3,r3,r4
 800cd34:	1880532e 	bgeu	r3,r2,800ce84 <__umoddi3+0x264>
 800cd38:	00004e06 	br	800ce74 <__umoddi3+0x254>
 800cd3c:	29c05536 	bltu	r5,r7,800ce94 <__umoddi3+0x274>
 800cd40:	00bfffd4 	movui	r2,65535
 800cd44:	11c0612e 	bgeu	r2,r7,800cecc <__umoddi3+0x2ac>
 800cd48:	00804034 	movhi	r2,256
 800cd4c:	10bfffc4 	addi	r2,r2,-1
 800cd50:	11c0f82e 	bgeu	r2,r7,800d134 <__umoddi3+0x514>
 800cd54:	01400604 	movi	r5,24
 800cd58:	282b883a 	mov	r21,r5
 800cd5c:	394ad83a 	srl	r5,r7,r5
 800cd60:	00c200b4 	movhi	r3,2050
 800cd64:	18f3a404 	addi	r3,r3,-12656
 800cd68:	194b883a 	add	r5,r3,r5
 800cd6c:	28800003 	ldbu	r2,0(r5)
 800cd70:	00c00804 	movi	r3,32
 800cd74:	156b883a 	add	r21,r2,r21
 800cd78:	1d69c83a 	sub	r20,r3,r21
 800cd7c:	a000631e 	bne	r20,zero,800cf0c <__umoddi3+0x2ec>
 800cd80:	3c400136 	bltu	r7,r17,800cd88 <__umoddi3+0x168>
 800cd84:	81810436 	bltu	r16,r6,800d198 <__umoddi3+0x578>
 800cd88:	8185c83a 	sub	r2,r16,r6
 800cd8c:	89e3c83a 	sub	r17,r17,r7
 800cd90:	8087803a 	cmpltu	r3,r16,r2
 800cd94:	88efc83a 	sub	r23,r17,r3
 800cd98:	b807883a 	mov	r3,r23
 800cd9c:	00003f06 	br	800ce9c <__umoddi3+0x27c>
 800cda0:	3000041e 	bne	r6,zero,800cdb4 <__umoddi3+0x194>
 800cda4:	01000044 	movi	r4,1
 800cda8:	000b883a 	mov	r5,zero
 800cdac:	800d2cc0 	call	800d2cc <__udivsi3>
 800cdb0:	1027883a 	mov	r19,r2
 800cdb4:	00bfffd4 	movui	r2,65535
 800cdb8:	14c04f2e 	bgeu	r2,r19,800cef8 <__umoddi3+0x2d8>
 800cdbc:	00804034 	movhi	r2,256
 800cdc0:	10bfffc4 	addi	r2,r2,-1
 800cdc4:	14c0e42e 	bgeu	r2,r19,800d158 <__umoddi3+0x538>
 800cdc8:	00800604 	movi	r2,24
 800cdcc:	1007883a 	mov	r3,r2
 800cdd0:	9884d83a 	srl	r2,r19,r2
 800cdd4:	010200b4 	movhi	r4,2050
 800cdd8:	2133a404 	addi	r4,r4,-12656
 800cddc:	2085883a 	add	r2,r4,r2
 800cde0:	11000003 	ldbu	r4,0(r2)
 800cde4:	00800804 	movi	r2,32
 800cde8:	20c7883a 	add	r3,r4,r3
 800cdec:	10c5c83a 	sub	r2,r2,r3
 800cdf0:	10009a1e 	bne	r2,zero,800d05c <__umoddi3+0x43c>
 800cdf4:	982cd43a 	srli	r22,r19,16
 800cdf8:	8ce3c83a 	sub	r17,r17,r19
 800cdfc:	9c3fffcc 	andi	r16,r19,65535
 800ce00:	0025883a 	mov	r18,zero
 800ce04:	8809883a 	mov	r4,r17
 800ce08:	b00b883a 	mov	r5,r22
 800ce0c:	800d2d40 	call	800d2d4 <__umodsi3>
 800ce10:	8809883a 	mov	r4,r17
 800ce14:	b00b883a 	mov	r5,r22
 800ce18:	102b883a 	mov	r21,r2
 800ce1c:	800d2cc0 	call	800d2cc <__udivsi3>
 800ce20:	a806943a 	slli	r3,r21,16
 800ce24:	a008d43a 	srli	r4,r20,16
 800ce28:	1405383a 	mul	r2,r2,r16
 800ce2c:	190cb03a 	or	r6,r3,r4
 800ce30:	3080032e 	bgeu	r6,r2,800ce40 <__umoddi3+0x220>
 800ce34:	34cd883a 	add	r6,r6,r19
 800ce38:	34c00136 	bltu	r6,r19,800ce40 <__umoddi3+0x220>
 800ce3c:	3080d436 	bltu	r6,r2,800d190 <__umoddi3+0x570>
 800ce40:	30abc83a 	sub	r21,r6,r2
 800ce44:	a809883a 	mov	r4,r21
 800ce48:	b00b883a 	mov	r5,r22
 800ce4c:	800d2d40 	call	800d2d4 <__umodsi3>
 800ce50:	1023883a 	mov	r17,r2
 800ce54:	a809883a 	mov	r4,r21
 800ce58:	b00b883a 	mov	r5,r22
 800ce5c:	800d2cc0 	call	800d2cc <__udivsi3>
 800ce60:	8822943a 	slli	r17,r17,16
 800ce64:	1405383a 	mul	r2,r2,r16
 800ce68:	a13fffcc 	andi	r4,r20,65535
 800ce6c:	8906b03a 	or	r3,r17,r4
 800ce70:	1880042e 	bgeu	r3,r2,800ce84 <__umoddi3+0x264>
 800ce74:	1cc7883a 	add	r3,r3,r19
 800ce78:	1cc00236 	bltu	r3,r19,800ce84 <__umoddi3+0x264>
 800ce7c:	1880012e 	bgeu	r3,r2,800ce84 <__umoddi3+0x264>
 800ce80:	1cc7883a 	add	r3,r3,r19
 800ce84:	1887c83a 	sub	r3,r3,r2
 800ce88:	1c84d83a 	srl	r2,r3,r18
 800ce8c:	0007883a 	mov	r3,zero
 800ce90:	00000206 	br	800ce9c <__umoddi3+0x27c>
 800ce94:	2005883a 	mov	r2,r4
 800ce98:	2807883a 	mov	r3,r5
 800ce9c:	dfc00b17 	ldw	ra,44(sp)
 800cea0:	df000a17 	ldw	fp,40(sp)
 800cea4:	ddc00917 	ldw	r23,36(sp)
 800cea8:	dd800817 	ldw	r22,32(sp)
 800ceac:	dd400717 	ldw	r21,28(sp)
 800ceb0:	dd000617 	ldw	r20,24(sp)
 800ceb4:	dcc00517 	ldw	r19,20(sp)
 800ceb8:	dc800417 	ldw	r18,16(sp)
 800cebc:	dc400317 	ldw	r17,12(sp)
 800cec0:	dc000217 	ldw	r16,8(sp)
 800cec4:	dec00c04 	addi	sp,sp,48
 800cec8:	f800283a 	ret
 800cecc:	00803fc4 	movi	r2,255
 800ced0:	11c0952e 	bgeu	r2,r7,800d128 <__umoddi3+0x508>
 800ced4:	01400204 	movi	r5,8
 800ced8:	282b883a 	mov	r21,r5
 800cedc:	003f9f06 	br	800cd5c <__alt_data_end+0xfc00cd5c>
 800cee0:	00804034 	movhi	r2,256
 800cee4:	10bfffc4 	addi	r2,r2,-1
 800cee8:	1180952e 	bgeu	r2,r6,800d140 <__umoddi3+0x520>
 800ceec:	01400604 	movi	r5,24
 800cef0:	2805883a 	mov	r2,r5
 800cef4:	003f6206 	br	800cc80 <__alt_data_end+0xfc00cc80>
 800cef8:	00803fc4 	movi	r2,255
 800cefc:	14c0932e 	bgeu	r2,r19,800d14c <__umoddi3+0x52c>
 800cf00:	00800204 	movi	r2,8
 800cf04:	1007883a 	mov	r3,r2
 800cf08:	003fb106 	br	800cdd0 <__alt_data_end+0xfc00cdd0>
 800cf0c:	3548d83a 	srl	r4,r6,r21
 800cf10:	3d0e983a 	sll	r7,r7,r20
 800cf14:	8d10983a 	sll	r8,r17,r20
 800cf18:	8d6cd83a 	srl	r22,r17,r21
 800cf1c:	3922b03a 	or	r17,r7,r4
 800cf20:	882ed43a 	srli	r23,r17,16
 800cf24:	8564d83a 	srl	r18,r16,r21
 800cf28:	b009883a 	mov	r4,r22
 800cf2c:	b80b883a 	mov	r5,r23
 800cf30:	44a4b03a 	or	r18,r8,r18
 800cf34:	3526983a 	sll	r19,r6,r20
 800cf38:	800d2d40 	call	800d2d4 <__umodsi3>
 800cf3c:	b009883a 	mov	r4,r22
 800cf40:	b80b883a 	mov	r5,r23
 800cf44:	1039883a 	mov	fp,r2
 800cf48:	800d2cc0 	call	800d2cc <__udivsi3>
 800cf4c:	102d883a 	mov	r22,r2
 800cf50:	8a3fffcc 	andi	r8,r17,65535
 800cf54:	e004943a 	slli	r2,fp,16
 800cf58:	900cd43a 	srli	r6,r18,16
 800cf5c:	b239383a 	mul	fp,r22,r8
 800cf60:	8520983a 	sll	r16,r16,r20
 800cf64:	118ab03a 	or	r5,r2,r6
 800cf68:	2f00042e 	bgeu	r5,fp,800cf7c <__umoddi3+0x35c>
 800cf6c:	2c4b883a 	add	r5,r5,r17
 800cf70:	b0bfffc4 	addi	r2,r22,-1
 800cf74:	2c40822e 	bgeu	r5,r17,800d180 <__umoddi3+0x560>
 800cf78:	102d883a 	mov	r22,r2
 800cf7c:	2f39c83a 	sub	fp,r5,fp
 800cf80:	e009883a 	mov	r4,fp
 800cf84:	b80b883a 	mov	r5,r23
 800cf88:	da000115 	stw	r8,4(sp)
 800cf8c:	800d2d40 	call	800d2d4 <__umodsi3>
 800cf90:	e009883a 	mov	r4,fp
 800cf94:	b80b883a 	mov	r5,r23
 800cf98:	d8800015 	stw	r2,0(sp)
 800cf9c:	800d2cc0 	call	800d2cc <__udivsi3>
 800cfa0:	d9800017 	ldw	r6,0(sp)
 800cfa4:	da000117 	ldw	r8,4(sp)
 800cfa8:	94bfffcc 	andi	r18,r18,65535
 800cfac:	300c943a 	slli	r6,r6,16
 800cfb0:	1209383a 	mul	r4,r2,r8
 800cfb4:	3490b03a 	or	r8,r6,r18
 800cfb8:	4100042e 	bgeu	r8,r4,800cfcc <__umoddi3+0x3ac>
 800cfbc:	4451883a 	add	r8,r8,r17
 800cfc0:	10ffffc4 	addi	r3,r2,-1
 800cfc4:	44406a2e 	bgeu	r8,r17,800d170 <__umoddi3+0x550>
 800cfc8:	1805883a 	mov	r2,r3
 800cfcc:	b012943a 	slli	r9,r22,16
 800cfd0:	9abfffcc 	andi	r10,r19,65535
 800cfd4:	980ed43a 	srli	r7,r19,16
 800cfd8:	124ab03a 	or	r5,r2,r9
 800cfdc:	2a7fffcc 	andi	r9,r5,65535
 800cfe0:	280ad43a 	srli	r5,r5,16
 800cfe4:	4a8d383a 	mul	r6,r9,r10
 800cfe8:	49d3383a 	mul	r9,r9,r7
 800cfec:	2a95383a 	mul	r10,r5,r10
 800cff0:	3004d43a 	srli	r2,r6,16
 800cff4:	4111c83a 	sub	r8,r8,r4
 800cff8:	5253883a 	add	r9,r10,r9
 800cffc:	4893883a 	add	r9,r9,r2
 800d000:	29cb383a 	mul	r5,r5,r7
 800d004:	4a80022e 	bgeu	r9,r10,800d010 <__umoddi3+0x3f0>
 800d008:	00800074 	movhi	r2,1
 800d00c:	288b883a 	add	r5,r5,r2
 800d010:	4808d43a 	srli	r4,r9,16
 800d014:	4812943a 	slli	r9,r9,16
 800d018:	31bfffcc 	andi	r6,r6,65535
 800d01c:	290b883a 	add	r5,r5,r4
 800d020:	498d883a 	add	r6,r9,r6
 800d024:	41403a36 	bltu	r8,r5,800d110 <__umoddi3+0x4f0>
 800d028:	41405d26 	beq	r8,r5,800d1a0 <__umoddi3+0x580>
 800d02c:	4149c83a 	sub	r4,r8,r5
 800d030:	300f883a 	mov	r7,r6
 800d034:	81cfc83a 	sub	r7,r16,r7
 800d038:	81c7803a 	cmpltu	r3,r16,r7
 800d03c:	20c7c83a 	sub	r3,r4,r3
 800d040:	1d44983a 	sll	r2,r3,r21
 800d044:	3d0ed83a 	srl	r7,r7,r20
 800d048:	1d06d83a 	srl	r3,r3,r20
 800d04c:	11c4b03a 	or	r2,r2,r7
 800d050:	003f9206 	br	800ce9c <__alt_data_end+0xfc00ce9c>
 800d054:	0025883a 	mov	r18,zero
 800d058:	003f1806 	br	800ccbc <__alt_data_end+0xfc00ccbc>
 800d05c:	98a6983a 	sll	r19,r19,r2
 800d060:	88e8d83a 	srl	r20,r17,r3
 800d064:	80c6d83a 	srl	r3,r16,r3
 800d068:	982cd43a 	srli	r22,r19,16
 800d06c:	88a2983a 	sll	r17,r17,r2
 800d070:	a009883a 	mov	r4,r20
 800d074:	b00b883a 	mov	r5,r22
 800d078:	88eab03a 	or	r21,r17,r3
 800d07c:	1025883a 	mov	r18,r2
 800d080:	800d2d40 	call	800d2d4 <__umodsi3>
 800d084:	a009883a 	mov	r4,r20
 800d088:	b00b883a 	mov	r5,r22
 800d08c:	1023883a 	mov	r17,r2
 800d090:	800d2cc0 	call	800d2cc <__udivsi3>
 800d094:	9f3fffcc 	andi	fp,r19,65535
 800d098:	8822943a 	slli	r17,r17,16
 800d09c:	a80ad43a 	srli	r5,r21,16
 800d0a0:	1705383a 	mul	r2,r2,fp
 800d0a4:	84a8983a 	sll	r20,r16,r18
 800d0a8:	8948b03a 	or	r4,r17,r5
 800d0ac:	2080042e 	bgeu	r4,r2,800d0c0 <__umoddi3+0x4a0>
 800d0b0:	24c9883a 	add	r4,r4,r19
 800d0b4:	24c00236 	bltu	r4,r19,800d0c0 <__umoddi3+0x4a0>
 800d0b8:	2080012e 	bgeu	r4,r2,800d0c0 <__umoddi3+0x4a0>
 800d0bc:	24c9883a 	add	r4,r4,r19
 800d0c0:	20afc83a 	sub	r23,r4,r2
 800d0c4:	b809883a 	mov	r4,r23
 800d0c8:	b00b883a 	mov	r5,r22
 800d0cc:	800d2d40 	call	800d2d4 <__umodsi3>
 800d0d0:	1023883a 	mov	r17,r2
 800d0d4:	b809883a 	mov	r4,r23
 800d0d8:	b00b883a 	mov	r5,r22
 800d0dc:	800d2cc0 	call	800d2cc <__udivsi3>
 800d0e0:	8822943a 	slli	r17,r17,16
 800d0e4:	1705383a 	mul	r2,r2,fp
 800d0e8:	a93fffcc 	andi	r4,r21,65535
 800d0ec:	8908b03a 	or	r4,r17,r4
 800d0f0:	2080042e 	bgeu	r4,r2,800d104 <__umoddi3+0x4e4>
 800d0f4:	24c9883a 	add	r4,r4,r19
 800d0f8:	24c00236 	bltu	r4,r19,800d104 <__umoddi3+0x4e4>
 800d0fc:	2080012e 	bgeu	r4,r2,800d104 <__umoddi3+0x4e4>
 800d100:	24c9883a 	add	r4,r4,r19
 800d104:	20a3c83a 	sub	r17,r4,r2
 800d108:	e021883a 	mov	r16,fp
 800d10c:	003f3d06 	br	800ce04 <__alt_data_end+0xfc00ce04>
 800d110:	34cfc83a 	sub	r7,r6,r19
 800d114:	2c4bc83a 	sub	r5,r5,r17
 800d118:	31cd803a 	cmpltu	r6,r6,r7
 800d11c:	298dc83a 	sub	r6,r5,r6
 800d120:	4189c83a 	sub	r4,r8,r6
 800d124:	003fc306 	br	800d034 <__alt_data_end+0xfc00d034>
 800d128:	000b883a 	mov	r5,zero
 800d12c:	002b883a 	mov	r21,zero
 800d130:	003f0a06 	br	800cd5c <__alt_data_end+0xfc00cd5c>
 800d134:	01400404 	movi	r5,16
 800d138:	282b883a 	mov	r21,r5
 800d13c:	003f0706 	br	800cd5c <__alt_data_end+0xfc00cd5c>
 800d140:	01400404 	movi	r5,16
 800d144:	2805883a 	mov	r2,r5
 800d148:	003ecd06 	br	800cc80 <__alt_data_end+0xfc00cc80>
 800d14c:	0005883a 	mov	r2,zero
 800d150:	0007883a 	mov	r3,zero
 800d154:	003f1e06 	br	800cdd0 <__alt_data_end+0xfc00cdd0>
 800d158:	00800404 	movi	r2,16
 800d15c:	1007883a 	mov	r3,r2
 800d160:	003f1b06 	br	800cdd0 <__alt_data_end+0xfc00cdd0>
 800d164:	000b883a 	mov	r5,zero
 800d168:	0005883a 	mov	r2,zero
 800d16c:	003ec406 	br	800cc80 <__alt_data_end+0xfc00cc80>
 800d170:	413f952e 	bgeu	r8,r4,800cfc8 <__alt_data_end+0xfc00cfc8>
 800d174:	10bfff84 	addi	r2,r2,-2
 800d178:	4451883a 	add	r8,r8,r17
 800d17c:	003f9306 	br	800cfcc <__alt_data_end+0xfc00cfcc>
 800d180:	2f3f7d2e 	bgeu	r5,fp,800cf78 <__alt_data_end+0xfc00cf78>
 800d184:	b5bfff84 	addi	r22,r22,-2
 800d188:	2c4b883a 	add	r5,r5,r17
 800d18c:	003f7b06 	br	800cf7c <__alt_data_end+0xfc00cf7c>
 800d190:	34cd883a 	add	r6,r6,r19
 800d194:	003f2a06 	br	800ce40 <__alt_data_end+0xfc00ce40>
 800d198:	8005883a 	mov	r2,r16
 800d19c:	003efe06 	br	800cd98 <__alt_data_end+0xfc00cd98>
 800d1a0:	81bfdb36 	bltu	r16,r6,800d110 <__alt_data_end+0xfc00d110>
 800d1a4:	300f883a 	mov	r7,r6
 800d1a8:	0009883a 	mov	r4,zero
 800d1ac:	003fa106 	br	800d034 <__alt_data_end+0xfc00d034>

0800d1b0 <udivmodsi4>:
 800d1b0:	2900182e 	bgeu	r5,r4,800d214 <udivmodsi4+0x64>
 800d1b4:	28001716 	blt	r5,zero,800d214 <udivmodsi4+0x64>
 800d1b8:	00800804 	movi	r2,32
 800d1bc:	00c00044 	movi	r3,1
 800d1c0:	00000206 	br	800d1cc <udivmodsi4+0x1c>
 800d1c4:	10001126 	beq	r2,zero,800d20c <udivmodsi4+0x5c>
 800d1c8:	28000516 	blt	r5,zero,800d1e0 <udivmodsi4+0x30>
 800d1cc:	294b883a 	add	r5,r5,r5
 800d1d0:	10bfffc4 	addi	r2,r2,-1
 800d1d4:	18c7883a 	add	r3,r3,r3
 800d1d8:	293ffa36 	bltu	r5,r4,800d1c4 <__alt_data_end+0xfc00d1c4>
 800d1dc:	18000b26 	beq	r3,zero,800d20c <udivmodsi4+0x5c>
 800d1e0:	0005883a 	mov	r2,zero
 800d1e4:	21400236 	bltu	r4,r5,800d1f0 <udivmodsi4+0x40>
 800d1e8:	2149c83a 	sub	r4,r4,r5
 800d1ec:	10c4b03a 	or	r2,r2,r3
 800d1f0:	1806d07a 	srli	r3,r3,1
 800d1f4:	280ad07a 	srli	r5,r5,1
 800d1f8:	183ffa1e 	bne	r3,zero,800d1e4 <__alt_data_end+0xfc00d1e4>
 800d1fc:	3000011e 	bne	r6,zero,800d204 <udivmodsi4+0x54>
 800d200:	f800283a 	ret
 800d204:	2005883a 	mov	r2,r4
 800d208:	f800283a 	ret
 800d20c:	0005883a 	mov	r2,zero
 800d210:	003ffa06 	br	800d1fc <__alt_data_end+0xfc00d1fc>
 800d214:	00c00044 	movi	r3,1
 800d218:	003ff106 	br	800d1e0 <__alt_data_end+0xfc00d1e0>

0800d21c <__divsi3>:
 800d21c:	defffe04 	addi	sp,sp,-8
 800d220:	dfc00115 	stw	ra,4(sp)
 800d224:	dc000015 	stw	r16,0(sp)
 800d228:	20000b16 	blt	r4,zero,800d258 <__divsi3+0x3c>
 800d22c:	0021883a 	mov	r16,zero
 800d230:	28000c16 	blt	r5,zero,800d264 <__divsi3+0x48>
 800d234:	000d883a 	mov	r6,zero
 800d238:	800d1b00 	call	800d1b0 <udivmodsi4>
 800d23c:	0407c83a 	sub	r3,zero,r16
 800d240:	1884f03a 	xor	r2,r3,r2
 800d244:	1405883a 	add	r2,r2,r16
 800d248:	dfc00117 	ldw	ra,4(sp)
 800d24c:	dc000017 	ldw	r16,0(sp)
 800d250:	dec00204 	addi	sp,sp,8
 800d254:	f800283a 	ret
 800d258:	0109c83a 	sub	r4,zero,r4
 800d25c:	04000044 	movi	r16,1
 800d260:	283ff40e 	bge	r5,zero,800d234 <__alt_data_end+0xfc00d234>
 800d264:	014bc83a 	sub	r5,zero,r5
 800d268:	8400005c 	xori	r16,r16,1
 800d26c:	003ff106 	br	800d234 <__alt_data_end+0xfc00d234>

0800d270 <__modsi3>:
 800d270:	defffd04 	addi	sp,sp,-12
 800d274:	dfc00215 	stw	ra,8(sp)
 800d278:	dc400115 	stw	r17,4(sp)
 800d27c:	dc000015 	stw	r16,0(sp)
 800d280:	20000c16 	blt	r4,zero,800d2b4 <__modsi3+0x44>
 800d284:	0023883a 	mov	r17,zero
 800d288:	0021883a 	mov	r16,zero
 800d28c:	28000d16 	blt	r5,zero,800d2c4 <__modsi3+0x54>
 800d290:	01800044 	movi	r6,1
 800d294:	800d1b00 	call	800d1b0 <udivmodsi4>
 800d298:	1404f03a 	xor	r2,r2,r16
 800d29c:	8885883a 	add	r2,r17,r2
 800d2a0:	dfc00217 	ldw	ra,8(sp)
 800d2a4:	dc400117 	ldw	r17,4(sp)
 800d2a8:	dc000017 	ldw	r16,0(sp)
 800d2ac:	dec00304 	addi	sp,sp,12
 800d2b0:	f800283a 	ret
 800d2b4:	0109c83a 	sub	r4,zero,r4
 800d2b8:	04400044 	movi	r17,1
 800d2bc:	043fffc4 	movi	r16,-1
 800d2c0:	283ff30e 	bge	r5,zero,800d290 <__alt_data_end+0xfc00d290>
 800d2c4:	014bc83a 	sub	r5,zero,r5
 800d2c8:	003ff106 	br	800d290 <__alt_data_end+0xfc00d290>

0800d2cc <__udivsi3>:
 800d2cc:	000d883a 	mov	r6,zero
 800d2d0:	800d1b01 	jmpi	800d1b0 <udivmodsi4>

0800d2d4 <__umodsi3>:
 800d2d4:	01800044 	movi	r6,1
 800d2d8:	800d1b01 	jmpi	800d1b0 <udivmodsi4>

0800d2dc <__adddf3>:
 800d2dc:	02000434 	movhi	r8,16
 800d2e0:	423fffc4 	addi	r8,r8,-1
 800d2e4:	defffb04 	addi	sp,sp,-20
 800d2e8:	2a12703a 	and	r9,r5,r8
 800d2ec:	2806d7fa 	srli	r3,r5,31
 800d2f0:	3a10703a 	and	r8,r7,r8
 800d2f4:	3804d53a 	srli	r2,r7,20
 800d2f8:	3014d77a 	srli	r10,r6,29
 800d2fc:	dc000015 	stw	r16,0(sp)
 800d300:	481290fa 	slli	r9,r9,3
 800d304:	2820d53a 	srli	r16,r5,20
 800d308:	401090fa 	slli	r8,r8,3
 800d30c:	200ad77a 	srli	r5,r4,29
 800d310:	380ed7fa 	srli	r7,r7,31
 800d314:	dc800215 	stw	r18,8(sp)
 800d318:	dc400115 	stw	r17,4(sp)
 800d31c:	dfc00415 	stw	ra,16(sp)
 800d320:	dcc00315 	stw	r19,12(sp)
 800d324:	1c803fcc 	andi	r18,r3,255
 800d328:	8401ffcc 	andi	r16,r16,2047
 800d32c:	494ab03a 	or	r5,r9,r5
 800d330:	202290fa 	slli	r17,r4,3
 800d334:	1081ffcc 	andi	r2,r2,2047
 800d338:	4290b03a 	or	r8,r8,r10
 800d33c:	300c90fa 	slli	r6,r6,3
 800d340:	91c07026 	beq	r18,r7,800d504 <__adddf3+0x228>
 800d344:	8087c83a 	sub	r3,r16,r2
 800d348:	00c0b30e 	bge	zero,r3,800d618 <__adddf3+0x33c>
 800d34c:	10002a1e 	bne	r2,zero,800d3f8 <__adddf3+0x11c>
 800d350:	4184b03a 	or	r2,r8,r6
 800d354:	1000991e 	bne	r2,zero,800d5bc <__adddf3+0x2e0>
 800d358:	888001cc 	andi	r2,r17,7
 800d35c:	10005b26 	beq	r2,zero,800d4cc <__adddf3+0x1f0>
 800d360:	88c003cc 	andi	r3,r17,15
 800d364:	00800104 	movi	r2,4
 800d368:	18805826 	beq	r3,r2,800d4cc <__adddf3+0x1f0>
 800d36c:	89800104 	addi	r6,r17,4
 800d370:	3463803a 	cmpltu	r17,r6,r17
 800d374:	2c4b883a 	add	r5,r5,r17
 800d378:	2880202c 	andhi	r2,r5,128
 800d37c:	9007883a 	mov	r3,r18
 800d380:	3023883a 	mov	r17,r6
 800d384:	10005426 	beq	r2,zero,800d4d8 <__adddf3+0x1fc>
 800d388:	84000044 	addi	r16,r16,1
 800d38c:	0081ffc4 	movi	r2,2047
 800d390:	8080c126 	beq	r16,r2,800d698 <__adddf3+0x3bc>
 800d394:	013fe034 	movhi	r4,65408
 800d398:	213fffc4 	addi	r4,r4,-1
 800d39c:	290a703a 	and	r5,r5,r4
 800d3a0:	2804977a 	slli	r2,r5,29
 800d3a4:	280a927a 	slli	r5,r5,9
 800d3a8:	8822d0fa 	srli	r17,r17,3
 800d3ac:	8401ffcc 	andi	r16,r16,2047
 800d3b0:	2808d33a 	srli	r4,r5,12
 800d3b4:	1444b03a 	or	r2,r2,r17
 800d3b8:	8401ffcc 	andi	r16,r16,2047
 800d3bc:	800a953a 	slli	r5,r16,20
 800d3c0:	18c03fcc 	andi	r3,r3,255
 800d3c4:	04000434 	movhi	r16,16
 800d3c8:	180697fa 	slli	r3,r3,31
 800d3cc:	843fffc4 	addi	r16,r16,-1
 800d3d0:	2420703a 	and	r16,r4,r16
 800d3d4:	8160b03a 	or	r16,r16,r5
 800d3d8:	80c6b03a 	or	r3,r16,r3
 800d3dc:	dfc00417 	ldw	ra,16(sp)
 800d3e0:	dcc00317 	ldw	r19,12(sp)
 800d3e4:	dc800217 	ldw	r18,8(sp)
 800d3e8:	dc400117 	ldw	r17,4(sp)
 800d3ec:	dc000017 	ldw	r16,0(sp)
 800d3f0:	dec00504 	addi	sp,sp,20
 800d3f4:	f800283a 	ret
 800d3f8:	0081ffc4 	movi	r2,2047
 800d3fc:	80bfd626 	beq	r16,r2,800d358 <__alt_data_end+0xfc00d358>
 800d400:	42002034 	orhi	r8,r8,128
 800d404:	00800e04 	movi	r2,56
 800d408:	10c0a616 	blt	r2,r3,800d6a4 <__adddf3+0x3c8>
 800d40c:	008007c4 	movi	r2,31
 800d410:	10c0c916 	blt	r2,r3,800d738 <__adddf3+0x45c>
 800d414:	00800804 	movi	r2,32
 800d418:	10c5c83a 	sub	r2,r2,r3
 800d41c:	408e983a 	sll	r7,r8,r2
 800d420:	30c8d83a 	srl	r4,r6,r3
 800d424:	3084983a 	sll	r2,r6,r2
 800d428:	40c6d83a 	srl	r3,r8,r3
 800d42c:	390cb03a 	or	r6,r7,r4
 800d430:	1004c03a 	cmpne	r2,r2,zero
 800d434:	308cb03a 	or	r6,r6,r2
 800d438:	898dc83a 	sub	r6,r17,r6
 800d43c:	89a3803a 	cmpltu	r17,r17,r6
 800d440:	28cbc83a 	sub	r5,r5,r3
 800d444:	2c4bc83a 	sub	r5,r5,r17
 800d448:	3023883a 	mov	r17,r6
 800d44c:	2880202c 	andhi	r2,r5,128
 800d450:	10006d26 	beq	r2,zero,800d608 <__adddf3+0x32c>
 800d454:	04c02034 	movhi	r19,128
 800d458:	9cffffc4 	addi	r19,r19,-1
 800d45c:	2ce6703a 	and	r19,r5,r19
 800d460:	98007e26 	beq	r19,zero,800d65c <__adddf3+0x380>
 800d464:	9809883a 	mov	r4,r19
 800d468:	800f8780 	call	800f878 <__clzsi2>
 800d46c:	10fffe04 	addi	r3,r2,-8
 800d470:	010007c4 	movi	r4,31
 800d474:	20c07f16 	blt	r4,r3,800d674 <__adddf3+0x398>
 800d478:	01400a04 	movi	r5,40
 800d47c:	2885c83a 	sub	r2,r5,r2
 800d480:	888ad83a 	srl	r5,r17,r2
 800d484:	98e6983a 	sll	r19,r19,r3
 800d488:	88e2983a 	sll	r17,r17,r3
 800d48c:	2ce6b03a 	or	r19,r5,r19
 800d490:	1c007c16 	blt	r3,r16,800d684 <__adddf3+0x3a8>
 800d494:	1c21c83a 	sub	r16,r3,r16
 800d498:	81400044 	addi	r5,r16,1
 800d49c:	00c007c4 	movi	r3,31
 800d4a0:	19409816 	blt	r3,r5,800d704 <__adddf3+0x428>
 800d4a4:	1c21c83a 	sub	r16,r3,r16
 800d4a8:	8c08983a 	sll	r4,r17,r16
 800d4ac:	8946d83a 	srl	r3,r17,r5
 800d4b0:	9c20983a 	sll	r16,r19,r16
 800d4b4:	2008c03a 	cmpne	r4,r4,zero
 800d4b8:	994ad83a 	srl	r5,r19,r5
 800d4bc:	1c06b03a 	or	r3,r3,r16
 800d4c0:	1922b03a 	or	r17,r3,r4
 800d4c4:	0021883a 	mov	r16,zero
 800d4c8:	003fa306 	br	800d358 <__alt_data_end+0xfc00d358>
 800d4cc:	2880202c 	andhi	r2,r5,128
 800d4d0:	9007883a 	mov	r3,r18
 800d4d4:	103fac1e 	bne	r2,zero,800d388 <__alt_data_end+0xfc00d388>
 800d4d8:	2804977a 	slli	r2,r5,29
 800d4dc:	8822d0fa 	srli	r17,r17,3
 800d4e0:	0101ffc4 	movi	r4,2047
 800d4e4:	280ad0fa 	srli	r5,r5,3
 800d4e8:	1444b03a 	or	r2,r2,r17
 800d4ec:	81002c26 	beq	r16,r4,800d5a0 <__adddf3+0x2c4>
 800d4f0:	8120703a 	and	r16,r16,r4
 800d4f4:	01000434 	movhi	r4,16
 800d4f8:	213fffc4 	addi	r4,r4,-1
 800d4fc:	2908703a 	and	r4,r5,r4
 800d500:	003fad06 	br	800d3b8 <__alt_data_end+0xfc00d3b8>
 800d504:	8089c83a 	sub	r4,r16,r2
 800d508:	01006a0e 	bge	zero,r4,800d6b4 <__adddf3+0x3d8>
 800d50c:	10003326 	beq	r2,zero,800d5dc <__adddf3+0x300>
 800d510:	0081ffc4 	movi	r2,2047
 800d514:	80bf9026 	beq	r16,r2,800d358 <__alt_data_end+0xfc00d358>
 800d518:	42002034 	orhi	r8,r8,128
 800d51c:	00800e04 	movi	r2,56
 800d520:	1100b116 	blt	r2,r4,800d7e8 <__adddf3+0x50c>
 800d524:	008007c4 	movi	r2,31
 800d528:	1100e216 	blt	r2,r4,800d8b4 <__adddf3+0x5d8>
 800d52c:	00800804 	movi	r2,32
 800d530:	1105c83a 	sub	r2,r2,r4
 800d534:	4092983a 	sll	r9,r8,r2
 800d538:	310ed83a 	srl	r7,r6,r4
 800d53c:	3084983a 	sll	r2,r6,r2
 800d540:	4110d83a 	srl	r8,r8,r4
 800d544:	49ccb03a 	or	r6,r9,r7
 800d548:	1004c03a 	cmpne	r2,r2,zero
 800d54c:	308cb03a 	or	r6,r6,r2
 800d550:	344d883a 	add	r6,r6,r17
 800d554:	3463803a 	cmpltu	r17,r6,r17
 800d558:	414b883a 	add	r5,r8,r5
 800d55c:	2c4b883a 	add	r5,r5,r17
 800d560:	3023883a 	mov	r17,r6
 800d564:	2880202c 	andhi	r2,r5,128
 800d568:	10002726 	beq	r2,zero,800d608 <__adddf3+0x32c>
 800d56c:	84000044 	addi	r16,r16,1
 800d570:	0081ffc4 	movi	r2,2047
 800d574:	8080ae26 	beq	r16,r2,800d830 <__adddf3+0x554>
 800d578:	00bfe034 	movhi	r2,65408
 800d57c:	10bfffc4 	addi	r2,r2,-1
 800d580:	288a703a 	and	r5,r5,r2
 800d584:	880cd07a 	srli	r6,r17,1
 800d588:	280897fa 	slli	r4,r5,31
 800d58c:	88c0004c 	andi	r3,r17,1
 800d590:	30e2b03a 	or	r17,r6,r3
 800d594:	280ad07a 	srli	r5,r5,1
 800d598:	8922b03a 	or	r17,r17,r4
 800d59c:	003f6e06 	br	800d358 <__alt_data_end+0xfc00d358>
 800d5a0:	1148b03a 	or	r4,r2,r5
 800d5a4:	20003c26 	beq	r4,zero,800d698 <__adddf3+0x3bc>
 800d5a8:	29000234 	orhi	r4,r5,8
 800d5ac:	01400434 	movhi	r5,16
 800d5b0:	297fffc4 	addi	r5,r5,-1
 800d5b4:	2148703a 	and	r4,r4,r5
 800d5b8:	003f7f06 	br	800d3b8 <__alt_data_end+0xfc00d3b8>
 800d5bc:	18ffffc4 	addi	r3,r3,-1
 800d5c0:	18004d1e 	bne	r3,zero,800d6f8 <__adddf3+0x41c>
 800d5c4:	898dc83a 	sub	r6,r17,r6
 800d5c8:	89a3803a 	cmpltu	r17,r17,r6
 800d5cc:	2a0bc83a 	sub	r5,r5,r8
 800d5d0:	2c4bc83a 	sub	r5,r5,r17
 800d5d4:	3023883a 	mov	r17,r6
 800d5d8:	003f9c06 	br	800d44c <__alt_data_end+0xfc00d44c>
 800d5dc:	4184b03a 	or	r2,r8,r6
 800d5e0:	103f5d26 	beq	r2,zero,800d358 <__alt_data_end+0xfc00d358>
 800d5e4:	213fffc4 	addi	r4,r4,-1
 800d5e8:	203fd926 	beq	r4,zero,800d550 <__alt_data_end+0xfc00d550>
 800d5ec:	0081ffc4 	movi	r2,2047
 800d5f0:	80bfca1e 	bne	r16,r2,800d51c <__alt_data_end+0xfc00d51c>
 800d5f4:	003f5806 	br	800d358 <__alt_data_end+0xfc00d358>
 800d5f8:	10c8b03a 	or	r4,r2,r3
 800d5fc:	20008b26 	beq	r4,zero,800d82c <__adddf3+0x550>
 800d600:	100b883a 	mov	r5,r2
 800d604:	1823883a 	mov	r17,r3
 800d608:	888001cc 	andi	r2,r17,7
 800d60c:	103f541e 	bne	r2,zero,800d360 <__alt_data_end+0xfc00d360>
 800d610:	9007883a 	mov	r3,r18
 800d614:	003fb006 	br	800d4d8 <__alt_data_end+0xfc00d4d8>
 800d618:	1800531e 	bne	r3,zero,800d768 <__adddf3+0x48c>
 800d61c:	80800044 	addi	r2,r16,1
 800d620:	1081ffcc 	andi	r2,r2,2047
 800d624:	00c00044 	movi	r3,1
 800d628:	1880990e 	bge	r3,r2,800d890 <__adddf3+0x5b4>
 800d62c:	8985c83a 	sub	r2,r17,r6
 800d630:	8887803a 	cmpltu	r3,r17,r2
 800d634:	2a27c83a 	sub	r19,r5,r8
 800d638:	98e7c83a 	sub	r19,r19,r3
 800d63c:	98c0202c 	andhi	r3,r19,128
 800d640:	18006226 	beq	r3,zero,800d7cc <__adddf3+0x4f0>
 800d644:	3463c83a 	sub	r17,r6,r17
 800d648:	4151c83a 	sub	r8,r8,r5
 800d64c:	344d803a 	cmpltu	r6,r6,r17
 800d650:	41a7c83a 	sub	r19,r8,r6
 800d654:	3825883a 	mov	r18,r7
 800d658:	983f821e 	bne	r19,zero,800d464 <__alt_data_end+0xfc00d464>
 800d65c:	8809883a 	mov	r4,r17
 800d660:	800f8780 	call	800f878 <__clzsi2>
 800d664:	10800804 	addi	r2,r2,32
 800d668:	10fffe04 	addi	r3,r2,-8
 800d66c:	010007c4 	movi	r4,31
 800d670:	20ff810e 	bge	r4,r3,800d478 <__alt_data_end+0xfc00d478>
 800d674:	14fff604 	addi	r19,r2,-40
 800d678:	8ce6983a 	sll	r19,r17,r19
 800d67c:	0023883a 	mov	r17,zero
 800d680:	1c3f840e 	bge	r3,r16,800d494 <__alt_data_end+0xfc00d494>
 800d684:	017fe034 	movhi	r5,65408
 800d688:	297fffc4 	addi	r5,r5,-1
 800d68c:	80e1c83a 	sub	r16,r16,r3
 800d690:	994a703a 	and	r5,r19,r5
 800d694:	003f3006 	br	800d358 <__alt_data_end+0xfc00d358>
 800d698:	0009883a 	mov	r4,zero
 800d69c:	0005883a 	mov	r2,zero
 800d6a0:	003f4506 	br	800d3b8 <__alt_data_end+0xfc00d3b8>
 800d6a4:	418cb03a 	or	r6,r8,r6
 800d6a8:	300cc03a 	cmpne	r6,r6,zero
 800d6ac:	0007883a 	mov	r3,zero
 800d6b0:	003f6106 	br	800d438 <__alt_data_end+0xfc00d438>
 800d6b4:	2000921e 	bne	r4,zero,800d900 <__adddf3+0x624>
 800d6b8:	80800044 	addi	r2,r16,1
 800d6bc:	11c1ffcc 	andi	r7,r2,2047
 800d6c0:	01000044 	movi	r4,1
 800d6c4:	21c0610e 	bge	r4,r7,800d84c <__adddf3+0x570>
 800d6c8:	0101ffc4 	movi	r4,2047
 800d6cc:	1100a326 	beq	r2,r4,800d95c <__adddf3+0x680>
 800d6d0:	344d883a 	add	r6,r6,r17
 800d6d4:	3463803a 	cmpltu	r17,r6,r17
 800d6d8:	414b883a 	add	r5,r8,r5
 800d6dc:	2c4b883a 	add	r5,r5,r17
 800d6e0:	282297fa 	slli	r17,r5,31
 800d6e4:	300cd07a 	srli	r6,r6,1
 800d6e8:	280ad07a 	srli	r5,r5,1
 800d6ec:	1021883a 	mov	r16,r2
 800d6f0:	89a2b03a 	or	r17,r17,r6
 800d6f4:	003f1806 	br	800d358 <__alt_data_end+0xfc00d358>
 800d6f8:	0081ffc4 	movi	r2,2047
 800d6fc:	80bf411e 	bne	r16,r2,800d404 <__alt_data_end+0xfc00d404>
 800d700:	003f1506 	br	800d358 <__alt_data_end+0xfc00d358>
 800d704:	80bff844 	addi	r2,r16,-31
 800d708:	00c00804 	movi	r3,32
 800d70c:	9884d83a 	srl	r2,r19,r2
 800d710:	28c04a26 	beq	r5,r3,800d83c <__adddf3+0x560>
 800d714:	00c00fc4 	movi	r3,63
 800d718:	1c21c83a 	sub	r16,r3,r16
 800d71c:	9c26983a 	sll	r19,r19,r16
 800d720:	9c62b03a 	or	r17,r19,r17
 800d724:	8822c03a 	cmpne	r17,r17,zero
 800d728:	88a2b03a 	or	r17,r17,r2
 800d72c:	000b883a 	mov	r5,zero
 800d730:	0021883a 	mov	r16,zero
 800d734:	003fb406 	br	800d608 <__alt_data_end+0xfc00d608>
 800d738:	18bff804 	addi	r2,r3,-32
 800d73c:	01000804 	movi	r4,32
 800d740:	4084d83a 	srl	r2,r8,r2
 800d744:	19003f26 	beq	r3,r4,800d844 <__adddf3+0x568>
 800d748:	01001004 	movi	r4,64
 800d74c:	20c7c83a 	sub	r3,r4,r3
 800d750:	40d0983a 	sll	r8,r8,r3
 800d754:	418cb03a 	or	r6,r8,r6
 800d758:	300cc03a 	cmpne	r6,r6,zero
 800d75c:	308cb03a 	or	r6,r6,r2
 800d760:	0007883a 	mov	r3,zero
 800d764:	003f3406 	br	800d438 <__alt_data_end+0xfc00d438>
 800d768:	80002326 	beq	r16,zero,800d7f8 <__adddf3+0x51c>
 800d76c:	0101ffc4 	movi	r4,2047
 800d770:	11005e26 	beq	r2,r4,800d8ec <__adddf3+0x610>
 800d774:	00c7c83a 	sub	r3,zero,r3
 800d778:	29402034 	orhi	r5,r5,128
 800d77c:	01000e04 	movi	r4,56
 800d780:	20c07216 	blt	r4,r3,800d94c <__adddf3+0x670>
 800d784:	010007c4 	movi	r4,31
 800d788:	20c0ce16 	blt	r4,r3,800dac4 <__adddf3+0x7e8>
 800d78c:	01000804 	movi	r4,32
 800d790:	20c9c83a 	sub	r4,r4,r3
 800d794:	2914983a 	sll	r10,r5,r4
 800d798:	88d2d83a 	srl	r9,r17,r3
 800d79c:	8908983a 	sll	r4,r17,r4
 800d7a0:	28c6d83a 	srl	r3,r5,r3
 800d7a4:	5262b03a 	or	r17,r10,r9
 800d7a8:	2008c03a 	cmpne	r4,r4,zero
 800d7ac:	8922b03a 	or	r17,r17,r4
 800d7b0:	3463c83a 	sub	r17,r6,r17
 800d7b4:	40c7c83a 	sub	r3,r8,r3
 800d7b8:	344d803a 	cmpltu	r6,r6,r17
 800d7bc:	198bc83a 	sub	r5,r3,r6
 800d7c0:	1021883a 	mov	r16,r2
 800d7c4:	3825883a 	mov	r18,r7
 800d7c8:	003f2006 	br	800d44c <__alt_data_end+0xfc00d44c>
 800d7cc:	9886b03a 	or	r3,r19,r2
 800d7d0:	1800141e 	bne	r3,zero,800d824 <__adddf3+0x548>
 800d7d4:	0007883a 	mov	r3,zero
 800d7d8:	000b883a 	mov	r5,zero
 800d7dc:	0023883a 	mov	r17,zero
 800d7e0:	0021883a 	mov	r16,zero
 800d7e4:	003f3c06 	br	800d4d8 <__alt_data_end+0xfc00d4d8>
 800d7e8:	418cb03a 	or	r6,r8,r6
 800d7ec:	300cc03a 	cmpne	r6,r6,zero
 800d7f0:	0011883a 	mov	r8,zero
 800d7f4:	003f5606 	br	800d550 <__alt_data_end+0xfc00d550>
 800d7f8:	2c48b03a 	or	r4,r5,r17
 800d7fc:	20003b26 	beq	r4,zero,800d8ec <__adddf3+0x610>
 800d800:	00c6303a 	nor	r3,zero,r3
 800d804:	1800371e 	bne	r3,zero,800d8e4 <__adddf3+0x608>
 800d808:	3463c83a 	sub	r17,r6,r17
 800d80c:	414bc83a 	sub	r5,r8,r5
 800d810:	344d803a 	cmpltu	r6,r6,r17
 800d814:	298bc83a 	sub	r5,r5,r6
 800d818:	1021883a 	mov	r16,r2
 800d81c:	3825883a 	mov	r18,r7
 800d820:	003f0a06 	br	800d44c <__alt_data_end+0xfc00d44c>
 800d824:	1023883a 	mov	r17,r2
 800d828:	003f0d06 	br	800d460 <__alt_data_end+0xfc00d460>
 800d82c:	0007883a 	mov	r3,zero
 800d830:	000b883a 	mov	r5,zero
 800d834:	0023883a 	mov	r17,zero
 800d838:	003f2706 	br	800d4d8 <__alt_data_end+0xfc00d4d8>
 800d83c:	0027883a 	mov	r19,zero
 800d840:	003fb706 	br	800d720 <__alt_data_end+0xfc00d720>
 800d844:	0011883a 	mov	r8,zero
 800d848:	003fc206 	br	800d754 <__alt_data_end+0xfc00d754>
 800d84c:	2c44b03a 	or	r2,r5,r17
 800d850:	8000871e 	bne	r16,zero,800da70 <__adddf3+0x794>
 800d854:	1000b126 	beq	r2,zero,800db1c <__adddf3+0x840>
 800d858:	4184b03a 	or	r2,r8,r6
 800d85c:	103ebe26 	beq	r2,zero,800d358 <__alt_data_end+0xfc00d358>
 800d860:	3445883a 	add	r2,r6,r17
 800d864:	1463803a 	cmpltu	r17,r2,r17
 800d868:	414b883a 	add	r5,r8,r5
 800d86c:	2c4b883a 	add	r5,r5,r17
 800d870:	28c0202c 	andhi	r3,r5,128
 800d874:	1023883a 	mov	r17,r2
 800d878:	183f6326 	beq	r3,zero,800d608 <__alt_data_end+0xfc00d608>
 800d87c:	00bfe034 	movhi	r2,65408
 800d880:	10bfffc4 	addi	r2,r2,-1
 800d884:	2021883a 	mov	r16,r4
 800d888:	288a703a 	and	r5,r5,r2
 800d88c:	003eb206 	br	800d358 <__alt_data_end+0xfc00d358>
 800d890:	2c44b03a 	or	r2,r5,r17
 800d894:	8000251e 	bne	r16,zero,800d92c <__adddf3+0x650>
 800d898:	10004b1e 	bne	r2,zero,800d9c8 <__adddf3+0x6ec>
 800d89c:	4184b03a 	or	r2,r8,r6
 800d8a0:	103fe226 	beq	r2,zero,800d82c <__alt_data_end+0xfc00d82c>
 800d8a4:	400b883a 	mov	r5,r8
 800d8a8:	3023883a 	mov	r17,r6
 800d8ac:	3825883a 	mov	r18,r7
 800d8b0:	003ea906 	br	800d358 <__alt_data_end+0xfc00d358>
 800d8b4:	20bff804 	addi	r2,r4,-32
 800d8b8:	01c00804 	movi	r7,32
 800d8bc:	4084d83a 	srl	r2,r8,r2
 800d8c0:	21c07e26 	beq	r4,r7,800dabc <__adddf3+0x7e0>
 800d8c4:	01c01004 	movi	r7,64
 800d8c8:	3909c83a 	sub	r4,r7,r4
 800d8cc:	4110983a 	sll	r8,r8,r4
 800d8d0:	418cb03a 	or	r6,r8,r6
 800d8d4:	300cc03a 	cmpne	r6,r6,zero
 800d8d8:	308cb03a 	or	r6,r6,r2
 800d8dc:	0011883a 	mov	r8,zero
 800d8e0:	003f1b06 	br	800d550 <__alt_data_end+0xfc00d550>
 800d8e4:	0101ffc4 	movi	r4,2047
 800d8e8:	113fa41e 	bne	r2,r4,800d77c <__alt_data_end+0xfc00d77c>
 800d8ec:	400b883a 	mov	r5,r8
 800d8f0:	3023883a 	mov	r17,r6
 800d8f4:	1021883a 	mov	r16,r2
 800d8f8:	3825883a 	mov	r18,r7
 800d8fc:	003e9606 	br	800d358 <__alt_data_end+0xfc00d358>
 800d900:	80001a1e 	bne	r16,zero,800d96c <__adddf3+0x690>
 800d904:	2c4eb03a 	or	r7,r5,r17
 800d908:	38005526 	beq	r7,zero,800da60 <__adddf3+0x784>
 800d90c:	0108303a 	nor	r4,zero,r4
 800d910:	2000511e 	bne	r4,zero,800da58 <__adddf3+0x77c>
 800d914:	89a3883a 	add	r17,r17,r6
 800d918:	414b883a 	add	r5,r8,r5
 800d91c:	898d803a 	cmpltu	r6,r17,r6
 800d920:	298b883a 	add	r5,r5,r6
 800d924:	1021883a 	mov	r16,r2
 800d928:	003f0e06 	br	800d564 <__alt_data_end+0xfc00d564>
 800d92c:	1000341e 	bne	r2,zero,800da00 <__adddf3+0x724>
 800d930:	4184b03a 	or	r2,r8,r6
 800d934:	10006f26 	beq	r2,zero,800daf4 <__adddf3+0x818>
 800d938:	400b883a 	mov	r5,r8
 800d93c:	3023883a 	mov	r17,r6
 800d940:	3825883a 	mov	r18,r7
 800d944:	0401ffc4 	movi	r16,2047
 800d948:	003e8306 	br	800d358 <__alt_data_end+0xfc00d358>
 800d94c:	2c62b03a 	or	r17,r5,r17
 800d950:	8822c03a 	cmpne	r17,r17,zero
 800d954:	0007883a 	mov	r3,zero
 800d958:	003f9506 	br	800d7b0 <__alt_data_end+0xfc00d7b0>
 800d95c:	1021883a 	mov	r16,r2
 800d960:	000b883a 	mov	r5,zero
 800d964:	0023883a 	mov	r17,zero
 800d968:	003edb06 	br	800d4d8 <__alt_data_end+0xfc00d4d8>
 800d96c:	01c1ffc4 	movi	r7,2047
 800d970:	11c03b26 	beq	r2,r7,800da60 <__adddf3+0x784>
 800d974:	0109c83a 	sub	r4,zero,r4
 800d978:	29402034 	orhi	r5,r5,128
 800d97c:	01c00e04 	movi	r7,56
 800d980:	39006216 	blt	r7,r4,800db0c <__adddf3+0x830>
 800d984:	01c007c4 	movi	r7,31
 800d988:	39006b16 	blt	r7,r4,800db38 <__adddf3+0x85c>
 800d98c:	01c00804 	movi	r7,32
 800d990:	390fc83a 	sub	r7,r7,r4
 800d994:	29d4983a 	sll	r10,r5,r7
 800d998:	8912d83a 	srl	r9,r17,r4
 800d99c:	89ce983a 	sll	r7,r17,r7
 800d9a0:	2908d83a 	srl	r4,r5,r4
 800d9a4:	5262b03a 	or	r17,r10,r9
 800d9a8:	380ac03a 	cmpne	r5,r7,zero
 800d9ac:	8962b03a 	or	r17,r17,r5
 800d9b0:	89a3883a 	add	r17,r17,r6
 800d9b4:	2211883a 	add	r8,r4,r8
 800d9b8:	898d803a 	cmpltu	r6,r17,r6
 800d9bc:	418b883a 	add	r5,r8,r6
 800d9c0:	1021883a 	mov	r16,r2
 800d9c4:	003ee706 	br	800d564 <__alt_data_end+0xfc00d564>
 800d9c8:	4184b03a 	or	r2,r8,r6
 800d9cc:	103e6226 	beq	r2,zero,800d358 <__alt_data_end+0xfc00d358>
 800d9d0:	8987c83a 	sub	r3,r17,r6
 800d9d4:	88c9803a 	cmpltu	r4,r17,r3
 800d9d8:	2a05c83a 	sub	r2,r5,r8
 800d9dc:	1105c83a 	sub	r2,r2,r4
 800d9e0:	1100202c 	andhi	r4,r2,128
 800d9e4:	203f0426 	beq	r4,zero,800d5f8 <__alt_data_end+0xfc00d5f8>
 800d9e8:	3463c83a 	sub	r17,r6,r17
 800d9ec:	414bc83a 	sub	r5,r8,r5
 800d9f0:	344d803a 	cmpltu	r6,r6,r17
 800d9f4:	298bc83a 	sub	r5,r5,r6
 800d9f8:	3825883a 	mov	r18,r7
 800d9fc:	003e5606 	br	800d358 <__alt_data_end+0xfc00d358>
 800da00:	4184b03a 	or	r2,r8,r6
 800da04:	10002b26 	beq	r2,zero,800dab4 <__adddf3+0x7d8>
 800da08:	2804d0fa 	srli	r2,r5,3
 800da0c:	8822d0fa 	srli	r17,r17,3
 800da10:	280a977a 	slli	r5,r5,29
 800da14:	10c0022c 	andhi	r3,r2,8
 800da18:	2c62b03a 	or	r17,r5,r17
 800da1c:	18000826 	beq	r3,zero,800da40 <__adddf3+0x764>
 800da20:	4008d0fa 	srli	r4,r8,3
 800da24:	20c0022c 	andhi	r3,r4,8
 800da28:	1800051e 	bne	r3,zero,800da40 <__adddf3+0x764>
 800da2c:	300cd0fa 	srli	r6,r6,3
 800da30:	4010977a 	slli	r8,r8,29
 800da34:	2005883a 	mov	r2,r4
 800da38:	3825883a 	mov	r18,r7
 800da3c:	41a2b03a 	or	r17,r8,r6
 800da40:	880ad77a 	srli	r5,r17,29
 800da44:	100490fa 	slli	r2,r2,3
 800da48:	882290fa 	slli	r17,r17,3
 800da4c:	0401ffc4 	movi	r16,2047
 800da50:	288ab03a 	or	r5,r5,r2
 800da54:	003e4006 	br	800d358 <__alt_data_end+0xfc00d358>
 800da58:	01c1ffc4 	movi	r7,2047
 800da5c:	11ffc71e 	bne	r2,r7,800d97c <__alt_data_end+0xfc00d97c>
 800da60:	400b883a 	mov	r5,r8
 800da64:	3023883a 	mov	r17,r6
 800da68:	1021883a 	mov	r16,r2
 800da6c:	003e3a06 	br	800d358 <__alt_data_end+0xfc00d358>
 800da70:	10002d26 	beq	r2,zero,800db28 <__adddf3+0x84c>
 800da74:	4184b03a 	or	r2,r8,r6
 800da78:	10000e26 	beq	r2,zero,800dab4 <__adddf3+0x7d8>
 800da7c:	2804d0fa 	srli	r2,r5,3
 800da80:	8822d0fa 	srli	r17,r17,3
 800da84:	280a977a 	slli	r5,r5,29
 800da88:	10c0022c 	andhi	r3,r2,8
 800da8c:	2c62b03a 	or	r17,r5,r17
 800da90:	183feb26 	beq	r3,zero,800da40 <__alt_data_end+0xfc00da40>
 800da94:	4008d0fa 	srli	r4,r8,3
 800da98:	20c0022c 	andhi	r3,r4,8
 800da9c:	183fe81e 	bne	r3,zero,800da40 <__alt_data_end+0xfc00da40>
 800daa0:	300cd0fa 	srli	r6,r6,3
 800daa4:	4010977a 	slli	r8,r8,29
 800daa8:	2005883a 	mov	r2,r4
 800daac:	41a2b03a 	or	r17,r8,r6
 800dab0:	003fe306 	br	800da40 <__alt_data_end+0xfc00da40>
 800dab4:	0401ffc4 	movi	r16,2047
 800dab8:	003e2706 	br	800d358 <__alt_data_end+0xfc00d358>
 800dabc:	0011883a 	mov	r8,zero
 800dac0:	003f8306 	br	800d8d0 <__alt_data_end+0xfc00d8d0>
 800dac4:	193ff804 	addi	r4,r3,-32
 800dac8:	02400804 	movi	r9,32
 800dacc:	2908d83a 	srl	r4,r5,r4
 800dad0:	1a402526 	beq	r3,r9,800db68 <__adddf3+0x88c>
 800dad4:	02401004 	movi	r9,64
 800dad8:	48c7c83a 	sub	r3,r9,r3
 800dadc:	28ca983a 	sll	r5,r5,r3
 800dae0:	2c62b03a 	or	r17,r5,r17
 800dae4:	8822c03a 	cmpne	r17,r17,zero
 800dae8:	8922b03a 	or	r17,r17,r4
 800daec:	0007883a 	mov	r3,zero
 800daf0:	003f2f06 	br	800d7b0 <__alt_data_end+0xfc00d7b0>
 800daf4:	01402034 	movhi	r5,128
 800daf8:	0007883a 	mov	r3,zero
 800dafc:	297fffc4 	addi	r5,r5,-1
 800db00:	047ffe04 	movi	r17,-8
 800db04:	0401ffc4 	movi	r16,2047
 800db08:	003e7306 	br	800d4d8 <__alt_data_end+0xfc00d4d8>
 800db0c:	2c62b03a 	or	r17,r5,r17
 800db10:	8822c03a 	cmpne	r17,r17,zero
 800db14:	0009883a 	mov	r4,zero
 800db18:	003fa506 	br	800d9b0 <__alt_data_end+0xfc00d9b0>
 800db1c:	400b883a 	mov	r5,r8
 800db20:	3023883a 	mov	r17,r6
 800db24:	003e0c06 	br	800d358 <__alt_data_end+0xfc00d358>
 800db28:	400b883a 	mov	r5,r8
 800db2c:	3023883a 	mov	r17,r6
 800db30:	0401ffc4 	movi	r16,2047
 800db34:	003e0806 	br	800d358 <__alt_data_end+0xfc00d358>
 800db38:	21fff804 	addi	r7,r4,-32
 800db3c:	02400804 	movi	r9,32
 800db40:	29ced83a 	srl	r7,r5,r7
 800db44:	22400a26 	beq	r4,r9,800db70 <__adddf3+0x894>
 800db48:	02401004 	movi	r9,64
 800db4c:	4909c83a 	sub	r4,r9,r4
 800db50:	290a983a 	sll	r5,r5,r4
 800db54:	2c62b03a 	or	r17,r5,r17
 800db58:	8822c03a 	cmpne	r17,r17,zero
 800db5c:	89e2b03a 	or	r17,r17,r7
 800db60:	0009883a 	mov	r4,zero
 800db64:	003f9206 	br	800d9b0 <__alt_data_end+0xfc00d9b0>
 800db68:	000b883a 	mov	r5,zero
 800db6c:	003fdc06 	br	800dae0 <__alt_data_end+0xfc00dae0>
 800db70:	000b883a 	mov	r5,zero
 800db74:	003ff706 	br	800db54 <__alt_data_end+0xfc00db54>

0800db78 <__divdf3>:
 800db78:	defff204 	addi	sp,sp,-56
 800db7c:	dd000815 	stw	r20,32(sp)
 800db80:	2828d53a 	srli	r20,r5,20
 800db84:	dd800a15 	stw	r22,40(sp)
 800db88:	282cd7fa 	srli	r22,r5,31
 800db8c:	dc000415 	stw	r16,16(sp)
 800db90:	04000434 	movhi	r16,16
 800db94:	df000c15 	stw	fp,48(sp)
 800db98:	dcc00715 	stw	r19,28(sp)
 800db9c:	dc800615 	stw	r18,24(sp)
 800dba0:	dc400515 	stw	r17,20(sp)
 800dba4:	843fffc4 	addi	r16,r16,-1
 800dba8:	dfc00d15 	stw	ra,52(sp)
 800dbac:	ddc00b15 	stw	r23,44(sp)
 800dbb0:	dd400915 	stw	r21,36(sp)
 800dbb4:	a501ffcc 	andi	r20,r20,2047
 800dbb8:	2025883a 	mov	r18,r4
 800dbbc:	2027883a 	mov	r19,r4
 800dbc0:	2c22703a 	and	r17,r5,r16
 800dbc4:	b7003fcc 	andi	fp,r22,255
 800dbc8:	a0005e26 	beq	r20,zero,800dd44 <__divdf3+0x1cc>
 800dbcc:	0081ffc4 	movi	r2,2047
 800dbd0:	a0803526 	beq	r20,r2,800dca8 <__divdf3+0x130>
 800dbd4:	8c000434 	orhi	r16,r17,16
 800dbd8:	2004d77a 	srli	r2,r4,29
 800dbdc:	802090fa 	slli	r16,r16,3
 800dbe0:	202690fa 	slli	r19,r4,3
 800dbe4:	a53f0044 	addi	r20,r20,-1023
 800dbe8:	80a2b03a 	or	r17,r16,r2
 800dbec:	0025883a 	mov	r18,zero
 800dbf0:	0011883a 	mov	r8,zero
 800dbf4:	380ad53a 	srli	r5,r7,20
 800dbf8:	382ed7fa 	srli	r23,r7,31
 800dbfc:	04000434 	movhi	r16,16
 800dc00:	843fffc4 	addi	r16,r16,-1
 800dc04:	2941ffcc 	andi	r5,r5,2047
 800dc08:	302b883a 	mov	r21,r6
 800dc0c:	3c20703a 	and	r16,r7,r16
 800dc10:	ba403fcc 	andi	r9,r23,255
 800dc14:	28006726 	beq	r5,zero,800ddb4 <__divdf3+0x23c>
 800dc18:	0081ffc4 	movi	r2,2047
 800dc1c:	28805f26 	beq	r5,r2,800dd9c <__divdf3+0x224>
 800dc20:	84000434 	orhi	r16,r16,16
 800dc24:	3004d77a 	srli	r2,r6,29
 800dc28:	802090fa 	slli	r16,r16,3
 800dc2c:	302a90fa 	slli	r21,r6,3
 800dc30:	297f0044 	addi	r5,r5,-1023
 800dc34:	80a0b03a 	or	r16,r16,r2
 800dc38:	000f883a 	mov	r7,zero
 800dc3c:	3c86b03a 	or	r3,r7,r18
 800dc40:	180690ba 	slli	r3,r3,2
 800dc44:	00820074 	movhi	r2,2049
 800dc48:	10b71a04 	addi	r2,r2,-9112
 800dc4c:	1887883a 	add	r3,r3,r2
 800dc50:	18c00017 	ldw	r3,0(r3)
 800dc54:	b5c8f03a 	xor	r4,r22,r23
 800dc58:	200d883a 	mov	r6,r4
 800dc5c:	24803fcc 	andi	r18,r4,255
 800dc60:	a169c83a 	sub	r20,r20,r5
 800dc64:	1800683a 	jmp	r3
 800dc68:	0800deb0 	cmpltui	zero,at,890
 800dc6c:	0800dce0 	cmpeqi	zero,at,883
 800dc70:	0800de74 	orhi	zero,at,889
 800dc74:	0800dcc4 	addi	zero,at,883
 800dc78:	0800de74 	orhi	zero,at,889
 800dc7c:	0800de48 	cmpgei	zero,at,889
 800dc80:	0800de74 	orhi	zero,at,889
 800dc84:	0800dcc4 	addi	zero,at,883
 800dc88:	0800dce0 	cmpeqi	zero,at,883
 800dc8c:	0800dce0 	cmpeqi	zero,at,883
 800dc90:	0800de48 	cmpgei	zero,at,889
 800dc94:	0800dcc4 	addi	zero,at,883
 800dc98:	0800dcd4 	ori	zero,at,883
 800dc9c:	0800dcd4 	ori	zero,at,883
 800dca0:	0800dcd4 	ori	zero,at,883
 800dca4:	0800de84 	addi	zero,at,890
 800dca8:	8904b03a 	or	r2,r17,r4
 800dcac:	1000631e 	bne	r2,zero,800de3c <__divdf3+0x2c4>
 800dcb0:	04800204 	movi	r18,8
 800dcb4:	0023883a 	mov	r17,zero
 800dcb8:	0027883a 	mov	r19,zero
 800dcbc:	02000084 	movi	r8,2
 800dcc0:	003fcc06 	br	800dbf4 <__alt_data_end+0xfc00dbf4>
 800dcc4:	8023883a 	mov	r17,r16
 800dcc8:	a827883a 	mov	r19,r21
 800dccc:	4839883a 	mov	fp,r9
 800dcd0:	3811883a 	mov	r8,r7
 800dcd4:	00800084 	movi	r2,2
 800dcd8:	40812a1e 	bne	r8,r2,800e184 <__divdf3+0x60c>
 800dcdc:	e025883a 	mov	r18,fp
 800dce0:	9180004c 	andi	r6,r18,1
 800dce4:	0101ffc4 	movi	r4,2047
 800dce8:	000b883a 	mov	r5,zero
 800dcec:	0027883a 	mov	r19,zero
 800dcf0:	2008953a 	slli	r4,r4,20
 800dcf4:	30c03fcc 	andi	r3,r6,255
 800dcf8:	04000434 	movhi	r16,16
 800dcfc:	180697fa 	slli	r3,r3,31
 800dd00:	843fffc4 	addi	r16,r16,-1
 800dd04:	2c20703a 	and	r16,r5,r16
 800dd08:	8120b03a 	or	r16,r16,r4
 800dd0c:	80c6b03a 	or	r3,r16,r3
 800dd10:	9805883a 	mov	r2,r19
 800dd14:	dfc00d17 	ldw	ra,52(sp)
 800dd18:	df000c17 	ldw	fp,48(sp)
 800dd1c:	ddc00b17 	ldw	r23,44(sp)
 800dd20:	dd800a17 	ldw	r22,40(sp)
 800dd24:	dd400917 	ldw	r21,36(sp)
 800dd28:	dd000817 	ldw	r20,32(sp)
 800dd2c:	dcc00717 	ldw	r19,28(sp)
 800dd30:	dc800617 	ldw	r18,24(sp)
 800dd34:	dc400517 	ldw	r17,20(sp)
 800dd38:	dc000417 	ldw	r16,16(sp)
 800dd3c:	dec00e04 	addi	sp,sp,56
 800dd40:	f800283a 	ret
 800dd44:	8904b03a 	or	r2,r17,r4
 800dd48:	10003726 	beq	r2,zero,800de28 <__divdf3+0x2b0>
 800dd4c:	88011c26 	beq	r17,zero,800e1c0 <__divdf3+0x648>
 800dd50:	8809883a 	mov	r4,r17
 800dd54:	d9800315 	stw	r6,12(sp)
 800dd58:	d9c00115 	stw	r7,4(sp)
 800dd5c:	800f8780 	call	800f878 <__clzsi2>
 800dd60:	d9800317 	ldw	r6,12(sp)
 800dd64:	d9c00117 	ldw	r7,4(sp)
 800dd68:	1007883a 	mov	r3,r2
 800dd6c:	01000a04 	movi	r4,40
 800dd70:	1cfffe04 	addi	r19,r3,-8
 800dd74:	20c9c83a 	sub	r4,r4,r3
 800dd78:	8cca983a 	sll	r5,r17,r19
 800dd7c:	9108d83a 	srl	r4,r18,r4
 800dd80:	94e6983a 	sll	r19,r18,r19
 800dd84:	2162b03a 	or	r17,r4,r5
 800dd88:	053f0344 	movi	r20,-1011
 800dd8c:	a0e9c83a 	sub	r20,r20,r3
 800dd90:	0025883a 	mov	r18,zero
 800dd94:	0011883a 	mov	r8,zero
 800dd98:	003f9606 	br	800dbf4 <__alt_data_end+0xfc00dbf4>
 800dd9c:	8184b03a 	or	r2,r16,r6
 800dda0:	10001f1e 	bne	r2,zero,800de20 <__divdf3+0x2a8>
 800dda4:	0021883a 	mov	r16,zero
 800dda8:	002b883a 	mov	r21,zero
 800ddac:	01c00084 	movi	r7,2
 800ddb0:	003fa206 	br	800dc3c <__alt_data_end+0xfc00dc3c>
 800ddb4:	8184b03a 	or	r2,r16,r6
 800ddb8:	10001526 	beq	r2,zero,800de10 <__divdf3+0x298>
 800ddbc:	80010c26 	beq	r16,zero,800e1f0 <__divdf3+0x678>
 800ddc0:	8009883a 	mov	r4,r16
 800ddc4:	d9800315 	stw	r6,12(sp)
 800ddc8:	da000215 	stw	r8,8(sp)
 800ddcc:	da400015 	stw	r9,0(sp)
 800ddd0:	800f8780 	call	800f878 <__clzsi2>
 800ddd4:	d9800317 	ldw	r6,12(sp)
 800ddd8:	da000217 	ldw	r8,8(sp)
 800dddc:	da400017 	ldw	r9,0(sp)
 800dde0:	1007883a 	mov	r3,r2
 800dde4:	01000a04 	movi	r4,40
 800dde8:	1d7ffe04 	addi	r21,r3,-8
 800ddec:	20c9c83a 	sub	r4,r4,r3
 800ddf0:	8560983a 	sll	r16,r16,r21
 800ddf4:	3108d83a 	srl	r4,r6,r4
 800ddf8:	356a983a 	sll	r21,r6,r21
 800ddfc:	2420b03a 	or	r16,r4,r16
 800de00:	017f0344 	movi	r5,-1011
 800de04:	28cbc83a 	sub	r5,r5,r3
 800de08:	000f883a 	mov	r7,zero
 800de0c:	003f8b06 	br	800dc3c <__alt_data_end+0xfc00dc3c>
 800de10:	0021883a 	mov	r16,zero
 800de14:	002b883a 	mov	r21,zero
 800de18:	01c00044 	movi	r7,1
 800de1c:	003f8706 	br	800dc3c <__alt_data_end+0xfc00dc3c>
 800de20:	01c000c4 	movi	r7,3
 800de24:	003f8506 	br	800dc3c <__alt_data_end+0xfc00dc3c>
 800de28:	04800104 	movi	r18,4
 800de2c:	0023883a 	mov	r17,zero
 800de30:	0027883a 	mov	r19,zero
 800de34:	02000044 	movi	r8,1
 800de38:	003f6e06 	br	800dbf4 <__alt_data_end+0xfc00dbf4>
 800de3c:	04800304 	movi	r18,12
 800de40:	020000c4 	movi	r8,3
 800de44:	003f6b06 	br	800dbf4 <__alt_data_end+0xfc00dbf4>
 800de48:	01400434 	movhi	r5,16
 800de4c:	000d883a 	mov	r6,zero
 800de50:	297fffc4 	addi	r5,r5,-1
 800de54:	04ffffc4 	movi	r19,-1
 800de58:	0101ffc4 	movi	r4,2047
 800de5c:	003fa406 	br	800dcf0 <__alt_data_end+0xfc00dcf0>
 800de60:	043f0084 	movi	r16,-1022
 800de64:	8521c83a 	sub	r16,r16,r20
 800de68:	00800e04 	movi	r2,56
 800de6c:	1401200e 	bge	r2,r16,800e2f0 <__divdf3+0x778>
 800de70:	9180004c 	andi	r6,r18,1
 800de74:	0009883a 	mov	r4,zero
 800de78:	000b883a 	mov	r5,zero
 800de7c:	0027883a 	mov	r19,zero
 800de80:	003f9b06 	br	800dcf0 <__alt_data_end+0xfc00dcf0>
 800de84:	8880022c 	andhi	r2,r17,8
 800de88:	1000c726 	beq	r2,zero,800e1a8 <__divdf3+0x630>
 800de8c:	8080022c 	andhi	r2,r16,8
 800de90:	1000c51e 	bne	r2,zero,800e1a8 <__divdf3+0x630>
 800de94:	00800434 	movhi	r2,16
 800de98:	81400234 	orhi	r5,r16,8
 800de9c:	10bfffc4 	addi	r2,r2,-1
 800dea0:	b80d883a 	mov	r6,r23
 800dea4:	288a703a 	and	r5,r5,r2
 800dea8:	a827883a 	mov	r19,r21
 800deac:	003fea06 	br	800de58 <__alt_data_end+0xfc00de58>
 800deb0:	8440ea36 	bltu	r16,r17,800e25c <__divdf3+0x6e4>
 800deb4:	8c00e826 	beq	r17,r16,800e258 <__divdf3+0x6e0>
 800deb8:	a53fffc4 	addi	r20,r20,-1
 800debc:	882d883a 	mov	r22,r17
 800dec0:	000d883a 	mov	r6,zero
 800dec4:	a804d63a 	srli	r2,r21,24
 800dec8:	8020923a 	slli	r16,r16,8
 800decc:	b009883a 	mov	r4,r22
 800ded0:	d9800315 	stw	r6,12(sp)
 800ded4:	1420b03a 	or	r16,r2,r16
 800ded8:	802ed43a 	srli	r23,r16,16
 800dedc:	873fffcc 	andi	fp,r16,65535
 800dee0:	a82a923a 	slli	r21,r21,8
 800dee4:	b80b883a 	mov	r5,r23
 800dee8:	800d2cc0 	call	800d2cc <__udivsi3>
 800deec:	b009883a 	mov	r4,r22
 800def0:	b80b883a 	mov	r5,r23
 800def4:	1023883a 	mov	r17,r2
 800def8:	800d2d40 	call	800d2d4 <__umodsi3>
 800defc:	1004943a 	slli	r2,r2,16
 800df00:	9808d43a 	srli	r4,r19,16
 800df04:	8f2d383a 	mul	r22,r17,fp
 800df08:	d9800317 	ldw	r6,12(sp)
 800df0c:	1106b03a 	or	r3,r2,r4
 800df10:	1d80062e 	bgeu	r3,r22,800df2c <__divdf3+0x3b4>
 800df14:	1c07883a 	add	r3,r3,r16
 800df18:	88bfffc4 	addi	r2,r17,-1
 800df1c:	1c00dc36 	bltu	r3,r16,800e290 <__divdf3+0x718>
 800df20:	1d80db2e 	bgeu	r3,r22,800e290 <__divdf3+0x718>
 800df24:	8c7fff84 	addi	r17,r17,-2
 800df28:	1c07883a 	add	r3,r3,r16
 800df2c:	1dadc83a 	sub	r22,r3,r22
 800df30:	b009883a 	mov	r4,r22
 800df34:	b80b883a 	mov	r5,r23
 800df38:	d9800315 	stw	r6,12(sp)
 800df3c:	800d2cc0 	call	800d2cc <__udivsi3>
 800df40:	b009883a 	mov	r4,r22
 800df44:	b80b883a 	mov	r5,r23
 800df48:	d8800015 	stw	r2,0(sp)
 800df4c:	800d2d40 	call	800d2d4 <__umodsi3>
 800df50:	da400017 	ldw	r9,0(sp)
 800df54:	1004943a 	slli	r2,r2,16
 800df58:	9cffffcc 	andi	r19,r19,65535
 800df5c:	4f07383a 	mul	r3,r9,fp
 800df60:	14c8b03a 	or	r4,r2,r19
 800df64:	d9800317 	ldw	r6,12(sp)
 800df68:	20c0062e 	bgeu	r4,r3,800df84 <__divdf3+0x40c>
 800df6c:	2409883a 	add	r4,r4,r16
 800df70:	48bfffc4 	addi	r2,r9,-1
 800df74:	2400c436 	bltu	r4,r16,800e288 <__divdf3+0x710>
 800df78:	20c0c32e 	bgeu	r4,r3,800e288 <__divdf3+0x710>
 800df7c:	4a7fff84 	addi	r9,r9,-2
 800df80:	2409883a 	add	r4,r4,r16
 800df84:	8822943a 	slli	r17,r17,16
 800df88:	a80ed43a 	srli	r7,r21,16
 800df8c:	aa3fffcc 	andi	r8,r21,65535
 800df90:	4c62b03a 	or	r17,r9,r17
 800df94:	8816d43a 	srli	r11,r17,16
 800df98:	897fffcc 	andi	r5,r17,65535
 800df9c:	2a15383a 	mul	r10,r5,r8
 800dfa0:	5a19383a 	mul	r12,r11,r8
 800dfa4:	29cb383a 	mul	r5,r5,r7
 800dfa8:	5012d43a 	srli	r9,r10,16
 800dfac:	20c5c83a 	sub	r2,r4,r3
 800dfb0:	614b883a 	add	r5,r12,r5
 800dfb4:	2a4b883a 	add	r5,r5,r9
 800dfb8:	59c7383a 	mul	r3,r11,r7
 800dfbc:	2b00022e 	bgeu	r5,r12,800dfc8 <__divdf3+0x450>
 800dfc0:	01000074 	movhi	r4,1
 800dfc4:	1907883a 	add	r3,r3,r4
 800dfc8:	2808d43a 	srli	r4,r5,16
 800dfcc:	280a943a 	slli	r5,r5,16
 800dfd0:	54ffffcc 	andi	r19,r10,65535
 800dfd4:	1907883a 	add	r3,r3,r4
 800dfd8:	2ccb883a 	add	r5,r5,r19
 800dfdc:	10c09336 	bltu	r2,r3,800e22c <__divdf3+0x6b4>
 800dfe0:	10c0ad26 	beq	r2,r3,800e298 <__divdf3+0x720>
 800dfe4:	10c7c83a 	sub	r3,r2,r3
 800dfe8:	3167c83a 	sub	r19,r6,r5
 800dfec:	34ed803a 	cmpltu	r22,r6,r19
 800dff0:	1dadc83a 	sub	r22,r3,r22
 800dff4:	b400b226 	beq	r22,r16,800e2c0 <__divdf3+0x748>
 800dff8:	b009883a 	mov	r4,r22
 800dffc:	b80b883a 	mov	r5,r23
 800e000:	d9c00115 	stw	r7,4(sp)
 800e004:	da000215 	stw	r8,8(sp)
 800e008:	800d2cc0 	call	800d2cc <__udivsi3>
 800e00c:	b009883a 	mov	r4,r22
 800e010:	b80b883a 	mov	r5,r23
 800e014:	d8800315 	stw	r2,12(sp)
 800e018:	800d2d40 	call	800d2d4 <__umodsi3>
 800e01c:	d9800317 	ldw	r6,12(sp)
 800e020:	1004943a 	slli	r2,r2,16
 800e024:	9808d43a 	srli	r4,r19,16
 800e028:	372d383a 	mul	r22,r6,fp
 800e02c:	d9c00117 	ldw	r7,4(sp)
 800e030:	1106b03a 	or	r3,r2,r4
 800e034:	da000217 	ldw	r8,8(sp)
 800e038:	1d80062e 	bgeu	r3,r22,800e054 <__divdf3+0x4dc>
 800e03c:	1c07883a 	add	r3,r3,r16
 800e040:	30bfffc4 	addi	r2,r6,-1
 800e044:	1c00a036 	bltu	r3,r16,800e2c8 <__divdf3+0x750>
 800e048:	1d809f2e 	bgeu	r3,r22,800e2c8 <__divdf3+0x750>
 800e04c:	31bfff84 	addi	r6,r6,-2
 800e050:	1c07883a 	add	r3,r3,r16
 800e054:	1dadc83a 	sub	r22,r3,r22
 800e058:	b009883a 	mov	r4,r22
 800e05c:	b80b883a 	mov	r5,r23
 800e060:	d9800315 	stw	r6,12(sp)
 800e064:	d9c00115 	stw	r7,4(sp)
 800e068:	da000215 	stw	r8,8(sp)
 800e06c:	800d2cc0 	call	800d2cc <__udivsi3>
 800e070:	b009883a 	mov	r4,r22
 800e074:	b80b883a 	mov	r5,r23
 800e078:	d8800015 	stw	r2,0(sp)
 800e07c:	800d2d40 	call	800d2d4 <__umodsi3>
 800e080:	da400017 	ldw	r9,0(sp)
 800e084:	1004943a 	slli	r2,r2,16
 800e088:	993fffcc 	andi	r4,r19,65535
 800e08c:	4f39383a 	mul	fp,r9,fp
 800e090:	1106b03a 	or	r3,r2,r4
 800e094:	d9800317 	ldw	r6,12(sp)
 800e098:	d9c00117 	ldw	r7,4(sp)
 800e09c:	da000217 	ldw	r8,8(sp)
 800e0a0:	1f00062e 	bgeu	r3,fp,800e0bc <__divdf3+0x544>
 800e0a4:	1c07883a 	add	r3,r3,r16
 800e0a8:	48bfffc4 	addi	r2,r9,-1
 800e0ac:	1c008836 	bltu	r3,r16,800e2d0 <__divdf3+0x758>
 800e0b0:	1f00872e 	bgeu	r3,fp,800e2d0 <__divdf3+0x758>
 800e0b4:	4a7fff84 	addi	r9,r9,-2
 800e0b8:	1c07883a 	add	r3,r3,r16
 800e0bc:	3008943a 	slli	r4,r6,16
 800e0c0:	1f07c83a 	sub	r3,r3,fp
 800e0c4:	4926b03a 	or	r19,r9,r4
 800e0c8:	993fffcc 	andi	r4,r19,65535
 800e0cc:	980cd43a 	srli	r6,r19,16
 800e0d0:	220b383a 	mul	r5,r4,r8
 800e0d4:	21c5383a 	mul	r2,r4,r7
 800e0d8:	3211383a 	mul	r8,r6,r8
 800e0dc:	2808d43a 	srli	r4,r5,16
 800e0e0:	31cf383a 	mul	r7,r6,r7
 800e0e4:	4085883a 	add	r2,r8,r2
 800e0e8:	1105883a 	add	r2,r2,r4
 800e0ec:	1200022e 	bgeu	r2,r8,800e0f8 <__divdf3+0x580>
 800e0f0:	01000074 	movhi	r4,1
 800e0f4:	390f883a 	add	r7,r7,r4
 800e0f8:	1008d43a 	srli	r4,r2,16
 800e0fc:	1004943a 	slli	r2,r2,16
 800e100:	297fffcc 	andi	r5,r5,65535
 800e104:	390f883a 	add	r7,r7,r4
 800e108:	1145883a 	add	r2,r2,r5
 800e10c:	19c06536 	bltu	r3,r7,800e2a4 <__divdf3+0x72c>
 800e110:	19c09f26 	beq	r3,r7,800e390 <__divdf3+0x818>
 800e114:	9cc00054 	ori	r19,r19,1
 800e118:	a100ffc4 	addi	r4,r20,1023
 800e11c:	013f500e 	bge	zero,r4,800de60 <__alt_data_end+0xfc00de60>
 800e120:	988001cc 	andi	r2,r19,7
 800e124:	10000726 	beq	r2,zero,800e144 <__divdf3+0x5cc>
 800e128:	98c003cc 	andi	r3,r19,15
 800e12c:	00800104 	movi	r2,4
 800e130:	18800426 	beq	r3,r2,800e144 <__divdf3+0x5cc>
 800e134:	9885883a 	add	r2,r19,r2
 800e138:	14e1803a 	cmpltu	r16,r2,r19
 800e13c:	8c23883a 	add	r17,r17,r16
 800e140:	1027883a 	mov	r19,r2
 800e144:	8880402c 	andhi	r2,r17,256
 800e148:	10000426 	beq	r2,zero,800e15c <__divdf3+0x5e4>
 800e14c:	00bfc034 	movhi	r2,65280
 800e150:	10bfffc4 	addi	r2,r2,-1
 800e154:	a1010004 	addi	r4,r20,1024
 800e158:	88a2703a 	and	r17,r17,r2
 800e15c:	0081ff84 	movi	r2,2046
 800e160:	113edf16 	blt	r2,r4,800dce0 <__alt_data_end+0xfc00dce0>
 800e164:	9826d0fa 	srli	r19,r19,3
 800e168:	8804977a 	slli	r2,r17,29
 800e16c:	8820927a 	slli	r16,r17,9
 800e170:	2101ffcc 	andi	r4,r4,2047
 800e174:	14e6b03a 	or	r19,r2,r19
 800e178:	800ad33a 	srli	r5,r16,12
 800e17c:	9180004c 	andi	r6,r18,1
 800e180:	003edb06 	br	800dcf0 <__alt_data_end+0xfc00dcf0>
 800e184:	008000c4 	movi	r2,3
 800e188:	4080a826 	beq	r8,r2,800e42c <__divdf3+0x8b4>
 800e18c:	00800044 	movi	r2,1
 800e190:	4080551e 	bne	r8,r2,800e2e8 <__divdf3+0x770>
 800e194:	e00d883a 	mov	r6,fp
 800e198:	0009883a 	mov	r4,zero
 800e19c:	000b883a 	mov	r5,zero
 800e1a0:	0027883a 	mov	r19,zero
 800e1a4:	003ed206 	br	800dcf0 <__alt_data_end+0xfc00dcf0>
 800e1a8:	00800434 	movhi	r2,16
 800e1ac:	89400234 	orhi	r5,r17,8
 800e1b0:	10bfffc4 	addi	r2,r2,-1
 800e1b4:	b00d883a 	mov	r6,r22
 800e1b8:	288a703a 	and	r5,r5,r2
 800e1bc:	003f2606 	br	800de58 <__alt_data_end+0xfc00de58>
 800e1c0:	d9800315 	stw	r6,12(sp)
 800e1c4:	d9c00115 	stw	r7,4(sp)
 800e1c8:	800f8780 	call	800f878 <__clzsi2>
 800e1cc:	10c00804 	addi	r3,r2,32
 800e1d0:	010009c4 	movi	r4,39
 800e1d4:	d9800317 	ldw	r6,12(sp)
 800e1d8:	d9c00117 	ldw	r7,4(sp)
 800e1dc:	20fee30e 	bge	r4,r3,800dd6c <__alt_data_end+0xfc00dd6c>
 800e1e0:	117ffe04 	addi	r5,r2,-8
 800e1e4:	9162983a 	sll	r17,r18,r5
 800e1e8:	0027883a 	mov	r19,zero
 800e1ec:	003ee606 	br	800dd88 <__alt_data_end+0xfc00dd88>
 800e1f0:	3009883a 	mov	r4,r6
 800e1f4:	d9800315 	stw	r6,12(sp)
 800e1f8:	da000215 	stw	r8,8(sp)
 800e1fc:	da400015 	stw	r9,0(sp)
 800e200:	800f8780 	call	800f878 <__clzsi2>
 800e204:	10c00804 	addi	r3,r2,32
 800e208:	010009c4 	movi	r4,39
 800e20c:	d9800317 	ldw	r6,12(sp)
 800e210:	da000217 	ldw	r8,8(sp)
 800e214:	da400017 	ldw	r9,0(sp)
 800e218:	20fef20e 	bge	r4,r3,800dde4 <__alt_data_end+0xfc00dde4>
 800e21c:	10bffe04 	addi	r2,r2,-8
 800e220:	a8a0983a 	sll	r16,r21,r2
 800e224:	002b883a 	mov	r21,zero
 800e228:	003ef506 	br	800de00 <__alt_data_end+0xfc00de00>
 800e22c:	354d883a 	add	r6,r6,r21
 800e230:	3549803a 	cmpltu	r4,r6,r21
 800e234:	2409883a 	add	r4,r4,r16
 800e238:	2089883a 	add	r4,r4,r2
 800e23c:	88bfffc4 	addi	r2,r17,-1
 800e240:	81000c2e 	bgeu	r16,r4,800e274 <__divdf3+0x6fc>
 800e244:	20c04436 	bltu	r4,r3,800e358 <__divdf3+0x7e0>
 800e248:	19006f26 	beq	r3,r4,800e408 <__divdf3+0x890>
 800e24c:	20c7c83a 	sub	r3,r4,r3
 800e250:	1023883a 	mov	r17,r2
 800e254:	003f6406 	br	800dfe8 <__alt_data_end+0xfc00dfe8>
 800e258:	9d7f1736 	bltu	r19,r21,800deb8 <__alt_data_end+0xfc00deb8>
 800e25c:	9806d07a 	srli	r3,r19,1
 800e260:	880497fa 	slli	r2,r17,31
 800e264:	980c97fa 	slli	r6,r19,31
 800e268:	882cd07a 	srli	r22,r17,1
 800e26c:	18a6b03a 	or	r19,r3,r2
 800e270:	003f1406 	br	800dec4 <__alt_data_end+0xfc00dec4>
 800e274:	243ff51e 	bne	r4,r16,800e24c <__alt_data_end+0xfc00e24c>
 800e278:	357ff22e 	bgeu	r6,r21,800e244 <__alt_data_end+0xfc00e244>
 800e27c:	80c7c83a 	sub	r3,r16,r3
 800e280:	1023883a 	mov	r17,r2
 800e284:	003f5806 	br	800dfe8 <__alt_data_end+0xfc00dfe8>
 800e288:	1013883a 	mov	r9,r2
 800e28c:	003f3d06 	br	800df84 <__alt_data_end+0xfc00df84>
 800e290:	1023883a 	mov	r17,r2
 800e294:	003f2506 	br	800df2c <__alt_data_end+0xfc00df2c>
 800e298:	317fe436 	bltu	r6,r5,800e22c <__alt_data_end+0xfc00e22c>
 800e29c:	0007883a 	mov	r3,zero
 800e2a0:	003f5106 	br	800dfe8 <__alt_data_end+0xfc00dfe8>
 800e2a4:	1c07883a 	add	r3,r3,r16
 800e2a8:	993fffc4 	addi	r4,r19,-1
 800e2ac:	1c000a2e 	bgeu	r3,r16,800e2d8 <__divdf3+0x760>
 800e2b0:	2027883a 	mov	r19,r4
 800e2b4:	19ff971e 	bne	r3,r7,800e114 <__alt_data_end+0xfc00e114>
 800e2b8:	a8bf961e 	bne	r21,r2,800e114 <__alt_data_end+0xfc00e114>
 800e2bc:	003f9606 	br	800e118 <__alt_data_end+0xfc00e118>
 800e2c0:	04ffffc4 	movi	r19,-1
 800e2c4:	003f9406 	br	800e118 <__alt_data_end+0xfc00e118>
 800e2c8:	100d883a 	mov	r6,r2
 800e2cc:	003f6106 	br	800e054 <__alt_data_end+0xfc00e054>
 800e2d0:	1013883a 	mov	r9,r2
 800e2d4:	003f7906 	br	800e0bc <__alt_data_end+0xfc00e0bc>
 800e2d8:	19c02636 	bltu	r3,r7,800e374 <__divdf3+0x7fc>
 800e2dc:	38c04d26 	beq	r7,r3,800e414 <__divdf3+0x89c>
 800e2e0:	2027883a 	mov	r19,r4
 800e2e4:	003f8b06 	br	800e114 <__alt_data_end+0xfc00e114>
 800e2e8:	e025883a 	mov	r18,fp
 800e2ec:	003f8a06 	br	800e118 <__alt_data_end+0xfc00e118>
 800e2f0:	008007c4 	movi	r2,31
 800e2f4:	14002a16 	blt	r2,r16,800e3a0 <__divdf3+0x828>
 800e2f8:	a5010784 	addi	r20,r20,1054
 800e2fc:	8d04983a 	sll	r2,r17,r20
 800e300:	9c06d83a 	srl	r3,r19,r16
 800e304:	9d28983a 	sll	r20,r19,r20
 800e308:	8c20d83a 	srl	r16,r17,r16
 800e30c:	1886b03a 	or	r3,r3,r2
 800e310:	a004c03a 	cmpne	r2,r20,zero
 800e314:	1884b03a 	or	r2,r3,r2
 800e318:	10c001cc 	andi	r3,r2,7
 800e31c:	18000726 	beq	r3,zero,800e33c <__divdf3+0x7c4>
 800e320:	110003cc 	andi	r4,r2,15
 800e324:	00c00104 	movi	r3,4
 800e328:	20c00426 	beq	r4,r3,800e33c <__divdf3+0x7c4>
 800e32c:	10c00104 	addi	r3,r2,4
 800e330:	1885803a 	cmpltu	r2,r3,r2
 800e334:	80a1883a 	add	r16,r16,r2
 800e338:	1805883a 	mov	r2,r3
 800e33c:	80c0202c 	andhi	r3,r16,128
 800e340:	18002d26 	beq	r3,zero,800e3f8 <__divdf3+0x880>
 800e344:	9180004c 	andi	r6,r18,1
 800e348:	01000044 	movi	r4,1
 800e34c:	000b883a 	mov	r5,zero
 800e350:	0027883a 	mov	r19,zero
 800e354:	003e6606 	br	800dcf0 <__alt_data_end+0xfc00dcf0>
 800e358:	354d883a 	add	r6,r6,r21
 800e35c:	356d803a 	cmpltu	r22,r6,r21
 800e360:	b42d883a 	add	r22,r22,r16
 800e364:	b12d883a 	add	r22,r22,r4
 800e368:	8c7fff84 	addi	r17,r17,-2
 800e36c:	b0c7c83a 	sub	r3,r22,r3
 800e370:	003f1d06 	br	800dfe8 <__alt_data_end+0xfc00dfe8>
 800e374:	ad4b883a 	add	r5,r21,r21
 800e378:	2d6b803a 	cmpltu	r21,r5,r21
 800e37c:	ac2b883a 	add	r21,r21,r16
 800e380:	1d47883a 	add	r3,r3,r21
 800e384:	993fff84 	addi	r4,r19,-2
 800e388:	282b883a 	mov	r21,r5
 800e38c:	003fc806 	br	800e2b0 <__alt_data_end+0xfc00e2b0>
 800e390:	103fc41e 	bne	r2,zero,800e2a4 <__alt_data_end+0xfc00e2a4>
 800e394:	002b883a 	mov	r21,zero
 800e398:	a8bf5e1e 	bne	r21,r2,800e114 <__alt_data_end+0xfc00e114>
 800e39c:	003f5e06 	br	800e118 <__alt_data_end+0xfc00e118>
 800e3a0:	00bef884 	movi	r2,-1054
 800e3a4:	1505c83a 	sub	r2,r2,r20
 800e3a8:	00c00804 	movi	r3,32
 800e3ac:	8884d83a 	srl	r2,r17,r2
 800e3b0:	80c01c26 	beq	r16,r3,800e424 <__divdf3+0x8ac>
 800e3b4:	a0c10f84 	addi	r3,r20,1086
 800e3b8:	88c6983a 	sll	r3,r17,r3
 800e3bc:	1cc6b03a 	or	r3,r3,r19
 800e3c0:	1806c03a 	cmpne	r3,r3,zero
 800e3c4:	1884b03a 	or	r2,r3,r2
 800e3c8:	140001cc 	andi	r16,r2,7
 800e3cc:	8000061e 	bne	r16,zero,800e3e8 <__divdf3+0x870>
 800e3d0:	000b883a 	mov	r5,zero
 800e3d4:	1004d0fa 	srli	r2,r2,3
 800e3d8:	9180004c 	andi	r6,r18,1
 800e3dc:	0009883a 	mov	r4,zero
 800e3e0:	1426b03a 	or	r19,r2,r16
 800e3e4:	003e4206 	br	800dcf0 <__alt_data_end+0xfc00dcf0>
 800e3e8:	110003cc 	andi	r4,r2,15
 800e3ec:	00c00104 	movi	r3,4
 800e3f0:	0021883a 	mov	r16,zero
 800e3f4:	20ffcd1e 	bne	r4,r3,800e32c <__alt_data_end+0xfc00e32c>
 800e3f8:	800a927a 	slli	r5,r16,9
 800e3fc:	8020977a 	slli	r16,r16,29
 800e400:	280ad33a 	srli	r5,r5,12
 800e404:	003ff306 	br	800e3d4 <__alt_data_end+0xfc00e3d4>
 800e408:	317fd336 	bltu	r6,r5,800e358 <__alt_data_end+0xfc00e358>
 800e40c:	1023883a 	mov	r17,r2
 800e410:	003fa206 	br	800e29c <__alt_data_end+0xfc00e29c>
 800e414:	a8bfd736 	bltu	r21,r2,800e374 <__alt_data_end+0xfc00e374>
 800e418:	2027883a 	mov	r19,r4
 800e41c:	a8bf3d1e 	bne	r21,r2,800e114 <__alt_data_end+0xfc00e114>
 800e420:	003f3d06 	br	800e118 <__alt_data_end+0xfc00e118>
 800e424:	0007883a 	mov	r3,zero
 800e428:	003fe406 	br	800e3bc <__alt_data_end+0xfc00e3bc>
 800e42c:	00800434 	movhi	r2,16
 800e430:	89400234 	orhi	r5,r17,8
 800e434:	10bfffc4 	addi	r2,r2,-1
 800e438:	e00d883a 	mov	r6,fp
 800e43c:	288a703a 	and	r5,r5,r2
 800e440:	003e8506 	br	800de58 <__alt_data_end+0xfc00de58>

0800e444 <__eqdf2>:
 800e444:	2804d53a 	srli	r2,r5,20
 800e448:	3806d53a 	srli	r3,r7,20
 800e44c:	02000434 	movhi	r8,16
 800e450:	423fffc4 	addi	r8,r8,-1
 800e454:	1081ffcc 	andi	r2,r2,2047
 800e458:	0241ffc4 	movi	r9,2047
 800e45c:	2a14703a 	and	r10,r5,r8
 800e460:	18c1ffcc 	andi	r3,r3,2047
 800e464:	3a10703a 	and	r8,r7,r8
 800e468:	280ad7fa 	srli	r5,r5,31
 800e46c:	380ed7fa 	srli	r7,r7,31
 800e470:	12400f26 	beq	r2,r9,800e4b0 <__eqdf2+0x6c>
 800e474:	0241ffc4 	movi	r9,2047
 800e478:	1a400326 	beq	r3,r9,800e488 <__eqdf2+0x44>
 800e47c:	10c00526 	beq	r2,r3,800e494 <__eqdf2+0x50>
 800e480:	00800044 	movi	r2,1
 800e484:	f800283a 	ret
 800e488:	4192b03a 	or	r9,r8,r6
 800e48c:	483ffc1e 	bne	r9,zero,800e480 <__alt_data_end+0xfc00e480>
 800e490:	10fffb1e 	bne	r2,r3,800e480 <__alt_data_end+0xfc00e480>
 800e494:	523ffa1e 	bne	r10,r8,800e480 <__alt_data_end+0xfc00e480>
 800e498:	21bff91e 	bne	r4,r6,800e480 <__alt_data_end+0xfc00e480>
 800e49c:	29c00826 	beq	r5,r7,800e4c0 <__eqdf2+0x7c>
 800e4a0:	103ff71e 	bne	r2,zero,800e480 <__alt_data_end+0xfc00e480>
 800e4a4:	5104b03a 	or	r2,r10,r4
 800e4a8:	1004c03a 	cmpne	r2,r2,zero
 800e4ac:	f800283a 	ret
 800e4b0:	5112b03a 	or	r9,r10,r4
 800e4b4:	483fef26 	beq	r9,zero,800e474 <__alt_data_end+0xfc00e474>
 800e4b8:	00800044 	movi	r2,1
 800e4bc:	f800283a 	ret
 800e4c0:	0005883a 	mov	r2,zero
 800e4c4:	f800283a 	ret

0800e4c8 <__gedf2>:
 800e4c8:	2804d53a 	srli	r2,r5,20
 800e4cc:	3806d53a 	srli	r3,r7,20
 800e4d0:	02000434 	movhi	r8,16
 800e4d4:	423fffc4 	addi	r8,r8,-1
 800e4d8:	0241ffc4 	movi	r9,2047
 800e4dc:	1081ffcc 	andi	r2,r2,2047
 800e4e0:	2a14703a 	and	r10,r5,r8
 800e4e4:	1a46703a 	and	r3,r3,r9
 800e4e8:	3a10703a 	and	r8,r7,r8
 800e4ec:	280ad7fa 	srli	r5,r5,31
 800e4f0:	380ed7fa 	srli	r7,r7,31
 800e4f4:	12400b26 	beq	r2,r9,800e524 <__gedf2+0x5c>
 800e4f8:	1a401626 	beq	r3,r9,800e554 <__gedf2+0x8c>
 800e4fc:	10000c1e 	bne	r2,zero,800e530 <__gedf2+0x68>
 800e500:	5112b03a 	or	r9,r10,r4
 800e504:	4813003a 	cmpeq	r9,r9,zero
 800e508:	4817883a 	mov	r11,r9
 800e50c:	18000c1e 	bne	r3,zero,800e540 <__gedf2+0x78>
 800e510:	4198b03a 	or	r12,r8,r6
 800e514:	60000a1e 	bne	r12,zero,800e540 <__gedf2+0x78>
 800e518:	48001326 	beq	r9,zero,800e568 <__gedf2+0xa0>
 800e51c:	0005883a 	mov	r2,zero
 800e520:	f800283a 	ret
 800e524:	5112b03a 	or	r9,r10,r4
 800e528:	4800191e 	bne	r9,zero,800e590 <__gedf2+0xc8>
 800e52c:	18800926 	beq	r3,r2,800e554 <__gedf2+0x8c>
 800e530:	18000b1e 	bne	r3,zero,800e560 <__gedf2+0x98>
 800e534:	4192b03a 	or	r9,r8,r6
 800e538:	0017883a 	mov	r11,zero
 800e53c:	48000a26 	beq	r9,zero,800e568 <__gedf2+0xa0>
 800e540:	39c03fcc 	andi	r7,r7,255
 800e544:	58000726 	beq	r11,zero,800e564 <__gedf2+0x9c>
 800e548:	3800081e 	bne	r7,zero,800e56c <__gedf2+0xa4>
 800e54c:	00bfffc4 	movi	r2,-1
 800e550:	f800283a 	ret
 800e554:	4192b03a 	or	r9,r8,r6
 800e558:	48000d1e 	bne	r9,zero,800e590 <__gedf2+0xc8>
 800e55c:	103fe826 	beq	r2,zero,800e500 <__alt_data_end+0xfc00e500>
 800e560:	39c03fcc 	andi	r7,r7,255
 800e564:	29c00326 	beq	r5,r7,800e574 <__gedf2+0xac>
 800e568:	283ff81e 	bne	r5,zero,800e54c <__alt_data_end+0xfc00e54c>
 800e56c:	00800044 	movi	r2,1
 800e570:	f800283a 	ret
 800e574:	18bffc16 	blt	r3,r2,800e568 <__alt_data_end+0xfc00e568>
 800e578:	10c00316 	blt	r2,r3,800e588 <__gedf2+0xc0>
 800e57c:	42bffa36 	bltu	r8,r10,800e568 <__alt_data_end+0xfc00e568>
 800e580:	52000526 	beq	r10,r8,800e598 <__gedf2+0xd0>
 800e584:	523fe52e 	bgeu	r10,r8,800e51c <__alt_data_end+0xfc00e51c>
 800e588:	283ff026 	beq	r5,zero,800e54c <__alt_data_end+0xfc00e54c>
 800e58c:	003ff706 	br	800e56c <__alt_data_end+0xfc00e56c>
 800e590:	00bfff84 	movi	r2,-2
 800e594:	f800283a 	ret
 800e598:	313ff336 	bltu	r6,r4,800e568 <__alt_data_end+0xfc00e568>
 800e59c:	21bfdf2e 	bgeu	r4,r6,800e51c <__alt_data_end+0xfc00e51c>
 800e5a0:	283fea26 	beq	r5,zero,800e54c <__alt_data_end+0xfc00e54c>
 800e5a4:	003ff106 	br	800e56c <__alt_data_end+0xfc00e56c>

0800e5a8 <__ledf2>:
 800e5a8:	2804d53a 	srli	r2,r5,20
 800e5ac:	3810d53a 	srli	r8,r7,20
 800e5b0:	00c00434 	movhi	r3,16
 800e5b4:	18ffffc4 	addi	r3,r3,-1
 800e5b8:	0241ffc4 	movi	r9,2047
 800e5bc:	1081ffcc 	andi	r2,r2,2047
 800e5c0:	28d4703a 	and	r10,r5,r3
 800e5c4:	4250703a 	and	r8,r8,r9
 800e5c8:	38c6703a 	and	r3,r7,r3
 800e5cc:	280ad7fa 	srli	r5,r5,31
 800e5d0:	380ed7fa 	srli	r7,r7,31
 800e5d4:	12400b26 	beq	r2,r9,800e604 <__ledf2+0x5c>
 800e5d8:	42401926 	beq	r8,r9,800e640 <__ledf2+0x98>
 800e5dc:	10000c1e 	bne	r2,zero,800e610 <__ledf2+0x68>
 800e5e0:	5112b03a 	or	r9,r10,r4
 800e5e4:	4813003a 	cmpeq	r9,r9,zero
 800e5e8:	4817883a 	mov	r11,r9
 800e5ec:	40000f26 	beq	r8,zero,800e62c <__ledf2+0x84>
 800e5f0:	39c03fcc 	andi	r7,r7,255
 800e5f4:	58001826 	beq	r11,zero,800e658 <__ledf2+0xb0>
 800e5f8:	38000a1e 	bne	r7,zero,800e624 <__ledf2+0x7c>
 800e5fc:	00bfffc4 	movi	r2,-1
 800e600:	f800283a 	ret
 800e604:	5112b03a 	or	r9,r10,r4
 800e608:	48000f1e 	bne	r9,zero,800e648 <__ledf2+0xa0>
 800e60c:	40800c26 	beq	r8,r2,800e640 <__ledf2+0x98>
 800e610:	4000101e 	bne	r8,zero,800e654 <__ledf2+0xac>
 800e614:	1992b03a 	or	r9,r3,r6
 800e618:	0017883a 	mov	r11,zero
 800e61c:	483ff41e 	bne	r9,zero,800e5f0 <__alt_data_end+0xfc00e5f0>
 800e620:	283ff61e 	bne	r5,zero,800e5fc <__alt_data_end+0xfc00e5fc>
 800e624:	00800044 	movi	r2,1
 800e628:	f800283a 	ret
 800e62c:	1998b03a 	or	r12,r3,r6
 800e630:	603fef1e 	bne	r12,zero,800e5f0 <__alt_data_end+0xfc00e5f0>
 800e634:	483ffa26 	beq	r9,zero,800e620 <__alt_data_end+0xfc00e620>
 800e638:	0005883a 	mov	r2,zero
 800e63c:	f800283a 	ret
 800e640:	1992b03a 	or	r9,r3,r6
 800e644:	48000226 	beq	r9,zero,800e650 <__ledf2+0xa8>
 800e648:	00800084 	movi	r2,2
 800e64c:	f800283a 	ret
 800e650:	103fe326 	beq	r2,zero,800e5e0 <__alt_data_end+0xfc00e5e0>
 800e654:	39c03fcc 	andi	r7,r7,255
 800e658:	29fff11e 	bne	r5,r7,800e620 <__alt_data_end+0xfc00e620>
 800e65c:	40bff016 	blt	r8,r2,800e620 <__alt_data_end+0xfc00e620>
 800e660:	12000316 	blt	r2,r8,800e670 <__ledf2+0xc8>
 800e664:	1abfee36 	bltu	r3,r10,800e620 <__alt_data_end+0xfc00e620>
 800e668:	50c00326 	beq	r10,r3,800e678 <__ledf2+0xd0>
 800e66c:	50fff22e 	bgeu	r10,r3,800e638 <__alt_data_end+0xfc00e638>
 800e670:	283fe226 	beq	r5,zero,800e5fc <__alt_data_end+0xfc00e5fc>
 800e674:	003feb06 	br	800e624 <__alt_data_end+0xfc00e624>
 800e678:	313fe936 	bltu	r6,r4,800e620 <__alt_data_end+0xfc00e620>
 800e67c:	21bfee2e 	bgeu	r4,r6,800e638 <__alt_data_end+0xfc00e638>
 800e680:	283fde26 	beq	r5,zero,800e5fc <__alt_data_end+0xfc00e5fc>
 800e684:	003fe706 	br	800e624 <__alt_data_end+0xfc00e624>

0800e688 <__muldf3>:
 800e688:	defff204 	addi	sp,sp,-56
 800e68c:	2804d53a 	srli	r2,r5,20
 800e690:	dd800a15 	stw	r22,40(sp)
 800e694:	282cd7fa 	srli	r22,r5,31
 800e698:	dc000415 	stw	r16,16(sp)
 800e69c:	04000434 	movhi	r16,16
 800e6a0:	df000c15 	stw	fp,48(sp)
 800e6a4:	dd000815 	stw	r20,32(sp)
 800e6a8:	dcc00715 	stw	r19,28(sp)
 800e6ac:	dc800615 	stw	r18,24(sp)
 800e6b0:	dc400515 	stw	r17,20(sp)
 800e6b4:	843fffc4 	addi	r16,r16,-1
 800e6b8:	dfc00d15 	stw	ra,52(sp)
 800e6bc:	ddc00b15 	stw	r23,44(sp)
 800e6c0:	dd400915 	stw	r21,36(sp)
 800e6c4:	1501ffcc 	andi	r20,r2,2047
 800e6c8:	2023883a 	mov	r17,r4
 800e6cc:	2025883a 	mov	r18,r4
 800e6d0:	2c20703a 	and	r16,r5,r16
 800e6d4:	b027883a 	mov	r19,r22
 800e6d8:	b7003fcc 	andi	fp,r22,255
 800e6dc:	a0005926 	beq	r20,zero,800e844 <__muldf3+0x1bc>
 800e6e0:	0081ffc4 	movi	r2,2047
 800e6e4:	a0803426 	beq	r20,r2,800e7b8 <__muldf3+0x130>
 800e6e8:	84000434 	orhi	r16,r16,16
 800e6ec:	2004d77a 	srli	r2,r4,29
 800e6f0:	802090fa 	slli	r16,r16,3
 800e6f4:	202490fa 	slli	r18,r4,3
 800e6f8:	a53f0044 	addi	r20,r20,-1023
 800e6fc:	80a0b03a 	or	r16,r16,r2
 800e700:	002b883a 	mov	r21,zero
 800e704:	0015883a 	mov	r10,zero
 800e708:	3812d53a 	srli	r9,r7,20
 800e70c:	3806d7fa 	srli	r3,r7,31
 800e710:	02000434 	movhi	r8,16
 800e714:	423fffc4 	addi	r8,r8,-1
 800e718:	4941ffcc 	andi	r5,r9,2047
 800e71c:	302f883a 	mov	r23,r6
 800e720:	3a22703a 	and	r17,r7,r8
 800e724:	1ac03fcc 	andi	r11,r3,255
 800e728:	28006226 	beq	r5,zero,800e8b4 <__muldf3+0x22c>
 800e72c:	0081ffc4 	movi	r2,2047
 800e730:	28805a26 	beq	r5,r2,800e89c <__muldf3+0x214>
 800e734:	8a000434 	orhi	r8,r17,16
 800e738:	3004d77a 	srli	r2,r6,29
 800e73c:	401090fa 	slli	r8,r8,3
 800e740:	302e90fa 	slli	r23,r6,3
 800e744:	297f0044 	addi	r5,r5,-1023
 800e748:	40a2b03a 	or	r17,r8,r2
 800e74c:	0013883a 	mov	r9,zero
 800e750:	4d4cb03a 	or	r6,r9,r21
 800e754:	300c90ba 	slli	r6,r6,2
 800e758:	02020074 	movhi	r8,2049
 800e75c:	4239de04 	addi	r8,r8,-6280
 800e760:	320d883a 	add	r6,r6,r8
 800e764:	31800017 	ldw	r6,0(r6)
 800e768:	a14b883a 	add	r5,r20,r5
 800e76c:	1dacf03a 	xor	r22,r3,r22
 800e770:	2b000044 	addi	r12,r5,1
 800e774:	3000683a 	jmp	r6
 800e778:	0800e9b4 	orhi	zero,at,934
 800e77c:	0800e9a0 	cmpeqi	zero,at,934
 800e780:	0800e9a0 	cmpeqi	zero,at,934
 800e784:	0800e98c 	andi	zero,at,934
 800e788:	0800e7d4 	ori	zero,at,927
 800e78c:	0800e7d4 	ori	zero,at,927
 800e790:	0800e974 	orhi	zero,at,933
 800e794:	0800e98c 	andi	zero,at,934
 800e798:	0800e7d4 	ori	zero,at,927
 800e79c:	0800e974 	orhi	zero,at,933
 800e7a0:	0800e7d4 	ori	zero,at,927
 800e7a4:	0800e98c 	andi	zero,at,934
 800e7a8:	0800e7d8 	cmpnei	zero,at,927
 800e7ac:	0800e7d8 	cmpnei	zero,at,927
 800e7b0:	0800e7d8 	cmpnei	zero,at,927
 800e7b4:	0800ebb0 	cmpltui	zero,at,942
 800e7b8:	8104b03a 	or	r2,r16,r4
 800e7bc:	10006a1e 	bne	r2,zero,800e968 <__muldf3+0x2e0>
 800e7c0:	05400204 	movi	r21,8
 800e7c4:	0021883a 	mov	r16,zero
 800e7c8:	0025883a 	mov	r18,zero
 800e7cc:	02800084 	movi	r10,2
 800e7d0:	003fcd06 	br	800e708 <__alt_data_end+0xfc00e708>
 800e7d4:	b039883a 	mov	fp,r22
 800e7d8:	00800084 	movi	r2,2
 800e7dc:	50804e1e 	bne	r10,r2,800e918 <__muldf3+0x290>
 800e7e0:	e4c0004c 	andi	r19,fp,1
 800e7e4:	0101ffc4 	movi	r4,2047
 800e7e8:	0021883a 	mov	r16,zero
 800e7ec:	0025883a 	mov	r18,zero
 800e7f0:	2008953a 	slli	r4,r4,20
 800e7f4:	98c03fcc 	andi	r3,r19,255
 800e7f8:	01400434 	movhi	r5,16
 800e7fc:	297fffc4 	addi	r5,r5,-1
 800e800:	180697fa 	slli	r3,r3,31
 800e804:	8160703a 	and	r16,r16,r5
 800e808:	8120b03a 	or	r16,r16,r4
 800e80c:	80c6b03a 	or	r3,r16,r3
 800e810:	9005883a 	mov	r2,r18
 800e814:	dfc00d17 	ldw	ra,52(sp)
 800e818:	df000c17 	ldw	fp,48(sp)
 800e81c:	ddc00b17 	ldw	r23,44(sp)
 800e820:	dd800a17 	ldw	r22,40(sp)
 800e824:	dd400917 	ldw	r21,36(sp)
 800e828:	dd000817 	ldw	r20,32(sp)
 800e82c:	dcc00717 	ldw	r19,28(sp)
 800e830:	dc800617 	ldw	r18,24(sp)
 800e834:	dc400517 	ldw	r17,20(sp)
 800e838:	dc000417 	ldw	r16,16(sp)
 800e83c:	dec00e04 	addi	sp,sp,56
 800e840:	f800283a 	ret
 800e844:	8104b03a 	or	r2,r16,r4
 800e848:	10004226 	beq	r2,zero,800e954 <__muldf3+0x2cc>
 800e84c:	8000f926 	beq	r16,zero,800ec34 <__muldf3+0x5ac>
 800e850:	8009883a 	mov	r4,r16
 800e854:	d9800315 	stw	r6,12(sp)
 800e858:	d9c00015 	stw	r7,0(sp)
 800e85c:	800f8780 	call	800f878 <__clzsi2>
 800e860:	d9800317 	ldw	r6,12(sp)
 800e864:	d9c00017 	ldw	r7,0(sp)
 800e868:	1007883a 	mov	r3,r2
 800e86c:	01000a04 	movi	r4,40
 800e870:	18bffe04 	addi	r2,r3,-8
 800e874:	20c9c83a 	sub	r4,r4,r3
 800e878:	80a0983a 	sll	r16,r16,r2
 800e87c:	8908d83a 	srl	r4,r17,r4
 800e880:	88a4983a 	sll	r18,r17,r2
 800e884:	2420b03a 	or	r16,r4,r16
 800e888:	017f0344 	movi	r5,-1011
 800e88c:	28e9c83a 	sub	r20,r5,r3
 800e890:	002b883a 	mov	r21,zero
 800e894:	0015883a 	mov	r10,zero
 800e898:	003f9b06 	br	800e708 <__alt_data_end+0xfc00e708>
 800e89c:	8984b03a 	or	r2,r17,r6
 800e8a0:	10002a1e 	bne	r2,zero,800e94c <__muldf3+0x2c4>
 800e8a4:	0023883a 	mov	r17,zero
 800e8a8:	002f883a 	mov	r23,zero
 800e8ac:	02400084 	movi	r9,2
 800e8b0:	003fa706 	br	800e750 <__alt_data_end+0xfc00e750>
 800e8b4:	8984b03a 	or	r2,r17,r6
 800e8b8:	10002026 	beq	r2,zero,800e93c <__muldf3+0x2b4>
 800e8bc:	8800cc26 	beq	r17,zero,800ebf0 <__muldf3+0x568>
 800e8c0:	8809883a 	mov	r4,r17
 800e8c4:	d8c00215 	stw	r3,8(sp)
 800e8c8:	d9800315 	stw	r6,12(sp)
 800e8cc:	da800015 	stw	r10,0(sp)
 800e8d0:	dac00115 	stw	r11,4(sp)
 800e8d4:	800f8780 	call	800f878 <__clzsi2>
 800e8d8:	d8c00217 	ldw	r3,8(sp)
 800e8dc:	d9800317 	ldw	r6,12(sp)
 800e8e0:	da800017 	ldw	r10,0(sp)
 800e8e4:	dac00117 	ldw	r11,4(sp)
 800e8e8:	1009883a 	mov	r4,r2
 800e8ec:	01400a04 	movi	r5,40
 800e8f0:	25fffe04 	addi	r23,r4,-8
 800e8f4:	290bc83a 	sub	r5,r5,r4
 800e8f8:	8dd0983a 	sll	r8,r17,r23
 800e8fc:	314ad83a 	srl	r5,r6,r5
 800e900:	35ee983a 	sll	r23,r6,r23
 800e904:	2a22b03a 	or	r17,r5,r8
 800e908:	017f0344 	movi	r5,-1011
 800e90c:	290bc83a 	sub	r5,r5,r4
 800e910:	0013883a 	mov	r9,zero
 800e914:	003f8e06 	br	800e750 <__alt_data_end+0xfc00e750>
 800e918:	008000c4 	movi	r2,3
 800e91c:	50811d26 	beq	r10,r2,800ed94 <__muldf3+0x70c>
 800e920:	00800044 	movi	r2,1
 800e924:	5080e01e 	bne	r10,r2,800eca8 <__muldf3+0x620>
 800e928:	e0a6703a 	and	r19,fp,r2
 800e92c:	0009883a 	mov	r4,zero
 800e930:	0021883a 	mov	r16,zero
 800e934:	0025883a 	mov	r18,zero
 800e938:	003fad06 	br	800e7f0 <__alt_data_end+0xfc00e7f0>
 800e93c:	0023883a 	mov	r17,zero
 800e940:	002f883a 	mov	r23,zero
 800e944:	02400044 	movi	r9,1
 800e948:	003f8106 	br	800e750 <__alt_data_end+0xfc00e750>
 800e94c:	024000c4 	movi	r9,3
 800e950:	003f7f06 	br	800e750 <__alt_data_end+0xfc00e750>
 800e954:	05400104 	movi	r21,4
 800e958:	0021883a 	mov	r16,zero
 800e95c:	0025883a 	mov	r18,zero
 800e960:	02800044 	movi	r10,1
 800e964:	003f6806 	br	800e708 <__alt_data_end+0xfc00e708>
 800e968:	05400304 	movi	r21,12
 800e96c:	028000c4 	movi	r10,3
 800e970:	003f6506 	br	800e708 <__alt_data_end+0xfc00e708>
 800e974:	04000434 	movhi	r16,16
 800e978:	0027883a 	mov	r19,zero
 800e97c:	843fffc4 	addi	r16,r16,-1
 800e980:	04bfffc4 	movi	r18,-1
 800e984:	0101ffc4 	movi	r4,2047
 800e988:	003f9906 	br	800e7f0 <__alt_data_end+0xfc00e7f0>
 800e98c:	8821883a 	mov	r16,r17
 800e990:	b825883a 	mov	r18,r23
 800e994:	5839883a 	mov	fp,r11
 800e998:	4815883a 	mov	r10,r9
 800e99c:	003f8e06 	br	800e7d8 <__alt_data_end+0xfc00e7d8>
 800e9a0:	8821883a 	mov	r16,r17
 800e9a4:	b825883a 	mov	r18,r23
 800e9a8:	b039883a 	mov	fp,r22
 800e9ac:	4815883a 	mov	r10,r9
 800e9b0:	003f8906 	br	800e7d8 <__alt_data_end+0xfc00e7d8>
 800e9b4:	b80cd43a 	srli	r6,r23,16
 800e9b8:	9006d43a 	srli	r3,r18,16
 800e9bc:	90bfffcc 	andi	r2,r18,65535
 800e9c0:	bdffffcc 	andi	r23,r23,65535
 800e9c4:	b891383a 	mul	r8,r23,r2
 800e9c8:	b8c9383a 	mul	r4,r23,r3
 800e9cc:	309b383a 	mul	r13,r6,r2
 800e9d0:	400ed43a 	srli	r7,r8,16
 800e9d4:	30df383a 	mul	r15,r6,r3
 800e9d8:	235b883a 	add	r13,r4,r13
 800e9dc:	69db883a 	add	r13,r13,r7
 800e9e0:	6900022e 	bgeu	r13,r4,800e9ec <__muldf3+0x364>
 800e9e4:	01000074 	movhi	r4,1
 800e9e8:	791f883a 	add	r15,r15,r4
 800e9ec:	8828d43a 	srli	r20,r17,16
 800e9f0:	8c7fffcc 	andi	r17,r17,65535
 800e9f4:	888f383a 	mul	r7,r17,r2
 800e9f8:	88d3383a 	mul	r9,r17,r3
 800e9fc:	a0a5383a 	mul	r18,r20,r2
 800ea00:	3816d43a 	srli	r11,r7,16
 800ea04:	6814943a 	slli	r10,r13,16
 800ea08:	4ca5883a 	add	r18,r9,r18
 800ea0c:	423fffcc 	andi	r8,r8,65535
 800ea10:	92e5883a 	add	r18,r18,r11
 800ea14:	6808d43a 	srli	r4,r13,16
 800ea18:	5215883a 	add	r10,r10,r8
 800ea1c:	a0c7383a 	mul	r3,r20,r3
 800ea20:	9240022e 	bgeu	r18,r9,800ea2c <__muldf3+0x3a4>
 800ea24:	00800074 	movhi	r2,1
 800ea28:	1887883a 	add	r3,r3,r2
 800ea2c:	802ad43a 	srli	r21,r16,16
 800ea30:	80bfffcc 	andi	r2,r16,65535
 800ea34:	b893383a 	mul	r9,r23,r2
 800ea38:	3091383a 	mul	r8,r6,r2
 800ea3c:	bd6f383a 	mul	r23,r23,r21
 800ea40:	9026943a 	slli	r19,r18,16
 800ea44:	481ad43a 	srli	r13,r9,16
 800ea48:	9024d43a 	srli	r18,r18,16
 800ea4c:	39ffffcc 	andi	r7,r7,65535
 800ea50:	ba11883a 	add	r8,r23,r8
 800ea54:	99e7883a 	add	r19,r19,r7
 800ea58:	4351883a 	add	r8,r8,r13
 800ea5c:	1c97883a 	add	r11,r3,r18
 800ea60:	354d383a 	mul	r6,r6,r21
 800ea64:	9925883a 	add	r18,r19,r4
 800ea68:	45c0022e 	bgeu	r8,r23,800ea74 <__muldf3+0x3ec>
 800ea6c:	00c00074 	movhi	r3,1
 800ea70:	30cd883a 	add	r6,r6,r3
 800ea74:	8889383a 	mul	r4,r17,r2
 800ea78:	8d63383a 	mul	r17,r17,r21
 800ea7c:	a085383a 	mul	r2,r20,r2
 800ea80:	200ed43a 	srli	r7,r4,16
 800ea84:	401cd43a 	srli	r14,r8,16
 800ea88:	401a943a 	slli	r13,r8,16
 800ea8c:	8885883a 	add	r2,r17,r2
 800ea90:	4a3fffcc 	andi	r8,r9,65535
 800ea94:	11c5883a 	add	r2,r2,r7
 800ea98:	339d883a 	add	r14,r6,r14
 800ea9c:	6a11883a 	add	r8,r13,r8
 800eaa0:	a561383a 	mul	r16,r20,r21
 800eaa4:	1440022e 	bgeu	r2,r17,800eab0 <__muldf3+0x428>
 800eaa8:	00c00074 	movhi	r3,1
 800eaac:	80e1883a 	add	r16,r16,r3
 800eab0:	1006943a 	slli	r3,r2,16
 800eab4:	213fffcc 	andi	r4,r4,65535
 800eab8:	93db883a 	add	r13,r18,r15
 800eabc:	1909883a 	add	r4,r3,r4
 800eac0:	22c7883a 	add	r3,r4,r11
 800eac4:	6cd3803a 	cmpltu	r9,r13,r19
 800eac8:	6a09883a 	add	r4,r13,r8
 800eacc:	1a5b883a 	add	r13,r3,r9
 800ead0:	2211803a 	cmpltu	r8,r4,r8
 800ead4:	734d883a 	add	r6,r14,r13
 800ead8:	100ed43a 	srli	r7,r2,16
 800eadc:	6a53803a 	cmpltu	r9,r13,r9
 800eae0:	3205883a 	add	r2,r6,r8
 800eae4:	1ac7803a 	cmpltu	r3,r3,r11
 800eae8:	1211803a 	cmpltu	r8,r2,r8
 800eaec:	48c6b03a 	or	r3,r9,r3
 800eaf0:	338d803a 	cmpltu	r6,r6,r14
 800eaf4:	19c7883a 	add	r3,r3,r7
 800eaf8:	418cb03a 	or	r6,r8,r6
 800eafc:	1987883a 	add	r3,r3,r6
 800eb00:	2024927a 	slli	r18,r4,9
 800eb04:	1c07883a 	add	r3,r3,r16
 800eb08:	1806927a 	slli	r3,r3,9
 800eb0c:	1020d5fa 	srli	r16,r2,23
 800eb10:	2008d5fa 	srli	r4,r4,23
 800eb14:	9294b03a 	or	r10,r18,r10
 800eb18:	1004927a 	slli	r2,r2,9
 800eb1c:	5024c03a 	cmpne	r18,r10,zero
 800eb20:	1c20b03a 	or	r16,r3,r16
 800eb24:	9108b03a 	or	r4,r18,r4
 800eb28:	80c0402c 	andhi	r3,r16,256
 800eb2c:	20a4b03a 	or	r18,r4,r2
 800eb30:	18000726 	beq	r3,zero,800eb50 <__muldf3+0x4c8>
 800eb34:	9006d07a 	srli	r3,r18,1
 800eb38:	800897fa 	slli	r4,r16,31
 800eb3c:	9080004c 	andi	r2,r18,1
 800eb40:	8020d07a 	srli	r16,r16,1
 800eb44:	10c4b03a 	or	r2,r2,r3
 800eb48:	1124b03a 	or	r18,r2,r4
 800eb4c:	600b883a 	mov	r5,r12
 800eb50:	2900ffc4 	addi	r4,r5,1023
 800eb54:	01004b0e 	bge	zero,r4,800ec84 <__muldf3+0x5fc>
 800eb58:	908001cc 	andi	r2,r18,7
 800eb5c:	10000726 	beq	r2,zero,800eb7c <__muldf3+0x4f4>
 800eb60:	90c003cc 	andi	r3,r18,15
 800eb64:	00800104 	movi	r2,4
 800eb68:	18800426 	beq	r3,r2,800eb7c <__muldf3+0x4f4>
 800eb6c:	9087883a 	add	r3,r18,r2
 800eb70:	1c85803a 	cmpltu	r2,r3,r18
 800eb74:	80a1883a 	add	r16,r16,r2
 800eb78:	1825883a 	mov	r18,r3
 800eb7c:	8080402c 	andhi	r2,r16,256
 800eb80:	10000426 	beq	r2,zero,800eb94 <__muldf3+0x50c>
 800eb84:	00bfc034 	movhi	r2,65280
 800eb88:	10bfffc4 	addi	r2,r2,-1
 800eb8c:	29010004 	addi	r4,r5,1024
 800eb90:	80a0703a 	and	r16,r16,r2
 800eb94:	0081ff84 	movi	r2,2046
 800eb98:	1100320e 	bge	r2,r4,800ec64 <__muldf3+0x5dc>
 800eb9c:	b4c0004c 	andi	r19,r22,1
 800eba0:	0101ffc4 	movi	r4,2047
 800eba4:	0021883a 	mov	r16,zero
 800eba8:	0025883a 	mov	r18,zero
 800ebac:	003f1006 	br	800e7f0 <__alt_data_end+0xfc00e7f0>
 800ebb0:	8080022c 	andhi	r2,r16,8
 800ebb4:	10000926 	beq	r2,zero,800ebdc <__muldf3+0x554>
 800ebb8:	8880022c 	andhi	r2,r17,8
 800ebbc:	1000071e 	bne	r2,zero,800ebdc <__muldf3+0x554>
 800ebc0:	00800434 	movhi	r2,16
 800ebc4:	8c000234 	orhi	r16,r17,8
 800ebc8:	10bfffc4 	addi	r2,r2,-1
 800ebcc:	1827883a 	mov	r19,r3
 800ebd0:	80a0703a 	and	r16,r16,r2
 800ebd4:	b825883a 	mov	r18,r23
 800ebd8:	003f6a06 	br	800e984 <__alt_data_end+0xfc00e984>
 800ebdc:	00800434 	movhi	r2,16
 800ebe0:	84000234 	orhi	r16,r16,8
 800ebe4:	10bfffc4 	addi	r2,r2,-1
 800ebe8:	80a0703a 	and	r16,r16,r2
 800ebec:	003f6506 	br	800e984 <__alt_data_end+0xfc00e984>
 800ebf0:	3009883a 	mov	r4,r6
 800ebf4:	d8c00215 	stw	r3,8(sp)
 800ebf8:	d9800315 	stw	r6,12(sp)
 800ebfc:	da800015 	stw	r10,0(sp)
 800ec00:	dac00115 	stw	r11,4(sp)
 800ec04:	800f8780 	call	800f878 <__clzsi2>
 800ec08:	11000804 	addi	r4,r2,32
 800ec0c:	014009c4 	movi	r5,39
 800ec10:	d8c00217 	ldw	r3,8(sp)
 800ec14:	d9800317 	ldw	r6,12(sp)
 800ec18:	da800017 	ldw	r10,0(sp)
 800ec1c:	dac00117 	ldw	r11,4(sp)
 800ec20:	293f320e 	bge	r5,r4,800e8ec <__alt_data_end+0xfc00e8ec>
 800ec24:	10bffe04 	addi	r2,r2,-8
 800ec28:	b8a2983a 	sll	r17,r23,r2
 800ec2c:	002f883a 	mov	r23,zero
 800ec30:	003f3506 	br	800e908 <__alt_data_end+0xfc00e908>
 800ec34:	d9800315 	stw	r6,12(sp)
 800ec38:	d9c00015 	stw	r7,0(sp)
 800ec3c:	800f8780 	call	800f878 <__clzsi2>
 800ec40:	10c00804 	addi	r3,r2,32
 800ec44:	010009c4 	movi	r4,39
 800ec48:	d9800317 	ldw	r6,12(sp)
 800ec4c:	d9c00017 	ldw	r7,0(sp)
 800ec50:	20ff060e 	bge	r4,r3,800e86c <__alt_data_end+0xfc00e86c>
 800ec54:	10bffe04 	addi	r2,r2,-8
 800ec58:	88a0983a 	sll	r16,r17,r2
 800ec5c:	0025883a 	mov	r18,zero
 800ec60:	003f0906 	br	800e888 <__alt_data_end+0xfc00e888>
 800ec64:	9004d0fa 	srli	r2,r18,3
 800ec68:	8024977a 	slli	r18,r16,29
 800ec6c:	8020927a 	slli	r16,r16,9
 800ec70:	2101ffcc 	andi	r4,r4,2047
 800ec74:	90a4b03a 	or	r18,r18,r2
 800ec78:	8020d33a 	srli	r16,r16,12
 800ec7c:	b4c0004c 	andi	r19,r22,1
 800ec80:	003edb06 	br	800e7f0 <__alt_data_end+0xfc00e7f0>
 800ec84:	00ff0084 	movi	r3,-1022
 800ec88:	1947c83a 	sub	r3,r3,r5
 800ec8c:	00800e04 	movi	r2,56
 800ec90:	10c0080e 	bge	r2,r3,800ecb4 <__muldf3+0x62c>
 800ec94:	b4c0004c 	andi	r19,r22,1
 800ec98:	0009883a 	mov	r4,zero
 800ec9c:	0021883a 	mov	r16,zero
 800eca0:	0025883a 	mov	r18,zero
 800eca4:	003ed206 	br	800e7f0 <__alt_data_end+0xfc00e7f0>
 800eca8:	600b883a 	mov	r5,r12
 800ecac:	e02d883a 	mov	r22,fp
 800ecb0:	003fa706 	br	800eb50 <__alt_data_end+0xfc00eb50>
 800ecb4:	008007c4 	movi	r2,31
 800ecb8:	10c01816 	blt	r2,r3,800ed1c <__muldf3+0x694>
 800ecbc:	29410784 	addi	r5,r5,1054
 800ecc0:	8144983a 	sll	r2,r16,r5
 800ecc4:	90c8d83a 	srl	r4,r18,r3
 800ecc8:	914a983a 	sll	r5,r18,r5
 800eccc:	80c6d83a 	srl	r3,r16,r3
 800ecd0:	2088b03a 	or	r4,r4,r2
 800ecd4:	2804c03a 	cmpne	r2,r5,zero
 800ecd8:	2084b03a 	or	r2,r4,r2
 800ecdc:	110001cc 	andi	r4,r2,7
 800ece0:	20000726 	beq	r4,zero,800ed00 <__muldf3+0x678>
 800ece4:	114003cc 	andi	r5,r2,15
 800ece8:	01000104 	movi	r4,4
 800ecec:	29000426 	beq	r5,r4,800ed00 <__muldf3+0x678>
 800ecf0:	11000104 	addi	r4,r2,4
 800ecf4:	2085803a 	cmpltu	r2,r4,r2
 800ecf8:	1887883a 	add	r3,r3,r2
 800ecfc:	2005883a 	mov	r2,r4
 800ed00:	1900202c 	andhi	r4,r3,128
 800ed04:	20001826 	beq	r4,zero,800ed68 <__muldf3+0x6e0>
 800ed08:	b4c0004c 	andi	r19,r22,1
 800ed0c:	01000044 	movi	r4,1
 800ed10:	0021883a 	mov	r16,zero
 800ed14:	0025883a 	mov	r18,zero
 800ed18:	003eb506 	br	800e7f0 <__alt_data_end+0xfc00e7f0>
 800ed1c:	00bef884 	movi	r2,-1054
 800ed20:	1145c83a 	sub	r2,r2,r5
 800ed24:	8088d83a 	srl	r4,r16,r2
 800ed28:	00800804 	movi	r2,32
 800ed2c:	18801726 	beq	r3,r2,800ed8c <__muldf3+0x704>
 800ed30:	28810f84 	addi	r2,r5,1086
 800ed34:	8084983a 	sll	r2,r16,r2
 800ed38:	1484b03a 	or	r2,r2,r18
 800ed3c:	1004c03a 	cmpne	r2,r2,zero
 800ed40:	1104b03a 	or	r2,r2,r4
 800ed44:	10c001cc 	andi	r3,r2,7
 800ed48:	18000b1e 	bne	r3,zero,800ed78 <__muldf3+0x6f0>
 800ed4c:	0021883a 	mov	r16,zero
 800ed50:	1004d0fa 	srli	r2,r2,3
 800ed54:	b4c0004c 	andi	r19,r22,1
 800ed58:	0009883a 	mov	r4,zero
 800ed5c:	10e4b03a 	or	r18,r2,r3
 800ed60:	003ea306 	br	800e7f0 <__alt_data_end+0xfc00e7f0>
 800ed64:	0007883a 	mov	r3,zero
 800ed68:	1820927a 	slli	r16,r3,9
 800ed6c:	1806977a 	slli	r3,r3,29
 800ed70:	8020d33a 	srli	r16,r16,12
 800ed74:	003ff606 	br	800ed50 <__alt_data_end+0xfc00ed50>
 800ed78:	110003cc 	andi	r4,r2,15
 800ed7c:	00c00104 	movi	r3,4
 800ed80:	20fff826 	beq	r4,r3,800ed64 <__alt_data_end+0xfc00ed64>
 800ed84:	0007883a 	mov	r3,zero
 800ed88:	003fd906 	br	800ecf0 <__alt_data_end+0xfc00ecf0>
 800ed8c:	0005883a 	mov	r2,zero
 800ed90:	003fe906 	br	800ed38 <__alt_data_end+0xfc00ed38>
 800ed94:	00800434 	movhi	r2,16
 800ed98:	84000234 	orhi	r16,r16,8
 800ed9c:	10bfffc4 	addi	r2,r2,-1
 800eda0:	e4c0004c 	andi	r19,fp,1
 800eda4:	80a0703a 	and	r16,r16,r2
 800eda8:	003ef606 	br	800e984 <__alt_data_end+0xfc00e984>

0800edac <__subdf3>:
 800edac:	00c00434 	movhi	r3,16
 800edb0:	18ffffc4 	addi	r3,r3,-1
 800edb4:	defffb04 	addi	sp,sp,-20
 800edb8:	28d2703a 	and	r9,r5,r3
 800edbc:	3814d53a 	srli	r10,r7,20
 800edc0:	38c6703a 	and	r3,r7,r3
 800edc4:	3004d77a 	srli	r2,r6,29
 800edc8:	dc800215 	stw	r18,8(sp)
 800edcc:	dc000015 	stw	r16,0(sp)
 800edd0:	2824d7fa 	srli	r18,r5,31
 800edd4:	2820d53a 	srli	r16,r5,20
 800edd8:	481290fa 	slli	r9,r9,3
 800eddc:	200ad77a 	srli	r5,r4,29
 800ede0:	180690fa 	slli	r3,r3,3
 800ede4:	dc400115 	stw	r17,4(sp)
 800ede8:	dfc00415 	stw	ra,16(sp)
 800edec:	202290fa 	slli	r17,r4,3
 800edf0:	dcc00315 	stw	r19,12(sp)
 800edf4:	5281ffcc 	andi	r10,r10,2047
 800edf8:	0101ffc4 	movi	r4,2047
 800edfc:	9011883a 	mov	r8,r18
 800ee00:	8401ffcc 	andi	r16,r16,2047
 800ee04:	94803fcc 	andi	r18,r18,255
 800ee08:	494ab03a 	or	r5,r9,r5
 800ee0c:	380ed7fa 	srli	r7,r7,31
 800ee10:	1886b03a 	or	r3,r3,r2
 800ee14:	300c90fa 	slli	r6,r6,3
 800ee18:	51009026 	beq	r10,r4,800f05c <__subdf3+0x2b0>
 800ee1c:	39c0005c 	xori	r7,r7,1
 800ee20:	8285c83a 	sub	r2,r16,r10
 800ee24:	91c06f26 	beq	r18,r7,800efe4 <__subdf3+0x238>
 800ee28:	0080b10e 	bge	zero,r2,800f0f0 <__subdf3+0x344>
 800ee2c:	50002a1e 	bne	r10,zero,800eed8 <__subdf3+0x12c>
 800ee30:	1988b03a 	or	r4,r3,r6
 800ee34:	2000941e 	bne	r4,zero,800f088 <__subdf3+0x2dc>
 800ee38:	888001cc 	andi	r2,r17,7
 800ee3c:	10005b26 	beq	r2,zero,800efac <__subdf3+0x200>
 800ee40:	88c003cc 	andi	r3,r17,15
 800ee44:	00800104 	movi	r2,4
 800ee48:	18805826 	beq	r3,r2,800efac <__subdf3+0x200>
 800ee4c:	88c00104 	addi	r3,r17,4
 800ee50:	1c63803a 	cmpltu	r17,r3,r17
 800ee54:	2c4b883a 	add	r5,r5,r17
 800ee58:	2880202c 	andhi	r2,r5,128
 800ee5c:	9200004c 	andi	r8,r18,1
 800ee60:	1823883a 	mov	r17,r3
 800ee64:	10005426 	beq	r2,zero,800efb8 <__subdf3+0x20c>
 800ee68:	84000044 	addi	r16,r16,1
 800ee6c:	0081ffc4 	movi	r2,2047
 800ee70:	8080bf26 	beq	r16,r2,800f170 <__subdf3+0x3c4>
 800ee74:	013fe034 	movhi	r4,65408
 800ee78:	213fffc4 	addi	r4,r4,-1
 800ee7c:	290a703a 	and	r5,r5,r4
 800ee80:	2804977a 	slli	r2,r5,29
 800ee84:	280a927a 	slli	r5,r5,9
 800ee88:	8822d0fa 	srli	r17,r17,3
 800ee8c:	8401ffcc 	andi	r16,r16,2047
 800ee90:	2808d33a 	srli	r4,r5,12
 800ee94:	1444b03a 	or	r2,r2,r17
 800ee98:	8401ffcc 	andi	r16,r16,2047
 800ee9c:	800a953a 	slli	r5,r16,20
 800eea0:	40c03fcc 	andi	r3,r8,255
 800eea4:	04000434 	movhi	r16,16
 800eea8:	180697fa 	slli	r3,r3,31
 800eeac:	843fffc4 	addi	r16,r16,-1
 800eeb0:	2420703a 	and	r16,r4,r16
 800eeb4:	8160b03a 	or	r16,r16,r5
 800eeb8:	80c6b03a 	or	r3,r16,r3
 800eebc:	dfc00417 	ldw	ra,16(sp)
 800eec0:	dcc00317 	ldw	r19,12(sp)
 800eec4:	dc800217 	ldw	r18,8(sp)
 800eec8:	dc400117 	ldw	r17,4(sp)
 800eecc:	dc000017 	ldw	r16,0(sp)
 800eed0:	dec00504 	addi	sp,sp,20
 800eed4:	f800283a 	ret
 800eed8:	0101ffc4 	movi	r4,2047
 800eedc:	813fd626 	beq	r16,r4,800ee38 <__alt_data_end+0xfc00ee38>
 800eee0:	18c02034 	orhi	r3,r3,128
 800eee4:	01000e04 	movi	r4,56
 800eee8:	2080a416 	blt	r4,r2,800f17c <__subdf3+0x3d0>
 800eeec:	010007c4 	movi	r4,31
 800eef0:	2080c716 	blt	r4,r2,800f210 <__subdf3+0x464>
 800eef4:	01000804 	movi	r4,32
 800eef8:	2089c83a 	sub	r4,r4,r2
 800eefc:	1910983a 	sll	r8,r3,r4
 800ef00:	308ed83a 	srl	r7,r6,r2
 800ef04:	3108983a 	sll	r4,r6,r4
 800ef08:	1884d83a 	srl	r2,r3,r2
 800ef0c:	41ccb03a 	or	r6,r8,r7
 800ef10:	2008c03a 	cmpne	r4,r4,zero
 800ef14:	310cb03a 	or	r6,r6,r4
 800ef18:	898dc83a 	sub	r6,r17,r6
 800ef1c:	89a3803a 	cmpltu	r17,r17,r6
 800ef20:	288bc83a 	sub	r5,r5,r2
 800ef24:	2c4bc83a 	sub	r5,r5,r17
 800ef28:	3023883a 	mov	r17,r6
 800ef2c:	2880202c 	andhi	r2,r5,128
 800ef30:	10006b26 	beq	r2,zero,800f0e0 <__subdf3+0x334>
 800ef34:	04c02034 	movhi	r19,128
 800ef38:	9cffffc4 	addi	r19,r19,-1
 800ef3c:	2ce6703a 	and	r19,r5,r19
 800ef40:	98007c26 	beq	r19,zero,800f134 <__subdf3+0x388>
 800ef44:	9809883a 	mov	r4,r19
 800ef48:	800f8780 	call	800f878 <__clzsi2>
 800ef4c:	10fffe04 	addi	r3,r2,-8
 800ef50:	010007c4 	movi	r4,31
 800ef54:	20c07d16 	blt	r4,r3,800f14c <__subdf3+0x3a0>
 800ef58:	01400a04 	movi	r5,40
 800ef5c:	2885c83a 	sub	r2,r5,r2
 800ef60:	888ad83a 	srl	r5,r17,r2
 800ef64:	98e6983a 	sll	r19,r19,r3
 800ef68:	88e2983a 	sll	r17,r17,r3
 800ef6c:	2ce6b03a 	or	r19,r5,r19
 800ef70:	1c007a16 	blt	r3,r16,800f15c <__subdf3+0x3b0>
 800ef74:	1c21c83a 	sub	r16,r3,r16
 800ef78:	81400044 	addi	r5,r16,1
 800ef7c:	00c007c4 	movi	r3,31
 800ef80:	19409616 	blt	r3,r5,800f1dc <__subdf3+0x430>
 800ef84:	1c21c83a 	sub	r16,r3,r16
 800ef88:	8c08983a 	sll	r4,r17,r16
 800ef8c:	8946d83a 	srl	r3,r17,r5
 800ef90:	9c20983a 	sll	r16,r19,r16
 800ef94:	2008c03a 	cmpne	r4,r4,zero
 800ef98:	994ad83a 	srl	r5,r19,r5
 800ef9c:	1c06b03a 	or	r3,r3,r16
 800efa0:	1922b03a 	or	r17,r3,r4
 800efa4:	0021883a 	mov	r16,zero
 800efa8:	003fa306 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800efac:	2880202c 	andhi	r2,r5,128
 800efb0:	9200004c 	andi	r8,r18,1
 800efb4:	103fac1e 	bne	r2,zero,800ee68 <__alt_data_end+0xfc00ee68>
 800efb8:	2804977a 	slli	r2,r5,29
 800efbc:	8822d0fa 	srli	r17,r17,3
 800efc0:	00c1ffc4 	movi	r3,2047
 800efc4:	280ad0fa 	srli	r5,r5,3
 800efc8:	1444b03a 	or	r2,r2,r17
 800efcc:	80c02726 	beq	r16,r3,800f06c <__subdf3+0x2c0>
 800efd0:	01000434 	movhi	r4,16
 800efd4:	213fffc4 	addi	r4,r4,-1
 800efd8:	80e0703a 	and	r16,r16,r3
 800efdc:	2908703a 	and	r4,r5,r4
 800efe0:	003fad06 	br	800ee98 <__alt_data_end+0xfc00ee98>
 800efe4:	0080690e 	bge	zero,r2,800f18c <__subdf3+0x3e0>
 800efe8:	50002f26 	beq	r10,zero,800f0a8 <__subdf3+0x2fc>
 800efec:	0101ffc4 	movi	r4,2047
 800eff0:	813f9126 	beq	r16,r4,800ee38 <__alt_data_end+0xfc00ee38>
 800eff4:	18c02034 	orhi	r3,r3,128
 800eff8:	01000e04 	movi	r4,56
 800effc:	2080b00e 	bge	r4,r2,800f2c0 <__subdf3+0x514>
 800f000:	198cb03a 	or	r6,r3,r6
 800f004:	300ec03a 	cmpne	r7,r6,zero
 800f008:	0005883a 	mov	r2,zero
 800f00c:	3c4f883a 	add	r7,r7,r17
 800f010:	3c63803a 	cmpltu	r17,r7,r17
 800f014:	114b883a 	add	r5,r2,r5
 800f018:	2c4b883a 	add	r5,r5,r17
 800f01c:	3823883a 	mov	r17,r7
 800f020:	2880202c 	andhi	r2,r5,128
 800f024:	10002e26 	beq	r2,zero,800f0e0 <__subdf3+0x334>
 800f028:	84000044 	addi	r16,r16,1
 800f02c:	0081ffc4 	movi	r2,2047
 800f030:	8080de26 	beq	r16,r2,800f3ac <__subdf3+0x600>
 800f034:	00bfe034 	movhi	r2,65408
 800f038:	10bfffc4 	addi	r2,r2,-1
 800f03c:	288a703a 	and	r5,r5,r2
 800f040:	880cd07a 	srli	r6,r17,1
 800f044:	280897fa 	slli	r4,r5,31
 800f048:	88c0004c 	andi	r3,r17,1
 800f04c:	30e2b03a 	or	r17,r6,r3
 800f050:	280ad07a 	srli	r5,r5,1
 800f054:	8922b03a 	or	r17,r17,r4
 800f058:	003f7706 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f05c:	1984b03a 	or	r2,r3,r6
 800f060:	103f6e26 	beq	r2,zero,800ee1c <__alt_data_end+0xfc00ee1c>
 800f064:	39c03fcc 	andi	r7,r7,255
 800f068:	003f6d06 	br	800ee20 <__alt_data_end+0xfc00ee20>
 800f06c:	1146b03a 	or	r3,r2,r5
 800f070:	18003f26 	beq	r3,zero,800f170 <__subdf3+0x3c4>
 800f074:	00c00434 	movhi	r3,16
 800f078:	29000234 	orhi	r4,r5,8
 800f07c:	18ffffc4 	addi	r3,r3,-1
 800f080:	20c8703a 	and	r4,r4,r3
 800f084:	003f8406 	br	800ee98 <__alt_data_end+0xfc00ee98>
 800f088:	10bfffc4 	addi	r2,r2,-1
 800f08c:	1000501e 	bne	r2,zero,800f1d0 <__subdf3+0x424>
 800f090:	898fc83a 	sub	r7,r17,r6
 800f094:	89e3803a 	cmpltu	r17,r17,r7
 800f098:	28cbc83a 	sub	r5,r5,r3
 800f09c:	2c4bc83a 	sub	r5,r5,r17
 800f0a0:	3823883a 	mov	r17,r7
 800f0a4:	003fa106 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f0a8:	1988b03a 	or	r4,r3,r6
 800f0ac:	203f6226 	beq	r4,zero,800ee38 <__alt_data_end+0xfc00ee38>
 800f0b0:	10bfffc4 	addi	r2,r2,-1
 800f0b4:	10009b1e 	bne	r2,zero,800f324 <__subdf3+0x578>
 800f0b8:	344d883a 	add	r6,r6,r17
 800f0bc:	3463803a 	cmpltu	r17,r6,r17
 800f0c0:	194b883a 	add	r5,r3,r5
 800f0c4:	2c4b883a 	add	r5,r5,r17
 800f0c8:	3023883a 	mov	r17,r6
 800f0cc:	003fd406 	br	800f020 <__alt_data_end+0xfc00f020>
 800f0d0:	1106b03a 	or	r3,r2,r4
 800f0d4:	1800b426 	beq	r3,zero,800f3a8 <__subdf3+0x5fc>
 800f0d8:	100b883a 	mov	r5,r2
 800f0dc:	2023883a 	mov	r17,r4
 800f0e0:	888001cc 	andi	r2,r17,7
 800f0e4:	103f561e 	bne	r2,zero,800ee40 <__alt_data_end+0xfc00ee40>
 800f0e8:	9200004c 	andi	r8,r18,1
 800f0ec:	003fb206 	br	800efb8 <__alt_data_end+0xfc00efb8>
 800f0f0:	1000531e 	bne	r2,zero,800f240 <__subdf3+0x494>
 800f0f4:	80800044 	addi	r2,r16,1
 800f0f8:	1081ffcc 	andi	r2,r2,2047
 800f0fc:	01000044 	movi	r4,1
 800f100:	2080a00e 	bge	r4,r2,800f384 <__subdf3+0x5d8>
 800f104:	8985c83a 	sub	r2,r17,r6
 800f108:	8889803a 	cmpltu	r4,r17,r2
 800f10c:	28e7c83a 	sub	r19,r5,r3
 800f110:	9927c83a 	sub	r19,r19,r4
 800f114:	9900202c 	andhi	r4,r19,128
 800f118:	20006226 	beq	r4,zero,800f2a4 <__subdf3+0x4f8>
 800f11c:	3463c83a 	sub	r17,r6,r17
 800f120:	194bc83a 	sub	r5,r3,r5
 800f124:	344d803a 	cmpltu	r6,r6,r17
 800f128:	29a7c83a 	sub	r19,r5,r6
 800f12c:	3825883a 	mov	r18,r7
 800f130:	983f841e 	bne	r19,zero,800ef44 <__alt_data_end+0xfc00ef44>
 800f134:	8809883a 	mov	r4,r17
 800f138:	800f8780 	call	800f878 <__clzsi2>
 800f13c:	10800804 	addi	r2,r2,32
 800f140:	10fffe04 	addi	r3,r2,-8
 800f144:	010007c4 	movi	r4,31
 800f148:	20ff830e 	bge	r4,r3,800ef58 <__alt_data_end+0xfc00ef58>
 800f14c:	14fff604 	addi	r19,r2,-40
 800f150:	8ce6983a 	sll	r19,r17,r19
 800f154:	0023883a 	mov	r17,zero
 800f158:	1c3f860e 	bge	r3,r16,800ef74 <__alt_data_end+0xfc00ef74>
 800f15c:	017fe034 	movhi	r5,65408
 800f160:	297fffc4 	addi	r5,r5,-1
 800f164:	80e1c83a 	sub	r16,r16,r3
 800f168:	994a703a 	and	r5,r19,r5
 800f16c:	003f3206 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f170:	0009883a 	mov	r4,zero
 800f174:	0005883a 	mov	r2,zero
 800f178:	003f4706 	br	800ee98 <__alt_data_end+0xfc00ee98>
 800f17c:	198cb03a 	or	r6,r3,r6
 800f180:	300cc03a 	cmpne	r6,r6,zero
 800f184:	0005883a 	mov	r2,zero
 800f188:	003f6306 	br	800ef18 <__alt_data_end+0xfc00ef18>
 800f18c:	10009d1e 	bne	r2,zero,800f404 <__subdf3+0x658>
 800f190:	81c00044 	addi	r7,r16,1
 800f194:	3881ffcc 	andi	r2,r7,2047
 800f198:	02400044 	movi	r9,1
 800f19c:	4880680e 	bge	r9,r2,800f340 <__subdf3+0x594>
 800f1a0:	0081ffc4 	movi	r2,2047
 800f1a4:	3880ae26 	beq	r7,r2,800f460 <__subdf3+0x6b4>
 800f1a8:	344d883a 	add	r6,r6,r17
 800f1ac:	3463803a 	cmpltu	r17,r6,r17
 800f1b0:	194b883a 	add	r5,r3,r5
 800f1b4:	2c4b883a 	add	r5,r5,r17
 800f1b8:	282297fa 	slli	r17,r5,31
 800f1bc:	300cd07a 	srli	r6,r6,1
 800f1c0:	280ad07a 	srli	r5,r5,1
 800f1c4:	3821883a 	mov	r16,r7
 800f1c8:	89a2b03a 	or	r17,r17,r6
 800f1cc:	003f1a06 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f1d0:	0101ffc4 	movi	r4,2047
 800f1d4:	813f431e 	bne	r16,r4,800eee4 <__alt_data_end+0xfc00eee4>
 800f1d8:	003f1706 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f1dc:	80bff844 	addi	r2,r16,-31
 800f1e0:	00c00804 	movi	r3,32
 800f1e4:	9884d83a 	srl	r2,r19,r2
 800f1e8:	28c05126 	beq	r5,r3,800f330 <__subdf3+0x584>
 800f1ec:	00c00fc4 	movi	r3,63
 800f1f0:	1c21c83a 	sub	r16,r3,r16
 800f1f4:	9c26983a 	sll	r19,r19,r16
 800f1f8:	9c62b03a 	or	r17,r19,r17
 800f1fc:	8822c03a 	cmpne	r17,r17,zero
 800f200:	88a2b03a 	or	r17,r17,r2
 800f204:	000b883a 	mov	r5,zero
 800f208:	0021883a 	mov	r16,zero
 800f20c:	003fb406 	br	800f0e0 <__alt_data_end+0xfc00f0e0>
 800f210:	113ff804 	addi	r4,r2,-32
 800f214:	01c00804 	movi	r7,32
 800f218:	1908d83a 	srl	r4,r3,r4
 800f21c:	11c04626 	beq	r2,r7,800f338 <__subdf3+0x58c>
 800f220:	01c01004 	movi	r7,64
 800f224:	3885c83a 	sub	r2,r7,r2
 800f228:	1884983a 	sll	r2,r3,r2
 800f22c:	118cb03a 	or	r6,r2,r6
 800f230:	300cc03a 	cmpne	r6,r6,zero
 800f234:	310cb03a 	or	r6,r6,r4
 800f238:	0005883a 	mov	r2,zero
 800f23c:	003f3606 	br	800ef18 <__alt_data_end+0xfc00ef18>
 800f240:	80002b26 	beq	r16,zero,800f2f0 <__subdf3+0x544>
 800f244:	0101ffc4 	movi	r4,2047
 800f248:	51006926 	beq	r10,r4,800f3f0 <__subdf3+0x644>
 800f24c:	0085c83a 	sub	r2,zero,r2
 800f250:	29402034 	orhi	r5,r5,128
 800f254:	01000e04 	movi	r4,56
 800f258:	20807d16 	blt	r4,r2,800f450 <__subdf3+0x6a4>
 800f25c:	010007c4 	movi	r4,31
 800f260:	2080d916 	blt	r4,r2,800f5c8 <__subdf3+0x81c>
 800f264:	01000804 	movi	r4,32
 800f268:	2089c83a 	sub	r4,r4,r2
 800f26c:	2912983a 	sll	r9,r5,r4
 800f270:	8890d83a 	srl	r8,r17,r2
 800f274:	8908983a 	sll	r4,r17,r4
 800f278:	2884d83a 	srl	r2,r5,r2
 800f27c:	4a22b03a 	or	r17,r9,r8
 800f280:	2008c03a 	cmpne	r4,r4,zero
 800f284:	8922b03a 	or	r17,r17,r4
 800f288:	3463c83a 	sub	r17,r6,r17
 800f28c:	1885c83a 	sub	r2,r3,r2
 800f290:	344d803a 	cmpltu	r6,r6,r17
 800f294:	118bc83a 	sub	r5,r2,r6
 800f298:	5021883a 	mov	r16,r10
 800f29c:	3825883a 	mov	r18,r7
 800f2a0:	003f2206 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f2a4:	9886b03a 	or	r3,r19,r2
 800f2a8:	18001c1e 	bne	r3,zero,800f31c <__subdf3+0x570>
 800f2ac:	0011883a 	mov	r8,zero
 800f2b0:	000b883a 	mov	r5,zero
 800f2b4:	0023883a 	mov	r17,zero
 800f2b8:	0021883a 	mov	r16,zero
 800f2bc:	003f3e06 	br	800efb8 <__alt_data_end+0xfc00efb8>
 800f2c0:	010007c4 	movi	r4,31
 800f2c4:	20803c16 	blt	r4,r2,800f3b8 <__subdf3+0x60c>
 800f2c8:	01000804 	movi	r4,32
 800f2cc:	2089c83a 	sub	r4,r4,r2
 800f2d0:	1912983a 	sll	r9,r3,r4
 800f2d4:	308ed83a 	srl	r7,r6,r2
 800f2d8:	3108983a 	sll	r4,r6,r4
 800f2dc:	1884d83a 	srl	r2,r3,r2
 800f2e0:	49ceb03a 	or	r7,r9,r7
 800f2e4:	2008c03a 	cmpne	r4,r4,zero
 800f2e8:	390eb03a 	or	r7,r7,r4
 800f2ec:	003f4706 	br	800f00c <__alt_data_end+0xfc00f00c>
 800f2f0:	2c48b03a 	or	r4,r5,r17
 800f2f4:	20003e26 	beq	r4,zero,800f3f0 <__subdf3+0x644>
 800f2f8:	0084303a 	nor	r2,zero,r2
 800f2fc:	10003a1e 	bne	r2,zero,800f3e8 <__subdf3+0x63c>
 800f300:	3463c83a 	sub	r17,r6,r17
 800f304:	194bc83a 	sub	r5,r3,r5
 800f308:	344d803a 	cmpltu	r6,r6,r17
 800f30c:	298bc83a 	sub	r5,r5,r6
 800f310:	5021883a 	mov	r16,r10
 800f314:	3825883a 	mov	r18,r7
 800f318:	003f0406 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f31c:	1023883a 	mov	r17,r2
 800f320:	003f0706 	br	800ef40 <__alt_data_end+0xfc00ef40>
 800f324:	0101ffc4 	movi	r4,2047
 800f328:	813f331e 	bne	r16,r4,800eff8 <__alt_data_end+0xfc00eff8>
 800f32c:	003ec206 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f330:	0027883a 	mov	r19,zero
 800f334:	003fb006 	br	800f1f8 <__alt_data_end+0xfc00f1f8>
 800f338:	0005883a 	mov	r2,zero
 800f33c:	003fbb06 	br	800f22c <__alt_data_end+0xfc00f22c>
 800f340:	2c44b03a 	or	r2,r5,r17
 800f344:	80008b1e 	bne	r16,zero,800f574 <__subdf3+0x7c8>
 800f348:	1000b526 	beq	r2,zero,800f620 <__subdf3+0x874>
 800f34c:	1984b03a 	or	r2,r3,r6
 800f350:	103eb926 	beq	r2,zero,800ee38 <__alt_data_end+0xfc00ee38>
 800f354:	3449883a 	add	r4,r6,r17
 800f358:	2463803a 	cmpltu	r17,r4,r17
 800f35c:	194b883a 	add	r5,r3,r5
 800f360:	2c4b883a 	add	r5,r5,r17
 800f364:	2880202c 	andhi	r2,r5,128
 800f368:	2023883a 	mov	r17,r4
 800f36c:	103f5c26 	beq	r2,zero,800f0e0 <__alt_data_end+0xfc00f0e0>
 800f370:	00bfe034 	movhi	r2,65408
 800f374:	10bfffc4 	addi	r2,r2,-1
 800f378:	4821883a 	mov	r16,r9
 800f37c:	288a703a 	and	r5,r5,r2
 800f380:	003ead06 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f384:	2c44b03a 	or	r2,r5,r17
 800f388:	8000291e 	bne	r16,zero,800f430 <__subdf3+0x684>
 800f38c:	10004f1e 	bne	r2,zero,800f4cc <__subdf3+0x720>
 800f390:	1984b03a 	or	r2,r3,r6
 800f394:	10000426 	beq	r2,zero,800f3a8 <__subdf3+0x5fc>
 800f398:	180b883a 	mov	r5,r3
 800f39c:	3023883a 	mov	r17,r6
 800f3a0:	3825883a 	mov	r18,r7
 800f3a4:	003ea406 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f3a8:	0011883a 	mov	r8,zero
 800f3ac:	000b883a 	mov	r5,zero
 800f3b0:	0023883a 	mov	r17,zero
 800f3b4:	003f0006 	br	800efb8 <__alt_data_end+0xfc00efb8>
 800f3b8:	11fff804 	addi	r7,r2,-32
 800f3bc:	19c8d83a 	srl	r4,r3,r7
 800f3c0:	01c00804 	movi	r7,32
 800f3c4:	11c07e26 	beq	r2,r7,800f5c0 <__subdf3+0x814>
 800f3c8:	01c01004 	movi	r7,64
 800f3cc:	3885c83a 	sub	r2,r7,r2
 800f3d0:	1884983a 	sll	r2,r3,r2
 800f3d4:	118cb03a 	or	r6,r2,r6
 800f3d8:	300ec03a 	cmpne	r7,r6,zero
 800f3dc:	390eb03a 	or	r7,r7,r4
 800f3e0:	0005883a 	mov	r2,zero
 800f3e4:	003f0906 	br	800f00c <__alt_data_end+0xfc00f00c>
 800f3e8:	0101ffc4 	movi	r4,2047
 800f3ec:	513f991e 	bne	r10,r4,800f254 <__alt_data_end+0xfc00f254>
 800f3f0:	180b883a 	mov	r5,r3
 800f3f4:	3023883a 	mov	r17,r6
 800f3f8:	5021883a 	mov	r16,r10
 800f3fc:	3825883a 	mov	r18,r7
 800f400:	003e8d06 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f404:	80001a1e 	bne	r16,zero,800f470 <__subdf3+0x6c4>
 800f408:	2c48b03a 	or	r4,r5,r17
 800f40c:	20005526 	beq	r4,zero,800f564 <__subdf3+0x7b8>
 800f410:	0084303a 	nor	r2,zero,r2
 800f414:	1000511e 	bne	r2,zero,800f55c <__subdf3+0x7b0>
 800f418:	89a3883a 	add	r17,r17,r6
 800f41c:	194b883a 	add	r5,r3,r5
 800f420:	898d803a 	cmpltu	r6,r17,r6
 800f424:	298b883a 	add	r5,r5,r6
 800f428:	5021883a 	mov	r16,r10
 800f42c:	003efc06 	br	800f020 <__alt_data_end+0xfc00f020>
 800f430:	1000341e 	bne	r2,zero,800f504 <__subdf3+0x758>
 800f434:	1984b03a 	or	r2,r3,r6
 800f438:	10006f26 	beq	r2,zero,800f5f8 <__subdf3+0x84c>
 800f43c:	180b883a 	mov	r5,r3
 800f440:	3023883a 	mov	r17,r6
 800f444:	3825883a 	mov	r18,r7
 800f448:	0401ffc4 	movi	r16,2047
 800f44c:	003e7a06 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f450:	2c62b03a 	or	r17,r5,r17
 800f454:	8822c03a 	cmpne	r17,r17,zero
 800f458:	0005883a 	mov	r2,zero
 800f45c:	003f8a06 	br	800f288 <__alt_data_end+0xfc00f288>
 800f460:	3821883a 	mov	r16,r7
 800f464:	000b883a 	mov	r5,zero
 800f468:	0023883a 	mov	r17,zero
 800f46c:	003ed206 	br	800efb8 <__alt_data_end+0xfc00efb8>
 800f470:	0101ffc4 	movi	r4,2047
 800f474:	51003b26 	beq	r10,r4,800f564 <__subdf3+0x7b8>
 800f478:	0085c83a 	sub	r2,zero,r2
 800f47c:	29402034 	orhi	r5,r5,128
 800f480:	01000e04 	movi	r4,56
 800f484:	20806216 	blt	r4,r2,800f610 <__subdf3+0x864>
 800f488:	010007c4 	movi	r4,31
 800f48c:	20806b16 	blt	r4,r2,800f63c <__subdf3+0x890>
 800f490:	01000804 	movi	r4,32
 800f494:	2089c83a 	sub	r4,r4,r2
 800f498:	2912983a 	sll	r9,r5,r4
 800f49c:	888ed83a 	srl	r7,r17,r2
 800f4a0:	8908983a 	sll	r4,r17,r4
 800f4a4:	2884d83a 	srl	r2,r5,r2
 800f4a8:	49e2b03a 	or	r17,r9,r7
 800f4ac:	2008c03a 	cmpne	r4,r4,zero
 800f4b0:	8922b03a 	or	r17,r17,r4
 800f4b4:	89a3883a 	add	r17,r17,r6
 800f4b8:	10c5883a 	add	r2,r2,r3
 800f4bc:	898d803a 	cmpltu	r6,r17,r6
 800f4c0:	118b883a 	add	r5,r2,r6
 800f4c4:	5021883a 	mov	r16,r10
 800f4c8:	003ed506 	br	800f020 <__alt_data_end+0xfc00f020>
 800f4cc:	1984b03a 	or	r2,r3,r6
 800f4d0:	103e5926 	beq	r2,zero,800ee38 <__alt_data_end+0xfc00ee38>
 800f4d4:	8989c83a 	sub	r4,r17,r6
 800f4d8:	8911803a 	cmpltu	r8,r17,r4
 800f4dc:	28c5c83a 	sub	r2,r5,r3
 800f4e0:	1205c83a 	sub	r2,r2,r8
 800f4e4:	1200202c 	andhi	r8,r2,128
 800f4e8:	403ef926 	beq	r8,zero,800f0d0 <__alt_data_end+0xfc00f0d0>
 800f4ec:	3463c83a 	sub	r17,r6,r17
 800f4f0:	194bc83a 	sub	r5,r3,r5
 800f4f4:	344d803a 	cmpltu	r6,r6,r17
 800f4f8:	298bc83a 	sub	r5,r5,r6
 800f4fc:	3825883a 	mov	r18,r7
 800f500:	003e4d06 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f504:	1984b03a 	or	r2,r3,r6
 800f508:	10002b26 	beq	r2,zero,800f5b8 <__subdf3+0x80c>
 800f50c:	2808d0fa 	srli	r4,r5,3
 800f510:	8822d0fa 	srli	r17,r17,3
 800f514:	280a977a 	slli	r5,r5,29
 800f518:	2080022c 	andhi	r2,r4,8
 800f51c:	2c62b03a 	or	r17,r5,r17
 800f520:	10000826 	beq	r2,zero,800f544 <__subdf3+0x798>
 800f524:	1810d0fa 	srli	r8,r3,3
 800f528:	4080022c 	andhi	r2,r8,8
 800f52c:	1000051e 	bne	r2,zero,800f544 <__subdf3+0x798>
 800f530:	300cd0fa 	srli	r6,r6,3
 800f534:	1804977a 	slli	r2,r3,29
 800f538:	4009883a 	mov	r4,r8
 800f53c:	3825883a 	mov	r18,r7
 800f540:	11a2b03a 	or	r17,r2,r6
 800f544:	880ad77a 	srli	r5,r17,29
 800f548:	200890fa 	slli	r4,r4,3
 800f54c:	882290fa 	slli	r17,r17,3
 800f550:	0401ffc4 	movi	r16,2047
 800f554:	290ab03a 	or	r5,r5,r4
 800f558:	003e3706 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f55c:	0101ffc4 	movi	r4,2047
 800f560:	513fc71e 	bne	r10,r4,800f480 <__alt_data_end+0xfc00f480>
 800f564:	180b883a 	mov	r5,r3
 800f568:	3023883a 	mov	r17,r6
 800f56c:	5021883a 	mov	r16,r10
 800f570:	003e3106 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f574:	10002d26 	beq	r2,zero,800f62c <__subdf3+0x880>
 800f578:	1984b03a 	or	r2,r3,r6
 800f57c:	10000e26 	beq	r2,zero,800f5b8 <__subdf3+0x80c>
 800f580:	2808d0fa 	srli	r4,r5,3
 800f584:	8822d0fa 	srli	r17,r17,3
 800f588:	280a977a 	slli	r5,r5,29
 800f58c:	2080022c 	andhi	r2,r4,8
 800f590:	2c62b03a 	or	r17,r5,r17
 800f594:	103feb26 	beq	r2,zero,800f544 <__alt_data_end+0xfc00f544>
 800f598:	180ed0fa 	srli	r7,r3,3
 800f59c:	3880022c 	andhi	r2,r7,8
 800f5a0:	103fe81e 	bne	r2,zero,800f544 <__alt_data_end+0xfc00f544>
 800f5a4:	300cd0fa 	srli	r6,r6,3
 800f5a8:	1804977a 	slli	r2,r3,29
 800f5ac:	3809883a 	mov	r4,r7
 800f5b0:	11a2b03a 	or	r17,r2,r6
 800f5b4:	003fe306 	br	800f544 <__alt_data_end+0xfc00f544>
 800f5b8:	0401ffc4 	movi	r16,2047
 800f5bc:	003e1e06 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f5c0:	0005883a 	mov	r2,zero
 800f5c4:	003f8306 	br	800f3d4 <__alt_data_end+0xfc00f3d4>
 800f5c8:	113ff804 	addi	r4,r2,-32
 800f5cc:	02000804 	movi	r8,32
 800f5d0:	2908d83a 	srl	r4,r5,r4
 800f5d4:	12002526 	beq	r2,r8,800f66c <__subdf3+0x8c0>
 800f5d8:	02001004 	movi	r8,64
 800f5dc:	4085c83a 	sub	r2,r8,r2
 800f5e0:	288a983a 	sll	r5,r5,r2
 800f5e4:	2c62b03a 	or	r17,r5,r17
 800f5e8:	8822c03a 	cmpne	r17,r17,zero
 800f5ec:	8922b03a 	or	r17,r17,r4
 800f5f0:	0005883a 	mov	r2,zero
 800f5f4:	003f2406 	br	800f288 <__alt_data_end+0xfc00f288>
 800f5f8:	01402034 	movhi	r5,128
 800f5fc:	0011883a 	mov	r8,zero
 800f600:	297fffc4 	addi	r5,r5,-1
 800f604:	047ffe04 	movi	r17,-8
 800f608:	0401ffc4 	movi	r16,2047
 800f60c:	003e6a06 	br	800efb8 <__alt_data_end+0xfc00efb8>
 800f610:	2c62b03a 	or	r17,r5,r17
 800f614:	8822c03a 	cmpne	r17,r17,zero
 800f618:	0005883a 	mov	r2,zero
 800f61c:	003fa506 	br	800f4b4 <__alt_data_end+0xfc00f4b4>
 800f620:	180b883a 	mov	r5,r3
 800f624:	3023883a 	mov	r17,r6
 800f628:	003e0306 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f62c:	180b883a 	mov	r5,r3
 800f630:	3023883a 	mov	r17,r6
 800f634:	0401ffc4 	movi	r16,2047
 800f638:	003dff06 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f63c:	113ff804 	addi	r4,r2,-32
 800f640:	01c00804 	movi	r7,32
 800f644:	2908d83a 	srl	r4,r5,r4
 800f648:	11c00a26 	beq	r2,r7,800f674 <__subdf3+0x8c8>
 800f64c:	01c01004 	movi	r7,64
 800f650:	3885c83a 	sub	r2,r7,r2
 800f654:	288a983a 	sll	r5,r5,r2
 800f658:	2c62b03a 	or	r17,r5,r17
 800f65c:	8822c03a 	cmpne	r17,r17,zero
 800f660:	8922b03a 	or	r17,r17,r4
 800f664:	0005883a 	mov	r2,zero
 800f668:	003f9206 	br	800f4b4 <__alt_data_end+0xfc00f4b4>
 800f66c:	000b883a 	mov	r5,zero
 800f670:	003fdc06 	br	800f5e4 <__alt_data_end+0xfc00f5e4>
 800f674:	000b883a 	mov	r5,zero
 800f678:	003ff706 	br	800f658 <__alt_data_end+0xfc00f658>

0800f67c <__fixdfsi>:
 800f67c:	2806d53a 	srli	r3,r5,20
 800f680:	00800434 	movhi	r2,16
 800f684:	10bfffc4 	addi	r2,r2,-1
 800f688:	18c1ffcc 	andi	r3,r3,2047
 800f68c:	0180ff84 	movi	r6,1022
 800f690:	2884703a 	and	r2,r5,r2
 800f694:	280ad7fa 	srli	r5,r5,31
 800f698:	30c0130e 	bge	r6,r3,800f6e8 <__fixdfsi+0x6c>
 800f69c:	01810744 	movi	r6,1053
 800f6a0:	30c00d16 	blt	r6,r3,800f6d8 <__fixdfsi+0x5c>
 800f6a4:	01810cc4 	movi	r6,1075
 800f6a8:	30cdc83a 	sub	r6,r6,r3
 800f6ac:	01c007c4 	movi	r7,31
 800f6b0:	10800434 	orhi	r2,r2,16
 800f6b4:	39800e0e 	bge	r7,r6,800f6f0 <__fixdfsi+0x74>
 800f6b8:	010104c4 	movi	r4,1043
 800f6bc:	20c7c83a 	sub	r3,r4,r3
 800f6c0:	10c6d83a 	srl	r3,r2,r3
 800f6c4:	29403fcc 	andi	r5,r5,255
 800f6c8:	0145c83a 	sub	r2,zero,r5
 800f6cc:	1884f03a 	xor	r2,r3,r2
 800f6d0:	1145883a 	add	r2,r2,r5
 800f6d4:	f800283a 	ret
 800f6d8:	00a00034 	movhi	r2,32768
 800f6dc:	10bfffc4 	addi	r2,r2,-1
 800f6e0:	2885883a 	add	r2,r5,r2
 800f6e4:	f800283a 	ret
 800f6e8:	0005883a 	mov	r2,zero
 800f6ec:	f800283a 	ret
 800f6f0:	18fefb44 	addi	r3,r3,-1043
 800f6f4:	2188d83a 	srl	r4,r4,r6
 800f6f8:	10c6983a 	sll	r3,r2,r3
 800f6fc:	20c6b03a 	or	r3,r4,r3
 800f700:	003ff006 	br	800f6c4 <__alt_data_end+0xfc00f6c4>

0800f704 <__floatsidf>:
 800f704:	defffd04 	addi	sp,sp,-12
 800f708:	dc400115 	stw	r17,4(sp)
 800f70c:	dfc00215 	stw	ra,8(sp)
 800f710:	dc000015 	stw	r16,0(sp)
 800f714:	2023883a 	mov	r17,r4
 800f718:	20001426 	beq	r4,zero,800f76c <__floatsidf+0x68>
 800f71c:	2020d7fa 	srli	r16,r4,31
 800f720:	80000126 	beq	r16,zero,800f728 <__floatsidf+0x24>
 800f724:	0123c83a 	sub	r17,zero,r4
 800f728:	8809883a 	mov	r4,r17
 800f72c:	800f8780 	call	800f878 <__clzsi2>
 800f730:	01410784 	movi	r5,1054
 800f734:	00c00284 	movi	r3,10
 800f738:	288bc83a 	sub	r5,r5,r2
 800f73c:	18801c16 	blt	r3,r2,800f7b0 <__floatsidf+0xac>
 800f740:	00c002c4 	movi	r3,11
 800f744:	1887c83a 	sub	r3,r3,r2
 800f748:	88c8d83a 	srl	r4,r17,r3
 800f74c:	00c00434 	movhi	r3,16
 800f750:	18ffffc4 	addi	r3,r3,-1
 800f754:	10800544 	addi	r2,r2,21
 800f758:	20c8703a 	and	r4,r4,r3
 800f75c:	8884983a 	sll	r2,r17,r2
 800f760:	28c1ffcc 	andi	r3,r5,2047
 800f764:	800d883a 	mov	r6,r16
 800f768:	00000406 	br	800f77c <__floatsidf+0x78>
 800f76c:	000d883a 	mov	r6,zero
 800f770:	0007883a 	mov	r3,zero
 800f774:	0009883a 	mov	r4,zero
 800f778:	0005883a 	mov	r2,zero
 800f77c:	180a953a 	slli	r5,r3,20
 800f780:	31803fcc 	andi	r6,r6,255
 800f784:	00c00434 	movhi	r3,16
 800f788:	300c97fa 	slli	r6,r6,31
 800f78c:	18ffffc4 	addi	r3,r3,-1
 800f790:	20c6703a 	and	r3,r4,r3
 800f794:	1946b03a 	or	r3,r3,r5
 800f798:	1986b03a 	or	r3,r3,r6
 800f79c:	dfc00217 	ldw	ra,8(sp)
 800f7a0:	dc400117 	ldw	r17,4(sp)
 800f7a4:	dc000017 	ldw	r16,0(sp)
 800f7a8:	dec00304 	addi	sp,sp,12
 800f7ac:	f800283a 	ret
 800f7b0:	10fffd44 	addi	r3,r2,-11
 800f7b4:	88c8983a 	sll	r4,r17,r3
 800f7b8:	00800434 	movhi	r2,16
 800f7bc:	10bfffc4 	addi	r2,r2,-1
 800f7c0:	2088703a 	and	r4,r4,r2
 800f7c4:	28c1ffcc 	andi	r3,r5,2047
 800f7c8:	800d883a 	mov	r6,r16
 800f7cc:	0005883a 	mov	r2,zero
 800f7d0:	003fea06 	br	800f77c <__alt_data_end+0xfc00f77c>

0800f7d4 <__floatunsidf>:
 800f7d4:	defffe04 	addi	sp,sp,-8
 800f7d8:	dc000015 	stw	r16,0(sp)
 800f7dc:	dfc00115 	stw	ra,4(sp)
 800f7e0:	2021883a 	mov	r16,r4
 800f7e4:	20001026 	beq	r4,zero,800f828 <__floatunsidf+0x54>
 800f7e8:	800f8780 	call	800f878 <__clzsi2>
 800f7ec:	01410784 	movi	r5,1054
 800f7f0:	100d883a 	mov	r6,r2
 800f7f4:	288bc83a 	sub	r5,r5,r2
 800f7f8:	00800284 	movi	r2,10
 800f7fc:	11801616 	blt	r2,r6,800f858 <__floatunsidf+0x84>
 800f800:	008002c4 	movi	r2,11
 800f804:	1185c83a 	sub	r2,r2,r6
 800f808:	8084d83a 	srl	r2,r16,r2
 800f80c:	00c00434 	movhi	r3,16
 800f810:	31c00544 	addi	r7,r6,21
 800f814:	18ffffc4 	addi	r3,r3,-1
 800f818:	81e0983a 	sll	r16,r16,r7
 800f81c:	10cc703a 	and	r6,r2,r3
 800f820:	2941ffcc 	andi	r5,r5,2047
 800f824:	00000206 	br	800f830 <__floatunsidf+0x5c>
 800f828:	000b883a 	mov	r5,zero
 800f82c:	000d883a 	mov	r6,zero
 800f830:	280a953a 	slli	r5,r5,20
 800f834:	00c00434 	movhi	r3,16
 800f838:	18ffffc4 	addi	r3,r3,-1
 800f83c:	30c6703a 	and	r3,r6,r3
 800f840:	8005883a 	mov	r2,r16
 800f844:	1946b03a 	or	r3,r3,r5
 800f848:	dfc00117 	ldw	ra,4(sp)
 800f84c:	dc000017 	ldw	r16,0(sp)
 800f850:	dec00204 	addi	sp,sp,8
 800f854:	f800283a 	ret
 800f858:	31bffd44 	addi	r6,r6,-11
 800f85c:	818c983a 	sll	r6,r16,r6
 800f860:	00800434 	movhi	r2,16
 800f864:	10bfffc4 	addi	r2,r2,-1
 800f868:	2941ffcc 	andi	r5,r5,2047
 800f86c:	0021883a 	mov	r16,zero
 800f870:	308c703a 	and	r6,r6,r2
 800f874:	003fee06 	br	800f830 <__alt_data_end+0xfc00f830>

0800f878 <__clzsi2>:
 800f878:	00bfffd4 	movui	r2,65535
 800f87c:	11000b36 	bltu	r2,r4,800f8ac <__clzsi2+0x34>
 800f880:	00803fc4 	movi	r2,255
 800f884:	1100122e 	bgeu	r2,r4,800f8d0 <__clzsi2+0x58>
 800f888:	00c00204 	movi	r3,8
 800f88c:	01400604 	movi	r5,24
 800f890:	20c8d83a 	srl	r4,r4,r3
 800f894:	008200b4 	movhi	r2,2050
 800f898:	10b3a404 	addi	r2,r2,-12656
 800f89c:	1109883a 	add	r4,r2,r4
 800f8a0:	20800003 	ldbu	r2,0(r4)
 800f8a4:	2885c83a 	sub	r2,r5,r2
 800f8a8:	f800283a 	ret
 800f8ac:	00804034 	movhi	r2,256
 800f8b0:	10bfffc4 	addi	r2,r2,-1
 800f8b4:	11000336 	bltu	r2,r4,800f8c4 <__clzsi2+0x4c>
 800f8b8:	00c00404 	movi	r3,16
 800f8bc:	180b883a 	mov	r5,r3
 800f8c0:	003ff306 	br	800f890 <__alt_data_end+0xfc00f890>
 800f8c4:	00c00604 	movi	r3,24
 800f8c8:	01400204 	movi	r5,8
 800f8cc:	003ff006 	br	800f890 <__alt_data_end+0xfc00f890>
 800f8d0:	0007883a 	mov	r3,zero
 800f8d4:	01400804 	movi	r5,32
 800f8d8:	003fed06 	br	800f890 <__alt_data_end+0xfc00f890>

0800f8dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f8dc:	defffe04 	addi	sp,sp,-8
 800f8e0:	dfc00115 	stw	ra,4(sp)
 800f8e4:	df000015 	stw	fp,0(sp)
 800f8e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f8ec:	008200b4 	movhi	r2,2050
 800f8f0:	10baa804 	addi	r2,r2,-5472
 800f8f4:	10800017 	ldw	r2,0(r2)
 800f8f8:	10000526 	beq	r2,zero,800f910 <alt_get_errno+0x34>
 800f8fc:	008200b4 	movhi	r2,2050
 800f900:	10baa804 	addi	r2,r2,-5472
 800f904:	10800017 	ldw	r2,0(r2)
 800f908:	103ee83a 	callr	r2
 800f90c:	00000206 	br	800f918 <alt_get_errno+0x3c>
 800f910:	008200b4 	movhi	r2,2050
 800f914:	10817004 	addi	r2,r2,1472
}
 800f918:	e037883a 	mov	sp,fp
 800f91c:	dfc00117 	ldw	ra,4(sp)
 800f920:	df000017 	ldw	fp,0(sp)
 800f924:	dec00204 	addi	sp,sp,8
 800f928:	f800283a 	ret

0800f92c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800f92c:	defffb04 	addi	sp,sp,-20
 800f930:	dfc00415 	stw	ra,16(sp)
 800f934:	df000315 	stw	fp,12(sp)
 800f938:	df000304 	addi	fp,sp,12
 800f93c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800f940:	e0bfff17 	ldw	r2,-4(fp)
 800f944:	10000616 	blt	r2,zero,800f960 <close+0x34>
 800f948:	e0bfff17 	ldw	r2,-4(fp)
 800f94c:	10c00324 	muli	r3,r2,12
 800f950:	008200b4 	movhi	r2,2050
 800f954:	10b62404 	addi	r2,r2,-10096
 800f958:	1885883a 	add	r2,r3,r2
 800f95c:	00000106 	br	800f964 <close+0x38>
 800f960:	0005883a 	mov	r2,zero
 800f964:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800f968:	e0bffd17 	ldw	r2,-12(fp)
 800f96c:	10001926 	beq	r2,zero,800f9d4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800f970:	e0bffd17 	ldw	r2,-12(fp)
 800f974:	10800017 	ldw	r2,0(r2)
 800f978:	10800417 	ldw	r2,16(r2)
 800f97c:	10000626 	beq	r2,zero,800f998 <close+0x6c>
 800f980:	e0bffd17 	ldw	r2,-12(fp)
 800f984:	10800017 	ldw	r2,0(r2)
 800f988:	10800417 	ldw	r2,16(r2)
 800f98c:	e13ffd17 	ldw	r4,-12(fp)
 800f990:	103ee83a 	callr	r2
 800f994:	00000106 	br	800f99c <close+0x70>
 800f998:	0005883a 	mov	r2,zero
 800f99c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800f9a0:	e13fff17 	ldw	r4,-4(fp)
 800f9a4:	80100280 	call	8010028 <alt_release_fd>
    if (rval < 0)
 800f9a8:	e0bffe17 	ldw	r2,-8(fp)
 800f9ac:	1000070e 	bge	r2,zero,800f9cc <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800f9b0:	800f8dc0 	call	800f8dc <alt_get_errno>
 800f9b4:	1007883a 	mov	r3,r2
 800f9b8:	e0bffe17 	ldw	r2,-8(fp)
 800f9bc:	0085c83a 	sub	r2,zero,r2
 800f9c0:	18800015 	stw	r2,0(r3)
      return -1;
 800f9c4:	00bfffc4 	movi	r2,-1
 800f9c8:	00000706 	br	800f9e8 <close+0xbc>
    }
    return 0;
 800f9cc:	0005883a 	mov	r2,zero
 800f9d0:	00000506 	br	800f9e8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f9d4:	800f8dc0 	call	800f8dc <alt_get_errno>
 800f9d8:	1007883a 	mov	r3,r2
 800f9dc:	00801444 	movi	r2,81
 800f9e0:	18800015 	stw	r2,0(r3)
    return -1;
 800f9e4:	00bfffc4 	movi	r2,-1
  }
}
 800f9e8:	e037883a 	mov	sp,fp
 800f9ec:	dfc00117 	ldw	ra,4(sp)
 800f9f0:	df000017 	ldw	fp,0(sp)
 800f9f4:	dec00204 	addi	sp,sp,8
 800f9f8:	f800283a 	ret

0800f9fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800f9fc:	defffc04 	addi	sp,sp,-16
 800fa00:	df000315 	stw	fp,12(sp)
 800fa04:	df000304 	addi	fp,sp,12
 800fa08:	e13ffd15 	stw	r4,-12(fp)
 800fa0c:	e17ffe15 	stw	r5,-8(fp)
 800fa10:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800fa14:	e0bfff17 	ldw	r2,-4(fp)
}
 800fa18:	e037883a 	mov	sp,fp
 800fa1c:	df000017 	ldw	fp,0(sp)
 800fa20:	dec00104 	addi	sp,sp,4
 800fa24:	f800283a 	ret

0800fa28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fa28:	defffe04 	addi	sp,sp,-8
 800fa2c:	dfc00115 	stw	ra,4(sp)
 800fa30:	df000015 	stw	fp,0(sp)
 800fa34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fa38:	008200b4 	movhi	r2,2050
 800fa3c:	10baa804 	addi	r2,r2,-5472
 800fa40:	10800017 	ldw	r2,0(r2)
 800fa44:	10000526 	beq	r2,zero,800fa5c <alt_get_errno+0x34>
 800fa48:	008200b4 	movhi	r2,2050
 800fa4c:	10baa804 	addi	r2,r2,-5472
 800fa50:	10800017 	ldw	r2,0(r2)
 800fa54:	103ee83a 	callr	r2
 800fa58:	00000206 	br	800fa64 <alt_get_errno+0x3c>
 800fa5c:	008200b4 	movhi	r2,2050
 800fa60:	10817004 	addi	r2,r2,1472
}
 800fa64:	e037883a 	mov	sp,fp
 800fa68:	dfc00117 	ldw	ra,4(sp)
 800fa6c:	df000017 	ldw	fp,0(sp)
 800fa70:	dec00204 	addi	sp,sp,8
 800fa74:	f800283a 	ret

0800fa78 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800fa78:	defffb04 	addi	sp,sp,-20
 800fa7c:	dfc00415 	stw	ra,16(sp)
 800fa80:	df000315 	stw	fp,12(sp)
 800fa84:	df000304 	addi	fp,sp,12
 800fa88:	e13ffe15 	stw	r4,-8(fp)
 800fa8c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fa90:	e0bffe17 	ldw	r2,-8(fp)
 800fa94:	10000616 	blt	r2,zero,800fab0 <fstat+0x38>
 800fa98:	e0bffe17 	ldw	r2,-8(fp)
 800fa9c:	10c00324 	muli	r3,r2,12
 800faa0:	008200b4 	movhi	r2,2050
 800faa4:	10b62404 	addi	r2,r2,-10096
 800faa8:	1885883a 	add	r2,r3,r2
 800faac:	00000106 	br	800fab4 <fstat+0x3c>
 800fab0:	0005883a 	mov	r2,zero
 800fab4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800fab8:	e0bffd17 	ldw	r2,-12(fp)
 800fabc:	10001026 	beq	r2,zero,800fb00 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800fac0:	e0bffd17 	ldw	r2,-12(fp)
 800fac4:	10800017 	ldw	r2,0(r2)
 800fac8:	10800817 	ldw	r2,32(r2)
 800facc:	10000726 	beq	r2,zero,800faec <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800fad0:	e0bffd17 	ldw	r2,-12(fp)
 800fad4:	10800017 	ldw	r2,0(r2)
 800fad8:	10800817 	ldw	r2,32(r2)
 800fadc:	e13ffd17 	ldw	r4,-12(fp)
 800fae0:	e17fff17 	ldw	r5,-4(fp)
 800fae4:	103ee83a 	callr	r2
 800fae8:	00000a06 	br	800fb14 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800faec:	e0bfff17 	ldw	r2,-4(fp)
 800faf0:	00c80004 	movi	r3,8192
 800faf4:	10c00115 	stw	r3,4(r2)
      return 0;
 800faf8:	0005883a 	mov	r2,zero
 800fafc:	00000506 	br	800fb14 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800fb00:	800fa280 	call	800fa28 <alt_get_errno>
 800fb04:	1007883a 	mov	r3,r2
 800fb08:	00801444 	movi	r2,81
 800fb0c:	18800015 	stw	r2,0(r3)
    return -1;
 800fb10:	00bfffc4 	movi	r2,-1
  }
}
 800fb14:	e037883a 	mov	sp,fp
 800fb18:	dfc00117 	ldw	ra,4(sp)
 800fb1c:	df000017 	ldw	fp,0(sp)
 800fb20:	dec00204 	addi	sp,sp,8
 800fb24:	f800283a 	ret

0800fb28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fb28:	defffe04 	addi	sp,sp,-8
 800fb2c:	dfc00115 	stw	ra,4(sp)
 800fb30:	df000015 	stw	fp,0(sp)
 800fb34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fb38:	008200b4 	movhi	r2,2050
 800fb3c:	10baa804 	addi	r2,r2,-5472
 800fb40:	10800017 	ldw	r2,0(r2)
 800fb44:	10000526 	beq	r2,zero,800fb5c <alt_get_errno+0x34>
 800fb48:	008200b4 	movhi	r2,2050
 800fb4c:	10baa804 	addi	r2,r2,-5472
 800fb50:	10800017 	ldw	r2,0(r2)
 800fb54:	103ee83a 	callr	r2
 800fb58:	00000206 	br	800fb64 <alt_get_errno+0x3c>
 800fb5c:	008200b4 	movhi	r2,2050
 800fb60:	10817004 	addi	r2,r2,1472
}
 800fb64:	e037883a 	mov	sp,fp
 800fb68:	dfc00117 	ldw	ra,4(sp)
 800fb6c:	df000017 	ldw	fp,0(sp)
 800fb70:	dec00204 	addi	sp,sp,8
 800fb74:	f800283a 	ret

0800fb78 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800fb78:	deffed04 	addi	sp,sp,-76
 800fb7c:	dfc01215 	stw	ra,72(sp)
 800fb80:	df001115 	stw	fp,68(sp)
 800fb84:	df001104 	addi	fp,sp,68
 800fb88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fb8c:	e0bfff17 	ldw	r2,-4(fp)
 800fb90:	10000616 	blt	r2,zero,800fbac <isatty+0x34>
 800fb94:	e0bfff17 	ldw	r2,-4(fp)
 800fb98:	10c00324 	muli	r3,r2,12
 800fb9c:	008200b4 	movhi	r2,2050
 800fba0:	10b62404 	addi	r2,r2,-10096
 800fba4:	1885883a 	add	r2,r3,r2
 800fba8:	00000106 	br	800fbb0 <isatty+0x38>
 800fbac:	0005883a 	mov	r2,zero
 800fbb0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800fbb4:	e0bfef17 	ldw	r2,-68(fp)
 800fbb8:	10000e26 	beq	r2,zero,800fbf4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800fbbc:	e0bfef17 	ldw	r2,-68(fp)
 800fbc0:	10800017 	ldw	r2,0(r2)
 800fbc4:	10800817 	ldw	r2,32(r2)
 800fbc8:	1000021e 	bne	r2,zero,800fbd4 <isatty+0x5c>
    {
      return 1;
 800fbcc:	00800044 	movi	r2,1
 800fbd0:	00000d06 	br	800fc08 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800fbd4:	e0bff004 	addi	r2,fp,-64
 800fbd8:	e13fff17 	ldw	r4,-4(fp)
 800fbdc:	100b883a 	mov	r5,r2
 800fbe0:	800fa780 	call	800fa78 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800fbe4:	e0bff117 	ldw	r2,-60(fp)
 800fbe8:	10880020 	cmpeqi	r2,r2,8192
 800fbec:	10803fcc 	andi	r2,r2,255
 800fbf0:	00000506 	br	800fc08 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800fbf4:	800fb280 	call	800fb28 <alt_get_errno>
 800fbf8:	1007883a 	mov	r3,r2
 800fbfc:	00801444 	movi	r2,81
 800fc00:	18800015 	stw	r2,0(r3)
    return 0;
 800fc04:	0005883a 	mov	r2,zero
  }
}
 800fc08:	e037883a 	mov	sp,fp
 800fc0c:	dfc00117 	ldw	ra,4(sp)
 800fc10:	df000017 	ldw	fp,0(sp)
 800fc14:	dec00204 	addi	sp,sp,8
 800fc18:	f800283a 	ret

0800fc1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800fc1c:	defffc04 	addi	sp,sp,-16
 800fc20:	df000315 	stw	fp,12(sp)
 800fc24:	df000304 	addi	fp,sp,12
 800fc28:	e13ffd15 	stw	r4,-12(fp)
 800fc2c:	e17ffe15 	stw	r5,-8(fp)
 800fc30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800fc34:	e0fffe17 	ldw	r3,-8(fp)
 800fc38:	e0bffd17 	ldw	r2,-12(fp)
 800fc3c:	18800c26 	beq	r3,r2,800fc70 <alt_load_section+0x54>
  {
    while( to != end )
 800fc40:	00000806 	br	800fc64 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800fc44:	e0bffe17 	ldw	r2,-8(fp)
 800fc48:	10c00104 	addi	r3,r2,4
 800fc4c:	e0fffe15 	stw	r3,-8(fp)
 800fc50:	e0fffd17 	ldw	r3,-12(fp)
 800fc54:	19000104 	addi	r4,r3,4
 800fc58:	e13ffd15 	stw	r4,-12(fp)
 800fc5c:	18c00017 	ldw	r3,0(r3)
 800fc60:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800fc64:	e0fffe17 	ldw	r3,-8(fp)
 800fc68:	e0bfff17 	ldw	r2,-4(fp)
 800fc6c:	18bff51e 	bne	r3,r2,800fc44 <__alt_data_end+0xfc00fc44>
    {
      *to++ = *from++;
    }
  }
}
 800fc70:	e037883a 	mov	sp,fp
 800fc74:	df000017 	ldw	fp,0(sp)
 800fc78:	dec00104 	addi	sp,sp,4
 800fc7c:	f800283a 	ret

0800fc80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800fc80:	defffe04 	addi	sp,sp,-8
 800fc84:	dfc00115 	stw	ra,4(sp)
 800fc88:	df000015 	stw	fp,0(sp)
 800fc8c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800fc90:	010200b4 	movhi	r4,2050
 800fc94:	213aad04 	addi	r4,r4,-5452
 800fc98:	014200b4 	movhi	r5,2050
 800fc9c:	2973f104 	addi	r5,r5,-12348
 800fca0:	018200b4 	movhi	r6,2050
 800fca4:	31baad04 	addi	r6,r6,-5452
 800fca8:	800fc1c0 	call	800fc1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800fcac:	01020034 	movhi	r4,2048
 800fcb0:	21000804 	addi	r4,r4,32
 800fcb4:	01420034 	movhi	r5,2048
 800fcb8:	29400804 	addi	r5,r5,32
 800fcbc:	01820034 	movhi	r6,2048
 800fcc0:	31806f04 	addi	r6,r6,444
 800fcc4:	800fc1c0 	call	800fc1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800fcc8:	01020074 	movhi	r4,2049
 800fccc:	21087704 	addi	r4,r4,8668
 800fcd0:	01420074 	movhi	r5,2049
 800fcd4:	29487704 	addi	r5,r5,8668
 800fcd8:	018200b4 	movhi	r6,2050
 800fcdc:	31b3f104 	addi	r6,r6,-12348
 800fce0:	800fc1c0 	call	800fc1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800fce4:	80111240 	call	8011124 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800fce8:	80112ec0 	call	80112ec <alt_icache_flush_all>
}
 800fcec:	e037883a 	mov	sp,fp
 800fcf0:	dfc00117 	ldw	ra,4(sp)
 800fcf4:	df000017 	ldw	fp,0(sp)
 800fcf8:	dec00204 	addi	sp,sp,8
 800fcfc:	f800283a 	ret

0800fd00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fd00:	defffe04 	addi	sp,sp,-8
 800fd04:	dfc00115 	stw	ra,4(sp)
 800fd08:	df000015 	stw	fp,0(sp)
 800fd0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fd10:	008200b4 	movhi	r2,2050
 800fd14:	10baa804 	addi	r2,r2,-5472
 800fd18:	10800017 	ldw	r2,0(r2)
 800fd1c:	10000526 	beq	r2,zero,800fd34 <alt_get_errno+0x34>
 800fd20:	008200b4 	movhi	r2,2050
 800fd24:	10baa804 	addi	r2,r2,-5472
 800fd28:	10800017 	ldw	r2,0(r2)
 800fd2c:	103ee83a 	callr	r2
 800fd30:	00000206 	br	800fd3c <alt_get_errno+0x3c>
 800fd34:	008200b4 	movhi	r2,2050
 800fd38:	10817004 	addi	r2,r2,1472
}
 800fd3c:	e037883a 	mov	sp,fp
 800fd40:	dfc00117 	ldw	ra,4(sp)
 800fd44:	df000017 	ldw	fp,0(sp)
 800fd48:	dec00204 	addi	sp,sp,8
 800fd4c:	f800283a 	ret

0800fd50 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800fd50:	defff904 	addi	sp,sp,-28
 800fd54:	dfc00615 	stw	ra,24(sp)
 800fd58:	df000515 	stw	fp,20(sp)
 800fd5c:	df000504 	addi	fp,sp,20
 800fd60:	e13ffd15 	stw	r4,-12(fp)
 800fd64:	e17ffe15 	stw	r5,-8(fp)
 800fd68:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800fd6c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fd70:	e0bffd17 	ldw	r2,-12(fp)
 800fd74:	10000616 	blt	r2,zero,800fd90 <lseek+0x40>
 800fd78:	e0bffd17 	ldw	r2,-12(fp)
 800fd7c:	10c00324 	muli	r3,r2,12
 800fd80:	008200b4 	movhi	r2,2050
 800fd84:	10b62404 	addi	r2,r2,-10096
 800fd88:	1885883a 	add	r2,r3,r2
 800fd8c:	00000106 	br	800fd94 <lseek+0x44>
 800fd90:	0005883a 	mov	r2,zero
 800fd94:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800fd98:	e0bffc17 	ldw	r2,-16(fp)
 800fd9c:	10001026 	beq	r2,zero,800fde0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800fda0:	e0bffc17 	ldw	r2,-16(fp)
 800fda4:	10800017 	ldw	r2,0(r2)
 800fda8:	10800717 	ldw	r2,28(r2)
 800fdac:	10000926 	beq	r2,zero,800fdd4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800fdb0:	e0bffc17 	ldw	r2,-16(fp)
 800fdb4:	10800017 	ldw	r2,0(r2)
 800fdb8:	10800717 	ldw	r2,28(r2)
 800fdbc:	e13ffc17 	ldw	r4,-16(fp)
 800fdc0:	e17ffe17 	ldw	r5,-8(fp)
 800fdc4:	e1bfff17 	ldw	r6,-4(fp)
 800fdc8:	103ee83a 	callr	r2
 800fdcc:	e0bffb15 	stw	r2,-20(fp)
 800fdd0:	00000506 	br	800fde8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800fdd4:	00bfde84 	movi	r2,-134
 800fdd8:	e0bffb15 	stw	r2,-20(fp)
 800fddc:	00000206 	br	800fde8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800fde0:	00bfebc4 	movi	r2,-81
 800fde4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800fde8:	e0bffb17 	ldw	r2,-20(fp)
 800fdec:	1000070e 	bge	r2,zero,800fe0c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800fdf0:	800fd000 	call	800fd00 <alt_get_errno>
 800fdf4:	1007883a 	mov	r3,r2
 800fdf8:	e0bffb17 	ldw	r2,-20(fp)
 800fdfc:	0085c83a 	sub	r2,zero,r2
 800fe00:	18800015 	stw	r2,0(r3)
    rc = -1;
 800fe04:	00bfffc4 	movi	r2,-1
 800fe08:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800fe0c:	e0bffb17 	ldw	r2,-20(fp)
}
 800fe10:	e037883a 	mov	sp,fp
 800fe14:	dfc00117 	ldw	ra,4(sp)
 800fe18:	df000017 	ldw	fp,0(sp)
 800fe1c:	dec00204 	addi	sp,sp,8
 800fe20:	f800283a 	ret

0800fe24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800fe24:	defffd04 	addi	sp,sp,-12
 800fe28:	dfc00215 	stw	ra,8(sp)
 800fe2c:	df000115 	stw	fp,4(sp)
 800fe30:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800fe34:	0009883a 	mov	r4,zero
 800fe38:	80102e80 	call	80102e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800fe3c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800fe40:	801031c0 	call	801031c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800fe44:	010200b4 	movhi	r4,2050
 800fe48:	2133e704 	addi	r4,r4,-12388
 800fe4c:	014200b4 	movhi	r5,2050
 800fe50:	2973e704 	addi	r5,r5,-12388
 800fe54:	018200b4 	movhi	r6,2050
 800fe58:	31b3e704 	addi	r6,r6,-12388
 800fe5c:	80116ac0 	call	80116ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800fe60:	80112340 	call	8011234 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800fe64:	01020074 	movhi	r4,2049
 800fe68:	2104a404 	addi	r4,r4,4752
 800fe6c:	8011e380 	call	8011e38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800fe70:	d126d517 	ldw	r4,-25772(gp)
 800fe74:	d0e6d617 	ldw	r3,-25768(gp)
 800fe78:	d0a6d717 	ldw	r2,-25764(gp)
 800fe7c:	180b883a 	mov	r5,r3
 800fe80:	100d883a 	mov	r6,r2
 800fe84:	80030b00 	call	80030b0 <main>
 800fe88:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800fe8c:	01000044 	movi	r4,1
 800fe90:	800f92c0 	call	800f92c <close>
  exit (result);
 800fe94:	e13fff17 	ldw	r4,-4(fp)
 800fe98:	8011e4c0 	call	8011e4c <exit>

0800fe9c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800fe9c:	defffe04 	addi	sp,sp,-8
 800fea0:	df000115 	stw	fp,4(sp)
 800fea4:	df000104 	addi	fp,sp,4
 800fea8:	e13fff15 	stw	r4,-4(fp)
}
 800feac:	e037883a 	mov	sp,fp
 800feb0:	df000017 	ldw	fp,0(sp)
 800feb4:	dec00104 	addi	sp,sp,4
 800feb8:	f800283a 	ret

0800febc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800febc:	defffe04 	addi	sp,sp,-8
 800fec0:	df000115 	stw	fp,4(sp)
 800fec4:	df000104 	addi	fp,sp,4
 800fec8:	e13fff15 	stw	r4,-4(fp)
}
 800fecc:	e037883a 	mov	sp,fp
 800fed0:	df000017 	ldw	fp,0(sp)
 800fed4:	dec00104 	addi	sp,sp,4
 800fed8:	f800283a 	ret

0800fedc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fedc:	defffe04 	addi	sp,sp,-8
 800fee0:	dfc00115 	stw	ra,4(sp)
 800fee4:	df000015 	stw	fp,0(sp)
 800fee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800feec:	008200b4 	movhi	r2,2050
 800fef0:	10baa804 	addi	r2,r2,-5472
 800fef4:	10800017 	ldw	r2,0(r2)
 800fef8:	10000526 	beq	r2,zero,800ff10 <alt_get_errno+0x34>
 800fefc:	008200b4 	movhi	r2,2050
 800ff00:	10baa804 	addi	r2,r2,-5472
 800ff04:	10800017 	ldw	r2,0(r2)
 800ff08:	103ee83a 	callr	r2
 800ff0c:	00000206 	br	800ff18 <alt_get_errno+0x3c>
 800ff10:	008200b4 	movhi	r2,2050
 800ff14:	10817004 	addi	r2,r2,1472
}
 800ff18:	e037883a 	mov	sp,fp
 800ff1c:	dfc00117 	ldw	ra,4(sp)
 800ff20:	df000017 	ldw	fp,0(sp)
 800ff24:	dec00204 	addi	sp,sp,8
 800ff28:	f800283a 	ret

0800ff2c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800ff2c:	defff904 	addi	sp,sp,-28
 800ff30:	dfc00615 	stw	ra,24(sp)
 800ff34:	df000515 	stw	fp,20(sp)
 800ff38:	df000504 	addi	fp,sp,20
 800ff3c:	e13ffd15 	stw	r4,-12(fp)
 800ff40:	e17ffe15 	stw	r5,-8(fp)
 800ff44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ff48:	e0bffd17 	ldw	r2,-12(fp)
 800ff4c:	10000616 	blt	r2,zero,800ff68 <read+0x3c>
 800ff50:	e0bffd17 	ldw	r2,-12(fp)
 800ff54:	10c00324 	muli	r3,r2,12
 800ff58:	008200b4 	movhi	r2,2050
 800ff5c:	10b62404 	addi	r2,r2,-10096
 800ff60:	1885883a 	add	r2,r3,r2
 800ff64:	00000106 	br	800ff6c <read+0x40>
 800ff68:	0005883a 	mov	r2,zero
 800ff6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ff70:	e0bffb17 	ldw	r2,-20(fp)
 800ff74:	10002226 	beq	r2,zero,8010000 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ff78:	e0bffb17 	ldw	r2,-20(fp)
 800ff7c:	10800217 	ldw	r2,8(r2)
 800ff80:	108000cc 	andi	r2,r2,3
 800ff84:	10800060 	cmpeqi	r2,r2,1
 800ff88:	1000181e 	bne	r2,zero,800ffec <read+0xc0>
        (fd->dev->read))
 800ff8c:	e0bffb17 	ldw	r2,-20(fp)
 800ff90:	10800017 	ldw	r2,0(r2)
 800ff94:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ff98:	10001426 	beq	r2,zero,800ffec <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800ff9c:	e0bffb17 	ldw	r2,-20(fp)
 800ffa0:	10800017 	ldw	r2,0(r2)
 800ffa4:	10800517 	ldw	r2,20(r2)
 800ffa8:	e0ffff17 	ldw	r3,-4(fp)
 800ffac:	e13ffb17 	ldw	r4,-20(fp)
 800ffb0:	e17ffe17 	ldw	r5,-8(fp)
 800ffb4:	180d883a 	mov	r6,r3
 800ffb8:	103ee83a 	callr	r2
 800ffbc:	e0bffc15 	stw	r2,-16(fp)
 800ffc0:	e0bffc17 	ldw	r2,-16(fp)
 800ffc4:	1000070e 	bge	r2,zero,800ffe4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800ffc8:	800fedc0 	call	800fedc <alt_get_errno>
 800ffcc:	1007883a 	mov	r3,r2
 800ffd0:	e0bffc17 	ldw	r2,-16(fp)
 800ffd4:	0085c83a 	sub	r2,zero,r2
 800ffd8:	18800015 	stw	r2,0(r3)
          return -1;
 800ffdc:	00bfffc4 	movi	r2,-1
 800ffe0:	00000c06 	br	8010014 <read+0xe8>
        }
        return rval;
 800ffe4:	e0bffc17 	ldw	r2,-16(fp)
 800ffe8:	00000a06 	br	8010014 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800ffec:	800fedc0 	call	800fedc <alt_get_errno>
 800fff0:	1007883a 	mov	r3,r2
 800fff4:	00800344 	movi	r2,13
 800fff8:	18800015 	stw	r2,0(r3)
 800fffc:	00000406 	br	8010010 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8010000:	800fedc0 	call	800fedc <alt_get_errno>
 8010004:	1007883a 	mov	r3,r2
 8010008:	00801444 	movi	r2,81
 801000c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8010010:	00bfffc4 	movi	r2,-1
}
 8010014:	e037883a 	mov	sp,fp
 8010018:	dfc00117 	ldw	ra,4(sp)
 801001c:	df000017 	ldw	fp,0(sp)
 8010020:	dec00204 	addi	sp,sp,8
 8010024:	f800283a 	ret

08010028 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8010028:	defffe04 	addi	sp,sp,-8
 801002c:	df000115 	stw	fp,4(sp)
 8010030:	df000104 	addi	fp,sp,4
 8010034:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8010038:	e0bfff17 	ldw	r2,-4(fp)
 801003c:	108000d0 	cmplti	r2,r2,3
 8010040:	10000d1e 	bne	r2,zero,8010078 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8010044:	008200b4 	movhi	r2,2050
 8010048:	10b62404 	addi	r2,r2,-10096
 801004c:	e0ffff17 	ldw	r3,-4(fp)
 8010050:	18c00324 	muli	r3,r3,12
 8010054:	10c5883a 	add	r2,r2,r3
 8010058:	10800204 	addi	r2,r2,8
 801005c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8010060:	008200b4 	movhi	r2,2050
 8010064:	10b62404 	addi	r2,r2,-10096
 8010068:	e0ffff17 	ldw	r3,-4(fp)
 801006c:	18c00324 	muli	r3,r3,12
 8010070:	10c5883a 	add	r2,r2,r3
 8010074:	10000015 	stw	zero,0(r2)
  }
}
 8010078:	e037883a 	mov	sp,fp
 801007c:	df000017 	ldw	fp,0(sp)
 8010080:	dec00104 	addi	sp,sp,4
 8010084:	f800283a 	ret

08010088 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8010088:	defff904 	addi	sp,sp,-28
 801008c:	df000615 	stw	fp,24(sp)
 8010090:	df000604 	addi	fp,sp,24
 8010094:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010098:	0005303a 	rdctl	r2,status
 801009c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80100a0:	e0fffc17 	ldw	r3,-16(fp)
 80100a4:	00bfff84 	movi	r2,-2
 80100a8:	1884703a 	and	r2,r3,r2
 80100ac:	1001703a 	wrctl	status,r2
  
  return context;
 80100b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80100b4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80100b8:	d0a00d17 	ldw	r2,-32716(gp)
 80100bc:	10c000c4 	addi	r3,r2,3
 80100c0:	00bfff04 	movi	r2,-4
 80100c4:	1884703a 	and	r2,r3,r2
 80100c8:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80100cc:	d0e00d17 	ldw	r3,-32716(gp)
 80100d0:	e0bfff17 	ldw	r2,-4(fp)
 80100d4:	1887883a 	add	r3,r3,r2
 80100d8:	00830034 	movhi	r2,3072
 80100dc:	10800004 	addi	r2,r2,0
 80100e0:	10c0062e 	bgeu	r2,r3,80100fc <sbrk+0x74>
 80100e4:	e0bffa17 	ldw	r2,-24(fp)
 80100e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80100ec:	e0bffd17 	ldw	r2,-12(fp)
 80100f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80100f4:	00bfffc4 	movi	r2,-1
 80100f8:	00000b06 	br	8010128 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80100fc:	d0a00d17 	ldw	r2,-32716(gp)
 8010100:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8010104:	d0e00d17 	ldw	r3,-32716(gp)
 8010108:	e0bfff17 	ldw	r2,-4(fp)
 801010c:	1885883a 	add	r2,r3,r2
 8010110:	d0a00d15 	stw	r2,-32716(gp)
 8010114:	e0bffa17 	ldw	r2,-24(fp)
 8010118:	e0bffe15 	stw	r2,-8(fp)
 801011c:	e0bffe17 	ldw	r2,-8(fp)
 8010120:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8010124:	e0bffb17 	ldw	r2,-20(fp)
} 
 8010128:	e037883a 	mov	sp,fp
 801012c:	df000017 	ldw	fp,0(sp)
 8010130:	dec00104 	addi	sp,sp,4
 8010134:	f800283a 	ret

08010138 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8010138:	defffd04 	addi	sp,sp,-12
 801013c:	dfc00215 	stw	ra,8(sp)
 8010140:	df000115 	stw	fp,4(sp)
 8010144:	df000104 	addi	fp,sp,4
 8010148:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 801014c:	e13fff17 	ldw	r4,-4(fp)
 8010150:	8010ffc0 	call	8010ffc <alt_busy_sleep>
}
 8010154:	e037883a 	mov	sp,fp
 8010158:	dfc00117 	ldw	ra,4(sp)
 801015c:	df000017 	ldw	fp,0(sp)
 8010160:	dec00204 	addi	sp,sp,8
 8010164:	f800283a 	ret

08010168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010168:	defffe04 	addi	sp,sp,-8
 801016c:	dfc00115 	stw	ra,4(sp)
 8010170:	df000015 	stw	fp,0(sp)
 8010174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010178:	008200b4 	movhi	r2,2050
 801017c:	10baa804 	addi	r2,r2,-5472
 8010180:	10800017 	ldw	r2,0(r2)
 8010184:	10000526 	beq	r2,zero,801019c <alt_get_errno+0x34>
 8010188:	008200b4 	movhi	r2,2050
 801018c:	10baa804 	addi	r2,r2,-5472
 8010190:	10800017 	ldw	r2,0(r2)
 8010194:	103ee83a 	callr	r2
 8010198:	00000206 	br	80101a4 <alt_get_errno+0x3c>
 801019c:	008200b4 	movhi	r2,2050
 80101a0:	10817004 	addi	r2,r2,1472
}
 80101a4:	e037883a 	mov	sp,fp
 80101a8:	dfc00117 	ldw	ra,4(sp)
 80101ac:	df000017 	ldw	fp,0(sp)
 80101b0:	dec00204 	addi	sp,sp,8
 80101b4:	f800283a 	ret

080101b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80101b8:	defff904 	addi	sp,sp,-28
 80101bc:	dfc00615 	stw	ra,24(sp)
 80101c0:	df000515 	stw	fp,20(sp)
 80101c4:	df000504 	addi	fp,sp,20
 80101c8:	e13ffd15 	stw	r4,-12(fp)
 80101cc:	e17ffe15 	stw	r5,-8(fp)
 80101d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80101d4:	e0bffd17 	ldw	r2,-12(fp)
 80101d8:	10000616 	blt	r2,zero,80101f4 <write+0x3c>
 80101dc:	e0bffd17 	ldw	r2,-12(fp)
 80101e0:	10c00324 	muli	r3,r2,12
 80101e4:	008200b4 	movhi	r2,2050
 80101e8:	10b62404 	addi	r2,r2,-10096
 80101ec:	1885883a 	add	r2,r3,r2
 80101f0:	00000106 	br	80101f8 <write+0x40>
 80101f4:	0005883a 	mov	r2,zero
 80101f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80101fc:	e0bffb17 	ldw	r2,-20(fp)
 8010200:	10002126 	beq	r2,zero,8010288 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8010204:	e0bffb17 	ldw	r2,-20(fp)
 8010208:	10800217 	ldw	r2,8(r2)
 801020c:	108000cc 	andi	r2,r2,3
 8010210:	10001826 	beq	r2,zero,8010274 <write+0xbc>
 8010214:	e0bffb17 	ldw	r2,-20(fp)
 8010218:	10800017 	ldw	r2,0(r2)
 801021c:	10800617 	ldw	r2,24(r2)
 8010220:	10001426 	beq	r2,zero,8010274 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8010224:	e0bffb17 	ldw	r2,-20(fp)
 8010228:	10800017 	ldw	r2,0(r2)
 801022c:	10800617 	ldw	r2,24(r2)
 8010230:	e0ffff17 	ldw	r3,-4(fp)
 8010234:	e13ffb17 	ldw	r4,-20(fp)
 8010238:	e17ffe17 	ldw	r5,-8(fp)
 801023c:	180d883a 	mov	r6,r3
 8010240:	103ee83a 	callr	r2
 8010244:	e0bffc15 	stw	r2,-16(fp)
 8010248:	e0bffc17 	ldw	r2,-16(fp)
 801024c:	1000070e 	bge	r2,zero,801026c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8010250:	80101680 	call	8010168 <alt_get_errno>
 8010254:	1007883a 	mov	r3,r2
 8010258:	e0bffc17 	ldw	r2,-16(fp)
 801025c:	0085c83a 	sub	r2,zero,r2
 8010260:	18800015 	stw	r2,0(r3)
        return -1;
 8010264:	00bfffc4 	movi	r2,-1
 8010268:	00000c06 	br	801029c <write+0xe4>
      }
      return rval;
 801026c:	e0bffc17 	ldw	r2,-16(fp)
 8010270:	00000a06 	br	801029c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8010274:	80101680 	call	8010168 <alt_get_errno>
 8010278:	1007883a 	mov	r3,r2
 801027c:	00800344 	movi	r2,13
 8010280:	18800015 	stw	r2,0(r3)
 8010284:	00000406 	br	8010298 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8010288:	80101680 	call	8010168 <alt_get_errno>
 801028c:	1007883a 	mov	r3,r2
 8010290:	00801444 	movi	r2,81
 8010294:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8010298:	00bfffc4 	movi	r2,-1
}
 801029c:	e037883a 	mov	sp,fp
 80102a0:	dfc00117 	ldw	ra,4(sp)
 80102a4:	df000017 	ldw	fp,0(sp)
 80102a8:	dec00204 	addi	sp,sp,8
 80102ac:	f800283a 	ret

080102b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80102b0:	defffd04 	addi	sp,sp,-12
 80102b4:	dfc00215 	stw	ra,8(sp)
 80102b8:	df000115 	stw	fp,4(sp)
 80102bc:	df000104 	addi	fp,sp,4
 80102c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80102c4:	e13fff17 	ldw	r4,-4(fp)
 80102c8:	014200b4 	movhi	r5,2050
 80102cc:	297aa504 	addi	r5,r5,-5484
 80102d0:	80111900 	call	8011190 <alt_dev_llist_insert>
}
 80102d4:	e037883a 	mov	sp,fp
 80102d8:	dfc00117 	ldw	ra,4(sp)
 80102dc:	df000017 	ldw	fp,0(sp)
 80102e0:	dec00204 	addi	sp,sp,8
 80102e4:	f800283a 	ret

080102e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80102e8:	defffd04 	addi	sp,sp,-12
 80102ec:	dfc00215 	stw	ra,8(sp)
 80102f0:	df000115 	stw	fp,4(sp)
 80102f4:	df000104 	addi	fp,sp,4
 80102f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 80102fc:	8011b340 	call	8011b34 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8010300:	00800044 	movi	r2,1
 8010304:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8010308:	e037883a 	mov	sp,fp
 801030c:	dfc00117 	ldw	ra,4(sp)
 8010310:	df000017 	ldw	fp,0(sp)
 8010314:	dec00204 	addi	sp,sp,8
 8010318:	f800283a 	ret

0801031c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 801031c:	defffe04 	addi	sp,sp,-8
 8010320:	dfc00115 	stw	ra,4(sp)
 8010324:	df000015 	stw	fp,0(sp)
 8010328:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 801032c:	01082004 	movi	r4,8320
 8010330:	000b883a 	mov	r5,zero
 8010334:	01800104 	movi	r6,4
 8010338:	01c0fa04 	movi	r7,1000
 801033c:	8010e340 	call	8010e34 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8010340:	010200b4 	movhi	r4,2050
 8010344:	21368e04 	addi	r4,r4,-9672
 8010348:	000b883a 	mov	r5,zero
 801034c:	01800144 	movi	r6,5
 8010350:	80104d80 	call	80104d8 <altera_avalon_jtag_uart_init>
 8010354:	010200b4 	movhi	r4,2050
 8010358:	21368404 	addi	r4,r4,-9712
 801035c:	80102b00 	call	80102b0 <alt_dev_reg>
}
 8010360:	e037883a 	mov	sp,fp
 8010364:	dfc00117 	ldw	ra,4(sp)
 8010368:	df000017 	ldw	fp,0(sp)
 801036c:	dec00204 	addi	sp,sp,8
 8010370:	f800283a 	ret

08010374 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8010374:	defffa04 	addi	sp,sp,-24
 8010378:	dfc00515 	stw	ra,20(sp)
 801037c:	df000415 	stw	fp,16(sp)
 8010380:	df000404 	addi	fp,sp,16
 8010384:	e13ffd15 	stw	r4,-12(fp)
 8010388:	e17ffe15 	stw	r5,-8(fp)
 801038c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010390:	e0bffd17 	ldw	r2,-12(fp)
 8010394:	10800017 	ldw	r2,0(r2)
 8010398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801039c:	e0bffc17 	ldw	r2,-16(fp)
 80103a0:	10c00a04 	addi	r3,r2,40
 80103a4:	e0bffd17 	ldw	r2,-12(fp)
 80103a8:	10800217 	ldw	r2,8(r2)
 80103ac:	1809883a 	mov	r4,r3
 80103b0:	e17ffe17 	ldw	r5,-8(fp)
 80103b4:	e1bfff17 	ldw	r6,-4(fp)
 80103b8:	100f883a 	mov	r7,r2
 80103bc:	801099c0 	call	801099c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80103c0:	e037883a 	mov	sp,fp
 80103c4:	dfc00117 	ldw	ra,4(sp)
 80103c8:	df000017 	ldw	fp,0(sp)
 80103cc:	dec00204 	addi	sp,sp,8
 80103d0:	f800283a 	ret

080103d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80103d4:	defffa04 	addi	sp,sp,-24
 80103d8:	dfc00515 	stw	ra,20(sp)
 80103dc:	df000415 	stw	fp,16(sp)
 80103e0:	df000404 	addi	fp,sp,16
 80103e4:	e13ffd15 	stw	r4,-12(fp)
 80103e8:	e17ffe15 	stw	r5,-8(fp)
 80103ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80103f0:	e0bffd17 	ldw	r2,-12(fp)
 80103f4:	10800017 	ldw	r2,0(r2)
 80103f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80103fc:	e0bffc17 	ldw	r2,-16(fp)
 8010400:	10c00a04 	addi	r3,r2,40
 8010404:	e0bffd17 	ldw	r2,-12(fp)
 8010408:	10800217 	ldw	r2,8(r2)
 801040c:	1809883a 	mov	r4,r3
 8010410:	e17ffe17 	ldw	r5,-8(fp)
 8010414:	e1bfff17 	ldw	r6,-4(fp)
 8010418:	100f883a 	mov	r7,r2
 801041c:	8010ba80 	call	8010ba8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8010420:	e037883a 	mov	sp,fp
 8010424:	dfc00117 	ldw	ra,4(sp)
 8010428:	df000017 	ldw	fp,0(sp)
 801042c:	dec00204 	addi	sp,sp,8
 8010430:	f800283a 	ret

08010434 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8010434:	defffc04 	addi	sp,sp,-16
 8010438:	dfc00315 	stw	ra,12(sp)
 801043c:	df000215 	stw	fp,8(sp)
 8010440:	df000204 	addi	fp,sp,8
 8010444:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010448:	e0bfff17 	ldw	r2,-4(fp)
 801044c:	10800017 	ldw	r2,0(r2)
 8010450:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8010454:	e0bffe17 	ldw	r2,-8(fp)
 8010458:	10c00a04 	addi	r3,r2,40
 801045c:	e0bfff17 	ldw	r2,-4(fp)
 8010460:	10800217 	ldw	r2,8(r2)
 8010464:	1809883a 	mov	r4,r3
 8010468:	100b883a 	mov	r5,r2
 801046c:	80108480 	call	8010848 <altera_avalon_jtag_uart_close>
}
 8010470:	e037883a 	mov	sp,fp
 8010474:	dfc00117 	ldw	ra,4(sp)
 8010478:	df000017 	ldw	fp,0(sp)
 801047c:	dec00204 	addi	sp,sp,8
 8010480:	f800283a 	ret

08010484 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8010484:	defffa04 	addi	sp,sp,-24
 8010488:	dfc00515 	stw	ra,20(sp)
 801048c:	df000415 	stw	fp,16(sp)
 8010490:	df000404 	addi	fp,sp,16
 8010494:	e13ffd15 	stw	r4,-12(fp)
 8010498:	e17ffe15 	stw	r5,-8(fp)
 801049c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80104a0:	e0bffd17 	ldw	r2,-12(fp)
 80104a4:	10800017 	ldw	r2,0(r2)
 80104a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80104ac:	e0bffc17 	ldw	r2,-16(fp)
 80104b0:	10800a04 	addi	r2,r2,40
 80104b4:	1009883a 	mov	r4,r2
 80104b8:	e17ffe17 	ldw	r5,-8(fp)
 80104bc:	e1bfff17 	ldw	r6,-4(fp)
 80104c0:	80108b00 	call	80108b0 <altera_avalon_jtag_uart_ioctl>
}
 80104c4:	e037883a 	mov	sp,fp
 80104c8:	dfc00117 	ldw	ra,4(sp)
 80104cc:	df000017 	ldw	fp,0(sp)
 80104d0:	dec00204 	addi	sp,sp,8
 80104d4:	f800283a 	ret

080104d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80104d8:	defffa04 	addi	sp,sp,-24
 80104dc:	dfc00515 	stw	ra,20(sp)
 80104e0:	df000415 	stw	fp,16(sp)
 80104e4:	df000404 	addi	fp,sp,16
 80104e8:	e13ffd15 	stw	r4,-12(fp)
 80104ec:	e17ffe15 	stw	r5,-8(fp)
 80104f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80104f4:	e0bffd17 	ldw	r2,-12(fp)
 80104f8:	00c00044 	movi	r3,1
 80104fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8010500:	e0bffd17 	ldw	r2,-12(fp)
 8010504:	10800017 	ldw	r2,0(r2)
 8010508:	10800104 	addi	r2,r2,4
 801050c:	1007883a 	mov	r3,r2
 8010510:	e0bffd17 	ldw	r2,-12(fp)
 8010514:	10800817 	ldw	r2,32(r2)
 8010518:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801051c:	e0fffe17 	ldw	r3,-8(fp)
 8010520:	e0bfff17 	ldw	r2,-4(fp)
 8010524:	d8000015 	stw	zero,0(sp)
 8010528:	1809883a 	mov	r4,r3
 801052c:	100b883a 	mov	r5,r2
 8010530:	01820074 	movhi	r6,2049
 8010534:	31816704 	addi	r6,r6,1436
 8010538:	e1fffd17 	ldw	r7,-12(fp)
 801053c:	801131c0 	call	801131c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8010540:	e0bffd17 	ldw	r2,-12(fp)
 8010544:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8010548:	e0bffd17 	ldw	r2,-12(fp)
 801054c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010550:	008200b4 	movhi	r2,2050
 8010554:	10817504 	addi	r2,r2,1492
 8010558:	10800017 	ldw	r2,0(r2)
 801055c:	1809883a 	mov	r4,r3
 8010560:	100b883a 	mov	r5,r2
 8010564:	01820074 	movhi	r6,2049
 8010568:	3181e804 	addi	r6,r6,1952
 801056c:	e1fffd17 	ldw	r7,-12(fp)
 8010570:	8010ebc0 	call	8010ebc <alt_alarm_start>
 8010574:	1000040e 	bge	r2,zero,8010588 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8010578:	e0fffd17 	ldw	r3,-12(fp)
 801057c:	00a00034 	movhi	r2,32768
 8010580:	10bfffc4 	addi	r2,r2,-1
 8010584:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8010588:	e037883a 	mov	sp,fp
 801058c:	dfc00117 	ldw	ra,4(sp)
 8010590:	df000017 	ldw	fp,0(sp)
 8010594:	dec00204 	addi	sp,sp,8
 8010598:	f800283a 	ret

0801059c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801059c:	defff804 	addi	sp,sp,-32
 80105a0:	df000715 	stw	fp,28(sp)
 80105a4:	df000704 	addi	fp,sp,28
 80105a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80105ac:	e0bfff17 	ldw	r2,-4(fp)
 80105b0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80105b4:	e0bffb17 	ldw	r2,-20(fp)
 80105b8:	10800017 	ldw	r2,0(r2)
 80105bc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80105c0:	e0bffc17 	ldw	r2,-16(fp)
 80105c4:	10800104 	addi	r2,r2,4
 80105c8:	10800037 	ldwio	r2,0(r2)
 80105cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80105d0:	e0bffd17 	ldw	r2,-12(fp)
 80105d4:	1080c00c 	andi	r2,r2,768
 80105d8:	1000011e 	bne	r2,zero,80105e0 <altera_avalon_jtag_uart_irq+0x44>
      break;
 80105dc:	00006c06 	br	8010790 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80105e0:	e0bffd17 	ldw	r2,-12(fp)
 80105e4:	1080400c 	andi	r2,r2,256
 80105e8:	10003426 	beq	r2,zero,80106bc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80105ec:	00800074 	movhi	r2,1
 80105f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80105f4:	e0bffb17 	ldw	r2,-20(fp)
 80105f8:	10800a17 	ldw	r2,40(r2)
 80105fc:	10800044 	addi	r2,r2,1
 8010600:	1081ffcc 	andi	r2,r2,2047
 8010604:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8010608:	e0bffb17 	ldw	r2,-20(fp)
 801060c:	10c00b17 	ldw	r3,44(r2)
 8010610:	e0bffe17 	ldw	r2,-8(fp)
 8010614:	1880011e 	bne	r3,r2,801061c <altera_avalon_jtag_uart_irq+0x80>
          break;
 8010618:	00001606 	br	8010674 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801061c:	e0bffc17 	ldw	r2,-16(fp)
 8010620:	10800037 	ldwio	r2,0(r2)
 8010624:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8010628:	e0bff917 	ldw	r2,-28(fp)
 801062c:	10a0000c 	andi	r2,r2,32768
 8010630:	1000011e 	bne	r2,zero,8010638 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8010634:	00000f06 	br	8010674 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8010638:	e0bffb17 	ldw	r2,-20(fp)
 801063c:	10800a17 	ldw	r2,40(r2)
 8010640:	e0fff917 	ldw	r3,-28(fp)
 8010644:	1809883a 	mov	r4,r3
 8010648:	e0fffb17 	ldw	r3,-20(fp)
 801064c:	1885883a 	add	r2,r3,r2
 8010650:	10800e04 	addi	r2,r2,56
 8010654:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010658:	e0bffb17 	ldw	r2,-20(fp)
 801065c:	10800a17 	ldw	r2,40(r2)
 8010660:	10800044 	addi	r2,r2,1
 8010664:	10c1ffcc 	andi	r3,r2,2047
 8010668:	e0bffb17 	ldw	r2,-20(fp)
 801066c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8010670:	003fe006 	br	80105f4 <__alt_data_end+0xfc0105f4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8010674:	e0bff917 	ldw	r2,-28(fp)
 8010678:	10bfffec 	andhi	r2,r2,65535
 801067c:	10000f26 	beq	r2,zero,80106bc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010680:	e0bffb17 	ldw	r2,-20(fp)
 8010684:	10c00817 	ldw	r3,32(r2)
 8010688:	00bfff84 	movi	r2,-2
 801068c:	1886703a 	and	r3,r3,r2
 8010690:	e0bffb17 	ldw	r2,-20(fp)
 8010694:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8010698:	e0bffc17 	ldw	r2,-16(fp)
 801069c:	10800104 	addi	r2,r2,4
 80106a0:	1007883a 	mov	r3,r2
 80106a4:	e0bffb17 	ldw	r2,-20(fp)
 80106a8:	10800817 	ldw	r2,32(r2)
 80106ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80106b0:	e0bffc17 	ldw	r2,-16(fp)
 80106b4:	10800104 	addi	r2,r2,4
 80106b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80106bc:	e0bffd17 	ldw	r2,-12(fp)
 80106c0:	1080800c 	andi	r2,r2,512
 80106c4:	10003126 	beq	r2,zero,801078c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80106c8:	e0bffd17 	ldw	r2,-12(fp)
 80106cc:	1004d43a 	srli	r2,r2,16
 80106d0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80106d4:	00001406 	br	8010728 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80106d8:	e0bffc17 	ldw	r2,-16(fp)
 80106dc:	e0fffb17 	ldw	r3,-20(fp)
 80106e0:	18c00d17 	ldw	r3,52(r3)
 80106e4:	e13ffb17 	ldw	r4,-20(fp)
 80106e8:	20c7883a 	add	r3,r4,r3
 80106ec:	18c20e04 	addi	r3,r3,2104
 80106f0:	18c00003 	ldbu	r3,0(r3)
 80106f4:	18c03fcc 	andi	r3,r3,255
 80106f8:	18c0201c 	xori	r3,r3,128
 80106fc:	18ffe004 	addi	r3,r3,-128
 8010700:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010704:	e0bffb17 	ldw	r2,-20(fp)
 8010708:	10800d17 	ldw	r2,52(r2)
 801070c:	10800044 	addi	r2,r2,1
 8010710:	10c1ffcc 	andi	r3,r2,2047
 8010714:	e0bffb17 	ldw	r2,-20(fp)
 8010718:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801071c:	e0bffa17 	ldw	r2,-24(fp)
 8010720:	10bfffc4 	addi	r2,r2,-1
 8010724:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010728:	e0bffa17 	ldw	r2,-24(fp)
 801072c:	10000526 	beq	r2,zero,8010744 <altera_avalon_jtag_uart_irq+0x1a8>
 8010730:	e0bffb17 	ldw	r2,-20(fp)
 8010734:	10c00d17 	ldw	r3,52(r2)
 8010738:	e0bffb17 	ldw	r2,-20(fp)
 801073c:	10800c17 	ldw	r2,48(r2)
 8010740:	18bfe51e 	bne	r3,r2,80106d8 <__alt_data_end+0xfc0106d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8010744:	e0bffa17 	ldw	r2,-24(fp)
 8010748:	10001026 	beq	r2,zero,801078c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801074c:	e0bffb17 	ldw	r2,-20(fp)
 8010750:	10c00817 	ldw	r3,32(r2)
 8010754:	00bfff44 	movi	r2,-3
 8010758:	1886703a 	and	r3,r3,r2
 801075c:	e0bffb17 	ldw	r2,-20(fp)
 8010760:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010764:	e0bffb17 	ldw	r2,-20(fp)
 8010768:	10800017 	ldw	r2,0(r2)
 801076c:	10800104 	addi	r2,r2,4
 8010770:	1007883a 	mov	r3,r2
 8010774:	e0bffb17 	ldw	r2,-20(fp)
 8010778:	10800817 	ldw	r2,32(r2)
 801077c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010780:	e0bffc17 	ldw	r2,-16(fp)
 8010784:	10800104 	addi	r2,r2,4
 8010788:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801078c:	003f8c06 	br	80105c0 <__alt_data_end+0xfc0105c0>
}
 8010790:	e037883a 	mov	sp,fp
 8010794:	df000017 	ldw	fp,0(sp)
 8010798:	dec00104 	addi	sp,sp,4
 801079c:	f800283a 	ret

080107a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80107a0:	defff804 	addi	sp,sp,-32
 80107a4:	df000715 	stw	fp,28(sp)
 80107a8:	df000704 	addi	fp,sp,28
 80107ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80107b0:	e0bffb17 	ldw	r2,-20(fp)
 80107b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80107b8:	e0bff917 	ldw	r2,-28(fp)
 80107bc:	10800017 	ldw	r2,0(r2)
 80107c0:	10800104 	addi	r2,r2,4
 80107c4:	10800037 	ldwio	r2,0(r2)
 80107c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80107cc:	e0bffa17 	ldw	r2,-24(fp)
 80107d0:	1081000c 	andi	r2,r2,1024
 80107d4:	10000b26 	beq	r2,zero,8010804 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80107d8:	e0bff917 	ldw	r2,-28(fp)
 80107dc:	10800017 	ldw	r2,0(r2)
 80107e0:	10800104 	addi	r2,r2,4
 80107e4:	1007883a 	mov	r3,r2
 80107e8:	e0bff917 	ldw	r2,-28(fp)
 80107ec:	10800817 	ldw	r2,32(r2)
 80107f0:	10810014 	ori	r2,r2,1024
 80107f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80107f8:	e0bff917 	ldw	r2,-28(fp)
 80107fc:	10000915 	stw	zero,36(r2)
 8010800:	00000a06 	br	801082c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8010804:	e0bff917 	ldw	r2,-28(fp)
 8010808:	10c00917 	ldw	r3,36(r2)
 801080c:	00a00034 	movhi	r2,32768
 8010810:	10bfff04 	addi	r2,r2,-4
 8010814:	10c00536 	bltu	r2,r3,801082c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8010818:	e0bff917 	ldw	r2,-28(fp)
 801081c:	10800917 	ldw	r2,36(r2)
 8010820:	10c00044 	addi	r3,r2,1
 8010824:	e0bff917 	ldw	r2,-28(fp)
 8010828:	10c00915 	stw	r3,36(r2)
 801082c:	008200b4 	movhi	r2,2050
 8010830:	10817504 	addi	r2,r2,1492
 8010834:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8010838:	e037883a 	mov	sp,fp
 801083c:	df000017 	ldw	fp,0(sp)
 8010840:	dec00104 	addi	sp,sp,4
 8010844:	f800283a 	ret

08010848 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8010848:	defffd04 	addi	sp,sp,-12
 801084c:	df000215 	stw	fp,8(sp)
 8010850:	df000204 	addi	fp,sp,8
 8010854:	e13ffe15 	stw	r4,-8(fp)
 8010858:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801085c:	00000506 	br	8010874 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8010860:	e0bfff17 	ldw	r2,-4(fp)
 8010864:	1090000c 	andi	r2,r2,16384
 8010868:	10000226 	beq	r2,zero,8010874 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801086c:	00bffd44 	movi	r2,-11
 8010870:	00000b06 	br	80108a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010874:	e0bffe17 	ldw	r2,-8(fp)
 8010878:	10c00d17 	ldw	r3,52(r2)
 801087c:	e0bffe17 	ldw	r2,-8(fp)
 8010880:	10800c17 	ldw	r2,48(r2)
 8010884:	18800526 	beq	r3,r2,801089c <altera_avalon_jtag_uart_close+0x54>
 8010888:	e0bffe17 	ldw	r2,-8(fp)
 801088c:	10c00917 	ldw	r3,36(r2)
 8010890:	e0bffe17 	ldw	r2,-8(fp)
 8010894:	10800117 	ldw	r2,4(r2)
 8010898:	18bff136 	bltu	r3,r2,8010860 <__alt_data_end+0xfc010860>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 801089c:	0005883a 	mov	r2,zero
}
 80108a0:	e037883a 	mov	sp,fp
 80108a4:	df000017 	ldw	fp,0(sp)
 80108a8:	dec00104 	addi	sp,sp,4
 80108ac:	f800283a 	ret

080108b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80108b0:	defffa04 	addi	sp,sp,-24
 80108b4:	df000515 	stw	fp,20(sp)
 80108b8:	df000504 	addi	fp,sp,20
 80108bc:	e13ffd15 	stw	r4,-12(fp)
 80108c0:	e17ffe15 	stw	r5,-8(fp)
 80108c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80108c8:	00bff9c4 	movi	r2,-25
 80108cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80108d0:	e0bffe17 	ldw	r2,-8(fp)
 80108d4:	10da8060 	cmpeqi	r3,r2,27137
 80108d8:	1800031e 	bne	r3,zero,80108e8 <altera_avalon_jtag_uart_ioctl+0x38>
 80108dc:	109a80a0 	cmpeqi	r2,r2,27138
 80108e0:	1000191e 	bne	r2,zero,8010948 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 80108e4:	00002806 	br	8010988 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80108e8:	e0bffd17 	ldw	r2,-12(fp)
 80108ec:	10c00117 	ldw	r3,4(r2)
 80108f0:	00a00034 	movhi	r2,32768
 80108f4:	10bfffc4 	addi	r2,r2,-1
 80108f8:	18801226 	beq	r3,r2,8010944 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 80108fc:	e0bfff17 	ldw	r2,-4(fp)
 8010900:	10800017 	ldw	r2,0(r2)
 8010904:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8010908:	e0bffc17 	ldw	r2,-16(fp)
 801090c:	10800090 	cmplti	r2,r2,2
 8010910:	1000061e 	bne	r2,zero,801092c <altera_avalon_jtag_uart_ioctl+0x7c>
 8010914:	e0fffc17 	ldw	r3,-16(fp)
 8010918:	00a00034 	movhi	r2,32768
 801091c:	10bfffc4 	addi	r2,r2,-1
 8010920:	18800226 	beq	r3,r2,801092c <altera_avalon_jtag_uart_ioctl+0x7c>
 8010924:	e0bffc17 	ldw	r2,-16(fp)
 8010928:	00000206 	br	8010934 <altera_avalon_jtag_uart_ioctl+0x84>
 801092c:	00a00034 	movhi	r2,32768
 8010930:	10bfff84 	addi	r2,r2,-2
 8010934:	e0fffd17 	ldw	r3,-12(fp)
 8010938:	18800115 	stw	r2,4(r3)
      rc = 0;
 801093c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010940:	00001106 	br	8010988 <altera_avalon_jtag_uart_ioctl+0xd8>
 8010944:	00001006 	br	8010988 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8010948:	e0bffd17 	ldw	r2,-12(fp)
 801094c:	10c00117 	ldw	r3,4(r2)
 8010950:	00a00034 	movhi	r2,32768
 8010954:	10bfffc4 	addi	r2,r2,-1
 8010958:	18800a26 	beq	r3,r2,8010984 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801095c:	e0bffd17 	ldw	r2,-12(fp)
 8010960:	10c00917 	ldw	r3,36(r2)
 8010964:	e0bffd17 	ldw	r2,-12(fp)
 8010968:	10800117 	ldw	r2,4(r2)
 801096c:	1885803a 	cmpltu	r2,r3,r2
 8010970:	10c03fcc 	andi	r3,r2,255
 8010974:	e0bfff17 	ldw	r2,-4(fp)
 8010978:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801097c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010980:	00000006 	br	8010984 <altera_avalon_jtag_uart_ioctl+0xd4>
 8010984:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8010988:	e0bffb17 	ldw	r2,-20(fp)
}
 801098c:	e037883a 	mov	sp,fp
 8010990:	df000017 	ldw	fp,0(sp)
 8010994:	dec00104 	addi	sp,sp,4
 8010998:	f800283a 	ret

0801099c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801099c:	defff304 	addi	sp,sp,-52
 80109a0:	dfc00c15 	stw	ra,48(sp)
 80109a4:	df000b15 	stw	fp,44(sp)
 80109a8:	df000b04 	addi	fp,sp,44
 80109ac:	e13ffc15 	stw	r4,-16(fp)
 80109b0:	e17ffd15 	stw	r5,-12(fp)
 80109b4:	e1bffe15 	stw	r6,-8(fp)
 80109b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80109bc:	e0bffd17 	ldw	r2,-12(fp)
 80109c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80109c4:	00004906 	br	8010aec <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80109c8:	e0bffc17 	ldw	r2,-16(fp)
 80109cc:	10800a17 	ldw	r2,40(r2)
 80109d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80109d4:	e0bffc17 	ldw	r2,-16(fp)
 80109d8:	10800b17 	ldw	r2,44(r2)
 80109dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80109e0:	e0fff717 	ldw	r3,-36(fp)
 80109e4:	e0bff817 	ldw	r2,-32(fp)
 80109e8:	18800536 	bltu	r3,r2,8010a00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80109ec:	e0fff717 	ldw	r3,-36(fp)
 80109f0:	e0bff817 	ldw	r2,-32(fp)
 80109f4:	1885c83a 	sub	r2,r3,r2
 80109f8:	e0bff615 	stw	r2,-40(fp)
 80109fc:	00000406 	br	8010a10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8010a00:	00c20004 	movi	r3,2048
 8010a04:	e0bff817 	ldw	r2,-32(fp)
 8010a08:	1885c83a 	sub	r2,r3,r2
 8010a0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010a10:	e0bff617 	ldw	r2,-40(fp)
 8010a14:	1000011e 	bne	r2,zero,8010a1c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8010a18:	00001d06 	br	8010a90 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8010a1c:	e0fffe17 	ldw	r3,-8(fp)
 8010a20:	e0bff617 	ldw	r2,-40(fp)
 8010a24:	1880022e 	bgeu	r3,r2,8010a30 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8010a28:	e0bffe17 	ldw	r2,-8(fp)
 8010a2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8010a30:	e0bff817 	ldw	r2,-32(fp)
 8010a34:	10800e04 	addi	r2,r2,56
 8010a38:	e0fffc17 	ldw	r3,-16(fp)
 8010a3c:	1885883a 	add	r2,r3,r2
 8010a40:	e13ff517 	ldw	r4,-44(fp)
 8010a44:	100b883a 	mov	r5,r2
 8010a48:	e1bff617 	ldw	r6,-40(fp)
 8010a4c:	80032680 	call	8003268 <memcpy>
      ptr   += n;
 8010a50:	e0fff517 	ldw	r3,-44(fp)
 8010a54:	e0bff617 	ldw	r2,-40(fp)
 8010a58:	1885883a 	add	r2,r3,r2
 8010a5c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8010a60:	e0fffe17 	ldw	r3,-8(fp)
 8010a64:	e0bff617 	ldw	r2,-40(fp)
 8010a68:	1885c83a 	sub	r2,r3,r2
 8010a6c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010a70:	e0fff817 	ldw	r3,-32(fp)
 8010a74:	e0bff617 	ldw	r2,-40(fp)
 8010a78:	1885883a 	add	r2,r3,r2
 8010a7c:	10c1ffcc 	andi	r3,r2,2047
 8010a80:	e0bffc17 	ldw	r2,-16(fp)
 8010a84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8010a88:	e0bffe17 	ldw	r2,-8(fp)
 8010a8c:	00bfce16 	blt	zero,r2,80109c8 <__alt_data_end+0xfc0109c8>

    /* If we read any data then return it */
    if (ptr != buffer)
 8010a90:	e0fff517 	ldw	r3,-44(fp)
 8010a94:	e0bffd17 	ldw	r2,-12(fp)
 8010a98:	18800126 	beq	r3,r2,8010aa0 <altera_avalon_jtag_uart_read+0x104>
      break;
 8010a9c:	00001506 	br	8010af4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8010aa0:	e0bfff17 	ldw	r2,-4(fp)
 8010aa4:	1090000c 	andi	r2,r2,16384
 8010aa8:	10000126 	beq	r2,zero,8010ab0 <altera_avalon_jtag_uart_read+0x114>
      break;
 8010aac:	00001106 	br	8010af4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8010ab0:	0001883a 	nop
 8010ab4:	e0bffc17 	ldw	r2,-16(fp)
 8010ab8:	10c00a17 	ldw	r3,40(r2)
 8010abc:	e0bff717 	ldw	r2,-36(fp)
 8010ac0:	1880051e 	bne	r3,r2,8010ad8 <altera_avalon_jtag_uart_read+0x13c>
 8010ac4:	e0bffc17 	ldw	r2,-16(fp)
 8010ac8:	10c00917 	ldw	r3,36(r2)
 8010acc:	e0bffc17 	ldw	r2,-16(fp)
 8010ad0:	10800117 	ldw	r2,4(r2)
 8010ad4:	18bff736 	bltu	r3,r2,8010ab4 <__alt_data_end+0xfc010ab4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8010ad8:	e0bffc17 	ldw	r2,-16(fp)
 8010adc:	10c00a17 	ldw	r3,40(r2)
 8010ae0:	e0bff717 	ldw	r2,-36(fp)
 8010ae4:	1880011e 	bne	r3,r2,8010aec <altera_avalon_jtag_uart_read+0x150>
      break;
 8010ae8:	00000206 	br	8010af4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8010aec:	e0bffe17 	ldw	r2,-8(fp)
 8010af0:	00bfb516 	blt	zero,r2,80109c8 <__alt_data_end+0xfc0109c8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8010af4:	e0fff517 	ldw	r3,-44(fp)
 8010af8:	e0bffd17 	ldw	r2,-12(fp)
 8010afc:	18801826 	beq	r3,r2,8010b60 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010b00:	0005303a 	rdctl	r2,status
 8010b04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010b08:	e0fffa17 	ldw	r3,-24(fp)
 8010b0c:	00bfff84 	movi	r2,-2
 8010b10:	1884703a 	and	r2,r3,r2
 8010b14:	1001703a 	wrctl	status,r2
  
  return context;
 8010b18:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8010b1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010b20:	e0bffc17 	ldw	r2,-16(fp)
 8010b24:	10800817 	ldw	r2,32(r2)
 8010b28:	10c00054 	ori	r3,r2,1
 8010b2c:	e0bffc17 	ldw	r2,-16(fp)
 8010b30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010b34:	e0bffc17 	ldw	r2,-16(fp)
 8010b38:	10800017 	ldw	r2,0(r2)
 8010b3c:	10800104 	addi	r2,r2,4
 8010b40:	1007883a 	mov	r3,r2
 8010b44:	e0bffc17 	ldw	r2,-16(fp)
 8010b48:	10800817 	ldw	r2,32(r2)
 8010b4c:	18800035 	stwio	r2,0(r3)
 8010b50:	e0bff917 	ldw	r2,-28(fp)
 8010b54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010b58:	e0bffb17 	ldw	r2,-20(fp)
 8010b5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8010b60:	e0fff517 	ldw	r3,-44(fp)
 8010b64:	e0bffd17 	ldw	r2,-12(fp)
 8010b68:	18800426 	beq	r3,r2,8010b7c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8010b6c:	e0fff517 	ldw	r3,-44(fp)
 8010b70:	e0bffd17 	ldw	r2,-12(fp)
 8010b74:	1885c83a 	sub	r2,r3,r2
 8010b78:	00000606 	br	8010b94 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 8010b7c:	e0bfff17 	ldw	r2,-4(fp)
 8010b80:	1090000c 	andi	r2,r2,16384
 8010b84:	10000226 	beq	r2,zero,8010b90 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8010b88:	00bffd44 	movi	r2,-11
 8010b8c:	00000106 	br	8010b94 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8010b90:	00bffec4 	movi	r2,-5
}
 8010b94:	e037883a 	mov	sp,fp
 8010b98:	dfc00117 	ldw	ra,4(sp)
 8010b9c:	df000017 	ldw	fp,0(sp)
 8010ba0:	dec00204 	addi	sp,sp,8
 8010ba4:	f800283a 	ret

08010ba8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8010ba8:	defff304 	addi	sp,sp,-52
 8010bac:	dfc00c15 	stw	ra,48(sp)
 8010bb0:	df000b15 	stw	fp,44(sp)
 8010bb4:	df000b04 	addi	fp,sp,44
 8010bb8:	e13ffc15 	stw	r4,-16(fp)
 8010bbc:	e17ffd15 	stw	r5,-12(fp)
 8010bc0:	e1bffe15 	stw	r6,-8(fp)
 8010bc4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010bc8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8010bcc:	e0bffd17 	ldw	r2,-12(fp)
 8010bd0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010bd4:	00003806 	br	8010cb8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010bd8:	e0bffc17 	ldw	r2,-16(fp)
 8010bdc:	10800c17 	ldw	r2,48(r2)
 8010be0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 8010be4:	e0bffc17 	ldw	r2,-16(fp)
 8010be8:	10800d17 	ldw	r2,52(r2)
 8010bec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8010bf0:	e0fff817 	ldw	r3,-32(fp)
 8010bf4:	e0bff517 	ldw	r2,-44(fp)
 8010bf8:	1880062e 	bgeu	r3,r2,8010c14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8010bfc:	e0fff517 	ldw	r3,-44(fp)
 8010c00:	e0bff817 	ldw	r2,-32(fp)
 8010c04:	1885c83a 	sub	r2,r3,r2
 8010c08:	10bfffc4 	addi	r2,r2,-1
 8010c0c:	e0bff615 	stw	r2,-40(fp)
 8010c10:	00000b06 	br	8010c40 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8010c14:	e0bff517 	ldw	r2,-44(fp)
 8010c18:	10000526 	beq	r2,zero,8010c30 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8010c1c:	00c20004 	movi	r3,2048
 8010c20:	e0bff817 	ldw	r2,-32(fp)
 8010c24:	1885c83a 	sub	r2,r3,r2
 8010c28:	e0bff615 	stw	r2,-40(fp)
 8010c2c:	00000406 	br	8010c40 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010c30:	00c1ffc4 	movi	r3,2047
 8010c34:	e0bff817 	ldw	r2,-32(fp)
 8010c38:	1885c83a 	sub	r2,r3,r2
 8010c3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010c40:	e0bff617 	ldw	r2,-40(fp)
 8010c44:	1000011e 	bne	r2,zero,8010c4c <altera_avalon_jtag_uart_write+0xa4>
        break;
 8010c48:	00001d06 	br	8010cc0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 8010c4c:	e0fffe17 	ldw	r3,-8(fp)
 8010c50:	e0bff617 	ldw	r2,-40(fp)
 8010c54:	1880022e 	bgeu	r3,r2,8010c60 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8010c58:	e0bffe17 	ldw	r2,-8(fp)
 8010c5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8010c60:	e0bff817 	ldw	r2,-32(fp)
 8010c64:	10820e04 	addi	r2,r2,2104
 8010c68:	e0fffc17 	ldw	r3,-16(fp)
 8010c6c:	1885883a 	add	r2,r3,r2
 8010c70:	1009883a 	mov	r4,r2
 8010c74:	e17ffd17 	ldw	r5,-12(fp)
 8010c78:	e1bff617 	ldw	r6,-40(fp)
 8010c7c:	80032680 	call	8003268 <memcpy>
      ptr   += n;
 8010c80:	e0fffd17 	ldw	r3,-12(fp)
 8010c84:	e0bff617 	ldw	r2,-40(fp)
 8010c88:	1885883a 	add	r2,r3,r2
 8010c8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8010c90:	e0fffe17 	ldw	r3,-8(fp)
 8010c94:	e0bff617 	ldw	r2,-40(fp)
 8010c98:	1885c83a 	sub	r2,r3,r2
 8010c9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010ca0:	e0fff817 	ldw	r3,-32(fp)
 8010ca4:	e0bff617 	ldw	r2,-40(fp)
 8010ca8:	1885883a 	add	r2,r3,r2
 8010cac:	10c1ffcc 	andi	r3,r2,2047
 8010cb0:	e0bffc17 	ldw	r2,-16(fp)
 8010cb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010cb8:	e0bffe17 	ldw	r2,-8(fp)
 8010cbc:	00bfc616 	blt	zero,r2,8010bd8 <__alt_data_end+0xfc010bd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010cc0:	0005303a 	rdctl	r2,status
 8010cc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010cc8:	e0fffa17 	ldw	r3,-24(fp)
 8010ccc:	00bfff84 	movi	r2,-2
 8010cd0:	1884703a 	and	r2,r3,r2
 8010cd4:	1001703a 	wrctl	status,r2
  
  return context;
 8010cd8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010cdc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010ce0:	e0bffc17 	ldw	r2,-16(fp)
 8010ce4:	10800817 	ldw	r2,32(r2)
 8010ce8:	10c00094 	ori	r3,r2,2
 8010cec:	e0bffc17 	ldw	r2,-16(fp)
 8010cf0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010cf4:	e0bffc17 	ldw	r2,-16(fp)
 8010cf8:	10800017 	ldw	r2,0(r2)
 8010cfc:	10800104 	addi	r2,r2,4
 8010d00:	1007883a 	mov	r3,r2
 8010d04:	e0bffc17 	ldw	r2,-16(fp)
 8010d08:	10800817 	ldw	r2,32(r2)
 8010d0c:	18800035 	stwio	r2,0(r3)
 8010d10:	e0bff917 	ldw	r2,-28(fp)
 8010d14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010d18:	e0bffb17 	ldw	r2,-20(fp)
 8010d1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8010d20:	e0bffe17 	ldw	r2,-8(fp)
 8010d24:	0080120e 	bge	zero,r2,8010d70 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8010d28:	e0bfff17 	ldw	r2,-4(fp)
 8010d2c:	1090000c 	andi	r2,r2,16384
 8010d30:	10000126 	beq	r2,zero,8010d38 <altera_avalon_jtag_uart_write+0x190>
        break;
 8010d34:	00001006 	br	8010d78 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8010d38:	0001883a 	nop
 8010d3c:	e0bffc17 	ldw	r2,-16(fp)
 8010d40:	10c00d17 	ldw	r3,52(r2)
 8010d44:	e0bff517 	ldw	r2,-44(fp)
 8010d48:	1880051e 	bne	r3,r2,8010d60 <altera_avalon_jtag_uart_write+0x1b8>
 8010d4c:	e0bffc17 	ldw	r2,-16(fp)
 8010d50:	10c00917 	ldw	r3,36(r2)
 8010d54:	e0bffc17 	ldw	r2,-16(fp)
 8010d58:	10800117 	ldw	r2,4(r2)
 8010d5c:	18bff736 	bltu	r3,r2,8010d3c <__alt_data_end+0xfc010d3c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010d60:	e0bffc17 	ldw	r2,-16(fp)
 8010d64:	10800917 	ldw	r2,36(r2)
 8010d68:	10000126 	beq	r2,zero,8010d70 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 8010d6c:	00000206 	br	8010d78 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8010d70:	e0bffe17 	ldw	r2,-8(fp)
 8010d74:	00bf9716 	blt	zero,r2,8010bd4 <__alt_data_end+0xfc010bd4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8010d78:	e0fffd17 	ldw	r3,-12(fp)
 8010d7c:	e0bff717 	ldw	r2,-36(fp)
 8010d80:	18800426 	beq	r3,r2,8010d94 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8010d84:	e0fffd17 	ldw	r3,-12(fp)
 8010d88:	e0bff717 	ldw	r2,-36(fp)
 8010d8c:	1885c83a 	sub	r2,r3,r2
 8010d90:	00000606 	br	8010dac <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8010d94:	e0bfff17 	ldw	r2,-4(fp)
 8010d98:	1090000c 	andi	r2,r2,16384
 8010d9c:	10000226 	beq	r2,zero,8010da8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8010da0:	00bffd44 	movi	r2,-11
 8010da4:	00000106 	br	8010dac <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8010da8:	00bffec4 	movi	r2,-5
}
 8010dac:	e037883a 	mov	sp,fp
 8010db0:	dfc00117 	ldw	ra,4(sp)
 8010db4:	df000017 	ldw	fp,0(sp)
 8010db8:	dec00204 	addi	sp,sp,8
 8010dbc:	f800283a 	ret

08010dc0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8010dc0:	defffa04 	addi	sp,sp,-24
 8010dc4:	dfc00515 	stw	ra,20(sp)
 8010dc8:	df000415 	stw	fp,16(sp)
 8010dcc:	df000404 	addi	fp,sp,16
 8010dd0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8010dd4:	0007883a 	mov	r3,zero
 8010dd8:	e0bfff17 	ldw	r2,-4(fp)
 8010ddc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8010de0:	e0bfff17 	ldw	r2,-4(fp)
 8010de4:	10800104 	addi	r2,r2,4
 8010de8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010dec:	0005303a 	rdctl	r2,status
 8010df0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010df4:	e0fffd17 	ldw	r3,-12(fp)
 8010df8:	00bfff84 	movi	r2,-2
 8010dfc:	1884703a 	and	r2,r3,r2
 8010e00:	1001703a 	wrctl	status,r2
  
  return context;
 8010e04:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8010e08:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8010e0c:	8011a300 	call	8011a30 <alt_tick>
 8010e10:	e0bffc17 	ldw	r2,-16(fp)
 8010e14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010e18:	e0bffe17 	ldw	r2,-8(fp)
 8010e1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8010e20:	e037883a 	mov	sp,fp
 8010e24:	dfc00117 	ldw	ra,4(sp)
 8010e28:	df000017 	ldw	fp,0(sp)
 8010e2c:	dec00204 	addi	sp,sp,8
 8010e30:	f800283a 	ret

08010e34 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8010e34:	defff804 	addi	sp,sp,-32
 8010e38:	dfc00715 	stw	ra,28(sp)
 8010e3c:	df000615 	stw	fp,24(sp)
 8010e40:	df000604 	addi	fp,sp,24
 8010e44:	e13ffc15 	stw	r4,-16(fp)
 8010e48:	e17ffd15 	stw	r5,-12(fp)
 8010e4c:	e1bffe15 	stw	r6,-8(fp)
 8010e50:	e1ffff15 	stw	r7,-4(fp)
 8010e54:	e0bfff17 	ldw	r2,-4(fp)
 8010e58:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8010e5c:	008200b4 	movhi	r2,2050
 8010e60:	10817504 	addi	r2,r2,1492
 8010e64:	10800017 	ldw	r2,0(r2)
 8010e68:	1000041e 	bne	r2,zero,8010e7c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 8010e6c:	008200b4 	movhi	r2,2050
 8010e70:	10817504 	addi	r2,r2,1492
 8010e74:	e0fffb17 	ldw	r3,-20(fp)
 8010e78:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8010e7c:	e0bffc17 	ldw	r2,-16(fp)
 8010e80:	10800104 	addi	r2,r2,4
 8010e84:	00c001c4 	movi	r3,7
 8010e88:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8010e8c:	d8000015 	stw	zero,0(sp)
 8010e90:	e13ffd17 	ldw	r4,-12(fp)
 8010e94:	e17ffe17 	ldw	r5,-8(fp)
 8010e98:	01820074 	movhi	r6,2049
 8010e9c:	31837004 	addi	r6,r6,3520
 8010ea0:	e1fffc17 	ldw	r7,-16(fp)
 8010ea4:	801131c0 	call	801131c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8010ea8:	e037883a 	mov	sp,fp
 8010eac:	dfc00117 	ldw	ra,4(sp)
 8010eb0:	df000017 	ldw	fp,0(sp)
 8010eb4:	dec00204 	addi	sp,sp,8
 8010eb8:	f800283a 	ret

08010ebc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010ebc:	defff504 	addi	sp,sp,-44
 8010ec0:	df000a15 	stw	fp,40(sp)
 8010ec4:	df000a04 	addi	fp,sp,40
 8010ec8:	e13ffc15 	stw	r4,-16(fp)
 8010ecc:	e17ffd15 	stw	r5,-12(fp)
 8010ed0:	e1bffe15 	stw	r6,-8(fp)
 8010ed4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010ed8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010edc:	008200b4 	movhi	r2,2050
 8010ee0:	10817504 	addi	r2,r2,1492
 8010ee4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8010ee8:	10003f26 	beq	r2,zero,8010fe8 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8010eec:	e0bffc17 	ldw	r2,-16(fp)
 8010ef0:	10003b26 	beq	r2,zero,8010fe0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8010ef4:	e0bffc17 	ldw	r2,-16(fp)
 8010ef8:	e0fffe17 	ldw	r3,-8(fp)
 8010efc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010f00:	e0bffc17 	ldw	r2,-16(fp)
 8010f04:	e0ffff17 	ldw	r3,-4(fp)
 8010f08:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010f0c:	0005303a 	rdctl	r2,status
 8010f10:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010f14:	e0fff817 	ldw	r3,-32(fp)
 8010f18:	00bfff84 	movi	r2,-2
 8010f1c:	1884703a 	and	r2,r3,r2
 8010f20:	1001703a 	wrctl	status,r2
  
  return context;
 8010f24:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8010f28:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8010f2c:	008200b4 	movhi	r2,2050
 8010f30:	10817604 	addi	r2,r2,1496
 8010f34:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8010f38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010f3c:	e0fffd17 	ldw	r3,-12(fp)
 8010f40:	e0bff617 	ldw	r2,-40(fp)
 8010f44:	1885883a 	add	r2,r3,r2
 8010f48:	10c00044 	addi	r3,r2,1
 8010f4c:	e0bffc17 	ldw	r2,-16(fp)
 8010f50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010f54:	e0bffc17 	ldw	r2,-16(fp)
 8010f58:	10c00217 	ldw	r3,8(r2)
 8010f5c:	e0bff617 	ldw	r2,-40(fp)
 8010f60:	1880042e 	bgeu	r3,r2,8010f74 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8010f64:	e0bffc17 	ldw	r2,-16(fp)
 8010f68:	00c00044 	movi	r3,1
 8010f6c:	10c00405 	stb	r3,16(r2)
 8010f70:	00000206 	br	8010f7c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8010f74:	e0bffc17 	ldw	r2,-16(fp)
 8010f78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010f7c:	e0fffc17 	ldw	r3,-16(fp)
 8010f80:	008200b4 	movhi	r2,2050
 8010f84:	10baab04 	addi	r2,r2,-5460
 8010f88:	e0bff915 	stw	r2,-28(fp)
 8010f8c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010f90:	e0bffa17 	ldw	r2,-24(fp)
 8010f94:	e0fff917 	ldw	r3,-28(fp)
 8010f98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010f9c:	e0bff917 	ldw	r2,-28(fp)
 8010fa0:	10c00017 	ldw	r3,0(r2)
 8010fa4:	e0bffa17 	ldw	r2,-24(fp)
 8010fa8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010fac:	e0bff917 	ldw	r2,-28(fp)
 8010fb0:	10800017 	ldw	r2,0(r2)
 8010fb4:	e0fffa17 	ldw	r3,-24(fp)
 8010fb8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010fbc:	e0bff917 	ldw	r2,-28(fp)
 8010fc0:	e0fffa17 	ldw	r3,-24(fp)
 8010fc4:	10c00015 	stw	r3,0(r2)
 8010fc8:	e0bff717 	ldw	r2,-36(fp)
 8010fcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010fd0:	e0bffb17 	ldw	r2,-20(fp)
 8010fd4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8010fd8:	0005883a 	mov	r2,zero
 8010fdc:	00000306 	br	8010fec <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8010fe0:	00bffa84 	movi	r2,-22
 8010fe4:	00000106 	br	8010fec <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8010fe8:	00bfde84 	movi	r2,-134
  }
}
 8010fec:	e037883a 	mov	sp,fp
 8010ff0:	df000017 	ldw	fp,0(sp)
 8010ff4:	dec00104 	addi	sp,sp,4
 8010ff8:	f800283a 	ret

08010ffc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010ffc:	defffb04 	addi	sp,sp,-20
 8011000:	df000415 	stw	fp,16(sp)
 8011004:	df000404 	addi	fp,sp,16
 8011008:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 801100c:	008000c4 	movi	r2,3
 8011010:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8011014:	e0fffd17 	ldw	r3,-12(fp)
 8011018:	008003f4 	movhi	r2,15
 801101c:	10909004 	addi	r2,r2,16960
 8011020:	1887383a 	mul	r3,r3,r2
 8011024:	0080bef4 	movhi	r2,763
 8011028:	10bc2004 	addi	r2,r2,-3968
 801102c:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8011030:	00a00034 	movhi	r2,32768
 8011034:	10bfffc4 	addi	r2,r2,-1
 8011038:	10c5203a 	divu	r2,r2,r3
 801103c:	e0ffff17 	ldw	r3,-4(fp)
 8011040:	1885203a 	divu	r2,r3,r2
 8011044:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8011048:	e0bffe17 	ldw	r2,-8(fp)
 801104c:	10002526 	beq	r2,zero,80110e4 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 8011050:	e03ffc15 	stw	zero,-16(fp)
 8011054:	00001406 	br	80110a8 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8011058:	00a00034 	movhi	r2,32768
 801105c:	10bfffc4 	addi	r2,r2,-1
 8011060:	10bfffc4 	addi	r2,r2,-1
 8011064:	103ffe1e 	bne	r2,zero,8011060 <__alt_data_end+0xfc011060>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8011068:	e0fffd17 	ldw	r3,-12(fp)
 801106c:	008003f4 	movhi	r2,15
 8011070:	10909004 	addi	r2,r2,16960
 8011074:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8011078:	0080bef4 	movhi	r2,763
 801107c:	10bc2004 	addi	r2,r2,-3968
 8011080:	10c7203a 	divu	r3,r2,r3
 8011084:	00a00034 	movhi	r2,32768
 8011088:	10bfffc4 	addi	r2,r2,-1
 801108c:	10c5203a 	divu	r2,r2,r3
 8011090:	e0ffff17 	ldw	r3,-4(fp)
 8011094:	1885c83a 	sub	r2,r3,r2
 8011098:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801109c:	e0bffc17 	ldw	r2,-16(fp)
 80110a0:	10800044 	addi	r2,r2,1
 80110a4:	e0bffc15 	stw	r2,-16(fp)
 80110a8:	e0fffc17 	ldw	r3,-16(fp)
 80110ac:	e0bffe17 	ldw	r2,-8(fp)
 80110b0:	18bfe916 	blt	r3,r2,8011058 <__alt_data_end+0xfc011058>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80110b4:	e0fffd17 	ldw	r3,-12(fp)
 80110b8:	008003f4 	movhi	r2,15
 80110bc:	10909004 	addi	r2,r2,16960
 80110c0:	1887383a 	mul	r3,r3,r2
 80110c4:	0080bef4 	movhi	r2,763
 80110c8:	10bc2004 	addi	r2,r2,-3968
 80110cc:	10c7203a 	divu	r3,r2,r3
 80110d0:	e0bfff17 	ldw	r2,-4(fp)
 80110d4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80110d8:	10bfffc4 	addi	r2,r2,-1
 80110dc:	103ffe1e 	bne	r2,zero,80110d8 <__alt_data_end+0xfc0110d8>
 80110e0:	00000b06 	br	8011110 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80110e4:	e0fffd17 	ldw	r3,-12(fp)
 80110e8:	008003f4 	movhi	r2,15
 80110ec:	10909004 	addi	r2,r2,16960
 80110f0:	1887383a 	mul	r3,r3,r2
 80110f4:	0080bef4 	movhi	r2,763
 80110f8:	10bc2004 	addi	r2,r2,-3968
 80110fc:	10c7203a 	divu	r3,r2,r3
 8011100:	e0bfff17 	ldw	r2,-4(fp)
 8011104:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8011108:	10bfffc4 	addi	r2,r2,-1
 801110c:	00bffe16 	blt	zero,r2,8011108 <__alt_data_end+0xfc011108>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8011110:	0005883a 	mov	r2,zero
}
 8011114:	e037883a 	mov	sp,fp
 8011118:	df000017 	ldw	fp,0(sp)
 801111c:	dec00104 	addi	sp,sp,4
 8011120:	f800283a 	ret

08011124 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8011124:	deffff04 	addi	sp,sp,-4
 8011128:	df000015 	stw	fp,0(sp)
 801112c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8011130:	e037883a 	mov	sp,fp
 8011134:	df000017 	ldw	fp,0(sp)
 8011138:	dec00104 	addi	sp,sp,4
 801113c:	f800283a 	ret

08011140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011140:	defffe04 	addi	sp,sp,-8
 8011144:	dfc00115 	stw	ra,4(sp)
 8011148:	df000015 	stw	fp,0(sp)
 801114c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011150:	008200b4 	movhi	r2,2050
 8011154:	10baa804 	addi	r2,r2,-5472
 8011158:	10800017 	ldw	r2,0(r2)
 801115c:	10000526 	beq	r2,zero,8011174 <alt_get_errno+0x34>
 8011160:	008200b4 	movhi	r2,2050
 8011164:	10baa804 	addi	r2,r2,-5472
 8011168:	10800017 	ldw	r2,0(r2)
 801116c:	103ee83a 	callr	r2
 8011170:	00000206 	br	801117c <alt_get_errno+0x3c>
 8011174:	008200b4 	movhi	r2,2050
 8011178:	10817004 	addi	r2,r2,1472
}
 801117c:	e037883a 	mov	sp,fp
 8011180:	dfc00117 	ldw	ra,4(sp)
 8011184:	df000017 	ldw	fp,0(sp)
 8011188:	dec00204 	addi	sp,sp,8
 801118c:	f800283a 	ret

08011190 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8011190:	defffa04 	addi	sp,sp,-24
 8011194:	dfc00515 	stw	ra,20(sp)
 8011198:	df000415 	stw	fp,16(sp)
 801119c:	df000404 	addi	fp,sp,16
 80111a0:	e13ffe15 	stw	r4,-8(fp)
 80111a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80111a8:	e0bffe17 	ldw	r2,-8(fp)
 80111ac:	10000326 	beq	r2,zero,80111bc <alt_dev_llist_insert+0x2c>
 80111b0:	e0bffe17 	ldw	r2,-8(fp)
 80111b4:	10800217 	ldw	r2,8(r2)
 80111b8:	1000061e 	bne	r2,zero,80111d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80111bc:	80111400 	call	8011140 <alt_get_errno>
 80111c0:	1007883a 	mov	r3,r2
 80111c4:	00800584 	movi	r2,22
 80111c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80111cc:	00bffa84 	movi	r2,-22
 80111d0:	00001306 	br	8011220 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80111d4:	e0bffe17 	ldw	r2,-8(fp)
 80111d8:	e0ffff17 	ldw	r3,-4(fp)
 80111dc:	e0fffc15 	stw	r3,-16(fp)
 80111e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80111e4:	e0bffd17 	ldw	r2,-12(fp)
 80111e8:	e0fffc17 	ldw	r3,-16(fp)
 80111ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80111f0:	e0bffc17 	ldw	r2,-16(fp)
 80111f4:	10c00017 	ldw	r3,0(r2)
 80111f8:	e0bffd17 	ldw	r2,-12(fp)
 80111fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8011200:	e0bffc17 	ldw	r2,-16(fp)
 8011204:	10800017 	ldw	r2,0(r2)
 8011208:	e0fffd17 	ldw	r3,-12(fp)
 801120c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011210:	e0bffc17 	ldw	r2,-16(fp)
 8011214:	e0fffd17 	ldw	r3,-12(fp)
 8011218:	10c00015 	stw	r3,0(r2)

  return 0;  
 801121c:	0005883a 	mov	r2,zero
}
 8011220:	e037883a 	mov	sp,fp
 8011224:	dfc00117 	ldw	ra,4(sp)
 8011228:	df000017 	ldw	fp,0(sp)
 801122c:	dec00204 	addi	sp,sp,8
 8011230:	f800283a 	ret

08011234 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8011234:	defffd04 	addi	sp,sp,-12
 8011238:	dfc00215 	stw	ra,8(sp)
 801123c:	df000115 	stw	fp,4(sp)
 8011240:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011244:	00820074 	movhi	r2,2049
 8011248:	10887604 	addi	r2,r2,8664
 801124c:	e0bfff15 	stw	r2,-4(fp)
 8011250:	00000606 	br	801126c <_do_ctors+0x38>
        (*ctor) (); 
 8011254:	e0bfff17 	ldw	r2,-4(fp)
 8011258:	10800017 	ldw	r2,0(r2)
 801125c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011260:	e0bfff17 	ldw	r2,-4(fp)
 8011264:	10bfff04 	addi	r2,r2,-4
 8011268:	e0bfff15 	stw	r2,-4(fp)
 801126c:	e0ffff17 	ldw	r3,-4(fp)
 8011270:	00820074 	movhi	r2,2049
 8011274:	10887704 	addi	r2,r2,8668
 8011278:	18bff62e 	bgeu	r3,r2,8011254 <__alt_data_end+0xfc011254>
        (*ctor) (); 
}
 801127c:	e037883a 	mov	sp,fp
 8011280:	dfc00117 	ldw	ra,4(sp)
 8011284:	df000017 	ldw	fp,0(sp)
 8011288:	dec00204 	addi	sp,sp,8
 801128c:	f800283a 	ret

08011290 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8011290:	defffd04 	addi	sp,sp,-12
 8011294:	dfc00215 	stw	ra,8(sp)
 8011298:	df000115 	stw	fp,4(sp)
 801129c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80112a0:	00820074 	movhi	r2,2049
 80112a4:	10887604 	addi	r2,r2,8664
 80112a8:	e0bfff15 	stw	r2,-4(fp)
 80112ac:	00000606 	br	80112c8 <_do_dtors+0x38>
        (*dtor) (); 
 80112b0:	e0bfff17 	ldw	r2,-4(fp)
 80112b4:	10800017 	ldw	r2,0(r2)
 80112b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80112bc:	e0bfff17 	ldw	r2,-4(fp)
 80112c0:	10bfff04 	addi	r2,r2,-4
 80112c4:	e0bfff15 	stw	r2,-4(fp)
 80112c8:	e0ffff17 	ldw	r3,-4(fp)
 80112cc:	00820074 	movhi	r2,2049
 80112d0:	10887704 	addi	r2,r2,8668
 80112d4:	18bff62e 	bgeu	r3,r2,80112b0 <__alt_data_end+0xfc0112b0>
        (*dtor) (); 
}
 80112d8:	e037883a 	mov	sp,fp
 80112dc:	dfc00117 	ldw	ra,4(sp)
 80112e0:	df000017 	ldw	fp,0(sp)
 80112e4:	dec00204 	addi	sp,sp,8
 80112e8:	f800283a 	ret

080112ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80112ec:	defffe04 	addi	sp,sp,-8
 80112f0:	dfc00115 	stw	ra,4(sp)
 80112f4:	df000015 	stw	fp,0(sp)
 80112f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80112fc:	0009883a 	mov	r4,zero
 8011300:	01440004 	movi	r5,4096
 8011304:	8011dac0 	call	8011dac <alt_icache_flush>
#endif
}
 8011308:	e037883a 	mov	sp,fp
 801130c:	dfc00117 	ldw	ra,4(sp)
 8011310:	df000017 	ldw	fp,0(sp)
 8011314:	dec00204 	addi	sp,sp,8
 8011318:	f800283a 	ret

0801131c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801131c:	defff904 	addi	sp,sp,-28
 8011320:	dfc00615 	stw	ra,24(sp)
 8011324:	df000515 	stw	fp,20(sp)
 8011328:	df000504 	addi	fp,sp,20
 801132c:	e13ffc15 	stw	r4,-16(fp)
 8011330:	e17ffd15 	stw	r5,-12(fp)
 8011334:	e1bffe15 	stw	r6,-8(fp)
 8011338:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801133c:	e0800217 	ldw	r2,8(fp)
 8011340:	d8800015 	stw	r2,0(sp)
 8011344:	e13ffc17 	ldw	r4,-16(fp)
 8011348:	e17ffd17 	ldw	r5,-12(fp)
 801134c:	e1bffe17 	ldw	r6,-8(fp)
 8011350:	e1ffff17 	ldw	r7,-4(fp)
 8011354:	80114fc0 	call	80114fc <alt_iic_isr_register>
}  
 8011358:	e037883a 	mov	sp,fp
 801135c:	dfc00117 	ldw	ra,4(sp)
 8011360:	df000017 	ldw	fp,0(sp)
 8011364:	dec00204 	addi	sp,sp,8
 8011368:	f800283a 	ret

0801136c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801136c:	defff904 	addi	sp,sp,-28
 8011370:	df000615 	stw	fp,24(sp)
 8011374:	df000604 	addi	fp,sp,24
 8011378:	e13ffe15 	stw	r4,-8(fp)
 801137c:	e17fff15 	stw	r5,-4(fp)
 8011380:	e0bfff17 	ldw	r2,-4(fp)
 8011384:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011388:	0005303a 	rdctl	r2,status
 801138c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011390:	e0fffb17 	ldw	r3,-20(fp)
 8011394:	00bfff84 	movi	r2,-2
 8011398:	1884703a 	and	r2,r3,r2
 801139c:	1001703a 	wrctl	status,r2
  
  return context;
 80113a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80113a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80113a8:	e0bffa17 	ldw	r2,-24(fp)
 80113ac:	00c00044 	movi	r3,1
 80113b0:	1884983a 	sll	r2,r3,r2
 80113b4:	1007883a 	mov	r3,r2
 80113b8:	008200b4 	movhi	r2,2050
 80113bc:	10817404 	addi	r2,r2,1488
 80113c0:	10800017 	ldw	r2,0(r2)
 80113c4:	1886b03a 	or	r3,r3,r2
 80113c8:	008200b4 	movhi	r2,2050
 80113cc:	10817404 	addi	r2,r2,1488
 80113d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80113d4:	008200b4 	movhi	r2,2050
 80113d8:	10817404 	addi	r2,r2,1488
 80113dc:	10800017 	ldw	r2,0(r2)
 80113e0:	100170fa 	wrctl	ienable,r2
 80113e4:	e0bffc17 	ldw	r2,-16(fp)
 80113e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80113ec:	e0bffd17 	ldw	r2,-12(fp)
 80113f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80113f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80113f8:	0001883a 	nop
}
 80113fc:	e037883a 	mov	sp,fp
 8011400:	df000017 	ldw	fp,0(sp)
 8011404:	dec00104 	addi	sp,sp,4
 8011408:	f800283a 	ret

0801140c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801140c:	defff904 	addi	sp,sp,-28
 8011410:	df000615 	stw	fp,24(sp)
 8011414:	df000604 	addi	fp,sp,24
 8011418:	e13ffe15 	stw	r4,-8(fp)
 801141c:	e17fff15 	stw	r5,-4(fp)
 8011420:	e0bfff17 	ldw	r2,-4(fp)
 8011424:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011428:	0005303a 	rdctl	r2,status
 801142c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011430:	e0fffb17 	ldw	r3,-20(fp)
 8011434:	00bfff84 	movi	r2,-2
 8011438:	1884703a 	and	r2,r3,r2
 801143c:	1001703a 	wrctl	status,r2
  
  return context;
 8011440:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8011444:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8011448:	e0bffa17 	ldw	r2,-24(fp)
 801144c:	00c00044 	movi	r3,1
 8011450:	1884983a 	sll	r2,r3,r2
 8011454:	0084303a 	nor	r2,zero,r2
 8011458:	1007883a 	mov	r3,r2
 801145c:	008200b4 	movhi	r2,2050
 8011460:	10817404 	addi	r2,r2,1488
 8011464:	10800017 	ldw	r2,0(r2)
 8011468:	1886703a 	and	r3,r3,r2
 801146c:	008200b4 	movhi	r2,2050
 8011470:	10817404 	addi	r2,r2,1488
 8011474:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011478:	008200b4 	movhi	r2,2050
 801147c:	10817404 	addi	r2,r2,1488
 8011480:	10800017 	ldw	r2,0(r2)
 8011484:	100170fa 	wrctl	ienable,r2
 8011488:	e0bffc17 	ldw	r2,-16(fp)
 801148c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011490:	e0bffd17 	ldw	r2,-12(fp)
 8011494:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8011498:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801149c:	0001883a 	nop
}
 80114a0:	e037883a 	mov	sp,fp
 80114a4:	df000017 	ldw	fp,0(sp)
 80114a8:	dec00104 	addi	sp,sp,4
 80114ac:	f800283a 	ret

080114b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80114b0:	defffc04 	addi	sp,sp,-16
 80114b4:	df000315 	stw	fp,12(sp)
 80114b8:	df000304 	addi	fp,sp,12
 80114bc:	e13ffe15 	stw	r4,-8(fp)
 80114c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80114c4:	000530fa 	rdctl	r2,ienable
 80114c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80114cc:	e0bfff17 	ldw	r2,-4(fp)
 80114d0:	00c00044 	movi	r3,1
 80114d4:	1884983a 	sll	r2,r3,r2
 80114d8:	1007883a 	mov	r3,r2
 80114dc:	e0bffd17 	ldw	r2,-12(fp)
 80114e0:	1884703a 	and	r2,r3,r2
 80114e4:	1004c03a 	cmpne	r2,r2,zero
 80114e8:	10803fcc 	andi	r2,r2,255
}
 80114ec:	e037883a 	mov	sp,fp
 80114f0:	df000017 	ldw	fp,0(sp)
 80114f4:	dec00104 	addi	sp,sp,4
 80114f8:	f800283a 	ret

080114fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80114fc:	defff504 	addi	sp,sp,-44
 8011500:	dfc00a15 	stw	ra,40(sp)
 8011504:	df000915 	stw	fp,36(sp)
 8011508:	df000904 	addi	fp,sp,36
 801150c:	e13ffc15 	stw	r4,-16(fp)
 8011510:	e17ffd15 	stw	r5,-12(fp)
 8011514:	e1bffe15 	stw	r6,-8(fp)
 8011518:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801151c:	00bffa84 	movi	r2,-22
 8011520:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8011524:	e0bffd17 	ldw	r2,-12(fp)
 8011528:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801152c:	e0bff817 	ldw	r2,-32(fp)
 8011530:	10800808 	cmpgei	r2,r2,32
 8011534:	1000271e 	bne	r2,zero,80115d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011538:	0005303a 	rdctl	r2,status
 801153c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011540:	e0fffa17 	ldw	r3,-24(fp)
 8011544:	00bfff84 	movi	r2,-2
 8011548:	1884703a 	and	r2,r3,r2
 801154c:	1001703a 	wrctl	status,r2
  
  return context;
 8011550:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8011554:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8011558:	008200b4 	movhi	r2,2050
 801155c:	1081a904 	addi	r2,r2,1700
 8011560:	e0fff817 	ldw	r3,-32(fp)
 8011564:	180690fa 	slli	r3,r3,3
 8011568:	10c5883a 	add	r2,r2,r3
 801156c:	e0fffe17 	ldw	r3,-8(fp)
 8011570:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8011574:	008200b4 	movhi	r2,2050
 8011578:	1081a904 	addi	r2,r2,1700
 801157c:	e0fff817 	ldw	r3,-32(fp)
 8011580:	180690fa 	slli	r3,r3,3
 8011584:	10c5883a 	add	r2,r2,r3
 8011588:	10800104 	addi	r2,r2,4
 801158c:	e0ffff17 	ldw	r3,-4(fp)
 8011590:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8011594:	e0bffe17 	ldw	r2,-8(fp)
 8011598:	10000526 	beq	r2,zero,80115b0 <alt_iic_isr_register+0xb4>
 801159c:	e0bff817 	ldw	r2,-32(fp)
 80115a0:	e13ffc17 	ldw	r4,-16(fp)
 80115a4:	100b883a 	mov	r5,r2
 80115a8:	801136c0 	call	801136c <alt_ic_irq_enable>
 80115ac:	00000406 	br	80115c0 <alt_iic_isr_register+0xc4>
 80115b0:	e0bff817 	ldw	r2,-32(fp)
 80115b4:	e13ffc17 	ldw	r4,-16(fp)
 80115b8:	100b883a 	mov	r5,r2
 80115bc:	801140c0 	call	801140c <alt_ic_irq_disable>
 80115c0:	e0bff715 	stw	r2,-36(fp)
 80115c4:	e0bff917 	ldw	r2,-28(fp)
 80115c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80115cc:	e0bffb17 	ldw	r2,-20(fp)
 80115d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80115d4:	e0bff717 	ldw	r2,-36(fp)
}
 80115d8:	e037883a 	mov	sp,fp
 80115dc:	dfc00117 	ldw	ra,4(sp)
 80115e0:	df000017 	ldw	fp,0(sp)
 80115e4:	dec00204 	addi	sp,sp,8
 80115e8:	f800283a 	ret

080115ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80115ec:	defff904 	addi	sp,sp,-28
 80115f0:	dfc00615 	stw	ra,24(sp)
 80115f4:	df000515 	stw	fp,20(sp)
 80115f8:	df000504 	addi	fp,sp,20
 80115fc:	e13ffc15 	stw	r4,-16(fp)
 8011600:	e17ffd15 	stw	r5,-12(fp)
 8011604:	e1bffe15 	stw	r6,-8(fp)
 8011608:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 801160c:	e13ffd17 	ldw	r4,-12(fp)
 8011610:	e17ffe17 	ldw	r5,-8(fp)
 8011614:	e1bfff17 	ldw	r6,-4(fp)
 8011618:	80118400 	call	8011840 <open>
 801161c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8011620:	e0bffb17 	ldw	r2,-20(fp)
 8011624:	10001c16 	blt	r2,zero,8011698 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8011628:	008200b4 	movhi	r2,2050
 801162c:	10b62404 	addi	r2,r2,-10096
 8011630:	e0fffb17 	ldw	r3,-20(fp)
 8011634:	18c00324 	muli	r3,r3,12
 8011638:	10c5883a 	add	r2,r2,r3
 801163c:	10c00017 	ldw	r3,0(r2)
 8011640:	e0bffc17 	ldw	r2,-16(fp)
 8011644:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8011648:	008200b4 	movhi	r2,2050
 801164c:	10b62404 	addi	r2,r2,-10096
 8011650:	e0fffb17 	ldw	r3,-20(fp)
 8011654:	18c00324 	muli	r3,r3,12
 8011658:	10c5883a 	add	r2,r2,r3
 801165c:	10800104 	addi	r2,r2,4
 8011660:	10c00017 	ldw	r3,0(r2)
 8011664:	e0bffc17 	ldw	r2,-16(fp)
 8011668:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801166c:	008200b4 	movhi	r2,2050
 8011670:	10b62404 	addi	r2,r2,-10096
 8011674:	e0fffb17 	ldw	r3,-20(fp)
 8011678:	18c00324 	muli	r3,r3,12
 801167c:	10c5883a 	add	r2,r2,r3
 8011680:	10800204 	addi	r2,r2,8
 8011684:	10c00017 	ldw	r3,0(r2)
 8011688:	e0bffc17 	ldw	r2,-16(fp)
 801168c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8011690:	e13ffb17 	ldw	r4,-20(fp)
 8011694:	80100280 	call	8010028 <alt_release_fd>
  }
} 
 8011698:	e037883a 	mov	sp,fp
 801169c:	dfc00117 	ldw	ra,4(sp)
 80116a0:	df000017 	ldw	fp,0(sp)
 80116a4:	dec00204 	addi	sp,sp,8
 80116a8:	f800283a 	ret

080116ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80116ac:	defffb04 	addi	sp,sp,-20
 80116b0:	dfc00415 	stw	ra,16(sp)
 80116b4:	df000315 	stw	fp,12(sp)
 80116b8:	df000304 	addi	fp,sp,12
 80116bc:	e13ffd15 	stw	r4,-12(fp)
 80116c0:	e17ffe15 	stw	r5,-8(fp)
 80116c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80116c8:	010200b4 	movhi	r4,2050
 80116cc:	21362704 	addi	r4,r4,-10084
 80116d0:	e17ffd17 	ldw	r5,-12(fp)
 80116d4:	01800044 	movi	r6,1
 80116d8:	01c07fc4 	movi	r7,511
 80116dc:	80115ec0 	call	80115ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80116e0:	010200b4 	movhi	r4,2050
 80116e4:	21362404 	addi	r4,r4,-10096
 80116e8:	e17ffe17 	ldw	r5,-8(fp)
 80116ec:	000d883a 	mov	r6,zero
 80116f0:	01c07fc4 	movi	r7,511
 80116f4:	80115ec0 	call	80115ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80116f8:	010200b4 	movhi	r4,2050
 80116fc:	21362a04 	addi	r4,r4,-10072
 8011700:	e17fff17 	ldw	r5,-4(fp)
 8011704:	01800044 	movi	r6,1
 8011708:	01c07fc4 	movi	r7,511
 801170c:	80115ec0 	call	80115ec <alt_open_fd>
}  
 8011710:	e037883a 	mov	sp,fp
 8011714:	dfc00117 	ldw	ra,4(sp)
 8011718:	df000017 	ldw	fp,0(sp)
 801171c:	dec00204 	addi	sp,sp,8
 8011720:	f800283a 	ret

08011724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011724:	defffe04 	addi	sp,sp,-8
 8011728:	dfc00115 	stw	ra,4(sp)
 801172c:	df000015 	stw	fp,0(sp)
 8011730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011734:	008200b4 	movhi	r2,2050
 8011738:	10baa804 	addi	r2,r2,-5472
 801173c:	10800017 	ldw	r2,0(r2)
 8011740:	10000526 	beq	r2,zero,8011758 <alt_get_errno+0x34>
 8011744:	008200b4 	movhi	r2,2050
 8011748:	10baa804 	addi	r2,r2,-5472
 801174c:	10800017 	ldw	r2,0(r2)
 8011750:	103ee83a 	callr	r2
 8011754:	00000206 	br	8011760 <alt_get_errno+0x3c>
 8011758:	008200b4 	movhi	r2,2050
 801175c:	10817004 	addi	r2,r2,1472
}
 8011760:	e037883a 	mov	sp,fp
 8011764:	dfc00117 	ldw	ra,4(sp)
 8011768:	df000017 	ldw	fp,0(sp)
 801176c:	dec00204 	addi	sp,sp,8
 8011770:	f800283a 	ret

08011774 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8011774:	defffd04 	addi	sp,sp,-12
 8011778:	df000215 	stw	fp,8(sp)
 801177c:	df000204 	addi	fp,sp,8
 8011780:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8011784:	e0bfff17 	ldw	r2,-4(fp)
 8011788:	10800217 	ldw	r2,8(r2)
 801178c:	10d00034 	orhi	r3,r2,16384
 8011790:	e0bfff17 	ldw	r2,-4(fp)
 8011794:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8011798:	e03ffe15 	stw	zero,-8(fp)
 801179c:	00001d06 	br	8011814 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80117a0:	008200b4 	movhi	r2,2050
 80117a4:	10b62404 	addi	r2,r2,-10096
 80117a8:	e0fffe17 	ldw	r3,-8(fp)
 80117ac:	18c00324 	muli	r3,r3,12
 80117b0:	10c5883a 	add	r2,r2,r3
 80117b4:	10c00017 	ldw	r3,0(r2)
 80117b8:	e0bfff17 	ldw	r2,-4(fp)
 80117bc:	10800017 	ldw	r2,0(r2)
 80117c0:	1880111e 	bne	r3,r2,8011808 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80117c4:	008200b4 	movhi	r2,2050
 80117c8:	10b62404 	addi	r2,r2,-10096
 80117cc:	e0fffe17 	ldw	r3,-8(fp)
 80117d0:	18c00324 	muli	r3,r3,12
 80117d4:	10c5883a 	add	r2,r2,r3
 80117d8:	10800204 	addi	r2,r2,8
 80117dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80117e0:	1000090e 	bge	r2,zero,8011808 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80117e4:	e0bffe17 	ldw	r2,-8(fp)
 80117e8:	10c00324 	muli	r3,r2,12
 80117ec:	008200b4 	movhi	r2,2050
 80117f0:	10b62404 	addi	r2,r2,-10096
 80117f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80117f8:	e0bfff17 	ldw	r2,-4(fp)
 80117fc:	18800226 	beq	r3,r2,8011808 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8011800:	00bffcc4 	movi	r2,-13
 8011804:	00000a06 	br	8011830 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8011808:	e0bffe17 	ldw	r2,-8(fp)
 801180c:	10800044 	addi	r2,r2,1
 8011810:	e0bffe15 	stw	r2,-8(fp)
 8011814:	008200b4 	movhi	r2,2050
 8011818:	10baa704 	addi	r2,r2,-5476
 801181c:	10800017 	ldw	r2,0(r2)
 8011820:	1007883a 	mov	r3,r2
 8011824:	e0bffe17 	ldw	r2,-8(fp)
 8011828:	18bfdd2e 	bgeu	r3,r2,80117a0 <__alt_data_end+0xfc0117a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801182c:	0005883a 	mov	r2,zero
}
 8011830:	e037883a 	mov	sp,fp
 8011834:	df000017 	ldw	fp,0(sp)
 8011838:	dec00104 	addi	sp,sp,4
 801183c:	f800283a 	ret

08011840 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8011840:	defff604 	addi	sp,sp,-40
 8011844:	dfc00915 	stw	ra,36(sp)
 8011848:	df000815 	stw	fp,32(sp)
 801184c:	df000804 	addi	fp,sp,32
 8011850:	e13ffd15 	stw	r4,-12(fp)
 8011854:	e17ffe15 	stw	r5,-8(fp)
 8011858:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801185c:	00bfffc4 	movi	r2,-1
 8011860:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8011864:	00bffb44 	movi	r2,-19
 8011868:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801186c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8011870:	e13ffd17 	ldw	r4,-12(fp)
 8011874:	014200b4 	movhi	r5,2050
 8011878:	297aa504 	addi	r5,r5,-5484
 801187c:	8011b540 	call	8011b54 <alt_find_dev>
 8011880:	e0bff815 	stw	r2,-32(fp)
 8011884:	e0bff817 	ldw	r2,-32(fp)
 8011888:	1000051e 	bne	r2,zero,80118a0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801188c:	e13ffd17 	ldw	r4,-12(fp)
 8011890:	8011be40 	call	8011be4 <alt_find_file>
 8011894:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8011898:	00800044 	movi	r2,1
 801189c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80118a0:	e0bff817 	ldw	r2,-32(fp)
 80118a4:	10002926 	beq	r2,zero,801194c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80118a8:	e13ff817 	ldw	r4,-32(fp)
 80118ac:	8011cf80 	call	8011cf8 <alt_get_fd>
 80118b0:	e0bff915 	stw	r2,-28(fp)
 80118b4:	e0bff917 	ldw	r2,-28(fp)
 80118b8:	1000030e 	bge	r2,zero,80118c8 <open+0x88>
    {
      status = index;
 80118bc:	e0bff917 	ldw	r2,-28(fp)
 80118c0:	e0bffa15 	stw	r2,-24(fp)
 80118c4:	00002306 	br	8011954 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 80118c8:	e0bff917 	ldw	r2,-28(fp)
 80118cc:	10c00324 	muli	r3,r2,12
 80118d0:	008200b4 	movhi	r2,2050
 80118d4:	10b62404 	addi	r2,r2,-10096
 80118d8:	1885883a 	add	r2,r3,r2
 80118dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80118e0:	e0fffe17 	ldw	r3,-8(fp)
 80118e4:	00900034 	movhi	r2,16384
 80118e8:	10bfffc4 	addi	r2,r2,-1
 80118ec:	1886703a 	and	r3,r3,r2
 80118f0:	e0bffc17 	ldw	r2,-16(fp)
 80118f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80118f8:	e0bffb17 	ldw	r2,-20(fp)
 80118fc:	1000051e 	bne	r2,zero,8011914 <open+0xd4>
 8011900:	e13ffc17 	ldw	r4,-16(fp)
 8011904:	80117740 	call	8011774 <alt_file_locked>
 8011908:	e0bffa15 	stw	r2,-24(fp)
 801190c:	e0bffa17 	ldw	r2,-24(fp)
 8011910:	10001016 	blt	r2,zero,8011954 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8011914:	e0bff817 	ldw	r2,-32(fp)
 8011918:	10800317 	ldw	r2,12(r2)
 801191c:	10000826 	beq	r2,zero,8011940 <open+0x100>
 8011920:	e0bff817 	ldw	r2,-32(fp)
 8011924:	10800317 	ldw	r2,12(r2)
 8011928:	e13ffc17 	ldw	r4,-16(fp)
 801192c:	e17ffd17 	ldw	r5,-12(fp)
 8011930:	e1bffe17 	ldw	r6,-8(fp)
 8011934:	e1ffff17 	ldw	r7,-4(fp)
 8011938:	103ee83a 	callr	r2
 801193c:	00000106 	br	8011944 <open+0x104>
 8011940:	0005883a 	mov	r2,zero
 8011944:	e0bffa15 	stw	r2,-24(fp)
 8011948:	00000206 	br	8011954 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801194c:	00bffb44 	movi	r2,-19
 8011950:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8011954:	e0bffa17 	ldw	r2,-24(fp)
 8011958:	1000090e 	bge	r2,zero,8011980 <open+0x140>
  {
    alt_release_fd (index);  
 801195c:	e13ff917 	ldw	r4,-28(fp)
 8011960:	80100280 	call	8010028 <alt_release_fd>
    ALT_ERRNO = -status;
 8011964:	80117240 	call	8011724 <alt_get_errno>
 8011968:	1007883a 	mov	r3,r2
 801196c:	e0bffa17 	ldw	r2,-24(fp)
 8011970:	0085c83a 	sub	r2,zero,r2
 8011974:	18800015 	stw	r2,0(r3)
    return -1;
 8011978:	00bfffc4 	movi	r2,-1
 801197c:	00000106 	br	8011984 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8011980:	e0bff917 	ldw	r2,-28(fp)
}
 8011984:	e037883a 	mov	sp,fp
 8011988:	dfc00117 	ldw	ra,4(sp)
 801198c:	df000017 	ldw	fp,0(sp)
 8011990:	dec00204 	addi	sp,sp,8
 8011994:	f800283a 	ret

08011998 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8011998:	defffa04 	addi	sp,sp,-24
 801199c:	df000515 	stw	fp,20(sp)
 80119a0:	df000504 	addi	fp,sp,20
 80119a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80119a8:	0005303a 	rdctl	r2,status
 80119ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80119b0:	e0fffc17 	ldw	r3,-16(fp)
 80119b4:	00bfff84 	movi	r2,-2
 80119b8:	1884703a 	and	r2,r3,r2
 80119bc:	1001703a 	wrctl	status,r2
  
  return context;
 80119c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80119c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80119c8:	e0bfff17 	ldw	r2,-4(fp)
 80119cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80119d0:	e0bffd17 	ldw	r2,-12(fp)
 80119d4:	10800017 	ldw	r2,0(r2)
 80119d8:	e0fffd17 	ldw	r3,-12(fp)
 80119dc:	18c00117 	ldw	r3,4(r3)
 80119e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80119e4:	e0bffd17 	ldw	r2,-12(fp)
 80119e8:	10800117 	ldw	r2,4(r2)
 80119ec:	e0fffd17 	ldw	r3,-12(fp)
 80119f0:	18c00017 	ldw	r3,0(r3)
 80119f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80119f8:	e0bffd17 	ldw	r2,-12(fp)
 80119fc:	e0fffd17 	ldw	r3,-12(fp)
 8011a00:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8011a04:	e0bffd17 	ldw	r2,-12(fp)
 8011a08:	e0fffd17 	ldw	r3,-12(fp)
 8011a0c:	10c00015 	stw	r3,0(r2)
 8011a10:	e0bffb17 	ldw	r2,-20(fp)
 8011a14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011a18:	e0bffe17 	ldw	r2,-8(fp)
 8011a1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8011a20:	e037883a 	mov	sp,fp
 8011a24:	df000017 	ldw	fp,0(sp)
 8011a28:	dec00104 	addi	sp,sp,4
 8011a2c:	f800283a 	ret

08011a30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8011a30:	defffb04 	addi	sp,sp,-20
 8011a34:	dfc00415 	stw	ra,16(sp)
 8011a38:	df000315 	stw	fp,12(sp)
 8011a3c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8011a40:	d0a00f17 	ldw	r2,-32708(gp)
 8011a44:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8011a48:	d0a6da17 	ldw	r2,-25752(gp)
 8011a4c:	10800044 	addi	r2,r2,1
 8011a50:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011a54:	00002e06 	br	8011b10 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8011a58:	e0bffd17 	ldw	r2,-12(fp)
 8011a5c:	10800017 	ldw	r2,0(r2)
 8011a60:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8011a64:	e0bffd17 	ldw	r2,-12(fp)
 8011a68:	10800403 	ldbu	r2,16(r2)
 8011a6c:	10803fcc 	andi	r2,r2,255
 8011a70:	10000426 	beq	r2,zero,8011a84 <alt_tick+0x54>
 8011a74:	d0a6da17 	ldw	r2,-25752(gp)
 8011a78:	1000021e 	bne	r2,zero,8011a84 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8011a7c:	e0bffd17 	ldw	r2,-12(fp)
 8011a80:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8011a84:	e0bffd17 	ldw	r2,-12(fp)
 8011a88:	10800217 	ldw	r2,8(r2)
 8011a8c:	d0e6da17 	ldw	r3,-25752(gp)
 8011a90:	18801d36 	bltu	r3,r2,8011b08 <alt_tick+0xd8>
 8011a94:	e0bffd17 	ldw	r2,-12(fp)
 8011a98:	10800403 	ldbu	r2,16(r2)
 8011a9c:	10803fcc 	andi	r2,r2,255
 8011aa0:	1000191e 	bne	r2,zero,8011b08 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8011aa4:	e0bffd17 	ldw	r2,-12(fp)
 8011aa8:	10800317 	ldw	r2,12(r2)
 8011aac:	e0fffd17 	ldw	r3,-12(fp)
 8011ab0:	18c00517 	ldw	r3,20(r3)
 8011ab4:	1809883a 	mov	r4,r3
 8011ab8:	103ee83a 	callr	r2
 8011abc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8011ac0:	e0bfff17 	ldw	r2,-4(fp)
 8011ac4:	1000031e 	bne	r2,zero,8011ad4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8011ac8:	e13ffd17 	ldw	r4,-12(fp)
 8011acc:	80119980 	call	8011998 <alt_alarm_stop>
 8011ad0:	00000d06 	br	8011b08 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8011ad4:	e0bffd17 	ldw	r2,-12(fp)
 8011ad8:	10c00217 	ldw	r3,8(r2)
 8011adc:	e0bfff17 	ldw	r2,-4(fp)
 8011ae0:	1887883a 	add	r3,r3,r2
 8011ae4:	e0bffd17 	ldw	r2,-12(fp)
 8011ae8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8011aec:	e0bffd17 	ldw	r2,-12(fp)
 8011af0:	10c00217 	ldw	r3,8(r2)
 8011af4:	d0a6da17 	ldw	r2,-25752(gp)
 8011af8:	1880032e 	bgeu	r3,r2,8011b08 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8011afc:	e0bffd17 	ldw	r2,-12(fp)
 8011b00:	00c00044 	movi	r3,1
 8011b04:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8011b08:	e0bffe17 	ldw	r2,-8(fp)
 8011b0c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011b10:	e0fffd17 	ldw	r3,-12(fp)
 8011b14:	d0a00f04 	addi	r2,gp,-32708
 8011b18:	18bfcf1e 	bne	r3,r2,8011a58 <__alt_data_end+0xfc011a58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8011b1c:	0001883a 	nop
}
 8011b20:	e037883a 	mov	sp,fp
 8011b24:	dfc00117 	ldw	ra,4(sp)
 8011b28:	df000017 	ldw	fp,0(sp)
 8011b2c:	dec00204 	addi	sp,sp,8
 8011b30:	f800283a 	ret

08011b34 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8011b34:	deffff04 	addi	sp,sp,-4
 8011b38:	df000015 	stw	fp,0(sp)
 8011b3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8011b40:	000170fa 	wrctl	ienable,zero
}
 8011b44:	e037883a 	mov	sp,fp
 8011b48:	df000017 	ldw	fp,0(sp)
 8011b4c:	dec00104 	addi	sp,sp,4
 8011b50:	f800283a 	ret

08011b54 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8011b54:	defffa04 	addi	sp,sp,-24
 8011b58:	dfc00515 	stw	ra,20(sp)
 8011b5c:	df000415 	stw	fp,16(sp)
 8011b60:	df000404 	addi	fp,sp,16
 8011b64:	e13ffe15 	stw	r4,-8(fp)
 8011b68:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8011b6c:	e0bfff17 	ldw	r2,-4(fp)
 8011b70:	10800017 	ldw	r2,0(r2)
 8011b74:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8011b78:	e13ffe17 	ldw	r4,-8(fp)
 8011b7c:	80035640 	call	8003564 <strlen>
 8011b80:	10800044 	addi	r2,r2,1
 8011b84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8011b88:	00000d06 	br	8011bc0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8011b8c:	e0bffc17 	ldw	r2,-16(fp)
 8011b90:	10c00217 	ldw	r3,8(r2)
 8011b94:	e0bffd17 	ldw	r2,-12(fp)
 8011b98:	1809883a 	mov	r4,r3
 8011b9c:	e17ffe17 	ldw	r5,-8(fp)
 8011ba0:	100d883a 	mov	r6,r2
 8011ba4:	8011e840 	call	8011e84 <memcmp>
 8011ba8:	1000021e 	bne	r2,zero,8011bb4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8011bac:	e0bffc17 	ldw	r2,-16(fp)
 8011bb0:	00000706 	br	8011bd0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8011bb4:	e0bffc17 	ldw	r2,-16(fp)
 8011bb8:	10800017 	ldw	r2,0(r2)
 8011bbc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8011bc0:	e0fffc17 	ldw	r3,-16(fp)
 8011bc4:	e0bfff17 	ldw	r2,-4(fp)
 8011bc8:	18bff01e 	bne	r3,r2,8011b8c <__alt_data_end+0xfc011b8c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8011bcc:	0005883a 	mov	r2,zero
}
 8011bd0:	e037883a 	mov	sp,fp
 8011bd4:	dfc00117 	ldw	ra,4(sp)
 8011bd8:	df000017 	ldw	fp,0(sp)
 8011bdc:	dec00204 	addi	sp,sp,8
 8011be0:	f800283a 	ret

08011be4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8011be4:	defffb04 	addi	sp,sp,-20
 8011be8:	dfc00415 	stw	ra,16(sp)
 8011bec:	df000315 	stw	fp,12(sp)
 8011bf0:	df000304 	addi	fp,sp,12
 8011bf4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8011bf8:	008200b4 	movhi	r2,2050
 8011bfc:	10baa304 	addi	r2,r2,-5492
 8011c00:	10800017 	ldw	r2,0(r2)
 8011c04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011c08:	00003106 	br	8011cd0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8011c0c:	e0bffd17 	ldw	r2,-12(fp)
 8011c10:	10800217 	ldw	r2,8(r2)
 8011c14:	1009883a 	mov	r4,r2
 8011c18:	80035640 	call	8003564 <strlen>
 8011c1c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8011c20:	e0bffd17 	ldw	r2,-12(fp)
 8011c24:	10c00217 	ldw	r3,8(r2)
 8011c28:	e0bffe17 	ldw	r2,-8(fp)
 8011c2c:	10bfffc4 	addi	r2,r2,-1
 8011c30:	1885883a 	add	r2,r3,r2
 8011c34:	10800003 	ldbu	r2,0(r2)
 8011c38:	10803fcc 	andi	r2,r2,255
 8011c3c:	1080201c 	xori	r2,r2,128
 8011c40:	10bfe004 	addi	r2,r2,-128
 8011c44:	10800bd8 	cmpnei	r2,r2,47
 8011c48:	1000031e 	bne	r2,zero,8011c58 <alt_find_file+0x74>
    {
      len -= 1;
 8011c4c:	e0bffe17 	ldw	r2,-8(fp)
 8011c50:	10bfffc4 	addi	r2,r2,-1
 8011c54:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011c58:	e0bffe17 	ldw	r2,-8(fp)
 8011c5c:	e0ffff17 	ldw	r3,-4(fp)
 8011c60:	1885883a 	add	r2,r3,r2
 8011c64:	10800003 	ldbu	r2,0(r2)
 8011c68:	10803fcc 	andi	r2,r2,255
 8011c6c:	1080201c 	xori	r2,r2,128
 8011c70:	10bfe004 	addi	r2,r2,-128
 8011c74:	10800be0 	cmpeqi	r2,r2,47
 8011c78:	1000081e 	bne	r2,zero,8011c9c <alt_find_file+0xb8>
 8011c7c:	e0bffe17 	ldw	r2,-8(fp)
 8011c80:	e0ffff17 	ldw	r3,-4(fp)
 8011c84:	1885883a 	add	r2,r3,r2
 8011c88:	10800003 	ldbu	r2,0(r2)
 8011c8c:	10803fcc 	andi	r2,r2,255
 8011c90:	1080201c 	xori	r2,r2,128
 8011c94:	10bfe004 	addi	r2,r2,-128
 8011c98:	10000a1e 	bne	r2,zero,8011cc4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8011c9c:	e0bffd17 	ldw	r2,-12(fp)
 8011ca0:	10c00217 	ldw	r3,8(r2)
 8011ca4:	e0bffe17 	ldw	r2,-8(fp)
 8011ca8:	1809883a 	mov	r4,r3
 8011cac:	e17fff17 	ldw	r5,-4(fp)
 8011cb0:	100d883a 	mov	r6,r2
 8011cb4:	8011e840 	call	8011e84 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011cb8:	1000021e 	bne	r2,zero,8011cc4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8011cbc:	e0bffd17 	ldw	r2,-12(fp)
 8011cc0:	00000806 	br	8011ce4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8011cc4:	e0bffd17 	ldw	r2,-12(fp)
 8011cc8:	10800017 	ldw	r2,0(r2)
 8011ccc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011cd0:	e0fffd17 	ldw	r3,-12(fp)
 8011cd4:	008200b4 	movhi	r2,2050
 8011cd8:	10baa304 	addi	r2,r2,-5492
 8011cdc:	18bfcb1e 	bne	r3,r2,8011c0c <__alt_data_end+0xfc011c0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8011ce0:	0005883a 	mov	r2,zero
}
 8011ce4:	e037883a 	mov	sp,fp
 8011ce8:	dfc00117 	ldw	ra,4(sp)
 8011cec:	df000017 	ldw	fp,0(sp)
 8011cf0:	dec00204 	addi	sp,sp,8
 8011cf4:	f800283a 	ret

08011cf8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8011cf8:	defffc04 	addi	sp,sp,-16
 8011cfc:	df000315 	stw	fp,12(sp)
 8011d00:	df000304 	addi	fp,sp,12
 8011d04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011d08:	00bffa04 	movi	r2,-24
 8011d0c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011d10:	e03ffd15 	stw	zero,-12(fp)
 8011d14:	00001d06 	br	8011d8c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8011d18:	008200b4 	movhi	r2,2050
 8011d1c:	10b62404 	addi	r2,r2,-10096
 8011d20:	e0fffd17 	ldw	r3,-12(fp)
 8011d24:	18c00324 	muli	r3,r3,12
 8011d28:	10c5883a 	add	r2,r2,r3
 8011d2c:	10800017 	ldw	r2,0(r2)
 8011d30:	1000131e 	bne	r2,zero,8011d80 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8011d34:	008200b4 	movhi	r2,2050
 8011d38:	10b62404 	addi	r2,r2,-10096
 8011d3c:	e0fffd17 	ldw	r3,-12(fp)
 8011d40:	18c00324 	muli	r3,r3,12
 8011d44:	10c5883a 	add	r2,r2,r3
 8011d48:	e0ffff17 	ldw	r3,-4(fp)
 8011d4c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8011d50:	008200b4 	movhi	r2,2050
 8011d54:	10baa704 	addi	r2,r2,-5476
 8011d58:	10c00017 	ldw	r3,0(r2)
 8011d5c:	e0bffd17 	ldw	r2,-12(fp)
 8011d60:	1880040e 	bge	r3,r2,8011d74 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8011d64:	008200b4 	movhi	r2,2050
 8011d68:	10baa704 	addi	r2,r2,-5476
 8011d6c:	e0fffd17 	ldw	r3,-12(fp)
 8011d70:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8011d74:	e0bffd17 	ldw	r2,-12(fp)
 8011d78:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8011d7c:	00000606 	br	8011d98 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011d80:	e0bffd17 	ldw	r2,-12(fp)
 8011d84:	10800044 	addi	r2,r2,1
 8011d88:	e0bffd15 	stw	r2,-12(fp)
 8011d8c:	e0bffd17 	ldw	r2,-12(fp)
 8011d90:	10800810 	cmplti	r2,r2,32
 8011d94:	103fe01e 	bne	r2,zero,8011d18 <__alt_data_end+0xfc011d18>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011d98:	e0bffe17 	ldw	r2,-8(fp)
}
 8011d9c:	e037883a 	mov	sp,fp
 8011da0:	df000017 	ldw	fp,0(sp)
 8011da4:	dec00104 	addi	sp,sp,4
 8011da8:	f800283a 	ret

08011dac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8011dac:	defffb04 	addi	sp,sp,-20
 8011db0:	df000415 	stw	fp,16(sp)
 8011db4:	df000404 	addi	fp,sp,16
 8011db8:	e13ffe15 	stw	r4,-8(fp)
 8011dbc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8011dc0:	e0bfff17 	ldw	r2,-4(fp)
 8011dc4:	10840070 	cmpltui	r2,r2,4097
 8011dc8:	1000021e 	bne	r2,zero,8011dd4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8011dcc:	00840004 	movi	r2,4096
 8011dd0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8011dd4:	e0fffe17 	ldw	r3,-8(fp)
 8011dd8:	e0bfff17 	ldw	r2,-4(fp)
 8011ddc:	1885883a 	add	r2,r3,r2
 8011de0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8011de4:	e0bffe17 	ldw	r2,-8(fp)
 8011de8:	e0bffc15 	stw	r2,-16(fp)
 8011dec:	00000506 	br	8011e04 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8011df0:	e0bffc17 	ldw	r2,-16(fp)
 8011df4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8011df8:	e0bffc17 	ldw	r2,-16(fp)
 8011dfc:	10800804 	addi	r2,r2,32
 8011e00:	e0bffc15 	stw	r2,-16(fp)
 8011e04:	e0fffc17 	ldw	r3,-16(fp)
 8011e08:	e0bffd17 	ldw	r2,-12(fp)
 8011e0c:	18bff836 	bltu	r3,r2,8011df0 <__alt_data_end+0xfc011df0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8011e10:	e0bffe17 	ldw	r2,-8(fp)
 8011e14:	108007cc 	andi	r2,r2,31
 8011e18:	10000226 	beq	r2,zero,8011e24 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8011e1c:	e0bffc17 	ldw	r2,-16(fp)
 8011e20:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8011e24:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8011e28:	e037883a 	mov	sp,fp
 8011e2c:	df000017 	ldw	fp,0(sp)
 8011e30:	dec00104 	addi	sp,sp,4
 8011e34:	f800283a 	ret

08011e38 <atexit>:
 8011e38:	200b883a 	mov	r5,r4
 8011e3c:	000d883a 	mov	r6,zero
 8011e40:	0009883a 	mov	r4,zero
 8011e44:	000f883a 	mov	r7,zero
 8011e48:	8011f001 	jmpi	8011f00 <__register_exitproc>

08011e4c <exit>:
 8011e4c:	defffe04 	addi	sp,sp,-8
 8011e50:	000b883a 	mov	r5,zero
 8011e54:	dc000015 	stw	r16,0(sp)
 8011e58:	dfc00115 	stw	ra,4(sp)
 8011e5c:	2021883a 	mov	r16,r4
 8011e60:	80120140 	call	8012014 <__call_exitprocs>
 8011e64:	008200b4 	movhi	r2,2050
 8011e68:	10ba9d04 	addi	r2,r2,-5516
 8011e6c:	11000017 	ldw	r4,0(r2)
 8011e70:	20800f17 	ldw	r2,60(r4)
 8011e74:	10000126 	beq	r2,zero,8011e7c <exit+0x30>
 8011e78:	103ee83a 	callr	r2
 8011e7c:	8009883a 	mov	r4,r16
 8011e80:	80121a80 	call	80121a8 <_exit>

08011e84 <memcmp>:
 8011e84:	01c000c4 	movi	r7,3
 8011e88:	3980192e 	bgeu	r7,r6,8011ef0 <memcmp+0x6c>
 8011e8c:	2144b03a 	or	r2,r4,r5
 8011e90:	11c4703a 	and	r2,r2,r7
 8011e94:	10000f26 	beq	r2,zero,8011ed4 <memcmp+0x50>
 8011e98:	20800003 	ldbu	r2,0(r4)
 8011e9c:	28c00003 	ldbu	r3,0(r5)
 8011ea0:	10c0151e 	bne	r2,r3,8011ef8 <memcmp+0x74>
 8011ea4:	31bfff84 	addi	r6,r6,-2
 8011ea8:	01ffffc4 	movi	r7,-1
 8011eac:	00000406 	br	8011ec0 <memcmp+0x3c>
 8011eb0:	20800003 	ldbu	r2,0(r4)
 8011eb4:	28c00003 	ldbu	r3,0(r5)
 8011eb8:	31bfffc4 	addi	r6,r6,-1
 8011ebc:	10c00e1e 	bne	r2,r3,8011ef8 <memcmp+0x74>
 8011ec0:	21000044 	addi	r4,r4,1
 8011ec4:	29400044 	addi	r5,r5,1
 8011ec8:	31fff91e 	bne	r6,r7,8011eb0 <__alt_data_end+0xfc011eb0>
 8011ecc:	0005883a 	mov	r2,zero
 8011ed0:	f800283a 	ret
 8011ed4:	20c00017 	ldw	r3,0(r4)
 8011ed8:	28800017 	ldw	r2,0(r5)
 8011edc:	1880041e 	bne	r3,r2,8011ef0 <memcmp+0x6c>
 8011ee0:	31bfff04 	addi	r6,r6,-4
 8011ee4:	21000104 	addi	r4,r4,4
 8011ee8:	29400104 	addi	r5,r5,4
 8011eec:	39bff936 	bltu	r7,r6,8011ed4 <__alt_data_end+0xfc011ed4>
 8011ef0:	303fe91e 	bne	r6,zero,8011e98 <__alt_data_end+0xfc011e98>
 8011ef4:	003ff506 	br	8011ecc <__alt_data_end+0xfc011ecc>
 8011ef8:	10c5c83a 	sub	r2,r2,r3
 8011efc:	f800283a 	ret

08011f00 <__register_exitproc>:
 8011f00:	008200b4 	movhi	r2,2050
 8011f04:	defffa04 	addi	sp,sp,-24
 8011f08:	10ba9d04 	addi	r2,r2,-5516
 8011f0c:	dc000315 	stw	r16,12(sp)
 8011f10:	14000017 	ldw	r16,0(r2)
 8011f14:	dc400415 	stw	r17,16(sp)
 8011f18:	dfc00515 	stw	ra,20(sp)
 8011f1c:	80805217 	ldw	r2,328(r16)
 8011f20:	2023883a 	mov	r17,r4
 8011f24:	10003626 	beq	r2,zero,8012000 <__register_exitproc+0x100>
 8011f28:	10c00117 	ldw	r3,4(r2)
 8011f2c:	010007c4 	movi	r4,31
 8011f30:	20c00e16 	blt	r4,r3,8011f6c <__register_exitproc+0x6c>
 8011f34:	1a400044 	addi	r9,r3,1
 8011f38:	8800211e 	bne	r17,zero,8011fc0 <__register_exitproc+0xc0>
 8011f3c:	18c00084 	addi	r3,r3,2
 8011f40:	18c7883a 	add	r3,r3,r3
 8011f44:	18c7883a 	add	r3,r3,r3
 8011f48:	12400115 	stw	r9,4(r2)
 8011f4c:	10c7883a 	add	r3,r2,r3
 8011f50:	19400015 	stw	r5,0(r3)
 8011f54:	0005883a 	mov	r2,zero
 8011f58:	dfc00517 	ldw	ra,20(sp)
 8011f5c:	dc400417 	ldw	r17,16(sp)
 8011f60:	dc000317 	ldw	r16,12(sp)
 8011f64:	dec00604 	addi	sp,sp,24
 8011f68:	f800283a 	ret
 8011f6c:	00800034 	movhi	r2,0
 8011f70:	10800004 	addi	r2,r2,0
 8011f74:	10002526 	beq	r2,zero,801200c <__register_exitproc+0x10c>
 8011f78:	01006404 	movi	r4,400
 8011f7c:	d9400015 	stw	r5,0(sp)
 8011f80:	d9800115 	stw	r6,4(sp)
 8011f84:	d9c00215 	stw	r7,8(sp)
 8011f88:	00000000 	call	0 <__reset-0x8000000>
 8011f8c:	d9400017 	ldw	r5,0(sp)
 8011f90:	d9800117 	ldw	r6,4(sp)
 8011f94:	d9c00217 	ldw	r7,8(sp)
 8011f98:	10001c26 	beq	r2,zero,801200c <__register_exitproc+0x10c>
 8011f9c:	80c05217 	ldw	r3,328(r16)
 8011fa0:	10000115 	stw	zero,4(r2)
 8011fa4:	02400044 	movi	r9,1
 8011fa8:	10c00015 	stw	r3,0(r2)
 8011fac:	80805215 	stw	r2,328(r16)
 8011fb0:	10006215 	stw	zero,392(r2)
 8011fb4:	10006315 	stw	zero,396(r2)
 8011fb8:	0007883a 	mov	r3,zero
 8011fbc:	883fdf26 	beq	r17,zero,8011f3c <__alt_data_end+0xfc011f3c>
 8011fc0:	18d1883a 	add	r8,r3,r3
 8011fc4:	4211883a 	add	r8,r8,r8
 8011fc8:	1211883a 	add	r8,r2,r8
 8011fcc:	41802215 	stw	r6,136(r8)
 8011fd0:	01000044 	movi	r4,1
 8011fd4:	11806217 	ldw	r6,392(r2)
 8011fd8:	20c8983a 	sll	r4,r4,r3
 8011fdc:	310cb03a 	or	r6,r6,r4
 8011fe0:	11806215 	stw	r6,392(r2)
 8011fe4:	41c04215 	stw	r7,264(r8)
 8011fe8:	01800084 	movi	r6,2
 8011fec:	89bfd31e 	bne	r17,r6,8011f3c <__alt_data_end+0xfc011f3c>
 8011ff0:	11806317 	ldw	r6,396(r2)
 8011ff4:	3108b03a 	or	r4,r6,r4
 8011ff8:	11006315 	stw	r4,396(r2)
 8011ffc:	003fcf06 	br	8011f3c <__alt_data_end+0xfc011f3c>
 8012000:	80805304 	addi	r2,r16,332
 8012004:	80805215 	stw	r2,328(r16)
 8012008:	003fc706 	br	8011f28 <__alt_data_end+0xfc011f28>
 801200c:	00bfffc4 	movi	r2,-1
 8012010:	003fd106 	br	8011f58 <__alt_data_end+0xfc011f58>

08012014 <__call_exitprocs>:
 8012014:	008200b4 	movhi	r2,2050
 8012018:	10ba9d04 	addi	r2,r2,-5516
 801201c:	10800017 	ldw	r2,0(r2)
 8012020:	defff404 	addi	sp,sp,-48
 8012024:	dd800815 	stw	r22,32(sp)
 8012028:	d8800015 	stw	r2,0(sp)
 801202c:	10805204 	addi	r2,r2,328
 8012030:	dd000615 	stw	r20,24(sp)
 8012034:	dc800415 	stw	r18,16(sp)
 8012038:	dfc00b15 	stw	ra,44(sp)
 801203c:	df000a15 	stw	fp,40(sp)
 8012040:	ddc00915 	stw	r23,36(sp)
 8012044:	dd400715 	stw	r21,28(sp)
 8012048:	dcc00515 	stw	r19,20(sp)
 801204c:	dc400315 	stw	r17,12(sp)
 8012050:	dc000215 	stw	r16,8(sp)
 8012054:	2025883a 	mov	r18,r4
 8012058:	2829883a 	mov	r20,r5
 801205c:	d8800115 	stw	r2,4(sp)
 8012060:	05bfffc4 	movi	r22,-1
 8012064:	d8800017 	ldw	r2,0(sp)
 8012068:	14c05217 	ldw	r19,328(r2)
 801206c:	98001d26 	beq	r19,zero,80120e4 <__call_exitprocs+0xd0>
 8012070:	dd400117 	ldw	r21,4(sp)
 8012074:	98800117 	ldw	r2,4(r19)
 8012078:	173fffc4 	addi	fp,r2,-1
 801207c:	e0000d16 	blt	fp,zero,80120b4 <__call_exitprocs+0xa0>
 8012080:	14000044 	addi	r16,r2,1
 8012084:	8421883a 	add	r16,r16,r16
 8012088:	8421883a 	add	r16,r16,r16
 801208c:	84402004 	addi	r17,r16,128
 8012090:	9c63883a 	add	r17,r19,r17
 8012094:	9c21883a 	add	r16,r19,r16
 8012098:	a0001e26 	beq	r20,zero,8012114 <__call_exitprocs+0x100>
 801209c:	80804017 	ldw	r2,256(r16)
 80120a0:	15001c26 	beq	r2,r20,8012114 <__call_exitprocs+0x100>
 80120a4:	e73fffc4 	addi	fp,fp,-1
 80120a8:	843fff04 	addi	r16,r16,-4
 80120ac:	8c7fff04 	addi	r17,r17,-4
 80120b0:	e5bff91e 	bne	fp,r22,8012098 <__alt_data_end+0xfc012098>
 80120b4:	00800034 	movhi	r2,0
 80120b8:	10800004 	addi	r2,r2,0
 80120bc:	10000926 	beq	r2,zero,80120e4 <__call_exitprocs+0xd0>
 80120c0:	98800117 	ldw	r2,4(r19)
 80120c4:	1000311e 	bne	r2,zero,801218c <__call_exitprocs+0x178>
 80120c8:	98800017 	ldw	r2,0(r19)
 80120cc:	10003426 	beq	r2,zero,80121a0 <__call_exitprocs+0x18c>
 80120d0:	9809883a 	mov	r4,r19
 80120d4:	a8800015 	stw	r2,0(r21)
 80120d8:	00000000 	call	0 <__reset-0x8000000>
 80120dc:	acc00017 	ldw	r19,0(r21)
 80120e0:	983fe41e 	bne	r19,zero,8012074 <__alt_data_end+0xfc012074>
 80120e4:	dfc00b17 	ldw	ra,44(sp)
 80120e8:	df000a17 	ldw	fp,40(sp)
 80120ec:	ddc00917 	ldw	r23,36(sp)
 80120f0:	dd800817 	ldw	r22,32(sp)
 80120f4:	dd400717 	ldw	r21,28(sp)
 80120f8:	dd000617 	ldw	r20,24(sp)
 80120fc:	dcc00517 	ldw	r19,20(sp)
 8012100:	dc800417 	ldw	r18,16(sp)
 8012104:	dc400317 	ldw	r17,12(sp)
 8012108:	dc000217 	ldw	r16,8(sp)
 801210c:	dec00c04 	addi	sp,sp,48
 8012110:	f800283a 	ret
 8012114:	98800117 	ldw	r2,4(r19)
 8012118:	80c00017 	ldw	r3,0(r16)
 801211c:	10bfffc4 	addi	r2,r2,-1
 8012120:	17001526 	beq	r2,fp,8012178 <__call_exitprocs+0x164>
 8012124:	80000015 	stw	zero,0(r16)
 8012128:	183fde26 	beq	r3,zero,80120a4 <__alt_data_end+0xfc0120a4>
 801212c:	00800044 	movi	r2,1
 8012130:	1708983a 	sll	r4,r2,fp
 8012134:	98806217 	ldw	r2,392(r19)
 8012138:	9dc00117 	ldw	r23,4(r19)
 801213c:	2084703a 	and	r2,r4,r2
 8012140:	1000061e 	bne	r2,zero,801215c <__call_exitprocs+0x148>
 8012144:	183ee83a 	callr	r3
 8012148:	98800117 	ldw	r2,4(r19)
 801214c:	15ffc51e 	bne	r2,r23,8012064 <__alt_data_end+0xfc012064>
 8012150:	a8800017 	ldw	r2,0(r21)
 8012154:	14ffd326 	beq	r2,r19,80120a4 <__alt_data_end+0xfc0120a4>
 8012158:	003fc206 	br	8012064 <__alt_data_end+0xfc012064>
 801215c:	98806317 	ldw	r2,396(r19)
 8012160:	2084703a 	and	r2,r4,r2
 8012164:	1000061e 	bne	r2,zero,8012180 <__call_exitprocs+0x16c>
 8012168:	89400017 	ldw	r5,0(r17)
 801216c:	9009883a 	mov	r4,r18
 8012170:	183ee83a 	callr	r3
 8012174:	003ff406 	br	8012148 <__alt_data_end+0xfc012148>
 8012178:	9f000115 	stw	fp,4(r19)
 801217c:	003fea06 	br	8012128 <__alt_data_end+0xfc012128>
 8012180:	89000017 	ldw	r4,0(r17)
 8012184:	183ee83a 	callr	r3
 8012188:	003fef06 	br	8012148 <__alt_data_end+0xfc012148>
 801218c:	98800017 	ldw	r2,0(r19)
 8012190:	982b883a 	mov	r21,r19
 8012194:	1027883a 	mov	r19,r2
 8012198:	983fb61e 	bne	r19,zero,8012074 <__alt_data_end+0xfc012074>
 801219c:	003fd106 	br	80120e4 <__alt_data_end+0xfc0120e4>
 80121a0:	0005883a 	mov	r2,zero
 80121a4:	003ffa06 	br	8012190 <__alt_data_end+0xfc012190>

080121a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80121a8:	defffd04 	addi	sp,sp,-12
 80121ac:	df000215 	stw	fp,8(sp)
 80121b0:	df000204 	addi	fp,sp,8
 80121b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80121b8:	0001883a 	nop
 80121bc:	e0bfff17 	ldw	r2,-4(fp)
 80121c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80121c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80121c8:	10000226 	beq	r2,zero,80121d4 <_exit+0x2c>
    ALT_SIM_FAIL();
 80121cc:	002af070 	cmpltui	zero,zero,43969
 80121d0:	00000106 	br	80121d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80121d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80121d8:	003fff06 	br	80121d8 <__alt_data_end+0xfc0121d8>
