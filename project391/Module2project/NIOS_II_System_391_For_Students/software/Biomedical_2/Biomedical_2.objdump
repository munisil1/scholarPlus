
Biomedical_2.elf:     file format elf32-littlenios2
Biomedical_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001dcac memsz 0x0001dcac flags r-x
    LOAD off    0x0001eccc vaddr 0x0801dccc paddr 0x0801f868 align 2**12
         filesz 0x00001b9c memsz 0x00001b9c flags rw-
    LOAD off    0x00021404 vaddr 0x08021404 paddr 0x08021404 align 2**12
         filesz 0x00000000 memsz 0x00000218 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012e08  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000ad08  08012fc4  08012fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b9c  0801dccc  0801f868  0001eccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000218  08021404  08021404  00021404  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0802161c  0802161c  00020868  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00020868  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000da0  00000000  00000000  00020890  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026f06  00000000  00000000  00021630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000098f5  00000000  00000000  00048536  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c105  00000000  00000000  00051e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002a44  00000000  00000000  0005df30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003941  00000000  00000000  00060974  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017395  00000000  00000000  000642b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0007b64c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  0007b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00080591  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00080594  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000805a0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000805a1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000805a2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000805ad  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000805b8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000805c3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000082  00000000  00000000  000805ce  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  00080650  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00066321  00000000  00000000  0008519c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08012fc4 l    d  .rodata	00000000 .rodata
0801dccc l    d  .rwdata	00000000 .rwdata
08021404 l    d  .bss	00000000 .bss
0802161c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Biomedical_2_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801d792 l     O .rodata	00000010 zeroes.4181
0801d7a2 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0801d8b3 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
08006650 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080081d0 l     F .text	00000008 __fp_lock
080081d8 l     F .text	00000008 __fp_unlock
080081ec l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801dd20 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0801e164 l     O .rwdata	00000020 lc_ctype_charset
0801e144 l     O .rwdata	00000020 lc_message_charset
0801e184 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0801da54 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800b67c l     F .text	000000fc __sprint_r.part.0
0801db88 l     O .rodata	00000010 blanks.4125
0801db78 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800df98 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
080106c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080107e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08010810 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08010910 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08010a04 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08010ae8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08010cc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801f858 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08010f50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08011098 l     F .text	00000038 alt_dev_reg
0801e76c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08011384 l     F .text	00000204 altera_avalon_jtag_uart_irq
08011588 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08011ba8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08011f28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080123d4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0801250c l     F .text	00000050 alt_get_errno
0801255c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08004100 g     F .text	00000018 putchar
0800ab54 g     F .text	00000074 _mprec_log10
0800ac40 g     F .text	0000008c __any_on
0800d13c g     F .text	00000054 _isatty_r
0801da60 g     O .rodata	00000028 __mprec_tinytens
08003070 g     F .text	00000080 putString_wifi
08010c0c g     F .text	00000078 alt_main
08004118 g     F .text	000000b8 _puts_r
0802151c g     O .bss	00000100 alt_irq
08002a80 g     F .text	0000001c draw_Data
0800d190 g     F .text	0000005c _lseek_r
0800151c g     F .text	00000384 titles_menu
0801f868 g       *ABS*	00000000 __flash_rwdata_start
0801f7e4 g     O .rwdata	00000008 anemiaOk_SpO2
0800f22c g     F .text	00000084 .hidden __eqdf2
08000324 g     F .text	0000008c ProgramPalette
0802161c g       *ABS*	00000000 __alt_heap_start
08000ee4 g     F .text	000000e4 drawFilledRectangle
080040bc g     F .text	0000003c printf
0801325e g     O .rodata	00000a64 Font10x14
0800d248 g     F .text	0000009c _wcrtomb_r
080020a8 g     F .text	00000108 GetPress
0800b574 g     F .text	0000005c __sseek
08008520 g     F .text	00000010 __sinit
0800cb10 g     F .text	00000154 __swbuf_r
08008f98 g     F .text	0000007c _setlocale_r
08002078 g     F .text	00000030 WaitForTouch
0800838c g     F .text	00000064 __sfmoreglue
08010ca4 g     F .text	00000020 __malloc_unlock
08021468 g     O .bss	0000000b okValue_PR
08002960 g     F .text	00000120 button_Pressed
08009ac0 g     F .text	0000015c memmove
08001978 g     F .text	0000023c pulse_title
08008508 g     F .text	00000018 _cleanup
08009d40 g     F .text	000000a8 _Balloc
0800f2b0 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080008e4 g     F .text	000001e4 drawcircle
0800d0e4 g     F .text	00000058 _fstat_r
08021424 g     O .bss	00000004 errno
0800b4f0 g     F .text	00000008 __seofread
0801f7dc g     O .rwdata	00000008 anemic
0802142c g     O .bss	00000004 alt_argv
080277cc g       *ABS*	00000000 _gp
08010f20 g     F .text	00000030 usleep
0801dd08 g     O .rwdata	0000000a pulmOk_PR
0801dd14 g     O .rwdata	0000000a healthyOk_PR
0801e5ec g     O .rwdata	00000180 alt_fd_list
080021b0 g     F .text	00000108 GetRelease
08000844 g     F .text	000000a0 DrawLineHardware
080040f8 g     F .text	00000008 _putchar_r
0801293c g     F .text	00000090 alt_find_dev
08003f58 g     F .text	00000138 memcpy
080003b0 g     F .text	00000190 OutGraphicsCharFont2a
080081e0 g     F .text	0000000c _cleanup_r
080104ec g     F .text	000000d0 .hidden __floatsidf
08012494 g     F .text	00000078 alt_io_redirect
0800f390 g     F .text	000000e0 .hidden __ltdf2
08012fc4 g       *ABS*	00000000 __DTOR_END__
0801dcfc g     O .rwdata	0000000a pulmonary
080041d0 g     F .text	00000014 puts
0800b3d4 g     F .text	00000074 __fpclassifyd
0800230c g     F .text	0000004c getcharGPS
0800aab0 g     F .text	000000a4 __ratio
0800caec g     F .text	00000024 __vfiprintf_internal
08011784 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08004090 g     F .text	0000002c _printf_r
0800e0b4 g     F .text	00000008 .hidden __udivsi3
08010960 g     F .text	000000a4 isatty
0801dab0 g     O .rodata	000000c8 __mprec_tens
08017d54 g     O .rodata	00005794 Font38x59
08009014 g     F .text	0000000c __locale_charset
08012b94 g     F .text	0000008c alt_icache_flush
08021420 g     O .bss	00000004 __malloc_top_pad
08003238 g     F .text	00000110 GPS_Real_Time
0801f830 g     O .rwdata	00000004 __mb_cur_max
08009044 g     F .text	0000000c _localeconv_r
0800a140 g     F .text	0000003c __i2b
08008984 g     F .text	000004a4 __sfvwrite_r
0801f7f4 g     O .rwdata	00000008 childOk_SpO2
0800b448 g     F .text	00000054 _sbrk_r
0800d1ec g     F .text	0000005c _read_r
08002fe8 g     F .text	00000038 wait_for_read_ready
0801f850 g     O .rwdata	00000004 alt_max_fd
0800cdf4 g     F .text	00000100 _fclose_r
0801dce4 g     O .rwdata	0000000b anemiaOk_PR
080081a0 g     F .text	00000030 fflush
0802141c g     O .bss	00000004 __malloc_max_sbrked_mem
0800e0c4 g     F .text	0000089c .hidden __adddf3
08002dec g     F .text	00000050 getbyte4
0800a858 g     F .text	0000011c __b2d
0800da08 g     F .text	00000590 .hidden __umoddi3
08010b38 g     F .text	000000d4 lseek
0801f828 g     O .rwdata	00000004 _global_impure_ptr
08002d58 g     F .text	00000050 Init_Bio
0800ae34 g     F .text	000005a0 _realloc_r
0802161c g       *ABS*	00000000 __bss_end
080122e4 g     F .text	000000f0 alt_iic_isr_register
08012818 g     F .text	00000104 alt_tick
080022b8 g     F .text	00000054 putchar_GPS
0800d448 g     F .text	000005c0 .hidden __udivdi3
0800cf08 g     F .text	00000184 _fputwc_r
0801da88 g     O .rodata	00000028 __mprec_bigtens
08009f24 g     F .text	00000104 __s2b
080105bc g     F .text	000000a4 .hidden __floatunsidf
0800a600 g     F .text	00000060 __mcmp
08001fe4 g     F .text	00000060 Init_Touch
08008540 g     F .text	00000018 __fp_lock_all
08012298 g     F .text	0000004c alt_ic_irq_enabled
0801f820 g     O .rwdata	00000004 invalid
08012780 g     F .text	00000098 alt_alarm_stop
08013cc2 g     O .rodata	0000140a Font16x27
080044dc g     F .text	00000024 strtol
08021434 g     O .bss	00000004 alt_irq_active
080006ec g     F .text	000000ac DrawHLineHardware
080000ec g     F .exceptions	000000d0 alt_irq_handler
0801e5c4 g     O .rwdata	00000028 alt_dev_null
08000540 g     F .text	000001ac OutGraphicsCharFont1
08011f0c g     F .text	0000001c alt_dcache_flush_all
0800a028 g     F .text	00000068 __hi0bits
08010464 g     F .text	00000088 .hidden __fixdfsi
0801f7ec g     O .rwdata	00000008 chil
0801f868 g       *ABS*	00000000 __ram_rwdata_end
0801f848 g     O .rwdata	00000008 alt_dev_list
08010fa0 g     F .text	000000f8 write
0800accc g     F .text	000000a0 _putc_r
08000c1c g     F .text	00000254 DrawCircleFill
0801dccc g       *ABS*	00000000 __ram_rodata_end
08010860 g     F .text	000000b0 fstat
080023c8 g     F .text	00000038 StopLogging
0801dccc g     O .rwdata	0000000a pregnant
0800f390 g     F .text	000000e0 .hidden __ledf2
08002044 g     F .text	00000034 ScreenTouched
0800a378 g     F .text	00000140 __pow5mult
08001388 g     F .text	000000d0 page2_text
0800b790 g     F .text	0000135c ___vfiprintf_internal_r
08021414 g     O .bss	00000004 __nlocale_changed
0800e0bc g     F .text	00000008 .hidden __umodsi3
0802161c g       *ABS*	00000000 end
08000e70 g     F .text	00000074 drawTriangle
08002e3c g     F .text	0000004c get_Pulse
08003f4c g     F .text	0000000c _atoi_r
08002648 g     F .text	00000318 getGpsInfo
080112c0 g     F .text	000000c4 altera_avalon_jtag_uart_init
08012fc4 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08011c1c g     F .text	00000088 alt_avalon_timer_sc_init
08010660 g     F .text	00000064 .hidden __clzsi2
08011990 g     F .text	00000218 altera_avalon_jtag_uart_write
08021473 g     O .bss	000000a0 dataAscii
08008530 g     F .text	00000004 __sfp_lock_acquire
080099d8 g     F .text	000000e8 memchr
08004500 g     F .text	00001ffc ___vfprintf_internal_r
08008694 g     F .text	000002f0 _free_r
0801f804 g     O .rwdata	00000008 heal
0801f7d0 g     O .rwdata	00000004 SpO2_H
08009020 g     F .text	00000010 __locale_mb_cur_max
08012dfc g     F .text	00000194 __call_exitprocs
08001458 g     F .text	000000c4 draw_menu
08021410 g     O .bss	00000004 __mlocale_changed
08021404 g     O .bss	00000007 okValue_SpO2
0801f834 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08021438 g     O .bss	00000004 _alt_tick_rate
08002d24 g     F .text	00000034 page3
0800a4b8 g     F .text	00000148 __lshift
0802143c g     O .bss	00000004 _alt_nticks
08010d14 g     F .text	000000fc read
08011104 g     F .text	00000058 alt_sys_init
08012ce8 g     F .text	00000114 __register_exitproc
0800a17c g     F .text	000001fc __multiply
08011630 g     F .text	00000068 altera_avalon_jtag_uart_close
0801dccc g       *ABS*	00000000 __ram_rwdata_start
08012fc4 g       *ABS*	00000000 __ram_rodata_start
08021440 g     O .bss	00000028 __malloc_current_mallinfo
0800a974 g     F .text	0000013c __d2b
0801115c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08012ae0 g     F .text	000000b4 alt_get_fd
08011de4 g     F .text	00000128 alt_busy_sleep
0800ccdc g     F .text	00000054 _close_r
08001f94 g     F .text	00000050 getcharTouch_Screen
08012c6c g     F .text	0000007c memcmp
0801121c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0802161c g       *ABS*	00000000 __alt_stack_base
0801126c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08003124 g     F .text	00000114 GetPressNoWait
08006520 g     F .text	00000130 __swsetup_r
08002f1c g     F .text	00000050 get_Spo2
080024b0 g     F .text	00000078 printTo7Seg
0800e960 g     F .text	000008cc .hidden __divdf3
080083f0 g     F .text	00000118 __sfp
0800abc8 g     F .text	00000078 __copybits
0801e1bc g     O .rwdata	00000408 __malloc_av_
0800853c g     F .text	00000004 __sinit_lock_release
0800f470 g     F .text	00000724 .hidden __muldf3
0800b49c g     F .text	00000054 __sread
08002400 g     F .text	00000038 ClearLogging
080129cc g     F .text	00000114 alt_find_file
08011f78 g     F .text	000000a4 alt_dev_llist_insert
08010c84 g     F .text	00000020 __malloc_lock
080018a0 g     F .text	000000d8 tostring
08010e70 g     F .text	000000b0 sbrk
08007f78 g     F .text	00000228 _fflush_r
0800cd30 g     F .text	000000c4 _calloc_r
08021513 g     O .bss	00000009 title_cat
08000798 g     F .text	000000ac DrawVLineHardware
08021404 g       *ABS*	00000000 __bss_start
08009c1c g     F .text	00000124 memset
08003348 g     F .text	00000bf8 main
08021430 g     O .bss	00000004 alt_envp
08021418 g     O .bss	00000004 __malloc_max_total_mem
08002f6c g     F .text	0000007c init_wifi
080111bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800cc64 g     F .text	0000001c __swbuf
08000284 g     F .text	000000a0 ReadAPixel
0800b5d0 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800cef4 g     F .text	00000014 fclose
0800427c g     F .text	00000260 _strtol_r
08006850 g     F .text	00001728 _dtoa_r
08009230 g     F .text	000007a8 _malloc_r
0800d3bc g     F .text	00000030 __ascii_wctomb
0801f854 g     O .rwdata	00000004 alt_errno
08008e28 g     F .text	000000b8 _fwalk
0800ad6c g     F .text	000000c8 putc
0800e004 g     F .text	00000054 .hidden __divsi3
0801f818 g     O .rwdata	00000004 graph_offset
08008570 g     F .text	00000124 _malloc_trim_r
08012fc4 g       *ABS*	00000000 __CTOR_END__
0800b5d8 g     F .text	000000a4 strcmp
08012fc4 g       *ABS*	00000000 __flash_rodata_start
08002438 g     F .text	00000038 StartLogger
08000fc8 g     F .text	000000a4 drawRectangle
08012fc4 g       *ABS*	00000000 __DTOR_LIST__
0801dcf0 g     O .rwdata	0000000b childOk_PR
0801f81c g     O .rwdata	00000004 graphing_colour
0800f22c g     F .text	00000084 .hidden __nedf2
08001f38 g     F .text	0000005c putcharTouch_Screen
080110d0 g     F .text	00000034 alt_irq_init
08010e10 g     F .text	00000060 alt_release_fd
0801db98 g     O .rodata	00000100 .hidden __clz_tab
0802140c g     O .bss	00000004 _PathLocale
08012c20 g     F .text	00000014 atexit
08002cec g     F .text	00000038 page2
0800cc80 g     F .text	0000005c _write_r
0801dcd8 g     O .rwdata	0000000b pregOk_PR
08009050 g     F .text	0000001c setlocale
08002da8 g     F .text	00000044 getChar_Bio
0801f82c g     O .rwdata	00000004 _impure_ptr
08021428 g     O .bss	00000004 alt_argc
080001f8 g     F .text	0000008c WriteAPixel
08012078 g     F .text	0000005c _do_dtors
0800903c g     F .text	00000008 __locale_cjk_lang
08000ac8 g     F .text	00000154 DrawArc
08012fc4 g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
0801f7d4 g     O .rwdata	00000008 pregOk_SpO2
0800a7f8 g     F .text	00000060 __ulp
08008558 g     F .text	00000018 __fp_unlock_all
0801f840 g     O .rwdata	00000008 alt_fs_list
0801f814 g     O .rwdata	00000004 offset
0801f7fc g     O .rwdata	00000008 pulmOk_SpO2
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800906c g     F .text	0000000c localeconv
08012104 g     F .text	00000050 alt_ic_isr_register
0801f7cc g     O .rwdata	00000004 SpO2_L
0801f868 g       *ABS*	00000000 _edata
0802161c g       *ABS*	00000000 _end
08002e88 g     F .text	00000094 get_HR
08003020 g     F .text	00000050 putchar_wifi
080001bc g       *ABS*	00000000 __ram_exceptions_end
08011698 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080030f0 g     F .text	00000034 getchar_wifi
080121f4 g     F .text	000000a4 alt_ic_irq_disable
0800b4f8 g     F .text	0000007c __swrite
0801f838 g     O .rwdata	00000004 __malloc_trim_threshold
0801291c g     F .text	00000020 altera_nios2_qsys_irq_init
08009030 g     F .text	0000000c __locale_msgcharset
08012c34 g     F .text	00000038 exit
08008ee0 g     F .text	000000b8 _fwalk_reent
08001bb4 g     F .text	00000384 side_menu
0800a660 g     F .text	00000198 __mdiff
0800e058 g     F .text	0000005c .hidden __modsi3
0801f824 g     O .rwdata	00000004 __ctype_ptr__
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08008534 g     F .text	00000004 __sfp_lock_release
0800106c g     F .text	000002ac DrawText
08000000 g       *ABS*	00000000 __alt_mem_sdram
08003f40 g     F .text	0000000c atoi
0801d7b2 g     O .rodata	00000101 _ctype_
080150cc g     O .rodata	00002c88 Font22x40
08002470 g     F .text	00000040 Init_GPS
08012f90 g     F .text	00000034 _exit
08011ca4 g     F .text	00000140 alt_alarm_start
08002358 g     F .text	00000070 putString
08009078 g     F .text	000001b8 __smakebuf_r
080041e4 g     F .text	00000098 strlen
08012628 g     F .text	00000158 open
0800f2b0 g     F .text	000000e0 .hidden __gedf2
08002528 g     F .text	00000120 printGpsData
0801f83c g     O .rwdata	00000004 __wctomb
0800b778 g     F .text	00000018 __sprint_r
080120d4 g     F .text	00000030 alt_icache_flush_all
0801f85c g     O .rwdata	00000004 alt_priority_mask
08012154 g     F .text	000000a0 alt_ic_irq_enable
080064fc g     F .text	00000024 __vfprintf_internal
0800d3ec g     F .text	0000005c _wctomb_r
08001318 g     F .text	00000070 clear_screen
0800fb94 g     F .text	000008d0 .hidden __subdf3
0800a090 g     F .text	000000b0 __lo0bits
0801f860 g     O .rwdata	00000008 alt_alarm_list
0801201c g     F .text	0000005c _do_ctors
0800d2e4 g     F .text	000000d8 wcrtomb
08010714 g     F .text	000000d0 close
0801f80c g     O .rwdata	00000008 healthyOk_SpO2
08010a68 g     F .text	00000080 alt_load
0800d08c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
08008538 g     F .text	00000004 __sinit_lock_acquire
08009e10 g     F .text	00000114 __multadd
08002a9c g     F .text	00000250 page1
08009de8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	10854704 	addi	r2,r2,5404
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	10854704 	addi	r2,r2,5404
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d69df314 	ori	gp,gp,30668
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	10850114 	ori	r2,r2,5124

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18c58714 	ori	r3,r3,5660

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	8010a680 	call	8010a68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	8010c0c0 	call	8010c0c <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <WriteAPixel>:

 * This function writes a single pixel to the x,y coords specified in the specified colour

 * Note colour is a palette number (0-255) not a 24 bit RGB value
 **********************************************************************/
void WriteAPixel(int x, int y, int Colour) {
 80001f8:	defffc04 	addi	sp,sp,-16
 80001fc:	df000315 	stw	fp,12(sp)
 8000200:	df000304 	addi	fp,sp,12
 8000204:	e13ffd15 	stw	r4,-12(fp)
 8000208:	e17ffe15 	stw	r5,-8(fp)
 800020c:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS
 8000210:	0001883a 	nop
 8000214:	00a10034 	movhi	r2,33792
 8000218:	1080000b 	ldhu	r2,0(r2)
 800021c:	10bfffcc 	andi	r2,r2,65535
 8000220:	1080004c 	andi	r2,r2,1
 8000224:	103ffb26 	beq	r2,zero,8000214 <__alt_data_end+0xfc000214>
	;			// is graphics ready for new command

	GraphicsX1Reg = x;			// write coords to x1, y1
 8000228:	00a10034 	movhi	r2,33792
 800022c:	10800084 	addi	r2,r2,2
 8000230:	e0fffd17 	ldw	r3,-12(fp)
 8000234:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000238:	00a10034 	movhi	r2,33792
 800023c:	10800104 	addi	r2,r2,4
 8000240:	e0fffe17 	ldw	r3,-8(fp)
 8000244:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 8000248:	00a10034 	movhi	r2,33792
 800024c:	10800384 	addi	r2,r2,14
 8000250:	e0ffff17 	ldw	r3,-4(fp)
 8000254:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
 8000258:	00a10034 	movhi	r2,33792
 800025c:	00c00284 	movi	r3,10
 8000260:	10c0000d 	sth	r3,0(r2)
	GraphicsBackGroundColourReg = Colour; //set the background color to white
 8000264:	00a10034 	movhi	r2,33792
 8000268:	10800404 	addi	r2,r2,16
 800026c:	e0ffff17 	ldw	r3,-4(fp)
 8000270:	10c0000d 	sth	r3,0(r2)

}
 8000274:	e037883a 	mov	sp,fp
 8000278:	df000017 	ldw	fp,0(sp)
 800027c:	dec00104 	addi	sp,sp,4
 8000280:	f800283a 	ret

08000284 <ReadAPixel>:

/*****************************************************************************************
 * This function read a single pixel from x,y coords specified and returns its colour
 * Note returned colour is a palette number (0-255) not a 24 bit RGB value
 ******************************************************************************************/
int ReadAPixel(int x, int y) {
 8000284:	defffd04 	addi	sp,sp,-12
 8000288:	df000215 	stw	fp,8(sp)
 800028c:	df000204 	addi	fp,sp,8
 8000290:	e13ffe15 	stw	r4,-8(fp)
 8000294:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS
 8000298:	0001883a 	nop
 800029c:	00a10034 	movhi	r2,33792
 80002a0:	1080000b 	ldhu	r2,0(r2)
 80002a4:	10bfffcc 	andi	r2,r2,65535
 80002a8:	1080004c 	andi	r2,r2,1
 80002ac:	103ffb26 	beq	r2,zero,800029c <__alt_data_end+0xfc00029c>
	;			// is graphics ready for new command

	GraphicsX1Reg = x;			// write coords to x1, y1
 80002b0:	00a10034 	movhi	r2,33792
 80002b4:	10800084 	addi	r2,r2,2
 80002b8:	e0fffe17 	ldw	r3,-8(fp)
 80002bc:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80002c0:	00a10034 	movhi	r2,33792
 80002c4:	10800104 	addi	r2,r2,4
 80002c8:	e0ffff17 	ldw	r3,-4(fp)
 80002cc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 80002d0:	00a10034 	movhi	r2,33792
 80002d4:	00c002c4 	movi	r3,11
 80002d8:	10c0000d 	sth	r3,0(r2)
	GraphicsBackGroundColourReg = 1;
 80002dc:	00a10034 	movhi	r2,33792
 80002e0:	10800404 	addi	r2,r2,16
 80002e4:	00c00044 	movi	r3,1
 80002e8:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS
 80002ec:	0001883a 	nop
 80002f0:	00a10034 	movhi	r2,33792
 80002f4:	1080000b 	ldhu	r2,0(r2)
 80002f8:	10bfffcc 	andi	r2,r2,65535
 80002fc:	1080004c 	andi	r2,r2,1
 8000300:	103ffb26 	beq	r2,zero,80002f0 <__alt_data_end+0xfc0002f0>
	;			// is graphics done reading pixel
	return (int) (GraphicsColourReg);	// return the palette number (colour)
 8000304:	00a10034 	movhi	r2,33792
 8000308:	10800384 	addi	r2,r2,14
 800030c:	1080000b 	ldhu	r2,0(r2)
 8000310:	10bfffcc 	andi	r2,r2,65535
}
 8000314:	e037883a 	mov	sp,fp
 8000318:	df000017 	ldw	fp,0(sp)
 800031c:	dec00104 	addi	sp,sp,4
 8000320:	f800283a 	ret

08000324 <ProgramPalette>:
/****************************************************************************************************
 ** subroutine to program a hardware (graphics chip) palette number with an RGB value
 ** e.g. ProgramPalette(RED, 0x00FF0000) ;
 ****************************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB) {
 8000324:	defffd04 	addi	sp,sp,-12
 8000328:	df000215 	stw	fp,8(sp)
 800032c:	df000204 	addi	fp,sp,8
 8000330:	e13ffe15 	stw	r4,-8(fp)
 8000334:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS
 8000338:	0001883a 	nop
 800033c:	00a10034 	movhi	r2,33792
 8000340:	1080000b 	ldhu	r2,0(r2)
 8000344:	10bfffcc 	andi	r2,r2,65535
 8000348:	1080004c 	andi	r2,r2,1
 800034c:	103ffb26 	beq	r2,zero,800033c <__alt_data_end+0xfc00033c>
	;
	GraphicsColourReg = PaletteNumber;
 8000350:	00a10034 	movhi	r2,33792
 8000354:	10800384 	addi	r2,r2,14
 8000358:	e0fffe17 	ldw	r3,-8(fp)
 800035c:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = RGB >> 16;        // program red value in ls.8 bit of X1 reg
 8000360:	00a10034 	movhi	r2,33792
 8000364:	10800084 	addi	r2,r2,2
 8000368:	e0ffff17 	ldw	r3,-4(fp)
 800036c:	1807d43a 	srai	r3,r3,16
 8000370:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = RGB;         // program green and blue into 16 bit of Y1 reg
 8000374:	00a10034 	movhi	r2,33792
 8000378:	10800104 	addi	r2,r2,4
 800037c:	e0ffff17 	ldw	r3,-4(fp)
 8000380:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = ProgramPaletteColour;	// issue command
 8000384:	00a10034 	movhi	r2,33792
 8000388:	00c00404 	movi	r3,16
 800038c:	10c0000d 	sth	r3,0(r2)
	GraphicsBackGroundColourReg = 1;
 8000390:	00a10034 	movhi	r2,33792
 8000394:	10800404 	addi	r2,r2,16
 8000398:	00c00044 	movi	r3,1
 800039c:	10c0000d 	sth	r3,0(r2)
}
 80003a0:	e037883a 	mov	sp,fp
 80003a4:	df000017 	ldw	fp,0(sp)
 80003a8:	dec00104 	addi	sp,sp,4
 80003ac:	f800283a 	ret

080003b0 <OutGraphicsCharFont2a>:
 ** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
 ** no scroll, scale x,y= 1,1
 **
 ******************************************************************************************************************************/
void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour,
		int c, int Erase) {
 80003b0:	defff004 	addi	sp,sp,-64
 80003b4:	dfc00f15 	stw	ra,60(sp)
 80003b8:	df000e15 	stw	fp,56(sp)
 80003bc:	ddc00d15 	stw	r23,52(sp)
 80003c0:	dd800c15 	stw	r22,48(sp)
 80003c4:	dd400b15 	stw	r21,44(sp)
 80003c8:	dd000a15 	stw	r20,40(sp)
 80003cc:	dcc00915 	stw	r19,36(sp)
 80003d0:	dc800815 	stw	r18,32(sp)
 80003d4:	dc400715 	stw	r17,28(sp)
 80003d8:	dc000615 	stw	r16,24(sp)
 80003dc:	df000e04 	addi	fp,sp,56
 80003e0:	e13ff215 	stw	r4,-56(fp)
 80003e4:	e17ff315 	stw	r5,-52(fp)
 80003e8:	e1bff415 	stw	r6,-48(fp)
 80003ec:	e1fff515 	stw	r7,-44(fp)
	register int row, column, theX = x, theY = y;
 80003f0:	e53ff217 	ldw	r20,-56(fp)
 80003f4:	e57ff317 	ldw	r21,-52(fp)
	register int pixels;
	register char theColour = colour;
 80003f8:	e0bff417 	ldw	r2,-48(fp)
 80003fc:	e0bff605 	stb	r2,-40(fp)
	register int BitMask, theCharacter = c, theRow, theColumn;
 8000400:	e4800217 	ldw	r18,8(fp)

	if (((short) (x) > (short) (XRES - 1))
 8000404:	e0bff217 	ldw	r2,-56(fp)
 8000408:	10bfffcc 	andi	r2,r2,65535
 800040c:	10a0001c 	xori	r2,r2,32768
 8000410:	10a00004 	addi	r2,r2,-32768
 8000414:	1080c808 	cmpgei	r2,r2,800
 8000418:	1000061e 	bne	r2,zero,8000434 <OutGraphicsCharFont2a+0x84>
			|| ((short) (y) > (short) (YRES - 1))) // if start off edge of screen don't bother
 800041c:	e0bff317 	ldw	r2,-52(fp)
 8000420:	10bfffcc 	andi	r2,r2,65535
 8000424:	10a0001c 	xori	r2,r2,32768
 8000428:	10a00004 	addi	r2,r2,-32768
 800042c:	10807810 	cmplti	r2,r2,480
 8000430:	1000011e 	bne	r2,zero,8000438 <OutGraphicsCharFont2a+0x88>
		return;
 8000434:	00003506 	br	800050c <OutGraphicsCharFont2a+0x15c>

	if (((short) (theCharacter) >= (short) (' '))
 8000438:	9005883a 	mov	r2,r18
 800043c:	10bfffcc 	andi	r2,r2,65535
 8000440:	10a0001c 	xori	r2,r2,32768
 8000444:	10a00004 	addi	r2,r2,-32768
 8000448:	10800810 	cmplti	r2,r2,32
 800044c:	10002f1e 	bne	r2,zero,800050c <OutGraphicsCharFont2a+0x15c>
			&& ((short) (theCharacter) <= (short) ('~'))) {	// if printable character
 8000450:	9005883a 	mov	r2,r18
 8000454:	10bfffcc 	andi	r2,r2,65535
 8000458:	10a0001c 	xori	r2,r2,32768
 800045c:	10a00004 	addi	r2,r2,-32768
 8000460:	10801fc8 	cmpgei	r2,r2,127
 8000464:	1000291e 	bne	r2,zero,800050c <OutGraphicsCharFont2a+0x15c>
		theCharacter -= 0x20;// subtract hex 20 to get index of first printable character (the space character)
 8000468:	94bff804 	addi	r18,r18,-32
		theRow = FONT2_YPIXELS;
 800046c:	05800384 	movi	r22,14

		theColumn = FONT2_XPIXELS;
 8000470:	05c00284 	movi	r23,10

		for (row = 0; row < theRow; row++) {
 8000474:	0021883a 	mov	r16,zero
 8000478:	00002306 	br	8000508 <OutGraphicsCharFont2a+0x158>
			pixels = Font10x14[theCharacter][row];// get the pixels for row 0 of the character to be displayed
 800047c:	00820074 	movhi	r2,2049
 8000480:	108c9784 	addi	r2,r2,12894
 8000484:	90c003a4 	muli	r3,r18,14
 8000488:	1c07883a 	add	r3,r3,r16
 800048c:	18c7883a 	add	r3,r3,r3
 8000490:	10c5883a 	add	r2,r2,r3
 8000494:	1080000b 	ldhu	r2,0(r2)
 8000498:	10bfffcc 	andi	r2,r2,65535
 800049c:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512;		// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 80004a0:	04c08004 	movi	r19,512
			for (column = 0; column < theColumn;) {
 80004a4:	0023883a 	mov	r17,zero
 80004a8:	00001506 	br	8000500 <OutGraphicsCharFont2a+0x150>
				if ((pixels & BitMask))			// if valid pixel, then write it
 80004ac:	e0fff717 	ldw	r3,-36(fp)
 80004b0:	1cc4703a 	and	r2,r3,r19
 80004b4:	10000726 	beq	r2,zero,80004d4 <OutGraphicsCharFont2a+0x124>
					WriteAPixel(theX + column, theY + row, theColour);
 80004b8:	a449883a 	add	r4,r20,r17
 80004bc:	ac07883a 	add	r3,r21,r16
 80004c0:	e0bff607 	ldb	r2,-40(fp)
 80004c4:	180b883a 	mov	r5,r3
 80004c8:	100d883a 	mov	r6,r2
 80004cc:	80001f80 	call	80001f8 <WriteAPixel>
 80004d0:	00000906 	br	80004f8 <OutGraphicsCharFont2a+0x148>
				else {// if not a valid pixel, do we erase or leave it along (no erase)
					if (Erase == TRUE)
 80004d4:	e0800317 	ldw	r2,12(fp)
 80004d8:	10800058 	cmpnei	r2,r2,1
 80004dc:	1000061e 	bne	r2,zero,80004f8 <OutGraphicsCharFont2a+0x148>
						WriteAPixel(theX + column, theY + row,
 80004e0:	a447883a 	add	r3,r20,r17
 80004e4:	ac05883a 	add	r2,r21,r16
 80004e8:	1809883a 	mov	r4,r3
 80004ec:	100b883a 	mov	r5,r2
 80004f0:	e1bff517 	ldw	r6,-44(fp)
 80004f4:	80001f80 	call	80001f8 <WriteAPixel>
								backgroundcolour);
					// else leave it alone
				}
				column++;
 80004f8:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1;
 80004fc:	9827d07a 	srai	r19,r19,1
		theColumn = FONT2_XPIXELS;

		for (row = 0; row < theRow; row++) {
			pixels = Font10x14[theCharacter][row];// get the pixels for row 0 of the character to be displayed
			BitMask = 512;		// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for (column = 0; column < theColumn;) {
 8000500:	8dffea16 	blt	r17,r23,80004ac <__alt_data_end+0xfc0004ac>
		theCharacter -= 0x20;// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;

		theColumn = FONT2_XPIXELS;

		for (row = 0; row < theRow; row++) {
 8000504:	84000044 	addi	r16,r16,1
 8000508:	85bfdc16 	blt	r16,r22,800047c <__alt_data_end+0xfc00047c>
				column++;
				BitMask = BitMask >> 1;
			}
		}
	}
}
 800050c:	e6fff804 	addi	sp,fp,-32
 8000510:	dfc00917 	ldw	ra,36(sp)
 8000514:	df000817 	ldw	fp,32(sp)
 8000518:	ddc00717 	ldw	r23,28(sp)
 800051c:	dd800617 	ldw	r22,24(sp)
 8000520:	dd400517 	ldw	r21,20(sp)
 8000524:	dd000417 	ldw	r20,16(sp)
 8000528:	dcc00317 	ldw	r19,12(sp)
 800052c:	dc800217 	ldw	r18,8(sp)
 8000530:	dc400117 	ldw	r17,4(sp)
 8000534:	dc000017 	ldw	r16,0(sp)
 8000538:	dec00a04 	addi	sp,sp,40
 800053c:	f800283a 	ret

08000540 <OutGraphicsCharFont1>:
 ** character to the background colour
 **
 *************************************************************************************************/

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour,
		int c, int Erase) {
 8000540:	defff204 	addi	sp,sp,-56
 8000544:	dfc00d15 	stw	ra,52(sp)
 8000548:	df000c15 	stw	fp,48(sp)
 800054c:	ddc00b15 	stw	r23,44(sp)
 8000550:	dd800a15 	stw	r22,40(sp)
 8000554:	dd400915 	stw	r21,36(sp)
 8000558:	dd000815 	stw	r20,32(sp)
 800055c:	dcc00715 	stw	r19,28(sp)
 8000560:	dc800615 	stw	r18,24(sp)
 8000564:	dc400515 	stw	r17,20(sp)
 8000568:	dc000415 	stw	r16,16(sp)
 800056c:	df000c04 	addi	fp,sp,48
 8000570:	e13ff415 	stw	r4,-48(fp)
 8000574:	e17ff515 	stw	r5,-44(fp)
 8000578:	e1bff615 	stw	r6,-40(fp)
 800057c:	e1fff715 	stw	r7,-36(fp)
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y;
 8000580:	e53ff417 	ldw	r20,-48(fp)
 8000584:	e57ff517 	ldw	r21,-44(fp)
	register int pixels;
	register char theColour = fontcolour;
 8000588:	e0bff617 	ldw	r2,-40(fp)
 800058c:	102f883a 	mov	r23,r2
	register int BitMask, theC = c;
 8000590:	e4400217 	ldw	r17,8(fp)

// if x,y coord off edge of screen don't bother
// XRES and YRES are #defined to be 800 and 480 respectively
	if (((short) (x) > (short) (XRES - 1))
 8000594:	e0bff417 	ldw	r2,-48(fp)
 8000598:	10bfffcc 	andi	r2,r2,65535
 800059c:	10a0001c 	xori	r2,r2,32768
 80005a0:	10a00004 	addi	r2,r2,-32768
 80005a4:	1080c808 	cmpgei	r2,r2,800
 80005a8:	1000061e 	bne	r2,zero,80005c4 <OutGraphicsCharFont1+0x84>
			|| ((short) (y) > (short) (YRES - 1)))
 80005ac:	e0bff517 	ldw	r2,-44(fp)
 80005b0:	10bfffcc 	andi	r2,r2,65535
 80005b4:	10a0001c 	xori	r2,r2,32768
 80005b8:	10a00004 	addi	r2,r2,-32768
 80005bc:	10807810 	cmplti	r2,r2,480
 80005c0:	1000011e 	bne	r2,zero,80005c8 <OutGraphicsCharFont1+0x88>
		return;
 80005c4:	00003c06 	br	80006b8 <OutGraphicsCharFont1+0x178>

// if printable character subtract hex 20
	if (((short) (theC) >= (short) (' '))
 80005c8:	8805883a 	mov	r2,r17
 80005cc:	10bfffcc 	andi	r2,r2,65535
 80005d0:	10a0001c 	xori	r2,r2,32768
 80005d4:	10a00004 	addi	r2,r2,-32768
 80005d8:	10800810 	cmplti	r2,r2,32
 80005dc:	1000361e 	bne	r2,zero,80006b8 <OutGraphicsCharFont1+0x178>
			&& ((short) (theC) <= (short) ('~'))) {
 80005e0:	8805883a 	mov	r2,r17
 80005e4:	10bfffcc 	andi	r2,r2,65535
 80005e8:	10a0001c 	xori	r2,r2,32768
 80005ec:	10a00004 	addi	r2,r2,-32768
 80005f0:	10801fc8 	cmpgei	r2,r2,127
 80005f4:	1000301e 	bne	r2,zero,80006b8 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20;
 80005f8:	8c7ff804 	addi	r17,r17,-32
		for (row = 0; (char) (row) < (char) (7); row++) {
 80005fc:	0021883a 	mov	r16,zero
 8000600:	00002706 	br	80006a0 <OutGraphicsCharFont1+0x160>

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
 8000604:	00820074 	movhi	r2,2049
 8000608:	108bf104 	addi	r2,r2,12228
 800060c:	88c001e4 	muli	r3,r17,7
 8000610:	1c07883a 	add	r3,r3,r16
 8000614:	10c5883a 	add	r2,r2,r3
 8000618:	10800003 	ldbu	r2,0(r2)
 800061c:	15803fcc 	andi	r22,r2,255
			BitMask = 16;
 8000620:	04c00404 	movi	r19,16

			for (column = 0; (char) (column) < (char) (5); column++) {
 8000624:	0025883a 	mov	r18,zero
 8000628:	00001606 	br	8000684 <OutGraphicsCharFont1+0x144>

// if a pixel in the character display it
				if ((pixels & BitMask))
 800062c:	b4c4703a 	and	r2,r22,r19
 8000630:	10000926 	beq	r2,zero,8000658 <OutGraphicsCharFont1+0x118>
					WriteAPixel(theX + column, theY + row, theColour);
 8000634:	a489883a 	add	r4,r20,r18
 8000638:	ac07883a 	add	r3,r21,r16
 800063c:	b8803fcc 	andi	r2,r23,255
 8000640:	1080201c 	xori	r2,r2,128
 8000644:	10bfe004 	addi	r2,r2,-128
 8000648:	180b883a 	mov	r5,r3
 800064c:	100d883a 	mov	r6,r2
 8000650:	80001f80 	call	80001f8 <WriteAPixel>
 8000654:	00000906 	br	800067c <OutGraphicsCharFont1+0x13c>

				else {
					if (Erase == TRUE)
 8000658:	e0800317 	ldw	r2,12(fp)
 800065c:	10800058 	cmpnei	r2,r2,1
 8000660:	1000061e 	bne	r2,zero,800067c <OutGraphicsCharFont1+0x13c>

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						WriteAPixel(theX + column, theY + row,
 8000664:	a487883a 	add	r3,r20,r18
 8000668:	ac05883a 	add	r2,r21,r16
 800066c:	1809883a 	mov	r4,r3
 8000670:	100b883a 	mov	r5,r2
 8000674:	e1bff717 	ldw	r6,-36(fp)
 8000678:	80001f80 	call	80001f8 <WriteAPixel>
								backgroundcolour);
				}
				BitMask = BitMask >> 1;
 800067c:	9827d07a 	srai	r19,r19,1

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
			BitMask = 16;

			for (column = 0; (char) (column) < (char) (5); column++) {
 8000680:	94800044 	addi	r18,r18,1
 8000684:	9005883a 	mov	r2,r18
 8000688:	10803fcc 	andi	r2,r2,255
 800068c:	1080201c 	xori	r2,r2,128
 8000690:	10bfe004 	addi	r2,r2,-128
 8000694:	10800150 	cmplti	r2,r2,5
 8000698:	103fe41e 	bne	r2,zero,800062c <__alt_data_end+0xfc00062c>

// if printable character subtract hex 20
	if (((short) (theC) >= (short) (' '))
			&& ((short) (theC) <= (short) ('~'))) {
		theC = theC - 0x20;
		for (row = 0; (char) (row) < (char) (7); row++) {
 800069c:	84000044 	addi	r16,r16,1
 80006a0:	8005883a 	mov	r2,r16
 80006a4:	10803fcc 	andi	r2,r2,255
 80006a8:	1080201c 	xori	r2,r2,128
 80006ac:	10bfe004 	addi	r2,r2,-128
 80006b0:	108001d0 	cmplti	r2,r2,7
 80006b4:	103fd31e 	bne	r2,zero,8000604 <__alt_data_end+0xfc000604>
				}
				BitMask = BitMask >> 1;
			}
		}
	}
}
 80006b8:	e6fff804 	addi	sp,fp,-32
 80006bc:	dfc00917 	ldw	ra,36(sp)
 80006c0:	df000817 	ldw	fp,32(sp)
 80006c4:	ddc00717 	ldw	r23,28(sp)
 80006c8:	dd800617 	ldw	r22,24(sp)
 80006cc:	dd400517 	ldw	r21,20(sp)
 80006d0:	dd000417 	ldw	r20,16(sp)
 80006d4:	dcc00317 	ldw	r19,12(sp)
 80006d8:	dc800217 	ldw	r18,8(sp)
 80006dc:	dc400117 	ldw	r17,4(sp)
 80006e0:	dc000017 	ldw	r16,0(sp)
 80006e4:	dec00a04 	addi	sp,sp,40
 80006e8:	f800283a 	ret

080006ec <DrawHLineHardware>:
/**********************************************************************
 * This function draws a vertical or horizontal line on the screen depending on the command sent

 * Note colour is a palette number (0-255) not a 24 bit RGB value
 **********************************************************************/
void DrawHLineHardware(int x1, int y1, int length, int Colour) {
 80006ec:	defffb04 	addi	sp,sp,-20
 80006f0:	df000415 	stw	fp,16(sp)
 80006f4:	df000404 	addi	fp,sp,16
 80006f8:	e13ffc15 	stw	r4,-16(fp)
 80006fc:	e17ffd15 	stw	r5,-12(fp)
 8000700:	e1bffe15 	stw	r6,-8(fp)
 8000704:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000708:	0001883a 	nop
 800070c:	00a10034 	movhi	r2,33792
 8000710:	1080000b 	ldhu	r2,0(r2)
 8000714:	10bfffcc 	andi	r2,r2,65535
 8000718:	1080004c 	andi	r2,r2,1
 800071c:	103ffb26 	beq	r2,zero,800070c <__alt_data_end+0xfc00070c>
	GraphicsX1Reg = x1;
 8000720:	00a10034 	movhi	r2,33792
 8000724:	10800084 	addi	r2,r2,2
 8000728:	e0fffc17 	ldw	r3,-16(fp)
 800072c:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000730:	00a10034 	movhi	r2,33792
 8000734:	10800104 	addi	r2,r2,4
 8000738:	e0fffd17 	ldw	r3,-12(fp)
 800073c:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x1 + length;
 8000740:	00a10034 	movhi	r2,33792
 8000744:	10800184 	addi	r2,r2,6
 8000748:	e0fffc17 	ldw	r3,-16(fp)
 800074c:	1809883a 	mov	r4,r3
 8000750:	e0fffe17 	ldw	r3,-8(fp)
 8000754:	20c7883a 	add	r3,r4,r3
 8000758:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y1;
 800075c:	00a10034 	movhi	r2,33792
 8000760:	10800204 	addi	r2,r2,8
 8000764:	e0fffd17 	ldw	r3,-12(fp)
 8000768:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 800076c:	00a10034 	movhi	r2,33792
 8000770:	10800384 	addi	r2,r2,14
 8000774:	e0ffff17 	ldw	r3,-4(fp)
 8000778:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;
 800077c:	00a10034 	movhi	r2,33792
 8000780:	00c00044 	movi	r3,1
 8000784:	10c0000d 	sth	r3,0(r2)

}
 8000788:	e037883a 	mov	sp,fp
 800078c:	df000017 	ldw	fp,0(sp)
 8000790:	dec00104 	addi	sp,sp,4
 8000794:	f800283a 	ret

08000798 <DrawVLineHardware>:

void DrawVLineHardware(int x1, int y1, int length, int Colour) {
 8000798:	defffb04 	addi	sp,sp,-20
 800079c:	df000415 	stw	fp,16(sp)
 80007a0:	df000404 	addi	fp,sp,16
 80007a4:	e13ffc15 	stw	r4,-16(fp)
 80007a8:	e17ffd15 	stw	r5,-12(fp)
 80007ac:	e1bffe15 	stw	r6,-8(fp)
 80007b0:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 80007b4:	0001883a 	nop
 80007b8:	00a10034 	movhi	r2,33792
 80007bc:	1080000b 	ldhu	r2,0(r2)
 80007c0:	10bfffcc 	andi	r2,r2,65535
 80007c4:	1080004c 	andi	r2,r2,1
 80007c8:	103ffb26 	beq	r2,zero,80007b8 <__alt_data_end+0xfc0007b8>
	GraphicsX1Reg = x1;
 80007cc:	00a10034 	movhi	r2,33792
 80007d0:	10800084 	addi	r2,r2,2
 80007d4:	e0fffc17 	ldw	r3,-16(fp)
 80007d8:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80007dc:	00a10034 	movhi	r2,33792
 80007e0:	10800104 	addi	r2,r2,4
 80007e4:	e0fffd17 	ldw	r3,-12(fp)
 80007e8:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x1;
 80007ec:	00a10034 	movhi	r2,33792
 80007f0:	10800184 	addi	r2,r2,6
 80007f4:	e0fffc17 	ldw	r3,-16(fp)
 80007f8:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y1 + length;
 80007fc:	00a10034 	movhi	r2,33792
 8000800:	10800204 	addi	r2,r2,8
 8000804:	e0fffd17 	ldw	r3,-12(fp)
 8000808:	1809883a 	mov	r4,r3
 800080c:	e0fffe17 	ldw	r3,-8(fp)
 8000810:	20c7883a 	add	r3,r4,r3
 8000814:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000818:	00a10034 	movhi	r2,33792
 800081c:	10800384 	addi	r2,r2,14
 8000820:	e0ffff17 	ldw	r3,-4(fp)
 8000824:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;
 8000828:	00a10034 	movhi	r2,33792
 800082c:	00c00084 	movi	r3,2
 8000830:	10c0000d 	sth	r3,0(r2)

}
 8000834:	e037883a 	mov	sp,fp
 8000838:	df000017 	ldw	fp,0(sp)
 800083c:	dec00104 	addi	sp,sp,4
 8000840:	f800283a 	ret

08000844 <DrawLineHardware>:

void DrawLineHardware(int x1, int y1, int x2, int y2, int Colour) {
 8000844:	defffb04 	addi	sp,sp,-20
 8000848:	df000415 	stw	fp,16(sp)
 800084c:	df000404 	addi	fp,sp,16
 8000850:	e13ffc15 	stw	r4,-16(fp)
 8000854:	e17ffd15 	stw	r5,-12(fp)
 8000858:	e1bffe15 	stw	r6,-8(fp)
 800085c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000860:	0001883a 	nop
 8000864:	00a10034 	movhi	r2,33792
 8000868:	1080000b 	ldhu	r2,0(r2)
 800086c:	10bfffcc 	andi	r2,r2,65535
 8000870:	1080004c 	andi	r2,r2,1
 8000874:	103ffb26 	beq	r2,zero,8000864 <__alt_data_end+0xfc000864>
	GraphicsX1Reg = x1;
 8000878:	00a10034 	movhi	r2,33792
 800087c:	10800084 	addi	r2,r2,2
 8000880:	e0fffc17 	ldw	r3,-16(fp)
 8000884:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000888:	00a10034 	movhi	r2,33792
 800088c:	10800104 	addi	r2,r2,4
 8000890:	e0fffd17 	ldw	r3,-12(fp)
 8000894:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000898:	00a10034 	movhi	r2,33792
 800089c:	10800184 	addi	r2,r2,6
 80008a0:	e0fffe17 	ldw	r3,-8(fp)
 80008a4:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 80008a8:	00a10034 	movhi	r2,33792
 80008ac:	10800204 	addi	r2,r2,8
 80008b0:	e0ffff17 	ldw	r3,-4(fp)
 80008b4:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 80008b8:	00a10034 	movhi	r2,33792
 80008bc:	10800384 	addi	r2,r2,14
 80008c0:	e0c00117 	ldw	r3,4(fp)
 80008c4:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;
 80008c8:	00a10034 	movhi	r2,33792
 80008cc:	00c000c4 	movi	r3,3
 80008d0:	10c0000d 	sth	r3,0(r2)

}
 80008d4:	e037883a 	mov	sp,fp
 80008d8:	df000017 	ldw	fp,0(sp)
 80008dc:	dec00104 	addi	sp,sp,4
 80008e0:	f800283a 	ret

080008e4 <drawcircle>:
/********************************************************
 *Implementation of circle drawing algorithm
 *
 ********************************************************/

void drawcircle(int x0, int y0, int radius, int Colour) {
 80008e4:	defff704 	addi	sp,sp,-36
 80008e8:	dfc00815 	stw	ra,32(sp)
 80008ec:	df000715 	stw	fp,28(sp)
 80008f0:	df000704 	addi	fp,sp,28
 80008f4:	e13ffc15 	stw	r4,-16(fp)
 80008f8:	e17ffd15 	stw	r5,-12(fp)
 80008fc:	e1bffe15 	stw	r6,-8(fp)
 8000900:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 8000904:	e0bffe17 	ldw	r2,-8(fp)
 8000908:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
 800090c:	e03ffa15 	stw	zero,-24(fp)
	int err = 0;
 8000910:	e03ffb15 	stw	zero,-20(fp)

	WAIT_FOR_GRAPHICS;
 8000914:	0001883a 	nop
 8000918:	00a10034 	movhi	r2,33792
 800091c:	1080000b 	ldhu	r2,0(r2)
 8000920:	10bfffcc 	andi	r2,r2,65535
 8000924:	1080004c 	andi	r2,r2,1
 8000928:	103ffb26 	beq	r2,zero,8000918 <__alt_data_end+0xfc000918>

	while (x >= y) {
 800092c:	00005e06 	br	8000aa8 <drawcircle+0x1c4>
		WriteAPixel(x0 + x, y0 + y, Colour);
 8000930:	e0fffc17 	ldw	r3,-16(fp)
 8000934:	e0bff917 	ldw	r2,-28(fp)
 8000938:	1889883a 	add	r4,r3,r2
 800093c:	e0fffd17 	ldw	r3,-12(fp)
 8000940:	e0bffa17 	ldw	r2,-24(fp)
 8000944:	1885883a 	add	r2,r3,r2
 8000948:	100b883a 	mov	r5,r2
 800094c:	e1bfff17 	ldw	r6,-4(fp)
 8000950:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 + y, y0 + x, Colour);
 8000954:	e0fffc17 	ldw	r3,-16(fp)
 8000958:	e0bffa17 	ldw	r2,-24(fp)
 800095c:	1889883a 	add	r4,r3,r2
 8000960:	e0fffd17 	ldw	r3,-12(fp)
 8000964:	e0bff917 	ldw	r2,-28(fp)
 8000968:	1885883a 	add	r2,r3,r2
 800096c:	100b883a 	mov	r5,r2
 8000970:	e1bfff17 	ldw	r6,-4(fp)
 8000974:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - y, y0 + x, Colour);
 8000978:	e0fffc17 	ldw	r3,-16(fp)
 800097c:	e0bffa17 	ldw	r2,-24(fp)
 8000980:	1889c83a 	sub	r4,r3,r2
 8000984:	e0fffd17 	ldw	r3,-12(fp)
 8000988:	e0bff917 	ldw	r2,-28(fp)
 800098c:	1885883a 	add	r2,r3,r2
 8000990:	100b883a 	mov	r5,r2
 8000994:	e1bfff17 	ldw	r6,-4(fp)
 8000998:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - x, y0 + y, Colour);
 800099c:	e0fffc17 	ldw	r3,-16(fp)
 80009a0:	e0bff917 	ldw	r2,-28(fp)
 80009a4:	1889c83a 	sub	r4,r3,r2
 80009a8:	e0fffd17 	ldw	r3,-12(fp)
 80009ac:	e0bffa17 	ldw	r2,-24(fp)
 80009b0:	1885883a 	add	r2,r3,r2
 80009b4:	100b883a 	mov	r5,r2
 80009b8:	e1bfff17 	ldw	r6,-4(fp)
 80009bc:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - x, y0 - y, Colour);
 80009c0:	e0fffc17 	ldw	r3,-16(fp)
 80009c4:	e0bff917 	ldw	r2,-28(fp)
 80009c8:	1889c83a 	sub	r4,r3,r2
 80009cc:	e0fffd17 	ldw	r3,-12(fp)
 80009d0:	e0bffa17 	ldw	r2,-24(fp)
 80009d4:	1885c83a 	sub	r2,r3,r2
 80009d8:	100b883a 	mov	r5,r2
 80009dc:	e1bfff17 	ldw	r6,-4(fp)
 80009e0:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - y, y0 - x, Colour);
 80009e4:	e0fffc17 	ldw	r3,-16(fp)
 80009e8:	e0bffa17 	ldw	r2,-24(fp)
 80009ec:	1889c83a 	sub	r4,r3,r2
 80009f0:	e0fffd17 	ldw	r3,-12(fp)
 80009f4:	e0bff917 	ldw	r2,-28(fp)
 80009f8:	1885c83a 	sub	r2,r3,r2
 80009fc:	100b883a 	mov	r5,r2
 8000a00:	e1bfff17 	ldw	r6,-4(fp)
 8000a04:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 + y, y0 - x, Colour);
 8000a08:	e0fffc17 	ldw	r3,-16(fp)
 8000a0c:	e0bffa17 	ldw	r2,-24(fp)
 8000a10:	1889883a 	add	r4,r3,r2
 8000a14:	e0fffd17 	ldw	r3,-12(fp)
 8000a18:	e0bff917 	ldw	r2,-28(fp)
 8000a1c:	1885c83a 	sub	r2,r3,r2
 8000a20:	100b883a 	mov	r5,r2
 8000a24:	e1bfff17 	ldw	r6,-4(fp)
 8000a28:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 + x, y0 - y, Colour);
 8000a2c:	e0fffc17 	ldw	r3,-16(fp)
 8000a30:	e0bff917 	ldw	r2,-28(fp)
 8000a34:	1889883a 	add	r4,r3,r2
 8000a38:	e0fffd17 	ldw	r3,-12(fp)
 8000a3c:	e0bffa17 	ldw	r2,-24(fp)
 8000a40:	1885c83a 	sub	r2,r3,r2
 8000a44:	100b883a 	mov	r5,r2
 8000a48:	e1bfff17 	ldw	r6,-4(fp)
 8000a4c:	80001f80 	call	80001f8 <WriteAPixel>

		if (err <= 0) {
 8000a50:	e0bffb17 	ldw	r2,-20(fp)
 8000a54:	00800916 	blt	zero,r2,8000a7c <drawcircle+0x198>
			y += 1;
 8000a58:	e0bffa17 	ldw	r2,-24(fp)
 8000a5c:	10800044 	addi	r2,r2,1
 8000a60:	e0bffa15 	stw	r2,-24(fp)
			err += 2 * y + 1;
 8000a64:	e0bffa17 	ldw	r2,-24(fp)
 8000a68:	1085883a 	add	r2,r2,r2
 8000a6c:	10800044 	addi	r2,r2,1
 8000a70:	e0fffb17 	ldw	r3,-20(fp)
 8000a74:	1885883a 	add	r2,r3,r2
 8000a78:	e0bffb15 	stw	r2,-20(fp)
		}
		if (err > 0) {
 8000a7c:	e0bffb17 	ldw	r2,-20(fp)
 8000a80:	0080090e 	bge	zero,r2,8000aa8 <drawcircle+0x1c4>
			x -= 1;
 8000a84:	e0bff917 	ldw	r2,-28(fp)
 8000a88:	10bfffc4 	addi	r2,r2,-1
 8000a8c:	e0bff915 	stw	r2,-28(fp)
			err -= 2 * x + 1;
 8000a90:	e0bff917 	ldw	r2,-28(fp)
 8000a94:	1085883a 	add	r2,r2,r2
 8000a98:	0084303a 	nor	r2,zero,r2
 8000a9c:	e0fffb17 	ldw	r3,-20(fp)
 8000aa0:	1885883a 	add	r2,r3,r2
 8000aa4:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
	int err = 0;

	WAIT_FOR_GRAPHICS;

	while (x >= y) {
 8000aa8:	e0fff917 	ldw	r3,-28(fp)
 8000aac:	e0bffa17 	ldw	r2,-24(fp)
 8000ab0:	18bf9f0e 	bge	r3,r2,8000930 <__alt_data_end+0xfc000930>
		if (err > 0) {
			x -= 1;
			err -= 2 * x + 1;
		}
	}
}
 8000ab4:	e037883a 	mov	sp,fp
 8000ab8:	dfc00117 	ldw	ra,4(sp)
 8000abc:	df000017 	ldw	fp,0(sp)
 8000ac0:	dec00204 	addi	sp,sp,8
 8000ac4:	f800283a 	ret

08000ac8 <DrawArc>:

/***********************
 * Function that draws an arc or half a circle
 */
void DrawArc(int x0, int y0, int radius, int Colour) {
 8000ac8:	defff704 	addi	sp,sp,-36
 8000acc:	dfc00815 	stw	ra,32(sp)
 8000ad0:	df000715 	stw	fp,28(sp)
 8000ad4:	df000704 	addi	fp,sp,28
 8000ad8:	e13ffc15 	stw	r4,-16(fp)
 8000adc:	e17ffd15 	stw	r5,-12(fp)
 8000ae0:	e1bffe15 	stw	r6,-8(fp)
 8000ae4:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 8000ae8:	e0bffe17 	ldw	r2,-8(fp)
 8000aec:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
 8000af0:	e03ffa15 	stw	zero,-24(fp)
	int err = 0;
 8000af4:	e03ffb15 	stw	zero,-20(fp)

	WAIT_FOR_GRAPHICS;
 8000af8:	0001883a 	nop
 8000afc:	00a10034 	movhi	r2,33792
 8000b00:	1080000b 	ldhu	r2,0(r2)
 8000b04:	10bfffcc 	andi	r2,r2,65535
 8000b08:	1080004c 	andi	r2,r2,1
 8000b0c:	103ffb26 	beq	r2,zero,8000afc <__alt_data_end+0xfc000afc>

	while (x >= y) {
 8000b10:	00003a06 	br	8000bfc <DrawArc+0x134>
		WriteAPixel(x0 + x, y0 + y, Colour);
 8000b14:	e0fffc17 	ldw	r3,-16(fp)
 8000b18:	e0bff917 	ldw	r2,-28(fp)
 8000b1c:	1889883a 	add	r4,r3,r2
 8000b20:	e0fffd17 	ldw	r3,-12(fp)
 8000b24:	e0bffa17 	ldw	r2,-24(fp)
 8000b28:	1885883a 	add	r2,r3,r2
 8000b2c:	100b883a 	mov	r5,r2
 8000b30:	e1bfff17 	ldw	r6,-4(fp)
 8000b34:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 + y, y0 + x, Colour);
 8000b38:	e0fffc17 	ldw	r3,-16(fp)
 8000b3c:	e0bffa17 	ldw	r2,-24(fp)
 8000b40:	1889883a 	add	r4,r3,r2
 8000b44:	e0fffd17 	ldw	r3,-12(fp)
 8000b48:	e0bff917 	ldw	r2,-28(fp)
 8000b4c:	1885883a 	add	r2,r3,r2
 8000b50:	100b883a 	mov	r5,r2
 8000b54:	e1bfff17 	ldw	r6,-4(fp)
 8000b58:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - y, y0 + x, Colour);
 8000b5c:	e0fffc17 	ldw	r3,-16(fp)
 8000b60:	e0bffa17 	ldw	r2,-24(fp)
 8000b64:	1889c83a 	sub	r4,r3,r2
 8000b68:	e0fffd17 	ldw	r3,-12(fp)
 8000b6c:	e0bff917 	ldw	r2,-28(fp)
 8000b70:	1885883a 	add	r2,r3,r2
 8000b74:	100b883a 	mov	r5,r2
 8000b78:	e1bfff17 	ldw	r6,-4(fp)
 8000b7c:	80001f80 	call	80001f8 <WriteAPixel>
		WriteAPixel(x0 - x, y0 + y, Colour);
 8000b80:	e0fffc17 	ldw	r3,-16(fp)
 8000b84:	e0bff917 	ldw	r2,-28(fp)
 8000b88:	1889c83a 	sub	r4,r3,r2
 8000b8c:	e0fffd17 	ldw	r3,-12(fp)
 8000b90:	e0bffa17 	ldw	r2,-24(fp)
 8000b94:	1885883a 	add	r2,r3,r2
 8000b98:	100b883a 	mov	r5,r2
 8000b9c:	e1bfff17 	ldw	r6,-4(fp)
 8000ba0:	80001f80 	call	80001f8 <WriteAPixel>

		if (err <= 0) {
 8000ba4:	e0bffb17 	ldw	r2,-20(fp)
 8000ba8:	00800916 	blt	zero,r2,8000bd0 <DrawArc+0x108>
			y += 1;
 8000bac:	e0bffa17 	ldw	r2,-24(fp)
 8000bb0:	10800044 	addi	r2,r2,1
 8000bb4:	e0bffa15 	stw	r2,-24(fp)
			err += 2 * y + 1;
 8000bb8:	e0bffa17 	ldw	r2,-24(fp)
 8000bbc:	1085883a 	add	r2,r2,r2
 8000bc0:	10800044 	addi	r2,r2,1
 8000bc4:	e0fffb17 	ldw	r3,-20(fp)
 8000bc8:	1885883a 	add	r2,r3,r2
 8000bcc:	e0bffb15 	stw	r2,-20(fp)
		}
		if (err > 0) {
 8000bd0:	e0bffb17 	ldw	r2,-20(fp)
 8000bd4:	0080090e 	bge	zero,r2,8000bfc <DrawArc+0x134>
			x -= 1;
 8000bd8:	e0bff917 	ldw	r2,-28(fp)
 8000bdc:	10bfffc4 	addi	r2,r2,-1
 8000be0:	e0bff915 	stw	r2,-28(fp)
			err -= 2 * x + 1;
 8000be4:	e0bff917 	ldw	r2,-28(fp)
 8000be8:	1085883a 	add	r2,r2,r2
 8000bec:	0084303a 	nor	r2,zero,r2
 8000bf0:	e0fffb17 	ldw	r3,-20(fp)
 8000bf4:	1885883a 	add	r2,r3,r2
 8000bf8:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
	int err = 0;

	WAIT_FOR_GRAPHICS;

	while (x >= y) {
 8000bfc:	e0fff917 	ldw	r3,-28(fp)
 8000c00:	e0bffa17 	ldw	r2,-24(fp)
 8000c04:	18bfc30e 	bge	r3,r2,8000b14 <__alt_data_end+0xfc000b14>
		if (err > 0) {
			x -= 1;
			err -= 2 * x + 1;
		}
	}
}
 8000c08:	e037883a 	mov	sp,fp
 8000c0c:	dfc00117 	ldw	ra,4(sp)
 8000c10:	df000017 	ldw	fp,0(sp)
 8000c14:	dec00204 	addi	sp,sp,8
 8000c18:	f800283a 	ret

08000c1c <DrawCircleFill>:

/************************************************************
 * Function to draw a filled circle
 */
void DrawCircleFill(int x0, int y0, int radius, int COLOUR) {
 8000c1c:	defff604 	addi	sp,sp,-40
 8000c20:	dfc00915 	stw	ra,36(sp)
 8000c24:	df000815 	stw	fp,32(sp)
 8000c28:	df000804 	addi	fp,sp,32
 8000c2c:	e13ffc15 	stw	r4,-16(fp)
 8000c30:	e17ffd15 	stw	r5,-12(fp)
 8000c34:	e1bffe15 	stw	r6,-8(fp)
 8000c38:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 8000c3c:	e0bffe17 	ldw	r2,-8(fp)
 8000c40:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
 8000c44:	e03ffa15 	stw	zero,-24(fp)
	int decisionOver2 = 1 - x; // Decision criterion divided by 2 evaluated at x=r, y=0
 8000c48:	00c00044 	movi	r3,1
 8000c4c:	e0bff917 	ldw	r2,-28(fp)
 8000c50:	1885c83a 	sub	r2,r3,r2
 8000c54:	e0bffb15 	stw	r2,-20(fp)

	WAIT_FOR_GRAPHICS;
 8000c58:	0001883a 	nop
 8000c5c:	00a10034 	movhi	r2,33792
 8000c60:	1080000b 	ldhu	r2,0(r2)
 8000c64:	10bfffcc 	andi	r2,r2,65535
 8000c68:	1080004c 	andi	r2,r2,1
 8000c6c:	103ffb26 	beq	r2,zero,8000c5c <__alt_data_end+0xfc000c5c>

	while (y <= x) {
 8000c70:	00007706 	br	8000e50 <DrawCircleFill+0x234>
		DrawLineHardware(x0, y0, x + x0, y + y0, COLOUR); // Octant 1
 8000c74:	e0fff917 	ldw	r3,-28(fp)
 8000c78:	e0bffc17 	ldw	r2,-16(fp)
 8000c7c:	188d883a 	add	r6,r3,r2
 8000c80:	e0fffa17 	ldw	r3,-24(fp)
 8000c84:	e0bffd17 	ldw	r2,-12(fp)
 8000c88:	1887883a 	add	r3,r3,r2
 8000c8c:	e0bfff17 	ldw	r2,-4(fp)
 8000c90:	d8800015 	stw	r2,0(sp)
 8000c94:	e13ffc17 	ldw	r4,-16(fp)
 8000c98:	e17ffd17 	ldw	r5,-12(fp)
 8000c9c:	180f883a 	mov	r7,r3
 8000ca0:	80008440 	call	8000844 <DrawLineHardware>
		DrawLineHardware(x0, y0, y + x0, x + y0, COLOUR); // Octant 2
 8000ca4:	e0fffa17 	ldw	r3,-24(fp)
 8000ca8:	e0bffc17 	ldw	r2,-16(fp)
 8000cac:	188d883a 	add	r6,r3,r2
 8000cb0:	e0fff917 	ldw	r3,-28(fp)
 8000cb4:	e0bffd17 	ldw	r2,-12(fp)
 8000cb8:	1887883a 	add	r3,r3,r2
 8000cbc:	e0bfff17 	ldw	r2,-4(fp)
 8000cc0:	d8800015 	stw	r2,0(sp)
 8000cc4:	e13ffc17 	ldw	r4,-16(fp)
 8000cc8:	e17ffd17 	ldw	r5,-12(fp)
 8000ccc:	180f883a 	mov	r7,r3
 8000cd0:	80008440 	call	8000844 <DrawLineHardware>
		DrawLineHardware(x0, y0, -x + x0, y + y0, COLOUR); // Octant 4
 8000cd4:	e0fffc17 	ldw	r3,-16(fp)
 8000cd8:	e0bff917 	ldw	r2,-28(fp)
 8000cdc:	188dc83a 	sub	r6,r3,r2
 8000ce0:	e0fffa17 	ldw	r3,-24(fp)
 8000ce4:	e0bffd17 	ldw	r2,-12(fp)
 8000ce8:	1887883a 	add	r3,r3,r2
 8000cec:	e0bfff17 	ldw	r2,-4(fp)
 8000cf0:	d8800015 	stw	r2,0(sp)
 8000cf4:	e13ffc17 	ldw	r4,-16(fp)
 8000cf8:	e17ffd17 	ldw	r5,-12(fp)
 8000cfc:	180f883a 	mov	r7,r3
 8000d00:	80008440 	call	8000844 <DrawLineHardware>
		DrawLineHardware(x0, y0, -y + x0, x + y0, COLOUR); // Octant 3
 8000d04:	e0fffc17 	ldw	r3,-16(fp)
 8000d08:	e0bffa17 	ldw	r2,-24(fp)
 8000d0c:	188dc83a 	sub	r6,r3,r2
 8000d10:	e0fff917 	ldw	r3,-28(fp)
 8000d14:	e0bffd17 	ldw	r2,-12(fp)
 8000d18:	1887883a 	add	r3,r3,r2
 8000d1c:	e0bfff17 	ldw	r2,-4(fp)
 8000d20:	d8800015 	stw	r2,0(sp)
 8000d24:	e13ffc17 	ldw	r4,-16(fp)
 8000d28:	e17ffd17 	ldw	r5,-12(fp)
 8000d2c:	180f883a 	mov	r7,r3
 8000d30:	80008440 	call	8000844 <DrawLineHardware>
		DrawLineHardware(x0, y0, -x + x0, -y + y0, COLOUR); // Octant 5
 8000d34:	e0fffc17 	ldw	r3,-16(fp)
 8000d38:	e0bff917 	ldw	r2,-28(fp)
 8000d3c:	188dc83a 	sub	r6,r3,r2
 8000d40:	e0fffd17 	ldw	r3,-12(fp)
 8000d44:	e0bffa17 	ldw	r2,-24(fp)
 8000d48:	1887c83a 	sub	r3,r3,r2
 8000d4c:	e0bfff17 	ldw	r2,-4(fp)
 8000d50:	d8800015 	stw	r2,0(sp)
 8000d54:	e13ffc17 	ldw	r4,-16(fp)
 8000d58:	e17ffd17 	ldw	r5,-12(fp)
 8000d5c:	180f883a 	mov	r7,r3
 8000d60:	80008440 	call	8000844 <DrawLineHardware>
		DrawLineHardware(x0, y0, -y + x0, -x + y0, COLOUR); // Octant 6
 8000d64:	e0fffc17 	ldw	r3,-16(fp)
 8000d68:	e0bffa17 	ldw	r2,-24(fp)
 8000d6c:	188dc83a 	sub	r6,r3,r2
 8000d70:	e0fffd17 	ldw	r3,-12(fp)
 8000d74:	e0bff917 	ldw	r2,-28(fp)
 8000d78:	1887c83a 	sub	r3,r3,r2
 8000d7c:	e0bfff17 	ldw	r2,-4(fp)
 8000d80:	d8800015 	stw	r2,0(sp)
 8000d84:	e13ffc17 	ldw	r4,-16(fp)
 8000d88:	e17ffd17 	ldw	r5,-12(fp)
 8000d8c:	180f883a 	mov	r7,r3
 8000d90:	80008440 	call	8000844 <DrawLineHardware>
		DrawLineHardware(x0, y0, x + x0, -y + y0, COLOUR); // Octant 7
 8000d94:	e0fff917 	ldw	r3,-28(fp)
 8000d98:	e0bffc17 	ldw	r2,-16(fp)
 8000d9c:	188d883a 	add	r6,r3,r2
 8000da0:	e0fffd17 	ldw	r3,-12(fp)
 8000da4:	e0bffa17 	ldw	r2,-24(fp)
 8000da8:	1887c83a 	sub	r3,r3,r2
 8000dac:	e0bfff17 	ldw	r2,-4(fp)
 8000db0:	d8800015 	stw	r2,0(sp)
 8000db4:	e13ffc17 	ldw	r4,-16(fp)
 8000db8:	e17ffd17 	ldw	r5,-12(fp)
 8000dbc:	180f883a 	mov	r7,r3
 8000dc0:	80008440 	call	8000844 <DrawLineHardware>
		DrawLineHardware(x0, y0, y + x0, -x + y0, COLOUR); // Octant 8
 8000dc4:	e0fffa17 	ldw	r3,-24(fp)
 8000dc8:	e0bffc17 	ldw	r2,-16(fp)
 8000dcc:	188d883a 	add	r6,r3,r2
 8000dd0:	e0fffd17 	ldw	r3,-12(fp)
 8000dd4:	e0bff917 	ldw	r2,-28(fp)
 8000dd8:	1887c83a 	sub	r3,r3,r2
 8000ddc:	e0bfff17 	ldw	r2,-4(fp)
 8000de0:	d8800015 	stw	r2,0(sp)
 8000de4:	e13ffc17 	ldw	r4,-16(fp)
 8000de8:	e17ffd17 	ldw	r5,-12(fp)
 8000dec:	180f883a 	mov	r7,r3
 8000df0:	80008440 	call	8000844 <DrawLineHardware>
		y++;
 8000df4:	e0bffa17 	ldw	r2,-24(fp)
 8000df8:	10800044 	addi	r2,r2,1
 8000dfc:	e0bffa15 	stw	r2,-24(fp)

		if (decisionOver2 <= 0) {
 8000e00:	e0bffb17 	ldw	r2,-20(fp)
 8000e04:	00800716 	blt	zero,r2,8000e24 <DrawCircleFill+0x208>
			decisionOver2 += 2 * y + 1; // Change in decision criterion for y -> y+1
 8000e08:	e0bffa17 	ldw	r2,-24(fp)
 8000e0c:	1085883a 	add	r2,r2,r2
 8000e10:	10800044 	addi	r2,r2,1
 8000e14:	e0fffb17 	ldw	r3,-20(fp)
 8000e18:	1885883a 	add	r2,r3,r2
 8000e1c:	e0bffb15 	stw	r2,-20(fp)
 8000e20:	00000b06 	br	8000e50 <DrawCircleFill+0x234>
		} else {
			x--;
 8000e24:	e0bff917 	ldw	r2,-28(fp)
 8000e28:	10bfffc4 	addi	r2,r2,-1
 8000e2c:	e0bff915 	stw	r2,-28(fp)
			decisionOver2 += 2 * (y - x) + 1; // Change for y -> y+1, x -> x-1
 8000e30:	e0fffa17 	ldw	r3,-24(fp)
 8000e34:	e0bff917 	ldw	r2,-28(fp)
 8000e38:	1885c83a 	sub	r2,r3,r2
 8000e3c:	1085883a 	add	r2,r2,r2
 8000e40:	10800044 	addi	r2,r2,1
 8000e44:	e0fffb17 	ldw	r3,-20(fp)
 8000e48:	1885883a 	add	r2,r3,r2
 8000e4c:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
	int decisionOver2 = 1 - x; // Decision criterion divided by 2 evaluated at x=r, y=0

	WAIT_FOR_GRAPHICS;

	while (y <= x) {
 8000e50:	e0bffa17 	ldw	r2,-24(fp)
 8000e54:	e0fff917 	ldw	r3,-28(fp)
 8000e58:	18bf860e 	bge	r3,r2,8000c74 <__alt_data_end+0xfc000c74>
			decisionOver2 += 2 * (y - x) + 1; // Change for y -> y+1, x -> x-1
		}

	}

}
 8000e5c:	e037883a 	mov	sp,fp
 8000e60:	dfc00117 	ldw	ra,4(sp)
 8000e64:	df000017 	ldw	fp,0(sp)
 8000e68:	dec00204 	addi	sp,sp,8
 8000e6c:	f800283a 	ret

08000e70 <drawTriangle>:

/*******************************************************************************
 ** Function that draws a triangle on the screen
 *******************************************************************************/
void drawTriangle() {
 8000e70:	defffd04 	addi	sp,sp,-12
 8000e74:	dfc00215 	stw	ra,8(sp)
 8000e78:	df000115 	stw	fp,4(sp)
 8000e7c:	df000104 	addi	fp,sp,4
	DrawLineHardware(200, 200, 100, 400, RED);
 8000e80:	00800084 	movi	r2,2
 8000e84:	d8800015 	stw	r2,0(sp)
 8000e88:	01003204 	movi	r4,200
 8000e8c:	01403204 	movi	r5,200
 8000e90:	01801904 	movi	r6,100
 8000e94:	01c06404 	movi	r7,400
 8000e98:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(100, 400, 300, 400, BLUE);
 8000e9c:	00800104 	movi	r2,4
 8000ea0:	d8800015 	stw	r2,0(sp)
 8000ea4:	01001904 	movi	r4,100
 8000ea8:	01406404 	movi	r5,400
 8000eac:	01804b04 	movi	r6,300
 8000eb0:	01c06404 	movi	r7,400
 8000eb4:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(300, 400, 200, 200, BLACK);
 8000eb8:	d8000015 	stw	zero,0(sp)
 8000ebc:	01004b04 	movi	r4,300
 8000ec0:	01406404 	movi	r5,400
 8000ec4:	01803204 	movi	r6,200
 8000ec8:	01c03204 	movi	r7,200
 8000ecc:	80008440 	call	8000844 <DrawLineHardware>
}
 8000ed0:	e037883a 	mov	sp,fp
 8000ed4:	dfc00117 	ldw	ra,4(sp)
 8000ed8:	df000017 	ldw	fp,0(sp)
 8000edc:	dec00204 	addi	sp,sp,8
 8000ee0:	f800283a 	ret

08000ee4 <drawFilledRectangle>:

/*******************************************************************************
 **Function that draws a filled rectangle on the screen
 *******************************************************************************/
void drawFilledRectangle(int y1, int y2, int x1, int x2, int Colour) {
 8000ee4:	defff804 	addi	sp,sp,-32
 8000ee8:	dfc00715 	stw	ra,28(sp)
 8000eec:	df000615 	stw	fp,24(sp)
 8000ef0:	df000604 	addi	fp,sp,24
 8000ef4:	e13ffc15 	stw	r4,-16(fp)
 8000ef8:	e17ffd15 	stw	r5,-12(fp)
 8000efc:	e1bffe15 	stw	r6,-8(fp)
 8000f00:	e1ffff15 	stw	r7,-4(fp)
	int YVALUE;
	DrawLineHardware(x1, y1, x2, y1, Colour);
 8000f04:	e0800217 	ldw	r2,8(fp)
 8000f08:	d8800015 	stw	r2,0(sp)
 8000f0c:	e13ffe17 	ldw	r4,-8(fp)
 8000f10:	e17ffc17 	ldw	r5,-16(fp)
 8000f14:	e1bfff17 	ldw	r6,-4(fp)
 8000f18:	e1fffc17 	ldw	r7,-16(fp)
 8000f1c:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x2, y1, x2, y2, Colour);
 8000f20:	e0800217 	ldw	r2,8(fp)
 8000f24:	d8800015 	stw	r2,0(sp)
 8000f28:	e13fff17 	ldw	r4,-4(fp)
 8000f2c:	e17ffc17 	ldw	r5,-16(fp)
 8000f30:	e1bfff17 	ldw	r6,-4(fp)
 8000f34:	e1fffd17 	ldw	r7,-12(fp)
 8000f38:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x2, y2, x1, y2, Colour);
 8000f3c:	e0800217 	ldw	r2,8(fp)
 8000f40:	d8800015 	stw	r2,0(sp)
 8000f44:	e13fff17 	ldw	r4,-4(fp)
 8000f48:	e17ffd17 	ldw	r5,-12(fp)
 8000f4c:	e1bffe17 	ldw	r6,-8(fp)
 8000f50:	e1fffd17 	ldw	r7,-12(fp)
 8000f54:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x1, y2, x1, y1, Colour);
 8000f58:	e0800217 	ldw	r2,8(fp)
 8000f5c:	d8800015 	stw	r2,0(sp)
 8000f60:	e13ffe17 	ldw	r4,-8(fp)
 8000f64:	e17ffd17 	ldw	r5,-12(fp)
 8000f68:	e1bffe17 	ldw	r6,-8(fp)
 8000f6c:	e1fffc17 	ldw	r7,-16(fp)
 8000f70:	80008440 	call	8000844 <DrawLineHardware>

	for (YVALUE = y1; YVALUE <= y2; YVALUE++) { //FILL THE RECTANGLE WITH color 6== cyan
 8000f74:	e0bffc17 	ldw	r2,-16(fp)
 8000f78:	e0bffb15 	stw	r2,-20(fp)
 8000f7c:	00000a06 	br	8000fa8 <drawFilledRectangle+0xc4>
		DrawLineHardware(x1, YVALUE, x2, YVALUE, Colour);
 8000f80:	e0800217 	ldw	r2,8(fp)
 8000f84:	d8800015 	stw	r2,0(sp)
 8000f88:	e13ffe17 	ldw	r4,-8(fp)
 8000f8c:	e17ffb17 	ldw	r5,-20(fp)
 8000f90:	e1bfff17 	ldw	r6,-4(fp)
 8000f94:	e1fffb17 	ldw	r7,-20(fp)
 8000f98:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x1, y1, x2, y1, Colour);
	DrawLineHardware(x2, y1, x2, y2, Colour);
	DrawLineHardware(x2, y2, x1, y2, Colour);
	DrawLineHardware(x1, y2, x1, y1, Colour);

	for (YVALUE = y1; YVALUE <= y2; YVALUE++) { //FILL THE RECTANGLE WITH color 6== cyan
 8000f9c:	e0bffb17 	ldw	r2,-20(fp)
 8000fa0:	10800044 	addi	r2,r2,1
 8000fa4:	e0bffb15 	stw	r2,-20(fp)
 8000fa8:	e0bffb17 	ldw	r2,-20(fp)
 8000fac:	e0fffd17 	ldw	r3,-12(fp)
 8000fb0:	18bff30e 	bge	r3,r2,8000f80 <__alt_data_end+0xfc000f80>
		DrawLineHardware(x1, YVALUE, x2, YVALUE, Colour);
	}
}
 8000fb4:	e037883a 	mov	sp,fp
 8000fb8:	dfc00117 	ldw	ra,4(sp)
 8000fbc:	df000017 	ldw	fp,0(sp)
 8000fc0:	dec00204 	addi	sp,sp,8
 8000fc4:	f800283a 	ret

08000fc8 <drawRectangle>:

void drawRectangle(int y1, int y2, int x1, int x2, int Colour) {
 8000fc8:	defff904 	addi	sp,sp,-28
 8000fcc:	dfc00615 	stw	ra,24(sp)
 8000fd0:	df000515 	stw	fp,20(sp)
 8000fd4:	df000504 	addi	fp,sp,20
 8000fd8:	e13ffc15 	stw	r4,-16(fp)
 8000fdc:	e17ffd15 	stw	r5,-12(fp)
 8000fe0:	e1bffe15 	stw	r6,-8(fp)
 8000fe4:	e1ffff15 	stw	r7,-4(fp)
	DrawLineHardware(x1, y1, x2, y1, Colour);
 8000fe8:	e0800217 	ldw	r2,8(fp)
 8000fec:	d8800015 	stw	r2,0(sp)
 8000ff0:	e13ffe17 	ldw	r4,-8(fp)
 8000ff4:	e17ffc17 	ldw	r5,-16(fp)
 8000ff8:	e1bfff17 	ldw	r6,-4(fp)
 8000ffc:	e1fffc17 	ldw	r7,-16(fp)
 8001000:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x2, y1, x2, y2, Colour);
 8001004:	e0800217 	ldw	r2,8(fp)
 8001008:	d8800015 	stw	r2,0(sp)
 800100c:	e13fff17 	ldw	r4,-4(fp)
 8001010:	e17ffc17 	ldw	r5,-16(fp)
 8001014:	e1bfff17 	ldw	r6,-4(fp)
 8001018:	e1fffd17 	ldw	r7,-12(fp)
 800101c:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x2, y2, x1, y2, Colour);
 8001020:	e0800217 	ldw	r2,8(fp)
 8001024:	d8800015 	stw	r2,0(sp)
 8001028:	e13fff17 	ldw	r4,-4(fp)
 800102c:	e17ffd17 	ldw	r5,-12(fp)
 8001030:	e1bffe17 	ldw	r6,-8(fp)
 8001034:	e1fffd17 	ldw	r7,-12(fp)
 8001038:	80008440 	call	8000844 <DrawLineHardware>
	DrawLineHardware(x1, y2, x1, y1, Colour);
 800103c:	e0800217 	ldw	r2,8(fp)
 8001040:	d8800015 	stw	r2,0(sp)
 8001044:	e13ffe17 	ldw	r4,-8(fp)
 8001048:	e17ffd17 	ldw	r5,-12(fp)
 800104c:	e1bffe17 	ldw	r6,-8(fp)
 8001050:	e1fffc17 	ldw	r7,-16(fp)
 8001054:	80008440 	call	8000844 <DrawLineHardware>
}
 8001058:	e037883a 	mov	sp,fp
 800105c:	dfc00117 	ldw	ra,4(sp)
 8001060:	df000017 	ldw	fp,0(sp)
 8001064:	dec00204 	addi	sp,sp,8
 8001068:	f800283a 	ret

0800106c <DrawText>:

void DrawText(int Colour) {
 800106c:	deffe604 	addi	sp,sp,-104
 8001070:	dfc01915 	stw	ra,100(sp)
 8001074:	df001815 	stw	fp,96(sp)
 8001078:	df001804 	addi	fp,sp,96
 800107c:	e13fff15 	stw	r4,-4(fp)
	const char large_font[] = "CPEN 391 IS SO MUCH FUN: ";
 8001080:	00939174 	movhi	r2,20037
 8001084:	109410c4 	addi	r2,r2,20547
 8001088:	e0bfeb15 	stw	r2,-84(fp)
 800108c:	008c4e74 	movhi	r2,12601
 8001090:	108cc804 	addi	r2,r2,13088
 8001094:	e0bfec15 	stw	r2,-80(fp)
 8001098:	008814f4 	movhi	r2,8275
 800109c:	10924804 	addi	r2,r2,18720
 80010a0:	e0bfed15 	stw	r2,-76(fp)
 80010a4:	00934834 	movhi	r2,19744
 80010a8:	1093d4c4 	addi	r2,r2,20307
 80010ac:	e0bfee15 	stw	r2,-72(fp)
 80010b0:	00881234 	movhi	r2,8264
 80010b4:	1090d544 	addi	r2,r2,17237
 80010b8:	e0bfef15 	stw	r2,-68(fp)
 80010bc:	008e93b4 	movhi	r2,14926
 80010c0:	10955184 	addi	r2,r2,21830
 80010c4:	e0bff015 	stw	r2,-64(fp)
 80010c8:	00800804 	movi	r2,32
 80010cc:	e0bff10d 	sth	r2,-60(fp)
	const char small_font[] = "DEMO FOR TEAM 13 ";
 80010d0:	00915104 	movi	r2,17732
 80010d4:	e0bff18d 	sth	r2,-58(fp)
 80010d8:	0093d344 	movi	r2,20301
 80010dc:	e0bff20d 	sth	r2,-56(fp)
 80010e0:	00918804 	movi	r2,17952
 80010e4:	e0bff28d 	sth	r2,-54(fp)
 80010e8:	009493c4 	movi	r2,21071
 80010ec:	e0bff30d 	sth	r2,-52(fp)
 80010f0:	00950804 	movi	r2,21536
 80010f4:	e0bff38d 	sth	r2,-50(fp)
 80010f8:	00905144 	movi	r2,16709
 80010fc:	e0bff40d 	sth	r2,-48(fp)
 8001100:	00881344 	movi	r2,8269
 8001104:	e0bff48d 	sth	r2,-46(fp)
 8001108:	008ccc44 	movi	r2,13105
 800110c:	e0bff50d 	sth	r2,-44(fp)
 8001110:	00800804 	movi	r2,32
 8001114:	e0bff58d 	sth	r2,-42(fp)
	const char low_case[] = "Hello and Goodbye ";
 8001118:	009b1b34 	movhi	r2,27756
 800111c:	10995204 	addi	r2,r2,25928
 8001120:	e0bff615 	stw	r2,-40(fp)
 8001124:	009b9874 	movhi	r2,28257
 8001128:	10881bc4 	addi	r2,r2,8303
 800112c:	e0bff715 	stw	r2,-36(fp)
 8001130:	009bd1f4 	movhi	r2,28487
 8001134:	10881904 	addi	r2,r2,8292
 8001138:	e0bff815 	stw	r2,-32(fp)
 800113c:	009e58b4 	movhi	r2,31074
 8001140:	10991bc4 	addi	r2,r2,25711
 8001144:	e0bff915 	stw	r2,-28(fp)
 8001148:	00881944 	movi	r2,8293
 800114c:	e0bffa0d 	sth	r2,-24(fp)
 8001150:	e03ffa85 	stb	zero,-22(fp)
	const char numbers[] = "15 - 02 - 2017";
 8001154:	008200b4 	movhi	r2,2050
 8001158:	10b53a04 	addi	r2,r2,-11032
 800115c:	e0fffac4 	addi	r3,fp,-21
 8001160:	100b883a 	mov	r5,r2
 8001164:	008003c4 	movi	r2,15
 8001168:	1809883a 	mov	r4,r3
 800116c:	100d883a 	mov	r6,r2
 8001170:	8003f580 	call	8003f58 <memcpy>

	int i;
	for (i = 0; i < sizeof(large_font); i++)
 8001174:	e03fea15 	stw	zero,-88(fp)
 8001178:	00001406 	br	80011cc <DrawText+0x160>
		OutGraphicsCharFont2a((180 + 13 * i), 100, 0, 1, large_font[i], RED);
 800117c:	e0bfea17 	ldw	r2,-88(fp)
 8001180:	10800364 	muli	r2,r2,13
 8001184:	11002d04 	addi	r4,r2,180
 8001188:	e0ffeb04 	addi	r3,fp,-84
 800118c:	e0bfea17 	ldw	r2,-88(fp)
 8001190:	1885883a 	add	r2,r3,r2
 8001194:	10800003 	ldbu	r2,0(r2)
 8001198:	10803fcc 	andi	r2,r2,255
 800119c:	1080201c 	xori	r2,r2,128
 80011a0:	10bfe004 	addi	r2,r2,-128
 80011a4:	d8800015 	stw	r2,0(sp)
 80011a8:	00800084 	movi	r2,2
 80011ac:	d8800115 	stw	r2,4(sp)
 80011b0:	01401904 	movi	r5,100
 80011b4:	000d883a 	mov	r6,zero
 80011b8:	01c00044 	movi	r7,1
 80011bc:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	const char small_font[] = "DEMO FOR TEAM 13 ";
	const char low_case[] = "Hello and Goodbye ";
	const char numbers[] = "15 - 02 - 2017";

	int i;
	for (i = 0; i < sizeof(large_font); i++)
 80011c0:	e0bfea17 	ldw	r2,-88(fp)
 80011c4:	10800044 	addi	r2,r2,1
 80011c8:	e0bfea15 	stw	r2,-88(fp)
 80011cc:	e0bfea17 	ldw	r2,-88(fp)
 80011d0:	108006b0 	cmpltui	r2,r2,26
 80011d4:	103fe91e 	bne	r2,zero,800117c <__alt_data_end+0xfc00117c>
		OutGraphicsCharFont2a((180 + 13 * i), 100, 0, 1, large_font[i], RED);

	for (i = 0; i < sizeof(small_font); i++)
 80011d8:	e03fea15 	stw	zero,-88(fp)
 80011dc:	00001406 	br	8001230 <DrawText+0x1c4>
		OutGraphicsCharFont1((180 + 6 * i), 150, 0, 1, small_font[i], BLUE);
 80011e0:	e0bfea17 	ldw	r2,-88(fp)
 80011e4:	108001a4 	muli	r2,r2,6
 80011e8:	11002d04 	addi	r4,r2,180
 80011ec:	e0fff184 	addi	r3,fp,-58
 80011f0:	e0bfea17 	ldw	r2,-88(fp)
 80011f4:	1885883a 	add	r2,r3,r2
 80011f8:	10800003 	ldbu	r2,0(r2)
 80011fc:	10803fcc 	andi	r2,r2,255
 8001200:	1080201c 	xori	r2,r2,128
 8001204:	10bfe004 	addi	r2,r2,-128
 8001208:	d8800015 	stw	r2,0(sp)
 800120c:	00800104 	movi	r2,4
 8001210:	d8800115 	stw	r2,4(sp)
 8001214:	01402584 	movi	r5,150
 8001218:	000d883a 	mov	r6,zero
 800121c:	01c00044 	movi	r7,1
 8001220:	80005400 	call	8000540 <OutGraphicsCharFont1>

	int i;
	for (i = 0; i < sizeof(large_font); i++)
		OutGraphicsCharFont2a((180 + 13 * i), 100, 0, 1, large_font[i], RED);

	for (i = 0; i < sizeof(small_font); i++)
 8001224:	e0bfea17 	ldw	r2,-88(fp)
 8001228:	10800044 	addi	r2,r2,1
 800122c:	e0bfea15 	stw	r2,-88(fp)
 8001230:	e0bfea17 	ldw	r2,-88(fp)
 8001234:	108004b0 	cmpltui	r2,r2,18
 8001238:	103fe91e 	bne	r2,zero,80011e0 <__alt_data_end+0xfc0011e0>
		OutGraphicsCharFont1((180 + 6 * i), 150, 0, 1, small_font[i], BLUE);

	for (i = 0; i < sizeof(low_case); i++)
 800123c:	e03fea15 	stw	zero,-88(fp)
 8001240:	00001406 	br	8001294 <DrawText+0x228>
		OutGraphicsCharFont2a((180 + 13 * i), 200, 0, 1, low_case[i], CYAN);
 8001244:	e0bfea17 	ldw	r2,-88(fp)
 8001248:	10800364 	muli	r2,r2,13
 800124c:	11002d04 	addi	r4,r2,180
 8001250:	e0fff604 	addi	r3,fp,-40
 8001254:	e0bfea17 	ldw	r2,-88(fp)
 8001258:	1885883a 	add	r2,r3,r2
 800125c:	10800003 	ldbu	r2,0(r2)
 8001260:	10803fcc 	andi	r2,r2,255
 8001264:	1080201c 	xori	r2,r2,128
 8001268:	10bfe004 	addi	r2,r2,-128
 800126c:	d8800015 	stw	r2,0(sp)
 8001270:	00800184 	movi	r2,6
 8001274:	d8800115 	stw	r2,4(sp)
 8001278:	01403204 	movi	r5,200
 800127c:	000d883a 	mov	r6,zero
 8001280:	01c00044 	movi	r7,1
 8001284:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((180 + 13 * i), 100, 0, 1, large_font[i], RED);

	for (i = 0; i < sizeof(small_font); i++)
		OutGraphicsCharFont1((180 + 6 * i), 150, 0, 1, small_font[i], BLUE);

	for (i = 0; i < sizeof(low_case); i++)
 8001288:	e0bfea17 	ldw	r2,-88(fp)
 800128c:	10800044 	addi	r2,r2,1
 8001290:	e0bfea15 	stw	r2,-88(fp)
 8001294:	e0bfea17 	ldw	r2,-88(fp)
 8001298:	108004f0 	cmpltui	r2,r2,19
 800129c:	103fe91e 	bne	r2,zero,8001244 <__alt_data_end+0xfc001244>
		OutGraphicsCharFont2a((180 + 13 * i), 200, 0, 1, low_case[i], CYAN);

	for (i = 0; i < sizeof(numbers); i++)
 80012a0:	e03fea15 	stw	zero,-88(fp)
 80012a4:	00001406 	br	80012f8 <DrawText+0x28c>
		OutGraphicsCharFont2a((180 + 13 * i), 250, 0, 1, numbers[i], LIME);
 80012a8:	e0bfea17 	ldw	r2,-88(fp)
 80012ac:	10800364 	muli	r2,r2,13
 80012b0:	11002d04 	addi	r4,r2,180
 80012b4:	e0fffac4 	addi	r3,fp,-21
 80012b8:	e0bfea17 	ldw	r2,-88(fp)
 80012bc:	1885883a 	add	r2,r3,r2
 80012c0:	10800003 	ldbu	r2,0(r2)
 80012c4:	10803fcc 	andi	r2,r2,255
 80012c8:	1080201c 	xori	r2,r2,128
 80012cc:	10bfe004 	addi	r2,r2,-128
 80012d0:	d8800015 	stw	r2,0(sp)
 80012d4:	008000c4 	movi	r2,3
 80012d8:	d8800115 	stw	r2,4(sp)
 80012dc:	01403e84 	movi	r5,250
 80012e0:	000d883a 	mov	r6,zero
 80012e4:	01c00044 	movi	r7,1
 80012e8:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont1((180 + 6 * i), 150, 0, 1, small_font[i], BLUE);

	for (i = 0; i < sizeof(low_case); i++)
		OutGraphicsCharFont2a((180 + 13 * i), 200, 0, 1, low_case[i], CYAN);

	for (i = 0; i < sizeof(numbers); i++)
 80012ec:	e0bfea17 	ldw	r2,-88(fp)
 80012f0:	10800044 	addi	r2,r2,1
 80012f4:	e0bfea15 	stw	r2,-88(fp)
 80012f8:	e0bfea17 	ldw	r2,-88(fp)
 80012fc:	108003f0 	cmpltui	r2,r2,15
 8001300:	103fe91e 	bne	r2,zero,80012a8 <__alt_data_end+0xfc0012a8>
		OutGraphicsCharFont2a((180 + 13 * i), 250, 0, 1, numbers[i], LIME);
}
 8001304:	e037883a 	mov	sp,fp
 8001308:	dfc00117 	ldw	ra,4(sp)
 800130c:	df000017 	ldw	fp,0(sp)
 8001310:	dec00204 	addi	sp,sp,8
 8001314:	f800283a 	ret

08001318 <clear_screen>:

/*******************************************************************************
 ** Function that clears screen and makes it white
 *******************************************************************************/
void clear_screen(int Colour) {
 8001318:	defffb04 	addi	sp,sp,-20
 800131c:	dfc00415 	stw	ra,16(sp)
 8001320:	df000315 	stw	fp,12(sp)
 8001324:	df000304 	addi	fp,sp,12
 8001328:	e13fff15 	stw	r4,-4(fp)

	printf("Clearing the screen\n");
 800132c:	010200b4 	movhi	r4,2050
 8001330:	21353e04 	addi	r4,r4,-11016
 8001334:	80041d00 	call	80041d0 <puts>

	int y1;
	for (y1 = 0; y1 <= 600; y1++) {  //FILL THE RECTANGLE WITH color 1 == white
 8001338:	e03ffe15 	stw	zero,-8(fp)
 800133c:	00000a06 	br	8001368 <clear_screen+0x50>
		DrawLineHardware(0, y1, 820, y1, Colour);
 8001340:	e0bfff17 	ldw	r2,-4(fp)
 8001344:	d8800015 	stw	r2,0(sp)
 8001348:	0009883a 	mov	r4,zero
 800134c:	e17ffe17 	ldw	r5,-8(fp)
 8001350:	0180cd04 	movi	r6,820
 8001354:	e1fffe17 	ldw	r7,-8(fp)
 8001358:	80008440 	call	8000844 <DrawLineHardware>
void clear_screen(int Colour) {

	printf("Clearing the screen\n");

	int y1;
	for (y1 = 0; y1 <= 600; y1++) {  //FILL THE RECTANGLE WITH color 1 == white
 800135c:	e0bffe17 	ldw	r2,-8(fp)
 8001360:	10800044 	addi	r2,r2,1
 8001364:	e0bffe15 	stw	r2,-8(fp)
 8001368:	e0bffe17 	ldw	r2,-8(fp)
 800136c:	10809650 	cmplti	r2,r2,601
 8001370:	103ff31e 	bne	r2,zero,8001340 <__alt_data_end+0xfc001340>
		DrawLineHardware(0, y1, 820, y1, Colour);
	}
}
 8001374:	e037883a 	mov	sp,fp
 8001378:	dfc00117 	ldw	ra,4(sp)
 800137c:	df000017 	ldw	fp,0(sp)
 8001380:	dec00204 	addi	sp,sp,8
 8001384:	f800283a 	ret

08001388 <page2_text>:
#include <stdlib.h>
#include "Demo_Switch.c"

void page2_text() {
 8001388:	defff504 	addi	sp,sp,-44
 800138c:	dfc00a15 	stw	ra,40(sp)
 8001390:	df000915 	stw	fp,36(sp)
 8001394:	df000904 	addi	fp,sp,36
	const char choose[] = "CHOOSE YOUR CATEGORY: ";
 8001398:	0093d3f4 	movhi	r2,20303
 800139c:	109210c4 	addi	r2,r2,18499
 80013a0:	e0bffa15 	stw	r2,-24(fp)
 80013a4:	00964834 	movhi	r2,22816
 80013a8:	109154c4 	addi	r2,r2,17747
 80013ac:	e0bffb15 	stw	r2,-20(fp)
 80013b0:	008814b4 	movhi	r2,8274
 80013b4:	109553c4 	addi	r2,r2,21839
 80013b8:	e0bffc15 	stw	r2,-16(fp)
 80013bc:	00915534 	movhi	r2,17748
 80013c0:	109050c4 	addi	r2,r2,16707
 80013c4:	e0bffd15 	stw	r2,-12(fp)
 80013c8:	009654b4 	movhi	r2,22866
 80013cc:	1093d1c4 	addi	r2,r2,20295
 80013d0:	e0bffe15 	stw	r2,-8(fp)
 80013d4:	00880e84 	movi	r2,8250
 80013d8:	e0bfff0d 	sth	r2,-4(fp)
 80013dc:	e03fff85 	stb	zero,-2(fp)

	int i;

	for (i = 0; i < sizeof(choose); i++)
 80013e0:	e03ff915 	stw	zero,-28(fp)
 80013e4:	00001406 	br	8001438 <page2_text+0xb0>
		OutGraphicsCharFont2a((300 + 13 * i), 30, 0, 1, choose[i], 3); //for choose
 80013e8:	e0bff917 	ldw	r2,-28(fp)
 80013ec:	10800364 	muli	r2,r2,13
 80013f0:	11004b04 	addi	r4,r2,300
 80013f4:	e0fffa04 	addi	r3,fp,-24
 80013f8:	e0bff917 	ldw	r2,-28(fp)
 80013fc:	1885883a 	add	r2,r3,r2
 8001400:	10800003 	ldbu	r2,0(r2)
 8001404:	10803fcc 	andi	r2,r2,255
 8001408:	1080201c 	xori	r2,r2,128
 800140c:	10bfe004 	addi	r2,r2,-128
 8001410:	d8800015 	stw	r2,0(sp)
 8001414:	008000c4 	movi	r2,3
 8001418:	d8800115 	stw	r2,4(sp)
 800141c:	01400784 	movi	r5,30
 8001420:	000d883a 	mov	r6,zero
 8001424:	01c00044 	movi	r7,1
 8001428:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
void page2_text() {
	const char choose[] = "CHOOSE YOUR CATEGORY: ";

	int i;

	for (i = 0; i < sizeof(choose); i++)
 800142c:	e0bff917 	ldw	r2,-28(fp)
 8001430:	10800044 	addi	r2,r2,1
 8001434:	e0bff915 	stw	r2,-28(fp)
 8001438:	e0bff917 	ldw	r2,-28(fp)
 800143c:	108005f0 	cmpltui	r2,r2,23
 8001440:	103fe91e 	bne	r2,zero,80013e8 <__alt_data_end+0xfc0013e8>
		OutGraphicsCharFont2a((300 + 13 * i), 30, 0, 1, choose[i], 3); //for choose

}
 8001444:	e037883a 	mov	sp,fp
 8001448:	dfc00117 	ldw	ra,4(sp)
 800144c:	df000017 	ldw	fp,0(sp)
 8001450:	dec00204 	addi	sp,sp,8
 8001454:	f800283a 	ret

08001458 <draw_menu>:

/*******************************************************************************
 ** Function that draws the menu boxes on the screen
 *******************************************************************************/
void draw_menu(int Colour) {
 8001458:	defffc04 	addi	sp,sp,-16
 800145c:	dfc00315 	stw	ra,12(sp)
 8001460:	df000215 	stw	fp,8(sp)
 8001464:	df000204 	addi	fp,sp,8
 8001468:	e13fff15 	stw	r4,-4(fp)
	printf("Drawing filled rectangles through the screen lines\n");
 800146c:	010200b4 	movhi	r4,2050
 8001470:	21354304 	addi	r4,r4,-10996
 8001474:	80041d00 	call	80041d0 <puts>
	page2_text();
 8001478:	80013880 	call	8001388 <page2_text>

	drawFilledRectangle(50, 120, 300, 550, Colour);
 800147c:	e0bfff17 	ldw	r2,-4(fp)
 8001480:	d8800015 	stw	r2,0(sp)
 8001484:	01000c84 	movi	r4,50
 8001488:	01401e04 	movi	r5,120
 800148c:	01804b04 	movi	r6,300
 8001490:	01c08984 	movi	r7,550
 8001494:	8000ee40 	call	8000ee4 <drawFilledRectangle>
	drawFilledRectangle(130, 210, 300, 550, Colour);
 8001498:	e0bfff17 	ldw	r2,-4(fp)
 800149c:	d8800015 	stw	r2,0(sp)
 80014a0:	01002084 	movi	r4,130
 80014a4:	01403484 	movi	r5,210
 80014a8:	01804b04 	movi	r6,300
 80014ac:	01c08984 	movi	r7,550
 80014b0:	8000ee40 	call	8000ee4 <drawFilledRectangle>
	drawFilledRectangle(220, 300, 300, 550, Colour);
 80014b4:	e0bfff17 	ldw	r2,-4(fp)
 80014b8:	d8800015 	stw	r2,0(sp)
 80014bc:	01003704 	movi	r4,220
 80014c0:	01404b04 	movi	r5,300
 80014c4:	01804b04 	movi	r6,300
 80014c8:	01c08984 	movi	r7,550
 80014cc:	8000ee40 	call	8000ee4 <drawFilledRectangle>
	drawFilledRectangle(310, 390, 300, 550, Colour);
 80014d0:	e0bfff17 	ldw	r2,-4(fp)
 80014d4:	d8800015 	stw	r2,0(sp)
 80014d8:	01004d84 	movi	r4,310
 80014dc:	01406184 	movi	r5,390
 80014e0:	01804b04 	movi	r6,300
 80014e4:	01c08984 	movi	r7,550
 80014e8:	8000ee40 	call	8000ee4 <drawFilledRectangle>
	drawFilledRectangle(400, 475, 300, 550, Colour);
 80014ec:	e0bfff17 	ldw	r2,-4(fp)
 80014f0:	d8800015 	stw	r2,0(sp)
 80014f4:	01006404 	movi	r4,400
 80014f8:	014076c4 	movi	r5,475
 80014fc:	01804b04 	movi	r6,300
 8001500:	01c08984 	movi	r7,550
 8001504:	8000ee40 	call	8000ee4 <drawFilledRectangle>

}
 8001508:	e037883a 	mov	sp,fp
 800150c:	dfc00117 	ldw	ra,4(sp)
 8001510:	df000017 	ldw	fp,0(sp)
 8001514:	dec00204 	addi	sp,sp,8
 8001518:	f800283a 	ret

0800151c <titles_menu>:

void titles_menu() {
 800151c:	deffee04 	addi	sp,sp,-72
 8001520:	dfc01115 	stw	ra,68(sp)
 8001524:	df001015 	stw	fp,64(sp)
 8001528:	df001004 	addi	fp,sp,64
	const char menu[] = "PULMONARY";
 800152c:	00935334 	movhi	r2,19788
 8001530:	10955404 	addi	r2,r2,21840
 8001534:	e0bff315 	stw	r2,-52(fp)
 8001538:	00949074 	movhi	r2,21057
 800153c:	109393c4 	addi	r2,r2,20047
 8001540:	e0bff415 	stw	r2,-48(fp)
 8001544:	00801644 	movi	r2,89
 8001548:	e0bff50d 	sth	r2,-44(fp)
	const char menu_1[] = "DISEASES";
 800154c:	00925104 	movi	r2,18756
 8001550:	e0bff58d 	sth	r2,-42(fp)
 8001554:	009154c4 	movi	r2,17747
 8001558:	e0bff60d 	sth	r2,-40(fp)
 800155c:	0094d044 	movi	r2,21313
 8001560:	e0bff68d 	sth	r2,-38(fp)
 8001564:	0094d144 	movi	r2,21317
 8001568:	e0bff70d 	sth	r2,-36(fp)
 800156c:	e03ff785 	stb	zero,-34(fp)
	const char menu_2[] = "PREGNANT";
 8001570:	00801404 	movi	r2,80
 8001574:	e0bff7c5 	stb	r2,-33(fp)
 8001578:	00801484 	movi	r2,82
 800157c:	e0bff805 	stb	r2,-32(fp)
 8001580:	00801144 	movi	r2,69
 8001584:	e0bff845 	stb	r2,-31(fp)
 8001588:	008011c4 	movi	r2,71
 800158c:	e0bff885 	stb	r2,-30(fp)
 8001590:	00801384 	movi	r2,78
 8001594:	e0bff8c5 	stb	r2,-29(fp)
 8001598:	00801044 	movi	r2,65
 800159c:	e0bff905 	stb	r2,-28(fp)
 80015a0:	00801384 	movi	r2,78
 80015a4:	e0bff945 	stb	r2,-27(fp)
 80015a8:	00801504 	movi	r2,84
 80015ac:	e0bff985 	stb	r2,-26(fp)
 80015b0:	e03ff9c5 	stb	zero,-25(fp)
	const char menu_3[] = "ANEMIC";
 80015b4:	00935174 	movhi	r2,19781
 80015b8:	10939044 	addi	r2,r2,20033
 80015bc:	e0bffa15 	stw	r2,-24(fp)
 80015c0:	0090d244 	movi	r2,17225
 80015c4:	e0bffb0d 	sth	r2,-20(fp)
 80015c8:	e03ffb85 	stb	zero,-18(fp)
	const char menu_4[] = "CHILD";
 80015cc:	008010c4 	movi	r2,67
 80015d0:	e0bffbc5 	stb	r2,-17(fp)
 80015d4:	00801204 	movi	r2,72
 80015d8:	e0bffc05 	stb	r2,-16(fp)
 80015dc:	00801244 	movi	r2,73
 80015e0:	e0bffc45 	stb	r2,-15(fp)
 80015e4:	00801304 	movi	r2,76
 80015e8:	e0bffc85 	stb	r2,-14(fp)
 80015ec:	00801104 	movi	r2,68
 80015f0:	e0bffcc5 	stb	r2,-13(fp)
 80015f4:	e03ffd05 	stb	zero,-12(fp)
	const char menu_5[] = "HEALTHY";
 80015f8:	00801204 	movi	r2,72
 80015fc:	e0bffd45 	stb	r2,-11(fp)
 8001600:	00801144 	movi	r2,69
 8001604:	e0bffd85 	stb	r2,-10(fp)
 8001608:	00801044 	movi	r2,65
 800160c:	e0bffdc5 	stb	r2,-9(fp)
 8001610:	00801304 	movi	r2,76
 8001614:	e0bffe05 	stb	r2,-8(fp)
 8001618:	00801504 	movi	r2,84
 800161c:	e0bffe45 	stb	r2,-7(fp)
 8001620:	00801204 	movi	r2,72
 8001624:	e0bffe85 	stb	r2,-6(fp)
 8001628:	00801644 	movi	r2,89
 800162c:	e0bffec5 	stb	r2,-5(fp)
 8001630:	e03fff05 	stb	zero,-4(fp)

	int i;
	for (i = 0; i < sizeof(menu); i++)
 8001634:	e03ff215 	stw	zero,-56(fp)
 8001638:	00001406 	br	800168c <titles_menu+0x170>
		OutGraphicsCharFont2a((360 + 13 * i), 70, 0, 6, menu[i], 1); //for pulmonary
 800163c:	e0bff217 	ldw	r2,-56(fp)
 8001640:	10800364 	muli	r2,r2,13
 8001644:	11005a04 	addi	r4,r2,360
 8001648:	e0fff304 	addi	r3,fp,-52
 800164c:	e0bff217 	ldw	r2,-56(fp)
 8001650:	1885883a 	add	r2,r3,r2
 8001654:	10800003 	ldbu	r2,0(r2)
 8001658:	10803fcc 	andi	r2,r2,255
 800165c:	1080201c 	xori	r2,r2,128
 8001660:	10bfe004 	addi	r2,r2,-128
 8001664:	d8800015 	stw	r2,0(sp)
 8001668:	00800044 	movi	r2,1
 800166c:	d8800115 	stw	r2,4(sp)
 8001670:	01401184 	movi	r5,70
 8001674:	000d883a 	mov	r6,zero
 8001678:	01c00184 	movi	r7,6
 800167c:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	const char menu_3[] = "ANEMIC";
	const char menu_4[] = "CHILD";
	const char menu_5[] = "HEALTHY";

	int i;
	for (i = 0; i < sizeof(menu); i++)
 8001680:	e0bff217 	ldw	r2,-56(fp)
 8001684:	10800044 	addi	r2,r2,1
 8001688:	e0bff215 	stw	r2,-56(fp)
 800168c:	e0bff217 	ldw	r2,-56(fp)
 8001690:	108002b0 	cmpltui	r2,r2,10
 8001694:	103fe91e 	bne	r2,zero,800163c <__alt_data_end+0xfc00163c>
		OutGraphicsCharFont2a((360 + 13 * i), 70, 0, 6, menu[i], 1); //for pulmonary

	for (i = 0; i < sizeof(menu_1); i++)
 8001698:	e03ff215 	stw	zero,-56(fp)
 800169c:	00001406 	br	80016f0 <titles_menu+0x1d4>
		OutGraphicsCharFont2a((370 + 13 * i), 90, 0, 6, menu_1[i], 1); //for diseases
 80016a0:	e0bff217 	ldw	r2,-56(fp)
 80016a4:	10800364 	muli	r2,r2,13
 80016a8:	11005c84 	addi	r4,r2,370
 80016ac:	e0fff584 	addi	r3,fp,-42
 80016b0:	e0bff217 	ldw	r2,-56(fp)
 80016b4:	1885883a 	add	r2,r3,r2
 80016b8:	10800003 	ldbu	r2,0(r2)
 80016bc:	10803fcc 	andi	r2,r2,255
 80016c0:	1080201c 	xori	r2,r2,128
 80016c4:	10bfe004 	addi	r2,r2,-128
 80016c8:	d8800015 	stw	r2,0(sp)
 80016cc:	00800044 	movi	r2,1
 80016d0:	d8800115 	stw	r2,4(sp)
 80016d4:	01401684 	movi	r5,90
 80016d8:	000d883a 	mov	r6,zero
 80016dc:	01c00184 	movi	r7,6
 80016e0:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>

	int i;
	for (i = 0; i < sizeof(menu); i++)
		OutGraphicsCharFont2a((360 + 13 * i), 70, 0, 6, menu[i], 1); //for pulmonary

	for (i = 0; i < sizeof(menu_1); i++)
 80016e4:	e0bff217 	ldw	r2,-56(fp)
 80016e8:	10800044 	addi	r2,r2,1
 80016ec:	e0bff215 	stw	r2,-56(fp)
 80016f0:	e0bff217 	ldw	r2,-56(fp)
 80016f4:	10800270 	cmpltui	r2,r2,9
 80016f8:	103fe91e 	bne	r2,zero,80016a0 <__alt_data_end+0xfc0016a0>
		OutGraphicsCharFont2a((370 + 13 * i), 90, 0, 6, menu_1[i], 1); //for diseases

	for (i = 0; i < sizeof(menu_2); i++)
 80016fc:	e03ff215 	stw	zero,-56(fp)
 8001700:	00001406 	br	8001754 <titles_menu+0x238>
		OutGraphicsCharFont2a((370 + 13 * i), 170, 0, 6, menu_2[i], 1); //for pregnant
 8001704:	e0bff217 	ldw	r2,-56(fp)
 8001708:	10800364 	muli	r2,r2,13
 800170c:	11005c84 	addi	r4,r2,370
 8001710:	e0fff7c4 	addi	r3,fp,-33
 8001714:	e0bff217 	ldw	r2,-56(fp)
 8001718:	1885883a 	add	r2,r3,r2
 800171c:	10800003 	ldbu	r2,0(r2)
 8001720:	10803fcc 	andi	r2,r2,255
 8001724:	1080201c 	xori	r2,r2,128
 8001728:	10bfe004 	addi	r2,r2,-128
 800172c:	d8800015 	stw	r2,0(sp)
 8001730:	00800044 	movi	r2,1
 8001734:	d8800115 	stw	r2,4(sp)
 8001738:	01402a84 	movi	r5,170
 800173c:	000d883a 	mov	r6,zero
 8001740:	01c00184 	movi	r7,6
 8001744:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((360 + 13 * i), 70, 0, 6, menu[i], 1); //for pulmonary

	for (i = 0; i < sizeof(menu_1); i++)
		OutGraphicsCharFont2a((370 + 13 * i), 90, 0, 6, menu_1[i], 1); //for diseases

	for (i = 0; i < sizeof(menu_2); i++)
 8001748:	e0bff217 	ldw	r2,-56(fp)
 800174c:	10800044 	addi	r2,r2,1
 8001750:	e0bff215 	stw	r2,-56(fp)
 8001754:	e0bff217 	ldw	r2,-56(fp)
 8001758:	10800270 	cmpltui	r2,r2,9
 800175c:	103fe91e 	bne	r2,zero,8001704 <__alt_data_end+0xfc001704>
		OutGraphicsCharFont2a((370 + 13 * i), 170, 0, 6, menu_2[i], 1); //for pregnant

	for (i = 0; i < sizeof(menu_3); i++)
 8001760:	e03ff215 	stw	zero,-56(fp)
 8001764:	00001406 	br	80017b8 <titles_menu+0x29c>
		OutGraphicsCharFont2a((380 + 13 * i), 260, 0, 6, menu_3[i], 1); //for Anemic
 8001768:	e0bff217 	ldw	r2,-56(fp)
 800176c:	10800364 	muli	r2,r2,13
 8001770:	11005f04 	addi	r4,r2,380
 8001774:	e0fffa04 	addi	r3,fp,-24
 8001778:	e0bff217 	ldw	r2,-56(fp)
 800177c:	1885883a 	add	r2,r3,r2
 8001780:	10800003 	ldbu	r2,0(r2)
 8001784:	10803fcc 	andi	r2,r2,255
 8001788:	1080201c 	xori	r2,r2,128
 800178c:	10bfe004 	addi	r2,r2,-128
 8001790:	d8800015 	stw	r2,0(sp)
 8001794:	00800044 	movi	r2,1
 8001798:	d8800115 	stw	r2,4(sp)
 800179c:	01404104 	movi	r5,260
 80017a0:	000d883a 	mov	r6,zero
 80017a4:	01c00184 	movi	r7,6
 80017a8:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((370 + 13 * i), 90, 0, 6, menu_1[i], 1); //for diseases

	for (i = 0; i < sizeof(menu_2); i++)
		OutGraphicsCharFont2a((370 + 13 * i), 170, 0, 6, menu_2[i], 1); //for pregnant

	for (i = 0; i < sizeof(menu_3); i++)
 80017ac:	e0bff217 	ldw	r2,-56(fp)
 80017b0:	10800044 	addi	r2,r2,1
 80017b4:	e0bff215 	stw	r2,-56(fp)
 80017b8:	e0bff217 	ldw	r2,-56(fp)
 80017bc:	108001f0 	cmpltui	r2,r2,7
 80017c0:	103fe91e 	bne	r2,zero,8001768 <__alt_data_end+0xfc001768>
		OutGraphicsCharFont2a((380 + 13 * i), 260, 0, 6, menu_3[i], 1); //for Anemic

	for (i = 0; i < sizeof(menu_4); i++)
 80017c4:	e03ff215 	stw	zero,-56(fp)
 80017c8:	00001406 	br	800181c <titles_menu+0x300>
		OutGraphicsCharFont2a((390 + 13 * i), 350, 0, 6, menu_4[i], 1); //for child
 80017cc:	e0bff217 	ldw	r2,-56(fp)
 80017d0:	10800364 	muli	r2,r2,13
 80017d4:	11006184 	addi	r4,r2,390
 80017d8:	e0fffbc4 	addi	r3,fp,-17
 80017dc:	e0bff217 	ldw	r2,-56(fp)
 80017e0:	1885883a 	add	r2,r3,r2
 80017e4:	10800003 	ldbu	r2,0(r2)
 80017e8:	10803fcc 	andi	r2,r2,255
 80017ec:	1080201c 	xori	r2,r2,128
 80017f0:	10bfe004 	addi	r2,r2,-128
 80017f4:	d8800015 	stw	r2,0(sp)
 80017f8:	00800044 	movi	r2,1
 80017fc:	d8800115 	stw	r2,4(sp)
 8001800:	01405784 	movi	r5,350
 8001804:	000d883a 	mov	r6,zero
 8001808:	01c00184 	movi	r7,6
 800180c:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((370 + 13 * i), 170, 0, 6, menu_2[i], 1); //for pregnant

	for (i = 0; i < sizeof(menu_3); i++)
		OutGraphicsCharFont2a((380 + 13 * i), 260, 0, 6, menu_3[i], 1); //for Anemic

	for (i = 0; i < sizeof(menu_4); i++)
 8001810:	e0bff217 	ldw	r2,-56(fp)
 8001814:	10800044 	addi	r2,r2,1
 8001818:	e0bff215 	stw	r2,-56(fp)
 800181c:	e0bff217 	ldw	r2,-56(fp)
 8001820:	108001b0 	cmpltui	r2,r2,6
 8001824:	103fe91e 	bne	r2,zero,80017cc <__alt_data_end+0xfc0017cc>
		OutGraphicsCharFont2a((390 + 13 * i), 350, 0, 6, menu_4[i], 1); //for child

	for (i = 0; i < sizeof(menu_5); i++)
 8001828:	e03ff215 	stw	zero,-56(fp)
 800182c:	00001406 	br	8001880 <titles_menu+0x364>
		OutGraphicsCharFont2a((380 + 13 * i), 440, 0, 6, menu_5[i], 1); //for healthy
 8001830:	e0bff217 	ldw	r2,-56(fp)
 8001834:	10800364 	muli	r2,r2,13
 8001838:	11005f04 	addi	r4,r2,380
 800183c:	e0fffd44 	addi	r3,fp,-11
 8001840:	e0bff217 	ldw	r2,-56(fp)
 8001844:	1885883a 	add	r2,r3,r2
 8001848:	10800003 	ldbu	r2,0(r2)
 800184c:	10803fcc 	andi	r2,r2,255
 8001850:	1080201c 	xori	r2,r2,128
 8001854:	10bfe004 	addi	r2,r2,-128
 8001858:	d8800015 	stw	r2,0(sp)
 800185c:	00800044 	movi	r2,1
 8001860:	d8800115 	stw	r2,4(sp)
 8001864:	01406e04 	movi	r5,440
 8001868:	000d883a 	mov	r6,zero
 800186c:	01c00184 	movi	r7,6
 8001870:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((380 + 13 * i), 260, 0, 6, menu_3[i], 1); //for Anemic

	for (i = 0; i < sizeof(menu_4); i++)
		OutGraphicsCharFont2a((390 + 13 * i), 350, 0, 6, menu_4[i], 1); //for child

	for (i = 0; i < sizeof(menu_5); i++)
 8001874:	e0bff217 	ldw	r2,-56(fp)
 8001878:	10800044 	addi	r2,r2,1
 800187c:	e0bff215 	stw	r2,-56(fp)
 8001880:	e0bff217 	ldw	r2,-56(fp)
 8001884:	10800230 	cmpltui	r2,r2,8
 8001888:	103fe91e 	bne	r2,zero,8001830 <__alt_data_end+0xfc001830>
		OutGraphicsCharFont2a((380 + 13 * i), 440, 0, 6, menu_5[i], 1); //for healthy
}
 800188c:	e037883a 	mov	sp,fp
 8001890:	dfc00117 	ldw	ra,4(sp)
 8001894:	df000017 	ldw	fp,0(sp)
 8001898:	dec00204 	addi	sp,sp,8
 800189c:	f800283a 	ret

080018a0 <tostring>:
void tostring(char str[], int num) {
 80018a0:	defff904 	addi	sp,sp,-28
 80018a4:	df000615 	stw	fp,24(sp)
 80018a8:	df000604 	addi	fp,sp,24
 80018ac:	e13ffe15 	stw	r4,-8(fp)
 80018b0:	e17fff15 	stw	r5,-4(fp)
	int i;
	int rem;
	int len = 0;
 80018b4:	e03ffb15 	stw	zero,-20(fp)
	int n;
	n = num;
 80018b8:	e0bfff17 	ldw	r2,-4(fp)
 80018bc:	e0bffc15 	stw	r2,-16(fp)
	while (n != 0) {
 80018c0:	00000706 	br	80018e0 <tostring+0x40>
		len++;
 80018c4:	e0bffb17 	ldw	r2,-20(fp)
 80018c8:	10800044 	addi	r2,r2,1
 80018cc:	e0bffb15 	stw	r2,-20(fp)
		n /= 10;
 80018d0:	e0fffc17 	ldw	r3,-16(fp)
 80018d4:	00800284 	movi	r2,10
 80018d8:	1885283a 	div	r2,r3,r2
 80018dc:	e0bffc15 	stw	r2,-16(fp)
	int i;
	int rem;
	int len = 0;
	int n;
	n = num;
	while (n != 0) {
 80018e0:	e0bffc17 	ldw	r2,-16(fp)
 80018e4:	103ff71e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++) {
 80018e8:	e03ffa15 	stw	zero,-24(fp)
 80018ec:	00001706 	br	800194c <tostring+0xac>
		rem = num % 10;
 80018f0:	e0bfff17 	ldw	r2,-4(fp)
 80018f4:	00c00284 	movi	r3,10
 80018f8:	10c7283a 	div	r3,r2,r3
 80018fc:	18c002a4 	muli	r3,r3,10
 8001900:	10c5c83a 	sub	r2,r2,r3
 8001904:	e0bffd15 	stw	r2,-12(fp)
		num = num / 10;
 8001908:	e0ffff17 	ldw	r3,-4(fp)
 800190c:	00800284 	movi	r2,10
 8001910:	1885283a 	div	r2,r3,r2
 8001914:	e0bfff15 	stw	r2,-4(fp)
		str[len - (i + 1)] = rem + '0';
 8001918:	e0bffa17 	ldw	r2,-24(fp)
 800191c:	0086303a 	nor	r3,zero,r2
 8001920:	e0bffb17 	ldw	r2,-20(fp)
 8001924:	1885883a 	add	r2,r3,r2
 8001928:	1007883a 	mov	r3,r2
 800192c:	e0bffe17 	ldw	r2,-8(fp)
 8001930:	10c5883a 	add	r2,r2,r3
 8001934:	e0fffd17 	ldw	r3,-12(fp)
 8001938:	18c00c04 	addi	r3,r3,48
 800193c:	10c00005 	stb	r3,0(r2)
	n = num;
	while (n != 0) {
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++) {
 8001940:	e0bffa17 	ldw	r2,-24(fp)
 8001944:	10800044 	addi	r2,r2,1
 8001948:	e0bffa15 	stw	r2,-24(fp)
 800194c:	e0fffa17 	ldw	r3,-24(fp)
 8001950:	e0bffb17 	ldw	r2,-20(fp)
 8001954:	18bfe616 	blt	r3,r2,80018f0 <__alt_data_end+0xfc0018f0>
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
 8001958:	e0bffb17 	ldw	r2,-20(fp)
 800195c:	e0fffe17 	ldw	r3,-8(fp)
 8001960:	1885883a 	add	r2,r3,r2
 8001964:	10000005 	stb	zero,0(r2)
}
 8001968:	e037883a 	mov	sp,fp
 800196c:	df000017 	ldw	fp,0(sp)
 8001970:	dec00104 	addi	sp,sp,4
 8001974:	f800283a 	ret

08001978 <pulse_title>:
 **The function that writes the text choose your category
 *******************************************************************************/

char dataAscii[8][20];

void pulse_title() {
 8001978:	defff304 	addi	sp,sp,-52
 800197c:	dfc00c15 	stw	ra,48(sp)
 8001980:	df000b15 	stw	fp,44(sp)
 8001984:	df000b04 	addi	fp,sp,44
	const char pulse[] = "PULSE RATE FOR: ";
 8001988:	0094d334 	movhi	r2,21324
 800198c:	10955404 	addi	r2,r2,21840
 8001990:	e0bff815 	stw	r2,-32(fp)
 8001994:	009054b4 	movhi	r2,16722
 8001998:	10881144 	addi	r2,r2,8261
 800199c:	e0bff915 	stw	r2,-28(fp)
 80019a0:	00918834 	movhi	r2,17952
 80019a4:	10915504 	addi	r2,r2,17748
 80019a8:	e0bffa15 	stw	r2,-24(fp)
 80019ac:	00880eb4 	movhi	r2,8250
 80019b0:	109493c4 	addi	r2,r2,21071
 80019b4:	e0bffb15 	stw	r2,-20(fp)
 80019b8:	e03ffc05 	stb	zero,-16(fp)
	const char refresh[] = "REFRESH";
 80019bc:	00801484 	movi	r2,82
 80019c0:	e0bffc45 	stb	r2,-15(fp)
 80019c4:	00801144 	movi	r2,69
 80019c8:	e0bffc85 	stb	r2,-14(fp)
 80019cc:	00801184 	movi	r2,70
 80019d0:	e0bffcc5 	stb	r2,-13(fp)
 80019d4:	00801484 	movi	r2,82
 80019d8:	e0bffd05 	stb	r2,-12(fp)
 80019dc:	00801144 	movi	r2,69
 80019e0:	e0bffd45 	stb	r2,-11(fp)
 80019e4:	008014c4 	movi	r2,83
 80019e8:	e0bffd85 	stb	r2,-10(fp)
 80019ec:	00801204 	movi	r2,72
 80019f0:	e0bffdc5 	stb	r2,-9(fp)
 80019f4:	e03ffe05 	stb	zero,-8(fp)
	const char reset[] = "RESET";
 80019f8:	00801484 	movi	r2,82
 80019fc:	e0bffe45 	stb	r2,-7(fp)
 8001a00:	00801144 	movi	r2,69
 8001a04:	e0bffe85 	stb	r2,-6(fp)
 8001a08:	008014c4 	movi	r2,83
 8001a0c:	e0bffec5 	stb	r2,-5(fp)
 8001a10:	00801144 	movi	r2,69
 8001a14:	e0bfff05 	stb	r2,-4(fp)
 8001a18:	00801504 	movi	r2,84
 8001a1c:	e0bfff45 	stb	r2,-3(fp)
 8001a20:	e03fff85 	stb	zero,-2(fp)

	drawFilledRectangle(75, 400, 180, 700, 0); //color of screen to show pulse rate
 8001a24:	d8000015 	stw	zero,0(sp)
 8001a28:	010012c4 	movi	r4,75
 8001a2c:	01406404 	movi	r5,400
 8001a30:	01802d04 	movi	r6,180
 8001a34:	01c0af04 	movi	r7,700
 8001a38:	8000ee40 	call	8000ee4 <drawFilledRectangle>

	drawFilledRectangle(410, 465, 540, 610, 3); //refresh button with green
 8001a3c:	008000c4 	movi	r2,3
 8001a40:	d8800015 	stw	r2,0(sp)
 8001a44:	01006684 	movi	r4,410
 8001a48:	01407444 	movi	r5,465
 8001a4c:	01808704 	movi	r6,540
 8001a50:	01c09884 	movi	r7,610
 8001a54:	8000ee40 	call	8000ee4 <drawFilledRectangle>
	drawFilledRectangle(410, 465, 630, 700, 2);  //reset button with red
 8001a58:	00800084 	movi	r2,2
 8001a5c:	d8800015 	stw	r2,0(sp)
 8001a60:	01006684 	movi	r4,410
 8001a64:	01407444 	movi	r5,465
 8001a68:	01809d84 	movi	r6,630
 8001a6c:	01c0af04 	movi	r7,700
 8001a70:	8000ee40 	call	8000ee4 <drawFilledRectangle>

	int i;
	for (i = 0; i < sizeof(pulse); i++)
 8001a74:	e03ff715 	stw	zero,-36(fp)
 8001a78:	00001406 	br	8001acc <pulse_title+0x154>
		OutGraphicsCharFont2a((250 + 13 * i), 45, 0, 1, pulse[i], 1);
 8001a7c:	e0bff717 	ldw	r2,-36(fp)
 8001a80:	10800364 	muli	r2,r2,13
 8001a84:	11003e84 	addi	r4,r2,250
 8001a88:	e0fff804 	addi	r3,fp,-32
 8001a8c:	e0bff717 	ldw	r2,-36(fp)
 8001a90:	1885883a 	add	r2,r3,r2
 8001a94:	10800003 	ldbu	r2,0(r2)
 8001a98:	10803fcc 	andi	r2,r2,255
 8001a9c:	1080201c 	xori	r2,r2,128
 8001aa0:	10bfe004 	addi	r2,r2,-128
 8001aa4:	d8800015 	stw	r2,0(sp)
 8001aa8:	00800044 	movi	r2,1
 8001aac:	d8800115 	stw	r2,4(sp)
 8001ab0:	01400b44 	movi	r5,45
 8001ab4:	000d883a 	mov	r6,zero
 8001ab8:	01c00044 	movi	r7,1
 8001abc:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>

	drawFilledRectangle(410, 465, 540, 610, 3); //refresh button with green
	drawFilledRectangle(410, 465, 630, 700, 2);  //reset button with red

	int i;
	for (i = 0; i < sizeof(pulse); i++)
 8001ac0:	e0bff717 	ldw	r2,-36(fp)
 8001ac4:	10800044 	addi	r2,r2,1
 8001ac8:	e0bff715 	stw	r2,-36(fp)
 8001acc:	e0bff717 	ldw	r2,-36(fp)
 8001ad0:	10800470 	cmpltui	r2,r2,17
 8001ad4:	103fe91e 	bne	r2,zero,8001a7c <__alt_data_end+0xfc001a7c>
		OutGraphicsCharFont2a((250 + 13 * i), 45, 0, 1, pulse[i], 1);

	for (i = 0; i < sizeof(refresh); i++)
 8001ad8:	e03ff715 	stw	zero,-36(fp)
 8001adc:	00001406 	br	8001b30 <pulse_title+0x1b8>
		OutGraphicsCharFont2a((540 + 10 * i), 430, 1, 3, refresh[i], 1);
 8001ae0:	e0bff717 	ldw	r2,-36(fp)
 8001ae4:	108002a4 	muli	r2,r2,10
 8001ae8:	11008704 	addi	r4,r2,540
 8001aec:	e0fffc44 	addi	r3,fp,-15
 8001af0:	e0bff717 	ldw	r2,-36(fp)
 8001af4:	1885883a 	add	r2,r3,r2
 8001af8:	10800003 	ldbu	r2,0(r2)
 8001afc:	10803fcc 	andi	r2,r2,255
 8001b00:	1080201c 	xori	r2,r2,128
 8001b04:	10bfe004 	addi	r2,r2,-128
 8001b08:	d8800015 	stw	r2,0(sp)
 8001b0c:	00800044 	movi	r2,1
 8001b10:	d8800115 	stw	r2,4(sp)
 8001b14:	01406b84 	movi	r5,430
 8001b18:	01800044 	movi	r6,1
 8001b1c:	01c000c4 	movi	r7,3
 8001b20:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>

	int i;
	for (i = 0; i < sizeof(pulse); i++)
		OutGraphicsCharFont2a((250 + 13 * i), 45, 0, 1, pulse[i], 1);

	for (i = 0; i < sizeof(refresh); i++)
 8001b24:	e0bff717 	ldw	r2,-36(fp)
 8001b28:	10800044 	addi	r2,r2,1
 8001b2c:	e0bff715 	stw	r2,-36(fp)
 8001b30:	e0bff717 	ldw	r2,-36(fp)
 8001b34:	10800230 	cmpltui	r2,r2,8
 8001b38:	103fe91e 	bne	r2,zero,8001ae0 <__alt_data_end+0xfc001ae0>
		OutGraphicsCharFont2a((540 + 10 * i), 430, 1, 3, refresh[i], 1);

	for (i = 0; i < sizeof(reset); i++)
 8001b3c:	e03ff715 	stw	zero,-36(fp)
 8001b40:	00001406 	br	8001b94 <pulse_title+0x21c>
		OutGraphicsCharFont2a((643 + 11 * i), 430, 1, 2, reset[i], 1);
 8001b44:	e0bff717 	ldw	r2,-36(fp)
 8001b48:	108002e4 	muli	r2,r2,11
 8001b4c:	1100a0c4 	addi	r4,r2,643
 8001b50:	e0fffe44 	addi	r3,fp,-7
 8001b54:	e0bff717 	ldw	r2,-36(fp)
 8001b58:	1885883a 	add	r2,r3,r2
 8001b5c:	10800003 	ldbu	r2,0(r2)
 8001b60:	10803fcc 	andi	r2,r2,255
 8001b64:	1080201c 	xori	r2,r2,128
 8001b68:	10bfe004 	addi	r2,r2,-128
 8001b6c:	d8800015 	stw	r2,0(sp)
 8001b70:	00800044 	movi	r2,1
 8001b74:	d8800115 	stw	r2,4(sp)
 8001b78:	01406b84 	movi	r5,430
 8001b7c:	01800044 	movi	r6,1
 8001b80:	01c00084 	movi	r7,2
 8001b84:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((250 + 13 * i), 45, 0, 1, pulse[i], 1);

	for (i = 0; i < sizeof(refresh); i++)
		OutGraphicsCharFont2a((540 + 10 * i), 430, 1, 3, refresh[i], 1);

	for (i = 0; i < sizeof(reset); i++)
 8001b88:	e0bff717 	ldw	r2,-36(fp)
 8001b8c:	10800044 	addi	r2,r2,1
 8001b90:	e0bff715 	stw	r2,-36(fp)
 8001b94:	e0bff717 	ldw	r2,-36(fp)
 8001b98:	108001b0 	cmpltui	r2,r2,6
 8001b9c:	103fe91e 	bne	r2,zero,8001b44 <__alt_data_end+0xfc001b44>
		OutGraphicsCharFont2a((643 + 11 * i), 430, 1, 2, reset[i], 1);

}
 8001ba0:	e037883a 	mov	sp,fp
 8001ba4:	dfc00117 	ldw	ra,4(sp)
 8001ba8:	df000017 	ldw	fp,0(sp)
 8001bac:	dec00204 	addi	sp,sp,8
 8001bb0:	f800283a 	ret

08001bb4 <side_menu>:

void side_menu() {
 8001bb4:	deffe504 	addi	sp,sp,-108
 8001bb8:	dfc01a15 	stw	ra,104(sp)
 8001bbc:	df001915 	stw	fp,100(sp)
 8001bc0:	df001904 	addi	fp,sp,100
	const char oxy[] = "O2 Saturation";
 8001bc4:	0094c834 	movhi	r2,21280
 8001bc8:	108c93c4 	addi	r2,r2,12879
 8001bcc:	e0bfea15 	stw	r2,-88(fp)
 8001bd0:	009c9d74 	movhi	r2,29301
 8001bd4:	109d1844 	addi	r2,r2,29793
 8001bd8:	e0bfeb15 	stw	r2,-84(fp)
 8001bdc:	009bda74 	movhi	r2,28521
 8001be0:	109d1844 	addi	r2,r2,29793
 8001be4:	e0bfec15 	stw	r2,-80(fp)
 8001be8:	00801b84 	movi	r2,110
 8001bec:	e0bfed0d 	sth	r2,-76(fp)
	const char abbr[] = "(%SpO2)";
 8001bf0:	00894a04 	movi	r2,9512
 8001bf4:	e0bfed8d 	sth	r2,-74(fp)
 8001bf8:	009c14c4 	movi	r2,28755
 8001bfc:	e0bfee0d 	sth	r2,-72(fp)
 8001c00:	008c93c4 	movi	r2,12879
 8001c04:	e0bfee8d 	sth	r2,-70(fp)
 8001c08:	00800a44 	movi	r2,41
 8001c0c:	e0bfef0d 	sth	r2,-68(fp)
	const char pr[] = "PR/BMP";
 8001c10:	00949404 	movi	r2,21072
 8001c14:	e0bfef8d 	sth	r2,-66(fp)
 8001c18:	00908bc4 	movi	r2,16943
 8001c1c:	e0bff00d 	sth	r2,-64(fp)
 8001c20:	00941344 	movi	r2,20557
 8001c24:	e0bff08d 	sth	r2,-62(fp)
 8001c28:	e03ff105 	stb	zero,-60(fp)
	const char opt_oxy[] = "Optimal O2 Saturation: ";
 8001c2c:	008200b4 	movhi	r2,2050
 8001c30:	10b55004 	addi	r2,r2,-10944
 8001c34:	e0fff144 	addi	r3,fp,-59
 8001c38:	100b883a 	mov	r5,r2
 8001c3c:	00800604 	movi	r2,24
 8001c40:	1809883a 	mov	r4,r3
 8001c44:	100d883a 	mov	r6,r2
 8001c48:	8003f580 	call	8003f58 <memcpy>
	const char opt_pul[] = "Optimal Pulse Rate: ";
 8001c4c:	008200b4 	movhi	r2,2050
 8001c50:	10b55604 	addi	r2,r2,-10920
 8001c54:	e0fff744 	addi	r3,fp,-35
 8001c58:	100b883a 	mov	r5,r2
 8001c5c:	00800544 	movi	r2,21
 8001c60:	1809883a 	mov	r4,r3
 8001c64:	100d883a 	mov	r6,r2
 8001c68:	8003f580 	call	8003f58 <memcpy>
	const char gps_time[] = "Time in UTC";
 8001c6c:	009a5504 	movi	r2,26964
 8001c70:	e0bffc8d 	sth	r2,-14(fp)
 8001c74:	00995b44 	movi	r2,25965
 8001c78:	e0bffd0d 	sth	r2,-12(fp)
 8001c7c:	009a4804 	movi	r2,26912
 8001c80:	e0bffd8d 	sth	r2,-10(fp)
 8001c84:	00881b84 	movi	r2,8302
 8001c88:	e0bffe0d 	sth	r2,-8(fp)
 8001c8c:	00951544 	movi	r2,21589
 8001c90:	e0bffe8d 	sth	r2,-6(fp)
 8001c94:	008010c4 	movi	r2,67
 8001c98:	e0bfff0d 	sth	r2,-4(fp)

	int i;
	for (i = 0; i < sizeof(oxy); i++)
 8001c9c:	e03fe915 	stw	zero,-92(fp)
 8001ca0:	00001406 	br	8001cf4 <side_menu+0x140>
		OutGraphicsCharFont2a((40 + 10 * i), 160, 0, 1, oxy[i], 1); //oxygen saturation
 8001ca4:	e0bfe917 	ldw	r2,-92(fp)
 8001ca8:	108002a4 	muli	r2,r2,10
 8001cac:	11000a04 	addi	r4,r2,40
 8001cb0:	e0ffea04 	addi	r3,fp,-88
 8001cb4:	e0bfe917 	ldw	r2,-92(fp)
 8001cb8:	1885883a 	add	r2,r3,r2
 8001cbc:	10800003 	ldbu	r2,0(r2)
 8001cc0:	10803fcc 	andi	r2,r2,255
 8001cc4:	1080201c 	xori	r2,r2,128
 8001cc8:	10bfe004 	addi	r2,r2,-128
 8001ccc:	d8800015 	stw	r2,0(sp)
 8001cd0:	00800044 	movi	r2,1
 8001cd4:	d8800115 	stw	r2,4(sp)
 8001cd8:	01402804 	movi	r5,160
 8001cdc:	000d883a 	mov	r6,zero
 8001ce0:	01c00044 	movi	r7,1
 8001ce4:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	const char opt_oxy[] = "Optimal O2 Saturation: ";
	const char opt_pul[] = "Optimal Pulse Rate: ";
	const char gps_time[] = "Time in UTC";

	int i;
	for (i = 0; i < sizeof(oxy); i++)
 8001ce8:	e0bfe917 	ldw	r2,-92(fp)
 8001cec:	10800044 	addi	r2,r2,1
 8001cf0:	e0bfe915 	stw	r2,-92(fp)
 8001cf4:	e0bfe917 	ldw	r2,-92(fp)
 8001cf8:	108003b0 	cmpltui	r2,r2,14
 8001cfc:	103fe91e 	bne	r2,zero,8001ca4 <__alt_data_end+0xfc001ca4>
		OutGraphicsCharFont2a((40 + 10 * i), 160, 0, 1, oxy[i], 1); //oxygen saturation

	for (i = 0; i < sizeof(abbr); i++)
 8001d00:	e03fe915 	stw	zero,-92(fp)
 8001d04:	00001406 	br	8001d58 <side_menu+0x1a4>
		OutGraphicsCharFont2a((60 + 13 * i), 180, 0, 1, abbr[i], 1); //abbreviation
 8001d08:	e0bfe917 	ldw	r2,-92(fp)
 8001d0c:	10800364 	muli	r2,r2,13
 8001d10:	11000f04 	addi	r4,r2,60
 8001d14:	e0ffed84 	addi	r3,fp,-74
 8001d18:	e0bfe917 	ldw	r2,-92(fp)
 8001d1c:	1885883a 	add	r2,r3,r2
 8001d20:	10800003 	ldbu	r2,0(r2)
 8001d24:	10803fcc 	andi	r2,r2,255
 8001d28:	1080201c 	xori	r2,r2,128
 8001d2c:	10bfe004 	addi	r2,r2,-128
 8001d30:	d8800015 	stw	r2,0(sp)
 8001d34:	00800044 	movi	r2,1
 8001d38:	d8800115 	stw	r2,4(sp)
 8001d3c:	01402d04 	movi	r5,180
 8001d40:	000d883a 	mov	r6,zero
 8001d44:	01c00044 	movi	r7,1
 8001d48:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>

	int i;
	for (i = 0; i < sizeof(oxy); i++)
		OutGraphicsCharFont2a((40 + 10 * i), 160, 0, 1, oxy[i], 1); //oxygen saturation

	for (i = 0; i < sizeof(abbr); i++)
 8001d4c:	e0bfe917 	ldw	r2,-92(fp)
 8001d50:	10800044 	addi	r2,r2,1
 8001d54:	e0bfe915 	stw	r2,-92(fp)
 8001d58:	e0bfe917 	ldw	r2,-92(fp)
 8001d5c:	10800230 	cmpltui	r2,r2,8
 8001d60:	103fe91e 	bne	r2,zero,8001d08 <__alt_data_end+0xfc001d08>
		OutGraphicsCharFont2a((60 + 13 * i), 180, 0, 1, abbr[i], 1); //abbreviation
	drawRectangle(210, 270, 50, 150, 0);
 8001d64:	d8000015 	stw	zero,0(sp)
 8001d68:	01003484 	movi	r4,210
 8001d6c:	01404384 	movi	r5,270
 8001d70:	01800c84 	movi	r6,50
 8001d74:	01c02584 	movi	r7,150
 8001d78:	8000fc80 	call	8000fc8 <drawRectangle>

	for (i = 0; i < sizeof(pr); i++)
 8001d7c:	e03fe915 	stw	zero,-92(fp)
 8001d80:	00001406 	br	8001dd4 <side_menu+0x220>
		OutGraphicsCharFont2a((70 + 13 * i), 290, 0, 1, pr[i], 1); //bmp and pr
 8001d84:	e0bfe917 	ldw	r2,-92(fp)
 8001d88:	10800364 	muli	r2,r2,13
 8001d8c:	11001184 	addi	r4,r2,70
 8001d90:	e0ffef84 	addi	r3,fp,-66
 8001d94:	e0bfe917 	ldw	r2,-92(fp)
 8001d98:	1885883a 	add	r2,r3,r2
 8001d9c:	10800003 	ldbu	r2,0(r2)
 8001da0:	10803fcc 	andi	r2,r2,255
 8001da4:	1080201c 	xori	r2,r2,128
 8001da8:	10bfe004 	addi	r2,r2,-128
 8001dac:	d8800015 	stw	r2,0(sp)
 8001db0:	00800044 	movi	r2,1
 8001db4:	d8800115 	stw	r2,4(sp)
 8001db8:	01404884 	movi	r5,290
 8001dbc:	000d883a 	mov	r6,zero
 8001dc0:	01c00044 	movi	r7,1
 8001dc4:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>

	for (i = 0; i < sizeof(abbr); i++)
		OutGraphicsCharFont2a((60 + 13 * i), 180, 0, 1, abbr[i], 1); //abbreviation
	drawRectangle(210, 270, 50, 150, 0);

	for (i = 0; i < sizeof(pr); i++)
 8001dc8:	e0bfe917 	ldw	r2,-92(fp)
 8001dcc:	10800044 	addi	r2,r2,1
 8001dd0:	e0bfe915 	stw	r2,-92(fp)
 8001dd4:	e0bfe917 	ldw	r2,-92(fp)
 8001dd8:	108001f0 	cmpltui	r2,r2,7
 8001ddc:	103fe91e 	bne	r2,zero,8001d84 <__alt_data_end+0xfc001d84>
		OutGraphicsCharFont2a((70 + 13 * i), 290, 0, 1, pr[i], 1); //bmp and pr
	drawRectangle(320, 380, 50, 150, 0);
 8001de0:	d8000015 	stw	zero,0(sp)
 8001de4:	01005004 	movi	r4,320
 8001de8:	01405f04 	movi	r5,380
 8001dec:	01800c84 	movi	r6,50
 8001df0:	01c02584 	movi	r7,150
 8001df4:	8000fc80 	call	8000fc8 <drawRectangle>

	for (i = 0; i < sizeof(opt_oxy); i++)
 8001df8:	e03fe915 	stw	zero,-92(fp)
 8001dfc:	00001406 	br	8001e50 <side_menu+0x29c>
		OutGraphicsCharFont2a((40 + 10 * i), 415, 4, 1, opt_oxy[i], 1); //Optimal O2 Saturation:
 8001e00:	e0bfe917 	ldw	r2,-92(fp)
 8001e04:	108002a4 	muli	r2,r2,10
 8001e08:	11000a04 	addi	r4,r2,40
 8001e0c:	e0fff144 	addi	r3,fp,-59
 8001e10:	e0bfe917 	ldw	r2,-92(fp)
 8001e14:	1885883a 	add	r2,r3,r2
 8001e18:	10800003 	ldbu	r2,0(r2)
 8001e1c:	10803fcc 	andi	r2,r2,255
 8001e20:	1080201c 	xori	r2,r2,128
 8001e24:	10bfe004 	addi	r2,r2,-128
 8001e28:	d8800015 	stw	r2,0(sp)
 8001e2c:	00800044 	movi	r2,1
 8001e30:	d8800115 	stw	r2,4(sp)
 8001e34:	014067c4 	movi	r5,415
 8001e38:	01800104 	movi	r6,4
 8001e3c:	01c00044 	movi	r7,1
 8001e40:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>

	for (i = 0; i < sizeof(pr); i++)
		OutGraphicsCharFont2a((70 + 13 * i), 290, 0, 1, pr[i], 1); //bmp and pr
	drawRectangle(320, 380, 50, 150, 0);

	for (i = 0; i < sizeof(opt_oxy); i++)
 8001e44:	e0bfe917 	ldw	r2,-92(fp)
 8001e48:	10800044 	addi	r2,r2,1
 8001e4c:	e0bfe915 	stw	r2,-92(fp)
 8001e50:	e0bfe917 	ldw	r2,-92(fp)
 8001e54:	10800630 	cmpltui	r2,r2,24
 8001e58:	103fe91e 	bne	r2,zero,8001e00 <__alt_data_end+0xfc001e00>
		OutGraphicsCharFont2a((40 + 10 * i), 415, 4, 1, opt_oxy[i], 1); //Optimal O2 Saturation:

	//for(i = 0; i < sizeof(okValue); i++)
	//OutGraphicsCharFont2a((260 + 11 * i), 415, 4, 1, okValue[i], 1); //OK VALUE DEPENDING ON STATE

	for (i = 0; i < sizeof(opt_pul); i++)
 8001e5c:	e03fe915 	stw	zero,-92(fp)
 8001e60:	00001406 	br	8001eb4 <side_menu+0x300>
		OutGraphicsCharFont2a((40 + 11 * i), 438, 4, 1, opt_pul[i], 1); //Optimal pulse rate
 8001e64:	e0bfe917 	ldw	r2,-92(fp)
 8001e68:	108002e4 	muli	r2,r2,11
 8001e6c:	11000a04 	addi	r4,r2,40
 8001e70:	e0fff744 	addi	r3,fp,-35
 8001e74:	e0bfe917 	ldw	r2,-92(fp)
 8001e78:	1885883a 	add	r2,r3,r2
 8001e7c:	10800003 	ldbu	r2,0(r2)
 8001e80:	10803fcc 	andi	r2,r2,255
 8001e84:	1080201c 	xori	r2,r2,128
 8001e88:	10bfe004 	addi	r2,r2,-128
 8001e8c:	d8800015 	stw	r2,0(sp)
 8001e90:	00800044 	movi	r2,1
 8001e94:	d8800115 	stw	r2,4(sp)
 8001e98:	01406d84 	movi	r5,438
 8001e9c:	01800104 	movi	r6,4
 8001ea0:	01c00044 	movi	r7,1
 8001ea4:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((40 + 10 * i), 415, 4, 1, opt_oxy[i], 1); //Optimal O2 Saturation:

	//for(i = 0; i < sizeof(okValue); i++)
	//OutGraphicsCharFont2a((260 + 11 * i), 415, 4, 1, okValue[i], 1); //OK VALUE DEPENDING ON STATE

	for (i = 0; i < sizeof(opt_pul); i++)
 8001ea8:	e0bfe917 	ldw	r2,-92(fp)
 8001eac:	10800044 	addi	r2,r2,1
 8001eb0:	e0bfe915 	stw	r2,-92(fp)
 8001eb4:	e0bfe917 	ldw	r2,-92(fp)
 8001eb8:	10800570 	cmpltui	r2,r2,21
 8001ebc:	103fe91e 	bne	r2,zero,8001e64 <__alt_data_end+0xfc001e64>
		OutGraphicsCharFont2a((40 + 11 * i), 438, 4, 1, opt_pul[i], 1); //Optimal pulse rate

	for (i = 0; i < sizeof(gps_time); i++)
 8001ec0:	e03fe915 	stw	zero,-92(fp)
 8001ec4:	00001406 	br	8001f18 <side_menu+0x364>
		OutGraphicsCharFont2a((40 + 11 * i), 100, 4, 1, gps_time[i], 1); //Time
 8001ec8:	e0bfe917 	ldw	r2,-92(fp)
 8001ecc:	108002e4 	muli	r2,r2,11
 8001ed0:	11000a04 	addi	r4,r2,40
 8001ed4:	e0fffc84 	addi	r3,fp,-14
 8001ed8:	e0bfe917 	ldw	r2,-92(fp)
 8001edc:	1885883a 	add	r2,r3,r2
 8001ee0:	10800003 	ldbu	r2,0(r2)
 8001ee4:	10803fcc 	andi	r2,r2,255
 8001ee8:	1080201c 	xori	r2,r2,128
 8001eec:	10bfe004 	addi	r2,r2,-128
 8001ef0:	d8800015 	stw	r2,0(sp)
 8001ef4:	00800044 	movi	r2,1
 8001ef8:	d8800115 	stw	r2,4(sp)
 8001efc:	01401904 	movi	r5,100
 8001f00:	01800104 	movi	r6,4
 8001f04:	01c00044 	movi	r7,1
 8001f08:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	//OutGraphicsCharFont2a((260 + 11 * i), 415, 4, 1, okValue[i], 1); //OK VALUE DEPENDING ON STATE

	for (i = 0; i < sizeof(opt_pul); i++)
		OutGraphicsCharFont2a((40 + 11 * i), 438, 4, 1, opt_pul[i], 1); //Optimal pulse rate

	for (i = 0; i < sizeof(gps_time); i++)
 8001f0c:	e0bfe917 	ldw	r2,-92(fp)
 8001f10:	10800044 	addi	r2,r2,1
 8001f14:	e0bfe915 	stw	r2,-92(fp)
 8001f18:	e0bfe917 	ldw	r2,-92(fp)
 8001f1c:	10800330 	cmpltui	r2,r2,12
 8001f20:	103fe91e 	bne	r2,zero,8001ec8 <__alt_data_end+0xfc001ec8>
		OutGraphicsCharFont2a((40 + 11 * i), 100, 4, 1, gps_time[i], 1); //Time

}
 8001f24:	e037883a 	mov	sp,fp
 8001f28:	dfc00117 	ldw	ra,4(sp)
 8001f2c:	df000017 	ldw	fp,0(sp)
 8001f30:	dec00204 	addi	sp,sp,8
 8001f34:	f800283a 	ret

08001f38 <putcharTouch_Screen>:
*****************************************************************************/

/****              putcharTouch_Screen      *******/

int putcharTouch_Screen(int c)
{
 8001f38:	defffe04 	addi	sp,sp,-8
 8001f3c:	df000115 	stw	fp,4(sp)
 8001f40:	df000104 	addi	fp,sp,4
 8001f44:	e13fff15 	stw	r4,-4(fp)
 /// poll Tx bit in 6850 status register. Wait for it to become '1'
	// write 'c' to the 6850 TxData register to output the character
		while ((Touch_Status & 0x02) != 0x02)
 8001f48:	0001883a 	nop
 8001f4c:	00a10034 	movhi	r2,33792
 8001f50:	10808c04 	addi	r2,r2,560
 8001f54:	10800003 	ldbu	r2,0(r2)
 8001f58:	10803fcc 	andi	r2,r2,255
 8001f5c:	1080008c 	andi	r2,r2,2
 8001f60:	103ffa26 	beq	r2,zero,8001f4c <__alt_data_end+0xfc001f4c>
		{}	;
		//printf (" after while loooop ");
		Touch_Transmit = c & 0xFF;
 8001f64:	00a10034 	movhi	r2,33792
 8001f68:	10808c84 	addi	r2,r2,562
 8001f6c:	e0ffff17 	ldw	r3,-4(fp)
 8001f70:	10c00005 	stb	r3,0(r2)
		return Touch_Transmit; // return c
 8001f74:	00a10034 	movhi	r2,33792
 8001f78:	10808c84 	addi	r2,r2,562
 8001f7c:	10800003 	ldbu	r2,0(r2)
 8001f80:	10803fcc 	andi	r2,r2,255

}
 8001f84:	e037883a 	mov	sp,fp
 8001f88:	df000017 	ldw	fp,0(sp)
 8001f8c:	dec00104 	addi	sp,sp,4
 8001f90:	f800283a 	ret

08001f94 <getcharTouch_Screen>:

/******           getcharTouch_Screen             *************/

int getcharTouch_Screen( void )
{
 8001f94:	defffe04 	addi	sp,sp,-8
 8001f98:	df000115 	stw	fp,4(sp)
 8001f9c:	df000104 	addi	fp,sp,4
	int rx;
		// poll Rx bit in 6850 status register. Wait for it to become '1'
		// read received character from 6850 RxData register.
		while ((Touch_Status & 0x01) != 0x01)
 8001fa0:	0001883a 	nop
 8001fa4:	00a10034 	movhi	r2,33792
 8001fa8:	10808c04 	addi	r2,r2,560
 8001fac:	10800003 	ldbu	r2,0(r2)
 8001fb0:	10803fcc 	andi	r2,r2,255
 8001fb4:	1080004c 	andi	r2,r2,1
 8001fb8:	103ffa26 	beq	r2,zero,8001fa4 <__alt_data_end+0xfc001fa4>
			;
		rx = Touch_Recieve;
 8001fbc:	00a10034 	movhi	r2,33792
 8001fc0:	10808c84 	addi	r2,r2,562
 8001fc4:	10800003 	ldbu	r2,0(r2)
 8001fc8:	10803fcc 	andi	r2,r2,255
 8001fcc:	e0bfff15 	stw	r2,-4(fp)
		return rx;
 8001fd0:	e0bfff17 	ldw	r2,-4(fp)

}
 8001fd4:	e037883a 	mov	sp,fp
 8001fd8:	df000017 	ldw	fp,0(sp)
 8001fdc:	dec00104 	addi	sp,sp,4
 8001fe0:	f800283a 	ret

08001fe4 <Init_Touch>:

/***********      Init_Touch           *********/
void Init_Touch(void)
{
 8001fe4:	defffe04 	addi	sp,sp,-8
 8001fe8:	dfc00115 	stw	ra,4(sp)
 8001fec:	df000015 	stw	fp,0(sp)
 8001ff0:	d839883a 	mov	fp,sp
	// Program 6850 and baud rate generator to communicate with touchscreen
	// send touchscreen controller an "enable touch" command
	Touch_Control = 0x15;
 8001ff4:	00a10034 	movhi	r2,33792
 8001ff8:	10808c04 	addi	r2,r2,560
 8001ffc:	00c00544 	movi	r3,21
 8002000:	10c00005 	stb	r3,0(r2)
	Touch_Baud = 0x05;
 8002004:	00a10034 	movhi	r2,33792
 8002008:	10808d04 	addi	r2,r2,564
 800200c:	00c00144 	movi	r3,5
 8002010:	10c00005 	stb	r3,0(r2)
		
	// enable touch
	putcharTouch_Screen(0x55);
 8002014:	01001544 	movi	r4,85
 8002018:	8001f380 	call	8001f38 <putcharTouch_Screen>
	putcharTouch_Screen(0x01);
 800201c:	01000044 	movi	r4,1
 8002020:	8001f380 	call	8001f38 <putcharTouch_Screen>
	putcharTouch_Screen(0x12);
 8002024:	01000484 	movi	r4,18
 8002028:	8001f380 	call	8001f38 <putcharTouch_Screen>
		
	return;
 800202c:	0001883a 	nop
}
 8002030:	e037883a 	mov	sp,fp
 8002034:	dfc00117 	ldw	ra,4(sp)
 8002038:	df000017 	ldw	fp,0(sp)
 800203c:	dec00204 	addi	sp,sp,8
 8002040:	f800283a 	ret

08002044 <ScreenTouched>:

/*********   test if screen touched   *************************************/
int ScreenTouched( void )
{
 8002044:	deffff04 	addi	sp,sp,-4
 8002048:	df000015 	stw	fp,0(sp)
 800204c:	d839883a 	mov	fp,sp
 
	return ((Touch_Recieve &0x80) == 0x80);
 8002050:	00a10034 	movhi	r2,33792
 8002054:	10808c84 	addi	r2,r2,562
 8002058:	10800003 	ldbu	r2,0(r2)
 800205c:	10803fcc 	andi	r2,r2,255
 8002060:	1004d1fa 	srli	r2,r2,7
 8002064:	10803fcc 	andi	r2,r2,255
}
 8002068:	e037883a 	mov	sp,fp
 800206c:	df000017 	ldw	fp,0(sp)
 8002070:	dec00104 	addi	sp,sp,4
 8002074:	f800283a 	ret

08002078 <WaitForTouch>:

/******** wait for screen to be touched ****************************************/
void WaitForTouch()
{
 8002078:	defffe04 	addi	sp,sp,-8
 800207c:	dfc00115 	stw	ra,4(sp)
 8002080:	df000015 	stw	fp,0(sp)
 8002084:	d839883a 	mov	fp,sp
while(!ScreenTouched())
 8002088:	0001883a 	nop
 800208c:	80020440 	call	8002044 <ScreenTouched>
 8002090:	103ffe26 	beq	r2,zero,800208c <__alt_data_end+0xfc00208c>
 ;
}
 8002094:	e037883a 	mov	sp,fp
 8002098:	dfc00117 	ldw	ra,4(sp)
 800209c:	df000017 	ldw	fp,0(sp)
 80020a0:	dec00204 	addi	sp,sp,8
 80020a4:	f800283a 	ret

080020a8 <GetPress>:
//typedef struct { int x, y; } Point ;

/**** This function waits for a touch screen press event and returns X,Y coord **************/

Point GetPress(void)
{
 80020a8:	defff604 	addi	sp,sp,-40
 80020ac:	dfc00915 	stw	ra,36(sp)
 80020b0:	df000815 	stw	fp,32(sp)
 80020b4:	df000804 	addi	fp,sp,32
	Point p1;
	int buf[4];
 	int i;
 	int yOffset = 100;
 80020b8:	00801904 	movi	r2,100
 80020bc:	e0bff915 	stw	r2,-28(fp)
 	// wait for a pen down command then return the X,Y coord of the point
 	// calibrated correctly so that it maps to a pixel on screen
 	WaitForTouch();
 80020c0:	80020780 	call	8002078 <WaitForTouch>
 	// pick up reponse packets
 	for (i = 0; i < 4; i++) {
 80020c4:	e03ff815 	stw	zero,-32(fp)
 80020c8:	00000c06 	br	80020fc <GetPress+0x54>
 		buf[i] = getcharTouch_Screen();
 80020cc:	8001f940 	call	8001f94 <getcharTouch_Screen>
 80020d0:	1007883a 	mov	r3,r2
 80020d4:	e0bff817 	ldw	r2,-32(fp)
 80020d8:	1085883a 	add	r2,r2,r2
 80020dc:	1085883a 	add	r2,r2,r2
 80020e0:	e13ff804 	addi	r4,fp,-32
 80020e4:	2085883a 	add	r2,r4,r2
 80020e8:	10800404 	addi	r2,r2,16
 80020ec:	10c00015 	stw	r3,0(r2)
 	int yOffset = 100;
 	// wait for a pen down command then return the X,Y coord of the point
 	// calibrated correctly so that it maps to a pixel on screen
 	WaitForTouch();
 	// pick up reponse packets
 	for (i = 0; i < 4; i++) {
 80020f0:	e0bff817 	ldw	r2,-32(fp)
 80020f4:	10800044 	addi	r2,r2,1
 80020f8:	e0bff815 	stw	r2,-32(fp)
 80020fc:	e0bff817 	ldw	r2,-32(fp)
 8002100:	10800110 	cmplti	r2,r2,4
 8002104:	103ff11e 	bne	r2,zero,80020cc <__alt_data_end+0xfc0020cc>
 		buf[i] = getcharTouch_Screen();
 	}
 	// parse x and y coordinates
 	p1.x = (buf[1] << 7) | buf[0];
 8002108:	e0bffd17 	ldw	r2,-12(fp)
 800210c:	100691fa 	slli	r3,r2,7
 8002110:	e0bffc17 	ldw	r2,-16(fp)
 8002114:	1884b03a 	or	r2,r3,r2
 8002118:	e0bffa15 	stw	r2,-24(fp)
 	p1.y = (buf[3] << 7) | buf[2];
 800211c:	e0bfff17 	ldw	r2,-4(fp)
 8002120:	100691fa 	slli	r3,r2,7
 8002124:	e0bffe17 	ldw	r2,-8(fp)
 8002128:	1884b03a 	or	r2,r3,r2
 800212c:	e0bffb15 	stw	r2,-20(fp)
 	// compute screen coordinates
 	p1.x = p1.x * 799 / 4095;
 8002130:	e0bffa17 	ldw	r2,-24(fp)
 8002134:	10c0c7e4 	muli	r3,r2,799
 8002138:	0083ffc4 	movi	r2,4095
 800213c:	1885283a 	div	r2,r3,r2
 8002140:	e0bffa15 	stw	r2,-24(fp)
 	p1.y = (p1.y - yOffset) * 479 / (4095 - yOffset);
 8002144:	e0fffb17 	ldw	r3,-20(fp)
 8002148:	e0bff917 	ldw	r2,-28(fp)
 800214c:	1885c83a 	sub	r2,r3,r2
 8002150:	10c077e4 	muli	r3,r2,479
 8002154:	0103ffc4 	movi	r4,4095
 8002158:	e0bff917 	ldw	r2,-28(fp)
 800215c:	2085c83a 	sub	r2,r4,r2
 8002160:	1885283a 	div	r2,r3,r2
 8002164:	e0bffb15 	stw	r2,-20(fp)
	printf (" GetPress: X coord =  %d \t Y coord =  %d  \n" , p1.x, p1.y);
 8002168:	e0fffa17 	ldw	r3,-24(fp)
 800216c:	e0bffb17 	ldw	r2,-20(fp)
 8002170:	010200b4 	movhi	r4,2050
 8002174:	21355c04 	addi	r4,r4,-10896
 8002178:	180b883a 	mov	r5,r3
 800217c:	100d883a 	mov	r6,r2
 8002180:	80040bc0 	call	80040bc <printf>
 	
	return p1;
 8002184:	e0bffa17 	ldw	r2,-24(fp)
 8002188:	e0fffb17 	ldw	r3,-20(fp)
 800218c:	1009883a 	mov	r4,r2
 8002190:	180b883a 	mov	r5,r3

}
 8002194:	2005883a 	mov	r2,r4
 8002198:	2807883a 	mov	r3,r5
 800219c:	e037883a 	mov	sp,fp
 80021a0:	dfc00117 	ldw	ra,4(sp)
 80021a4:	df000017 	ldw	fp,0(sp)
 80021a8:	dec00204 	addi	sp,sp,8
 80021ac:	f800283a 	ret

080021b0 <GetRelease>:

/********* This function waits for a touch screen release event and returns X,Y coord *************/

Point GetRelease(void)
{
 80021b0:	defff604 	addi	sp,sp,-40
 80021b4:	dfc00915 	stw	ra,36(sp)
 80021b8:	df000815 	stw	fp,32(sp)
 80021bc:	df000804 	addi	fp,sp,32
 Point p1;
 int buf[4];
 	int i;
 	int yOffset = 100;
 80021c0:	00801904 	movi	r2,100
 80021c4:	e0bff915 	stw	r2,-28(fp)
 	// wait for a pen down command then return the X,Y coord of the point
 	// calibrated correctly so that it maps to a pixel on screen
 	WaitForTouch();
 80021c8:	80020780 	call	8002078 <WaitForTouch>
 	// pick up reponse packets
 	for (i = 0; i < 4; i++) {
 80021cc:	e03ff815 	stw	zero,-32(fp)
 80021d0:	00000c06 	br	8002204 <GetRelease+0x54>
 		buf[i] = getcharTouch_Screen();
 80021d4:	8001f940 	call	8001f94 <getcharTouch_Screen>
 80021d8:	1007883a 	mov	r3,r2
 80021dc:	e0bff817 	ldw	r2,-32(fp)
 80021e0:	1085883a 	add	r2,r2,r2
 80021e4:	1085883a 	add	r2,r2,r2
 80021e8:	e13ff804 	addi	r4,fp,-32
 80021ec:	2085883a 	add	r2,r4,r2
 80021f0:	10800404 	addi	r2,r2,16
 80021f4:	10c00015 	stw	r3,0(r2)
 	int yOffset = 100;
 	// wait for a pen down command then return the X,Y coord of the point
 	// calibrated correctly so that it maps to a pixel on screen
 	WaitForTouch();
 	// pick up reponse packets
 	for (i = 0; i < 4; i++) {
 80021f8:	e0bff817 	ldw	r2,-32(fp)
 80021fc:	10800044 	addi	r2,r2,1
 8002200:	e0bff815 	stw	r2,-32(fp)
 8002204:	e0bff817 	ldw	r2,-32(fp)
 8002208:	10800110 	cmplti	r2,r2,4
 800220c:	103ff11e 	bne	r2,zero,80021d4 <__alt_data_end+0xfc0021d4>
 		buf[i] = getcharTouch_Screen();
 	}
 	// parse x and y coordinates
 	p1.x = (buf[1] << 7) | buf[0];
 8002210:	e0bffd17 	ldw	r2,-12(fp)
 8002214:	100691fa 	slli	r3,r2,7
 8002218:	e0bffc17 	ldw	r2,-16(fp)
 800221c:	1884b03a 	or	r2,r3,r2
 8002220:	e0bffa15 	stw	r2,-24(fp)
 	p1.y = (buf[3] << 7) | buf[2];
 8002224:	e0bfff17 	ldw	r2,-4(fp)
 8002228:	100691fa 	slli	r3,r2,7
 800222c:	e0bffe17 	ldw	r2,-8(fp)
 8002230:	1884b03a 	or	r2,r3,r2
 8002234:	e0bffb15 	stw	r2,-20(fp)
 	// compute screen coordinates
 	p1.x = p1.x * 799 / 4095;
 8002238:	e0bffa17 	ldw	r2,-24(fp)
 800223c:	10c0c7e4 	muli	r3,r2,799
 8002240:	0083ffc4 	movi	r2,4095
 8002244:	1885283a 	div	r2,r3,r2
 8002248:	e0bffa15 	stw	r2,-24(fp)
 	p1.y = (p1.y - yOffset) * 479 / (4095 - yOffset);
 800224c:	e0fffb17 	ldw	r3,-20(fp)
 8002250:	e0bff917 	ldw	r2,-28(fp)
 8002254:	1885c83a 	sub	r2,r3,r2
 8002258:	10c077e4 	muli	r3,r2,479
 800225c:	0103ffc4 	movi	r4,4095
 8002260:	e0bff917 	ldw	r2,-28(fp)
 8002264:	2085c83a 	sub	r2,r4,r2
 8002268:	1885283a 	div	r2,r3,r2
 800226c:	e0bffb15 	stw	r2,-20(fp)

	printf ( " GetRelease: X coord =  %d \t Y coord =  %d\n " , p1.x, p1.y);
 8002270:	e0fffa17 	ldw	r3,-24(fp)
 8002274:	e0bffb17 	ldw	r2,-20(fp)
 8002278:	010200b4 	movhi	r4,2050
 800227c:	21356704 	addi	r4,r4,-10852
 8002280:	180b883a 	mov	r5,r3
 8002284:	100d883a 	mov	r6,r2
 8002288:	80040bc0 	call	80040bc <printf>

	return p1;
 800228c:	e0bffa17 	ldw	r2,-24(fp)
 8002290:	e0fffb17 	ldw	r3,-20(fp)
 8002294:	1009883a 	mov	r4,r2
 8002298:	180b883a 	mov	r5,r3

}
 800229c:	2005883a 	mov	r2,r4
 80022a0:	2807883a 	mov	r3,r5
 80022a4:	e037883a 	mov	sp,fp
 80022a8:	dfc00117 	ldw	ra,4(sp)
 80022ac:	df000017 	ldw	fp,0(sp)
 80022b0:	dec00204 	addi	sp,sp,8
 80022b4:	f800283a 	ret

080022b8 <putchar_GPS>:


/********* Initialise GPS controller **************************************/
/************************************   putchar_GPS      ***************************************/
int putchar_GPS(int c)
{
 80022b8:	defffe04 	addi	sp,sp,-8
 80022bc:	df000115 	stw	fp,4(sp)
 80022c0:	df000104 	addi	fp,sp,4
 80022c4:	e13fff15 	stw	r4,-4(fp)
 // poll Tx bit in 6850 status register. Wait for it to become '1'
 // write 'c' to the 6850 TxData register to output the character
	while ((GPS_Status & 0x02) != 0x02 )
 80022c8:	0001883a 	nop
 80022cc:	00a10034 	movhi	r2,33792
 80022d0:	10808404 	addi	r2,r2,528
 80022d4:	10800003 	ldbu	r2,0(r2)
 80022d8:	10803fcc 	andi	r2,r2,255
 80022dc:	1080008c 	andi	r2,r2,2
 80022e0:	103ffa26 	beq	r2,zero,80022cc <__alt_data_end+0xfc0022cc>
	{};

	return GPS_Transmit =  c & 0x7F;
 80022e4:	00a10034 	movhi	r2,33792
 80022e8:	10808484 	addi	r2,r2,530
 80022ec:	e0ffff17 	ldw	r3,-4(fp)
 80022f0:	18c01fcc 	andi	r3,r3,127
 80022f4:	10c00005 	stb	r3,0(r2)
 80022f8:	18803fcc 	andi	r2,r3,255

}
 80022fc:	e037883a 	mov	sp,fp
 8002300:	df000017 	ldw	fp,0(sp)
 8002304:	dec00104 	addi	sp,sp,4
 8002308:	f800283a 	ret

0800230c <getcharGPS>:
/************************************   getcharGPS      ***************************************/

int getcharGPS( void )
{
 800230c:	defffe04 	addi	sp,sp,-8
 8002310:	df000115 	stw	fp,4(sp)
 8002314:	df000104 	addi	fp,sp,4
 // poll Rx bit in 6850 status register. Wait for it to become '1'
 // read received character from 6850 RxData register.
	while ((GPS_Status & 0x01) != 0x01 ){};
 8002318:	0001883a 	nop
 800231c:	00a10034 	movhi	r2,33792
 8002320:	10808404 	addi	r2,r2,528
 8002324:	10800003 	ldbu	r2,0(r2)
 8002328:	10803fcc 	andi	r2,r2,255
 800232c:	1080004c 	andi	r2,r2,1
 8002330:	103ffa26 	beq	r2,zero,800231c <__alt_data_end+0xfc00231c>
	//printf("before while");
	 unsigned char TS;
               TS  = GPS_Recieve ;
 8002334:	00a10034 	movhi	r2,33792
 8002338:	10808484 	addi	r2,r2,530
 800233c:	10800003 	ldbu	r2,0(r2)
 8002340:	e0bfff05 	stb	r2,-4(fp)
               //printf ("getDone,Touch_Recieve= %x \n" , TS );
	 return TS ;
 8002344:	e0bfff03 	ldbu	r2,-4(fp)

}
 8002348:	e037883a 	mov	sp,fp
 800234c:	df000017 	ldw	fp,0(sp)
 8002350:	dec00104 	addi	sp,sp,4
 8002354:	f800283a 	ret

08002358 <putString>:

/************************************   putString     ***************************************/

void putString(char *s) {
 8002358:	defffc04 	addi	sp,sp,-16
 800235c:	dfc00315 	stw	ra,12(sp)
 8002360:	df000215 	stw	fp,8(sp)
 8002364:	df000204 	addi	fp,sp,8
 8002368:	e13fff15 	stw	r4,-4(fp)
	char i;
	printf("before while");
 800236c:	010200b4 	movhi	r4,2050
 8002370:	21357304 	addi	r4,r4,-10804
 8002374:	80040bc0 	call	80040bc <printf>
	while ((i = *s) != 0) {
 8002378:	00000606 	br	8002394 <putString+0x3c>

		putchar_GPS(i);
 800237c:	e0bffe07 	ldb	r2,-8(fp)
 8002380:	1009883a 	mov	r4,r2
 8002384:	80022b80 	call	80022b8 <putchar_GPS>
		s++;
 8002388:	e0bfff17 	ldw	r2,-4(fp)
 800238c:	10800044 	addi	r2,r2,1
 8002390:	e0bfff15 	stw	r2,-4(fp)
/************************************   putString     ***************************************/

void putString(char *s) {
	char i;
	printf("before while");
	while ((i = *s) != 0) {
 8002394:	e0bfff17 	ldw	r2,-4(fp)
 8002398:	10800003 	ldbu	r2,0(r2)
 800239c:	e0bffe05 	stb	r2,-8(fp)
 80023a0:	e0bffe07 	ldb	r2,-8(fp)
 80023a4:	103ff51e 	bne	r2,zero,800237c <__alt_data_end+0xfc00237c>

		putchar_GPS(i);
		s++;
	}
	printf("out of while");
 80023a8:	010200b4 	movhi	r4,2050
 80023ac:	21357704 	addi	r4,r4,-10788
 80023b0:	80040bc0 	call	80040bc <printf>
}
 80023b4:	e037883a 	mov	sp,fp
 80023b8:	dfc00117 	ldw	ra,4(sp)
 80023bc:	df000017 	ldw	fp,0(sp)
 80023c0:	dec00204 	addi	sp,sp,8
 80023c4:	f800283a 	ret

080023c8 <StopLogging>:

/*****   we might need those     *****************************/

void StopLogging(void) {
 80023c8:	defffd04 	addi	sp,sp,-12
 80023cc:	dfc00215 	stw	ra,8(sp)
 80023d0:	df000115 	stw	fp,4(sp)
 80023d4:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK185,1";
 80023d8:	008200b4 	movhi	r2,2050
 80023dc:	10b57b04 	addi	r2,r2,-10772
 80023e0:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 80023e4:	e13fff17 	ldw	r4,-4(fp)
 80023e8:	80023580 	call	8002358 <putString>

}
 80023ec:	e037883a 	mov	sp,fp
 80023f0:	dfc00117 	ldw	ra,4(sp)
 80023f4:	df000017 	ldw	fp,0(sp)
 80023f8:	dec00204 	addi	sp,sp,8
 80023fc:	f800283a 	ret

08002400 <ClearLogging>:

void ClearLogging(void) {
 8002400:	defffd04 	addi	sp,sp,-12
 8002404:	dfc00215 	stw	ra,8(sp)
 8002408:	df000115 	stw	fp,4(sp)
 800240c:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK184,1";
 8002410:	008200b4 	movhi	r2,2050
 8002414:	10b57e04 	addi	r2,r2,-10760
 8002418:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 800241c:	e13fff17 	ldw	r4,-4(fp)
 8002420:	80023580 	call	8002358 <putString>
}
 8002424:	e037883a 	mov	sp,fp
 8002428:	dfc00117 	ldw	ra,4(sp)
 800242c:	df000017 	ldw	fp,0(sp)
 8002430:	dec00204 	addi	sp,sp,8
 8002434:	f800283a 	ret

08002438 <StartLogger>:

void StartLogger(void) {
 8002438:	defffd04 	addi	sp,sp,-12
 800243c:	dfc00215 	stw	ra,8(sp)
 8002440:	df000115 	stw	fp,4(sp)
 8002444:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK186,1";
 8002448:	008200b4 	movhi	r2,2050
 800244c:	10b58104 	addi	r2,r2,-10748
 8002450:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 8002454:	e13fff17 	ldw	r4,-4(fp)
 8002458:	80023580 	call	8002358 <putString>

}
 800245c:	e037883a 	mov	sp,fp
 8002460:	dfc00117 	ldw	ra,4(sp)
 8002464:	df000017 	ldw	fp,0(sp)
 8002468:	dec00204 	addi	sp,sp,8
 800246c:	f800283a 	ret

08002470 <Init_GPS>:

/***********************  Init_GPS    *******************************/

void Init_GPS(void)
{
 8002470:	deffff04 	addi	sp,sp,-4
 8002474:	df000015 	stw	fp,0(sp)
 8002478:	d839883a 	mov	fp,sp
 // 9600 baud, 8 bits of data, no parity, 1 stop bit etc
	    GPS_Control 	= 0x15;
 800247c:	00a10034 	movhi	r2,33792
 8002480:	10808404 	addi	r2,r2,528
 8002484:	00c00544 	movi	r3,21
 8002488:	10c00005 	stb	r3,0(r2)
	    GPS_Baud 		= 0x05; //9600 baud
 800248c:	00a10034 	movhi	r2,33792
 8002490:	10808504 	addi	r2,r2,532
 8002494:	00c00144 	movi	r3,5
 8002498:	10c00005 	stb	r3,0(r2)
	   
	    return;
 800249c:	0001883a 	nop
}
 80024a0:	e037883a 	mov	sp,fp
 80024a4:	df000017 	ldw	fp,0(sp)
 80024a8:	dec00104 	addi	sp,sp,4
 80024ac:	f800283a 	ret

080024b0 <printTo7Seg>:
//}
*******************************************************/

/********     print GPS data on 7seg              *******************/

void printTo7Seg (int num){
 80024b0:	defffe04 	addi	sp,sp,-8
 80024b4:	df000115 	stw	fp,4(sp)
 80024b8:	df000104 	addi	fp,sp,4
 80024bc:	e13fff15 	stw	r4,-4(fp)


	hex1 = num % 100;
 80024c0:	00c80c04 	movi	r3,8240
 80024c4:	e0bfff17 	ldw	r2,-4(fp)
 80024c8:	01001904 	movi	r4,100
 80024cc:	1109283a 	div	r4,r2,r4
 80024d0:	21001924 	muli	r4,r4,100
 80024d4:	1105c83a 	sub	r2,r2,r4
 80024d8:	1880000d 	sth	r2,0(r3)
	hex2 = (num % 10000)/100;
 80024dc:	00c81004 	movi	r3,8256
 80024e0:	e0bfff17 	ldw	r2,-4(fp)
 80024e4:	0109c404 	movi	r4,10000
 80024e8:	1109283a 	div	r4,r2,r4
 80024ec:	2109c424 	muli	r4,r4,10000
 80024f0:	1109c83a 	sub	r4,r2,r4
 80024f4:	00801904 	movi	r2,100
 80024f8:	2085283a 	div	r2,r4,r2
 80024fc:	1880000d 	sth	r2,0(r3)
	hex3 = num / 10000;
 8002500:	00881404 	movi	r2,8272
 8002504:	e13fff17 	ldw	r4,-4(fp)
 8002508:	00c9c404 	movi	r3,10000
 800250c:	20c7283a 	div	r3,r4,r3
 8002510:	10c0000d 	sth	r3,0(r2)

	return;
 8002514:	0001883a 	nop

}
 8002518:	e037883a 	mov	sp,fp
 800251c:	df000017 	ldw	fp,0(sp)
 8002520:	dec00104 	addi	sp,sp,4
 8002524:	f800283a 	ret

08002528 <printGpsData>:

/******************         Switches manipulation                   *********************/

void printGpsData(int data[8]){
 8002528:	defffc04 	addi	sp,sp,-16
 800252c:	dfc00315 	stw	ra,12(sp)
 8002530:	df000215 	stw	fp,8(sp)
 8002534:	df000204 	addi	fp,sp,8
 8002538:	e13fff15 	stw	r4,-4(fp)

	int sw = switches;
 800253c:	00880004 	movi	r2,8192
 8002540:	1080000b 	ldhu	r2,0(r2)
 8002544:	10bfffcc 	andi	r2,r2,65535
 8002548:	e0bffe15 	stw	r2,-8(fp)
	switch (sw){
 800254c:	e0bffe17 	ldw	r2,-8(fp)
 8002550:	108001e8 	cmpgeui	r2,r2,7
 8002554:	1000371e 	bne	r2,zero,8002634 <printGpsData+0x10c>
 8002558:	e0bffe17 	ldw	r2,-8(fp)
 800255c:	100690ba 	slli	r3,r2,2
 8002560:	00820034 	movhi	r2,2048
 8002564:	10895d04 	addi	r2,r2,9588
 8002568:	1885883a 	add	r2,r3,r2
 800256c:	10800017 	ldw	r2,0(r2)
 8002570:	1000683a 	jmp	r2
 8002574:	08002590 	cmplti	zero,at,150
 8002578:	080025a4 	muli	zero,at,150
 800257c:	080025bc 	xorhi	zero,at,150
 8002580:	080025d4 	ori	zero,at,151
 8002584:	080025ec 	andhi	zero,at,151
 8002588:	08002604 	addi	zero,at,152
 800258c:	0800261c 	xori	zero,at,152
	case 0:
		// print time
		printTo7Seg(data[0]);
 8002590:	e0bfff17 	ldw	r2,-4(fp)
 8002594:	10800017 	ldw	r2,0(r2)
 8002598:	1009883a 	mov	r4,r2
 800259c:	80024b00 	call	80024b0 <printTo7Seg>
		break;
 80025a0:	00002406 	br	8002634 <printGpsData+0x10c>

	case 1:
		// print latitude part1
		printTo7Seg(data[2]);
 80025a4:	e0bfff17 	ldw	r2,-4(fp)
 80025a8:	10800204 	addi	r2,r2,8
 80025ac:	10800017 	ldw	r2,0(r2)
 80025b0:	1009883a 	mov	r4,r2
 80025b4:	80024b00 	call	80024b0 <printTo7Seg>
		break;
 80025b8:	00001e06 	br	8002634 <printGpsData+0x10c>
	case 2:
		// print latitude par2
		printTo7Seg(data[3]);
 80025bc:	e0bfff17 	ldw	r2,-4(fp)
 80025c0:	10800304 	addi	r2,r2,12
 80025c4:	10800017 	ldw	r2,0(r2)
 80025c8:	1009883a 	mov	r4,r2
 80025cc:	80024b00 	call	80024b0 <printTo7Seg>

		break;
 80025d0:	00001806 	br	8002634 <printGpsData+0x10c>
	case 3:
		// print N / S
		printTo7Seg(data[4]);
 80025d4:	e0bfff17 	ldw	r2,-4(fp)
 80025d8:	10800404 	addi	r2,r2,16
 80025dc:	10800017 	ldw	r2,0(r2)
 80025e0:	1009883a 	mov	r4,r2
 80025e4:	80024b00 	call	80024b0 <printTo7Seg>
		break;
 80025e8:	00001206 	br	8002634 <printGpsData+0x10c>
	case 4:
		// print longitude part1
		printTo7Seg(data[5]);
 80025ec:	e0bfff17 	ldw	r2,-4(fp)
 80025f0:	10800504 	addi	r2,r2,20
 80025f4:	10800017 	ldw	r2,0(r2)
 80025f8:	1009883a 	mov	r4,r2
 80025fc:	80024b00 	call	80024b0 <printTo7Seg>
		break;
 8002600:	00000c06 	br	8002634 <printGpsData+0x10c>
	case 5:
		// print longitude par2
		printTo7Seg(data[6]);
 8002604:	e0bfff17 	ldw	r2,-4(fp)
 8002608:	10800604 	addi	r2,r2,24
 800260c:	10800017 	ldw	r2,0(r2)
 8002610:	1009883a 	mov	r4,r2
 8002614:	80024b00 	call	80024b0 <printTo7Seg>
		break;
 8002618:	00000606 	br	8002634 <printGpsData+0x10c>
	case 6:
			// print E / W
		printTo7Seg(data[7]);
 800261c:	e0bfff17 	ldw	r2,-4(fp)
 8002620:	10800704 	addi	r2,r2,28
 8002624:	10800017 	ldw	r2,0(r2)
 8002628:	1009883a 	mov	r4,r2
 800262c:	80024b00 	call	80024b0 <printTo7Seg>
		break;
 8002630:	0001883a 	nop

	}

}
 8002634:	e037883a 	mov	sp,fp
 8002638:	dfc00117 	ldw	ra,4(sp)
 800263c:	df000017 	ldw	fp,0(sp)
 8002640:	dec00204 	addi	sp,sp,8
 8002644:	f800283a 	ret

08002648 <getGpsInfo>:
//global variable used to get GPS data and display them on the touch screen
char dataAscii [8][20] ;

/*****        Extact data from GPS               **********************/
char dataAscii [8][20] ;
void getGpsInfo(void){
 8002648:	deff2504 	addi	sp,sp,-876
 800264c:	dfc0da15 	stw	ra,872(sp)
 8002650:	df00d915 	stw	fp,868(sp)
 8002654:	df00d904 	addi	fp,sp,868
	int  buffer [200];
				int c;
				int i=0;
 8002658:	e03f2715 	stw	zero,-868(fp)
					do{
					 c = getcharGPS();
 800265c:	800230c0 	call	800230c <getcharGPS>
 8002660:	e0bf2a15 	stw	r2,-856(fp)
					 buffer[i] = c;
 8002664:	e0bf2717 	ldw	r2,-868(fp)
 8002668:	1085883a 	add	r2,r2,r2
 800266c:	1085883a 	add	r2,r2,r2
 8002670:	e0ff2704 	addi	r3,fp,-868
 8002674:	1885883a 	add	r2,r3,r2
 8002678:	10800404 	addi	r2,r2,16
 800267c:	e0ff2a17 	ldw	r3,-856(fp)
 8002680:	10c00015 	stw	r3,0(r2)
					 
					 i++;
 8002684:	e0bf2717 	ldw	r2,-868(fp)
 8002688:	10800044 	addi	r2,r2,1
 800268c:	e0bf2715 	stw	r2,-868(fp)
					}while (c != '\n');
 8002690:	e0bf2a17 	ldw	r2,-856(fp)
 8002694:	10800298 	cmpnei	r2,r2,10
 8002698:	103ff01e 	bne	r2,zero,800265c <__alt_data_end+0xfc00265c>
					i=0;
 800269c:	e03f2715 	stw	zero,-868(fp)
					if (buffer[4] == 'G'){
 80026a0:	e0bf2f17 	ldw	r2,-836(fp)
 80026a4:	108011d8 	cmpnei	r2,r2,71
 80026a8:	1000a71e 	bne	r2,zero,8002948 <getGpsInfo+0x300>
						i=7;
 80026ac:	008001c4 	movi	r2,7
 80026b0:	e0bf2715 	stw	r2,-868(fp)
						int  data[8];
						int  k=0;
 80026b4:	e03f2815 	stw	zero,-864(fp)
						do{
							int  j = 0;
 80026b8:	e03f2915 	stw	zero,-860(fp)
							char tmp[20];

							do{
								if (buffer[i] != ',' && buffer[i] != '.')
 80026bc:	e0bf2717 	ldw	r2,-868(fp)
 80026c0:	1085883a 	add	r2,r2,r2
 80026c4:	1085883a 	add	r2,r2,r2
 80026c8:	e13f2704 	addi	r4,fp,-868
 80026cc:	2085883a 	add	r2,r4,r2
 80026d0:	10800404 	addi	r2,r2,16
 80026d4:	10800017 	ldw	r2,0(r2)
 80026d8:	10800b20 	cmpeqi	r2,r2,44
 80026dc:	1000151e 	bne	r2,zero,8002734 <getGpsInfo+0xec>
 80026e0:	e0bf2717 	ldw	r2,-868(fp)
 80026e4:	1085883a 	add	r2,r2,r2
 80026e8:	1085883a 	add	r2,r2,r2
 80026ec:	e0ff2704 	addi	r3,fp,-868
 80026f0:	1885883a 	add	r2,r3,r2
 80026f4:	10800404 	addi	r2,r2,16
 80026f8:	10800017 	ldw	r2,0(r2)
 80026fc:	10800ba0 	cmpeqi	r2,r2,46
 8002700:	10000c1e 	bne	r2,zero,8002734 <getGpsInfo+0xec>
									tmp[j] = buffer[i];
 8002704:	e0bf2717 	ldw	r2,-868(fp)
 8002708:	1085883a 	add	r2,r2,r2
 800270c:	1085883a 	add	r2,r2,r2
 8002710:	e13f2704 	addi	r4,fp,-868
 8002714:	2085883a 	add	r2,r4,r2
 8002718:	10800404 	addi	r2,r2,16
 800271c:	10800017 	ldw	r2,0(r2)
 8002720:	1009883a 	mov	r4,r2
 8002724:	e0fff304 	addi	r3,fp,-52
 8002728:	e0bf2917 	ldw	r2,-860(fp)
 800272c:	1885883a 	add	r2,r3,r2
 8002730:	11000005 	stb	r4,0(r2)
									dataAscii[k][j]= tmp[j];
 8002734:	e0fff304 	addi	r3,fp,-52
 8002738:	e0bf2917 	ldw	r2,-860(fp)
 800273c:	1885883a 	add	r2,r3,r2
 8002740:	10c00003 	ldbu	r3,0(r2)
 8002744:	008200b4 	movhi	r2,2050
 8002748:	10851cc4 	addi	r2,r2,5235
 800274c:	e13f2817 	ldw	r4,-864(fp)
 8002750:	21400524 	muli	r5,r4,20
 8002754:	e13f2917 	ldw	r4,-860(fp)
 8002758:	2909883a 	add	r4,r5,r4
 800275c:	1105883a 	add	r2,r2,r4
 8002760:	10c00005 	stb	r3,0(r2)
								printf("%c", buffer[i]);
 8002764:	e0bf2717 	ldw	r2,-868(fp)
 8002768:	1085883a 	add	r2,r2,r2
 800276c:	1085883a 	add	r2,r2,r2
 8002770:	e0ff2704 	addi	r3,fp,-868
 8002774:	1885883a 	add	r2,r3,r2
 8002778:	10800404 	addi	r2,r2,16
 800277c:	10800017 	ldw	r2,0(r2)
 8002780:	1009883a 	mov	r4,r2
 8002784:	80041000 	call	8004100 <putchar>
								i++;j++;
 8002788:	e0bf2717 	ldw	r2,-868(fp)
 800278c:	10800044 	addi	r2,r2,1
 8002790:	e0bf2715 	stw	r2,-868(fp)
 8002794:	e0bf2917 	ldw	r2,-860(fp)
 8002798:	10800044 	addi	r2,r2,1
 800279c:	e0bf2915 	stw	r2,-860(fp)
							}while (buffer[i] != ',' && buffer[i] != '.');
 80027a0:	e0bf2717 	ldw	r2,-868(fp)
 80027a4:	1085883a 	add	r2,r2,r2
 80027a8:	1085883a 	add	r2,r2,r2
 80027ac:	e13f2704 	addi	r4,fp,-868
 80027b0:	2085883a 	add	r2,r4,r2
 80027b4:	10800404 	addi	r2,r2,16
 80027b8:	10800017 	ldw	r2,0(r2)
 80027bc:	10800b20 	cmpeqi	r2,r2,44
 80027c0:	1000091e 	bne	r2,zero,80027e8 <getGpsInfo+0x1a0>
 80027c4:	e0bf2717 	ldw	r2,-868(fp)
 80027c8:	1085883a 	add	r2,r2,r2
 80027cc:	1085883a 	add	r2,r2,r2
 80027d0:	e0ff2704 	addi	r3,fp,-868
 80027d4:	1885883a 	add	r2,r3,r2
 80027d8:	10800404 	addi	r2,r2,16
 80027dc:	10800017 	ldw	r2,0(r2)
 80027e0:	10800b98 	cmpnei	r2,r2,46
 80027e4:	103fb51e 	bne	r2,zero,80026bc <__alt_data_end+0xfc0026bc>
							tmp[j] = '\0';
 80027e8:	e0fff304 	addi	r3,fp,-52
 80027ec:	e0bf2917 	ldw	r2,-860(fp)
 80027f0:	1885883a 	add	r2,r3,r2
 80027f4:	10000005 	stb	zero,0(r2)
							if (k == 4){
 80027f8:	e0bf2817 	ldw	r2,-864(fp)
 80027fc:	10800118 	cmpnei	r2,r2,4
 8002800:	1000111e 	bne	r2,zero,8002848 <getGpsInfo+0x200>
								data[k] = (tmp[0] == 'N')?2:3;
 8002804:	e0bff303 	ldbu	r2,-52(fp)
 8002808:	10803fcc 	andi	r2,r2,255
 800280c:	1080201c 	xori	r2,r2,128
 8002810:	10bfe004 	addi	r2,r2,-128
 8002814:	10801398 	cmpnei	r2,r2,78
 8002818:	1000021e 	bne	r2,zero,8002824 <getGpsInfo+0x1dc>
 800281c:	00800084 	movi	r2,2
 8002820:	00000106 	br	8002828 <getGpsInfo+0x1e0>
 8002824:	008000c4 	movi	r2,3
 8002828:	e0ff2817 	ldw	r3,-864(fp)
 800282c:	18c7883a 	add	r3,r3,r3
 8002830:	18c7883a 	add	r3,r3,r3
 8002834:	e13f2704 	addi	r4,fp,-868
 8002838:	20c7883a 	add	r3,r4,r3
 800283c:	18c0d104 	addi	r3,r3,836
 8002840:	18800015 	stw	r2,0(r3)
 8002844:	00001f06 	br	80028c4 <getGpsInfo+0x27c>
							}else if (k == 7){
 8002848:	e0bf2817 	ldw	r2,-864(fp)
 800284c:	108001d8 	cmpnei	r2,r2,7
 8002850:	1000111e 	bne	r2,zero,8002898 <getGpsInfo+0x250>
								data[k] = (tmp[0] == 'W')?4:5;
 8002854:	e0bff303 	ldbu	r2,-52(fp)
 8002858:	10803fcc 	andi	r2,r2,255
 800285c:	1080201c 	xori	r2,r2,128
 8002860:	10bfe004 	addi	r2,r2,-128
 8002864:	108015d8 	cmpnei	r2,r2,87
 8002868:	1000021e 	bne	r2,zero,8002874 <getGpsInfo+0x22c>
 800286c:	00800104 	movi	r2,4
 8002870:	00000106 	br	8002878 <getGpsInfo+0x230>
 8002874:	00800144 	movi	r2,5
 8002878:	e0ff2817 	ldw	r3,-864(fp)
 800287c:	18c7883a 	add	r3,r3,r3
 8002880:	18c7883a 	add	r3,r3,r3
 8002884:	e13f2704 	addi	r4,fp,-868
 8002888:	20c7883a 	add	r3,r4,r3
 800288c:	18c0d104 	addi	r3,r3,836
 8002890:	18800015 	stw	r2,0(r3)
 8002894:	00000b06 	br	80028c4 <getGpsInfo+0x27c>
							}else
								data[k] = atoi(tmp);
 8002898:	e0bff304 	addi	r2,fp,-52
 800289c:	1009883a 	mov	r4,r2
 80028a0:	8003f400 	call	8003f40 <atoi>
 80028a4:	1007883a 	mov	r3,r2
 80028a8:	e0bf2817 	ldw	r2,-864(fp)
 80028ac:	1085883a 	add	r2,r2,r2
 80028b0:	1085883a 	add	r2,r2,r2
 80028b4:	e13f2704 	addi	r4,fp,-868
 80028b8:	2085883a 	add	r2,r4,r2
 80028bc:	1080d104 	addi	r2,r2,836
 80028c0:	10c00015 	stw	r3,0(r2)

							printf (" data int %d\n",data[k]);
 80028c4:	e0bf2817 	ldw	r2,-864(fp)
 80028c8:	1085883a 	add	r2,r2,r2
 80028cc:	1085883a 	add	r2,r2,r2
 80028d0:	e0ff2704 	addi	r3,fp,-868
 80028d4:	1885883a 	add	r2,r3,r2
 80028d8:	1080d104 	addi	r2,r2,836
 80028dc:	10800017 	ldw	r2,0(r2)
 80028e0:	010200b4 	movhi	r4,2050
 80028e4:	21358404 	addi	r4,r4,-10736
 80028e8:	100b883a 	mov	r5,r2
 80028ec:	80040bc0 	call	80040bc <printf>
							k++;
 80028f0:	e0bf2817 	ldw	r2,-864(fp)
 80028f4:	10800044 	addi	r2,r2,1
 80028f8:	e0bf2815 	stw	r2,-864(fp)
						}while (buffer[i] != '\n' && k<8);
 80028fc:	e0bf2717 	ldw	r2,-868(fp)
 8002900:	1085883a 	add	r2,r2,r2
 8002904:	1085883a 	add	r2,r2,r2
 8002908:	e13f2704 	addi	r4,fp,-868
 800290c:	2085883a 	add	r2,r4,r2
 8002910:	10800404 	addi	r2,r2,16
 8002914:	10800017 	ldw	r2,0(r2)
 8002918:	108002a0 	cmpeqi	r2,r2,10
 800291c:	1000031e 	bne	r2,zero,800292c <getGpsInfo+0x2e4>
 8002920:	e0bf2817 	ldw	r2,-864(fp)
 8002924:	10800210 	cmplti	r2,r2,8
 8002928:	103f631e 	bne	r2,zero,80026b8 <__alt_data_end+0xfc0026b8>



							printGpsData(data);
 800292c:	e0bff804 	addi	r2,fp,-32
 8002930:	1009883a 	mov	r4,r2
 8002934:	80025280 	call	8002528 <printGpsData>


						printf("\n");
 8002938:	01000284 	movi	r4,10
 800293c:	80041000 	call	8004100 <putchar>
						return;
 8002940:	0001883a 	nop
 8002944:	00000106 	br	800294c <getGpsInfo+0x304>
					}
					i=0;
 8002948:	e03f2715 	stw	zero,-868(fp)
}
 800294c:	e037883a 	mov	sp,fp
 8002950:	dfc00117 	ldw	ra,4(sp)
 8002954:	df000017 	ldw	fp,0(sp)
 8002958:	dec00204 	addi	sp,sp,8
 800295c:	f800283a 	ret

08002960 <button_Pressed>:



//-------check which button is pressed-------

int button_Pressed(){
 8002960:	defffb04 	addi	sp,sp,-20
 8002964:	dfc00415 	stw	ra,16(sp)
 8002968:	df000315 	stw	fp,12(sp)
 800296c:	df000304 	addi	fp,sp,12
    
    int choose = 0;
 8002970:	e03ffd15 	stw	zero,-12(fp)
    Point coord;
    
    coord = GetPress();
 8002974:	80020a80 	call	80020a8 <GetPress>
 8002978:	1009883a 	mov	r4,r2
 800297c:	180b883a 	mov	r5,r3
 8002980:	e13ffe15 	stw	r4,-8(fp)
 8002984:	e17fff15 	stw	r5,-4(fp)
    //then check if the touched coordinate is a button: if yes, then return the corresponding category; if not, return choose as 0 means did not choose a category
    while(coord.x < 300 || coord.x > 550){
 8002988:	00000506 	br	80029a0 <button_Pressed+0x40>
        coord = GetPress();
 800298c:	80020a80 	call	80020a8 <GetPress>
 8002990:	1009883a 	mov	r4,r2
 8002994:	180b883a 	mov	r5,r3
 8002998:	e13ffe15 	stw	r4,-8(fp)
 800299c:	e17fff15 	stw	r5,-4(fp)
    int choose = 0;
    Point coord;
    
    coord = GetPress();
    //then check if the touched coordinate is a button: if yes, then return the corresponding category; if not, return choose as 0 means did not choose a category
    while(coord.x < 300 || coord.x > 550){
 80029a0:	e0bffe17 	ldw	r2,-8(fp)
 80029a4:	10804b10 	cmplti	r2,r2,300
 80029a8:	103ff81e 	bne	r2,zero,800298c <__alt_data_end+0xfc00298c>
 80029ac:	e0bffe17 	ldw	r2,-8(fp)
 80029b0:	108089c8 	cmpgei	r2,r2,551
 80029b4:	103ff51e 	bne	r2,zero,800298c <__alt_data_end+0xfc00298c>
        coord = GetPress();
    }
    
    if(coord.y > 130 && coord.y < 210)//pregnant pressed
 80029b8:	e0bfff17 	ldw	r2,-4(fp)
 80029bc:	108020d0 	cmplti	r2,r2,131
 80029c0:	1000061e 	bne	r2,zero,80029dc <button_Pressed+0x7c>
 80029c4:	e0bfff17 	ldw	r2,-4(fp)
 80029c8:	10803488 	cmpgei	r2,r2,210
 80029cc:	1000031e 	bne	r2,zero,80029dc <button_Pressed+0x7c>
        choose = preg;
 80029d0:	00800044 	movi	r2,1
 80029d4:	e0bffd15 	stw	r2,-12(fp)
 80029d8:	00002306 	br	8002a68 <button_Pressed+0x108>
    else if(coord.y > 220 && coord.y < 300)//anemia pressed
 80029dc:	e0bfff17 	ldw	r2,-4(fp)
 80029e0:	10803750 	cmplti	r2,r2,221
 80029e4:	1000061e 	bne	r2,zero,8002a00 <button_Pressed+0xa0>
 80029e8:	e0bfff17 	ldw	r2,-4(fp)
 80029ec:	10804b08 	cmpgei	r2,r2,300
 80029f0:	1000031e 	bne	r2,zero,8002a00 <button_Pressed+0xa0>
        choose = anemia;
 80029f4:	00800084 	movi	r2,2
 80029f8:	e0bffd15 	stw	r2,-12(fp)
 80029fc:	00001a06 	br	8002a68 <button_Pressed+0x108>
    else if(coord.y > 310 && coord.y < 390)
 8002a00:	e0bfff17 	ldw	r2,-4(fp)
 8002a04:	10804dd0 	cmplti	r2,r2,311
 8002a08:	1000061e 	bne	r2,zero,8002a24 <button_Pressed+0xc4>
 8002a0c:	e0bfff17 	ldw	r2,-4(fp)
 8002a10:	10806188 	cmpgei	r2,r2,390
 8002a14:	1000031e 	bne	r2,zero,8002a24 <button_Pressed+0xc4>
        choose = child;
 8002a18:	008000c4 	movi	r2,3
 8002a1c:	e0bffd15 	stw	r2,-12(fp)
 8002a20:	00001106 	br	8002a68 <button_Pressed+0x108>
    else if(coord.y > 400 && coord.y < 475)
 8002a24:	e0bfff17 	ldw	r2,-4(fp)
 8002a28:	10806450 	cmplti	r2,r2,401
 8002a2c:	1000061e 	bne	r2,zero,8002a48 <button_Pressed+0xe8>
 8002a30:	e0bfff17 	ldw	r2,-4(fp)
 8002a34:	108076c8 	cmpgei	r2,r2,475
 8002a38:	1000031e 	bne	r2,zero,8002a48 <button_Pressed+0xe8>
        choose = healthy;
 8002a3c:	00800104 	movi	r2,4
 8002a40:	e0bffd15 	stw	r2,-12(fp)
 8002a44:	00000806 	br	8002a68 <button_Pressed+0x108>
    else if(coord.y > 50 && coord.y < 120)
 8002a48:	e0bfff17 	ldw	r2,-4(fp)
 8002a4c:	10800cd0 	cmplti	r2,r2,51
 8002a50:	1000051e 	bne	r2,zero,8002a68 <button_Pressed+0x108>
 8002a54:	e0bfff17 	ldw	r2,-4(fp)
 8002a58:	10801e08 	cmpgei	r2,r2,120
 8002a5c:	1000021e 	bne	r2,zero,8002a68 <button_Pressed+0x108>
        choose = pulm;
 8002a60:	00800144 	movi	r2,5
 8002a64:	e0bffd15 	stw	r2,-12(fp)
    
    return choose;
 8002a68:	e0bffd17 	ldw	r2,-12(fp)
}
 8002a6c:	e037883a 	mov	sp,fp
 8002a70:	dfc00117 	ldw	ra,4(sp)
 8002a74:	df000017 	ldw	fp,0(sp)
 8002a78:	dec00204 	addi	sp,sp,8
 8002a7c:	f800283a 	ret

08002a80 <draw_Data>:
//
//void refresh(){
//    //clear the data seciton
//}

void draw_Data(){
 8002a80:	deffff04 	addi	sp,sp,-4
 8002a84:	df000015 	stw	fp,0(sp)
 8002a88:	d839883a 	mov	fp,sp
    //do some stuff to draw the real-time data
}
 8002a8c:	e037883a 	mov	sp,fp
 8002a90:	df000017 	ldw	fp,0(sp)
 8002a94:	dec00104 	addi	sp,sp,4
 8002a98:	f800283a 	ret

08002a9c <page1>:
//
//

#include "page1.h"

void page1() {
 8002a9c:	deffe704 	addi	sp,sp,-100
 8002aa0:	dfc01815 	stw	ra,96(sp)
 8002aa4:	df001715 	stw	fp,92(sp)
 8002aa8:	df001704 	addi	fp,sp,92

	clear_screen(1);
 8002aac:	01000044 	movi	r4,1
 8002ab0:	80013180 	call	8001318 <clear_screen>
	const char title[] = "PULSE RATE & OXYGEN SATURATION FEEDBACK";
 8002ab4:	0094d334 	movhi	r2,21324
 8002ab8:	10955404 	addi	r2,r2,21840
 8002abc:	e0bfec15 	stw	r2,-80(fp)
 8002ac0:	009054b4 	movhi	r2,16722
 8002ac4:	10881144 	addi	r2,r2,8261
 8002ac8:	e0bfed15 	stw	r2,-76(fp)
 8002acc:	00898834 	movhi	r2,9760
 8002ad0:	10915504 	addi	r2,r2,17748
 8002ad4:	e0bfee15 	stw	r2,-72(fp)
 8002ad8:	00965634 	movhi	r2,22872
 8002adc:	1093c804 	addi	r2,r2,20256
 8002ae0:	e0bfef15 	stw	r2,-68(fp)
 8002ae4:	008813b4 	movhi	r2,8270
 8002ae8:	109151c4 	addi	r2,r2,17735
 8002aec:	e0bff015 	stw	r2,-64(fp)
 8002af0:	00955534 	movhi	r2,21844
 8002af4:	109054c4 	addi	r2,r2,16723
 8002af8:	e0bff115 	stw	r2,-60(fp)
 8002afc:	00925534 	movhi	r2,18772
 8002b00:	10905484 	addi	r2,r2,16722
 8002b04:	e0bff215 	stw	r2,-56(fp)
 8002b08:	00918834 	movhi	r2,17952
 8002b0c:	109393c4 	addi	r2,r2,20047
 8002b10:	e0bff315 	stw	r2,-52(fp)
 8002b14:	00909134 	movhi	r2,16964
 8002b18:	10915144 	addi	r2,r2,17733
 8002b1c:	e0bff415 	stw	r2,-48(fp)
 8002b20:	008012f4 	movhi	r2,75
 8002b24:	1090d044 	addi	r2,r2,17217
 8002b28:	e0bff515 	stw	r2,-44(fp)
	const char welcome[] = "WELCOME!";
 8002b2c:	0090d334 	movhi	r2,17228
 8002b30:	109155c4 	addi	r2,r2,17751
 8002b34:	e0bff615 	stw	r2,-40(fp)
 8002b38:	00885174 	movhi	r2,8517
 8002b3c:	109353c4 	addi	r2,r2,19791
 8002b40:	e0bff715 	stw	r2,-36(fp)
 8002b44:	e03ff805 	stb	zero,-32(fp)
	const char setts[] = "SETTING UP THE SYSTEM........";
 8002b48:	008200b4 	movhi	r2,2050
 8002b4c:	10b58804 	addi	r2,r2,-10720
 8002b50:	e0fff844 	addi	r3,fp,-31
 8002b54:	100b883a 	mov	r5,r2
 8002b58:	00800784 	movi	r2,30
 8002b5c:	1809883a 	mov	r4,r3
 8002b60:	100d883a 	mov	r6,r2
 8002b64:	8003f580 	call	8003f58 <memcpy>

	//border for wwelcome age
	//drawFilledRectangle(80, 400, 50, 300, BLACK);
	drawFilledRectangle(20, 470, 100, 690, CYAN);
 8002b68:	00800184 	movi	r2,6
 8002b6c:	d8800015 	stw	r2,0(sp)
 8002b70:	01000504 	movi	r4,20
 8002b74:	01407584 	movi	r5,470
 8002b78:	01801904 	movi	r6,100
 8002b7c:	01c0ac84 	movi	r7,690
 8002b80:	8000ee40 	call	8000ee4 <drawFilledRectangle>
	//drawFilledRectangle(110, 370, 80, 270, WHITE);
	drawFilledRectangle(50, 440, 130, 660, WHITE);
 8002b84:	00800044 	movi	r2,1
 8002b88:	d8800015 	stw	r2,0(sp)
 8002b8c:	01000c84 	movi	r4,50
 8002b90:	01406e04 	movi	r5,440
 8002b94:	01802084 	movi	r6,130
 8002b98:	01c0a504 	movi	r7,660
 8002b9c:	8000ee40 	call	8000ee4 <drawFilledRectangle>

	int i;
	for (i = 0; i < sizeof(title); i++)
 8002ba0:	e03feb15 	stw	zero,-84(fp)
 8002ba4:	00001406 	br	8002bf8 <page1+0x15c>
		OutGraphicsCharFont2a((150 + 13 * i), 100, 0, 1, title[i], 1);
 8002ba8:	e0bfeb17 	ldw	r2,-84(fp)
 8002bac:	10800364 	muli	r2,r2,13
 8002bb0:	11002584 	addi	r4,r2,150
 8002bb4:	e0ffec04 	addi	r3,fp,-80
 8002bb8:	e0bfeb17 	ldw	r2,-84(fp)
 8002bbc:	1885883a 	add	r2,r3,r2
 8002bc0:	10800003 	ldbu	r2,0(r2)
 8002bc4:	10803fcc 	andi	r2,r2,255
 8002bc8:	1080201c 	xori	r2,r2,128
 8002bcc:	10bfe004 	addi	r2,r2,-128
 8002bd0:	d8800015 	stw	r2,0(sp)
 8002bd4:	00800044 	movi	r2,1
 8002bd8:	d8800115 	stw	r2,4(sp)
 8002bdc:	01401904 	movi	r5,100
 8002be0:	000d883a 	mov	r6,zero
 8002be4:	01c00044 	movi	r7,1
 8002be8:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	drawFilledRectangle(20, 470, 100, 690, CYAN);
	//drawFilledRectangle(110, 370, 80, 270, WHITE);
	drawFilledRectangle(50, 440, 130, 660, WHITE);

	int i;
	for (i = 0; i < sizeof(title); i++)
 8002bec:	e0bfeb17 	ldw	r2,-84(fp)
 8002bf0:	10800044 	addi	r2,r2,1
 8002bf4:	e0bfeb15 	stw	r2,-84(fp)
 8002bf8:	e0bfeb17 	ldw	r2,-84(fp)
 8002bfc:	10800a30 	cmpltui	r2,r2,40
 8002c00:	103fe91e 	bne	r2,zero,8002ba8 <__alt_data_end+0xfc002ba8>
		OutGraphicsCharFont2a((150 + 13 * i), 100, 0, 1, title[i], 1);

	for (i = 0; i < sizeof(welcome); i++)
 8002c04:	e03feb15 	stw	zero,-84(fp)
 8002c08:	00001406 	br	8002c5c <page1+0x1c0>
		OutGraphicsCharFont2a((350 + 13 * i), 200, 0, 1, welcome[i], 1);
 8002c0c:	e0bfeb17 	ldw	r2,-84(fp)
 8002c10:	10800364 	muli	r2,r2,13
 8002c14:	11005784 	addi	r4,r2,350
 8002c18:	e0fff604 	addi	r3,fp,-40
 8002c1c:	e0bfeb17 	ldw	r2,-84(fp)
 8002c20:	1885883a 	add	r2,r3,r2
 8002c24:	10800003 	ldbu	r2,0(r2)
 8002c28:	10803fcc 	andi	r2,r2,255
 8002c2c:	1080201c 	xori	r2,r2,128
 8002c30:	10bfe004 	addi	r2,r2,-128
 8002c34:	d8800015 	stw	r2,0(sp)
 8002c38:	00800044 	movi	r2,1
 8002c3c:	d8800115 	stw	r2,4(sp)
 8002c40:	01403204 	movi	r5,200
 8002c44:	000d883a 	mov	r6,zero
 8002c48:	01c00044 	movi	r7,1
 8002c4c:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>

	int i;
	for (i = 0; i < sizeof(title); i++)
		OutGraphicsCharFont2a((150 + 13 * i), 100, 0, 1, title[i], 1);

	for (i = 0; i < sizeof(welcome); i++)
 8002c50:	e0bfeb17 	ldw	r2,-84(fp)
 8002c54:	10800044 	addi	r2,r2,1
 8002c58:	e0bfeb15 	stw	r2,-84(fp)
 8002c5c:	e0bfeb17 	ldw	r2,-84(fp)
 8002c60:	10800270 	cmpltui	r2,r2,9
 8002c64:	103fe91e 	bne	r2,zero,8002c0c <__alt_data_end+0xfc002c0c>
		OutGraphicsCharFont2a((350 + 13 * i), 200, 0, 1, welcome[i], 1);

	for (i = 0; i < sizeof(setts); i++)
 8002c68:	e03feb15 	stw	zero,-84(fp)
 8002c6c:	00001406 	br	8002cc0 <page1+0x224>
		OutGraphicsCharFont2a((230 + 13 * i), 350, BLUE, 1, setts[i], 1);
 8002c70:	e0bfeb17 	ldw	r2,-84(fp)
 8002c74:	10800364 	muli	r2,r2,13
 8002c78:	11003984 	addi	r4,r2,230
 8002c7c:	e0fff844 	addi	r3,fp,-31
 8002c80:	e0bfeb17 	ldw	r2,-84(fp)
 8002c84:	1885883a 	add	r2,r3,r2
 8002c88:	10800003 	ldbu	r2,0(r2)
 8002c8c:	10803fcc 	andi	r2,r2,255
 8002c90:	1080201c 	xori	r2,r2,128
 8002c94:	10bfe004 	addi	r2,r2,-128
 8002c98:	d8800015 	stw	r2,0(sp)
 8002c9c:	00800044 	movi	r2,1
 8002ca0:	d8800115 	stw	r2,4(sp)
 8002ca4:	01405784 	movi	r5,350
 8002ca8:	01800104 	movi	r6,4
 8002cac:	01c00044 	movi	r7,1
 8002cb0:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((150 + 13 * i), 100, 0, 1, title[i], 1);

	for (i = 0; i < sizeof(welcome); i++)
		OutGraphicsCharFont2a((350 + 13 * i), 200, 0, 1, welcome[i], 1);

	for (i = 0; i < sizeof(setts); i++)
 8002cb4:	e0bfeb17 	ldw	r2,-84(fp)
 8002cb8:	10800044 	addi	r2,r2,1
 8002cbc:	e0bfeb15 	stw	r2,-84(fp)
 8002cc0:	e0bfeb17 	ldw	r2,-84(fp)
 8002cc4:	108007b0 	cmpltui	r2,r2,30
 8002cc8:	103fe91e 	bne	r2,zero,8002c70 <__alt_data_end+0xfc002c70>
		OutGraphicsCharFont2a((230 + 13 * i), 350, BLUE, 1, setts[i], 1);

	usleep(5000000);
 8002ccc:	01001334 	movhi	r4,76
 8002cd0:	2112d004 	addi	r4,r4,19264
 8002cd4:	8010f200 	call	8010f20 <usleep>

}
 8002cd8:	e037883a 	mov	sp,fp
 8002cdc:	dfc00117 	ldw	ra,4(sp)
 8002ce0:	df000017 	ldw	fp,0(sp)
 8002ce4:	dec00204 	addi	sp,sp,8
 8002ce8:	f800283a 	ret

08002cec <page2>:
//#include "const.h"


//--------logic for page2----------------------------

void page2(){
 8002cec:	defffe04 	addi	sp,sp,-8
 8002cf0:	dfc00115 	stw	ra,4(sp)
 8002cf4:	df000015 	stw	fp,0(sp)
 8002cf8:	d839883a 	mov	fp,sp

	clear_screen(1);
 8002cfc:	01000044 	movi	r4,1
 8002d00:	80013180 	call	8001318 <clear_screen>
	draw_menu(6);
 8002d04:	01000184 	movi	r4,6
 8002d08:	80014580 	call	8001458 <draw_menu>
	titles_menu();
 8002d0c:	800151c0 	call	800151c <titles_menu>
    
    //draw second page (MENU): Linda 's graphics has to be here
    
}
 8002d10:	e037883a 	mov	sp,fp
 8002d14:	dfc00117 	ldw	ra,4(sp)
 8002d18:	df000017 	ldw	fp,0(sp)
 8002d1c:	dec00204 	addi	sp,sp,8
 8002d20:	f800283a 	ret

08002d24 <page3>:
#include "page3.h"
//#include "page2.h"
//#include "helpFuncs.h"


void page3(){
 8002d24:	defffe04 	addi	sp,sp,-8
 8002d28:	dfc00115 	stw	ra,4(sp)
 8002d2c:	df000015 	stw	fp,0(sp)
 8002d30:	d839883a 	mov	fp,sp
    
	clear_screen(1);
 8002d34:	01000044 	movi	r4,1
 8002d38:	80013180 	call	8001318 <clear_screen>
    //draw thrid page
	pulse_title();
 8002d3c:	80019780 	call	8001978 <pulse_title>
	side_menu();
 8002d40:	8001bb40 	call	8001bb4 <side_menu>
   // GPS();//use this to print the time
    //set up the screen
   // draw_Data();
    

}
 8002d44:	e037883a 	mov	sp,fp
 8002d48:	dfc00117 	ldw	ra,4(sp)
 8002d4c:	df000017 	ldw	fp,0(sp)
 8002d50:	dec00204 	addi	sp,sp,8
 8002d54:	f800283a 	ret

08002d58 <Init_Bio>:
#define Bio_Status (*(volatile unsigned char *)(0x84000250))
#define Bio_TxData (*(volatile unsigned char *)(0x84000252))
#define Bio_RxData (*(volatile unsigned char *)(0x84000252))
#define Bio_Baud (*(volatile unsigned char *)(0x84000254))

void Init_Bio(void) {
 8002d58:	defffe04 	addi	sp,sp,-8
 8002d5c:	dfc00115 	stw	ra,4(sp)
 8002d60:	df000015 	stw	fp,0(sp)
 8002d64:	d839883a 	mov	fp,sp
	Bio_Control = 0x15;
 8002d68:	00a10034 	movhi	r2,33792
 8002d6c:	10809404 	addi	r2,r2,592
 8002d70:	00c00544 	movi	r3,21
 8002d74:	10c00005 	stb	r3,0(r2)
	Bio_Baud = 0x07;
 8002d78:	00a10034 	movhi	r2,33792
 8002d7c:	10809504 	addi	r2,r2,596
 8002d80:	00c001c4 	movi	r3,7
 8002d84:	10c00005 	stb	r3,0(r2)
	usleep(100000); //wait for 100ms
 8002d88:	010000b4 	movhi	r4,2
 8002d8c:	2121a804 	addi	r4,r4,-31072
 8002d90:	8010f200 	call	8010f20 <usleep>
}
 8002d94:	e037883a 	mov	sp,fp
 8002d98:	dfc00117 	ldw	ra,4(sp)
 8002d9c:	df000017 	ldw	fp,0(sp)
 8002da0:	dec00204 	addi	sp,sp,8
 8002da4:	f800283a 	ret

08002da8 <getChar_Bio>:

unsigned char getChar_Bio(void) {
 8002da8:	deffff04 	addi	sp,sp,-4
 8002dac:	df000015 	stw	fp,0(sp)
 8002db0:	d839883a 	mov	fp,sp
	while ((Bio_Status & 0x01) != 0x01)
 8002db4:	0001883a 	nop
 8002db8:	00a10034 	movhi	r2,33792
 8002dbc:	10809404 	addi	r2,r2,592
 8002dc0:	10800003 	ldbu	r2,0(r2)
 8002dc4:	10803fcc 	andi	r2,r2,255
 8002dc8:	1080004c 	andi	r2,r2,1
 8002dcc:	103ffa26 	beq	r2,zero,8002db8 <__alt_data_end+0xfc002db8>
		;
	return Bio_RxData;
 8002dd0:	00a10034 	movhi	r2,33792
 8002dd4:	10809484 	addi	r2,r2,594
 8002dd8:	10800003 	ldbu	r2,0(r2)
}
 8002ddc:	e037883a 	mov	sp,fp
 8002de0:	df000017 	ldw	fp,0(sp)
 8002de4:	dec00104 	addi	sp,sp,4
 8002de8:	f800283a 	ret

08002dec <getbyte4>:

unsigned char getbyte4() {
 8002dec:	defffd04 	addi	sp,sp,-12
 8002df0:	dfc00215 	stw	ra,8(sp)
 8002df4:	df000115 	stw	fp,4(sp)
 8002df8:	df000104 	addi	fp,sp,4
	unsigned char syn;
	syn = getChar_Bio();
 8002dfc:	8002da80 	call	8002da8 <getChar_Bio>
 8002e00:	e0bfff05 	stb	r2,-4(fp)
	while (syn != 1)
 8002e04:	00000206 	br	8002e10 <getbyte4+0x24>
		syn = getChar_Bio();
 8002e08:	8002da80 	call	8002da8 <getChar_Bio>
 8002e0c:	e0bfff05 	stb	r2,-4(fp)
}

unsigned char getbyte4() {
	unsigned char syn;
	syn = getChar_Bio();
	while (syn != 1)
 8002e10:	e0bfff03 	ldbu	r2,-4(fp)
 8002e14:	10800058 	cmpnei	r2,r2,1
 8002e18:	103ffb1e 	bne	r2,zero,8002e08 <__alt_data_end+0xfc002e08>
		syn = getChar_Bio();
	getChar_Bio();
 8002e1c:	8002da80 	call	8002da8 <getChar_Bio>
	getChar_Bio();
 8002e20:	8002da80 	call	8002da8 <getChar_Bio>

	return getChar_Bio();  //i am getting the 4th byte- unsigned char for spo2
 8002e24:	8002da80 	call	8002da8 <getChar_Bio>
}
 8002e28:	e037883a 	mov	sp,fp
 8002e2c:	dfc00117 	ldw	ra,4(sp)
 8002e30:	df000017 	ldw	fp,0(sp)
 8002e34:	dec00204 	addi	sp,sp,8
 8002e38:	f800283a 	ret

08002e3c <get_Pulse>:

unsigned char get_Pulse() {
 8002e3c:	defffd04 	addi	sp,sp,-12
 8002e40:	dfc00215 	stw	ra,8(sp)
 8002e44:	df000115 	stw	fp,4(sp)
 8002e48:	df000104 	addi	fp,sp,4
	unsigned char syn;
	syn = getChar_Bio();
 8002e4c:	8002da80 	call	8002da8 <getChar_Bio>
 8002e50:	e0bfff05 	stb	r2,-4(fp)
	while (syn != 1)
 8002e54:	00000206 	br	8002e60 <get_Pulse+0x24>
		syn = getChar_Bio();
 8002e58:	8002da80 	call	8002da8 <getChar_Bio>
 8002e5c:	e0bfff05 	stb	r2,-4(fp)
}

unsigned char get_Pulse() {
	unsigned char syn;
	syn = getChar_Bio();
	while (syn != 1)
 8002e60:	e0bfff03 	ldbu	r2,-4(fp)
 8002e64:	10800058 	cmpnei	r2,r2,1
 8002e68:	103ffb1e 	bne	r2,zero,8002e58 <__alt_data_end+0xfc002e58>
		syn = getChar_Bio();
	getChar_Bio();
 8002e6c:	8002da80 	call	8002da8 <getChar_Bio>

	return getChar_Bio();
 8002e70:	8002da80 	call	8002da8 <getChar_Bio>
}
 8002e74:	e037883a 	mov	sp,fp
 8002e78:	dfc00117 	ldw	ra,4(sp)
 8002e7c:	df000017 	ldw	fp,0(sp)
 8002e80:	dec00204 	addi	sp,sp,8
 8002e84:	f800283a 	ret

08002e88 <get_HR>:

unsigned char get_HR(){
 8002e88:	defffd04 	addi	sp,sp,-12
 8002e8c:	dfc00215 	stw	ra,8(sp)
 8002e90:	df000115 	stw	fp,4(sp)
 8002e94:	df000104 	addi	fp,sp,4
	unsigned char rev, sop, hrl, hrm;
	hrm = getChar_Bio();
 8002e98:	8002da80 	call	8002da8 <getChar_Bio>
 8002e9c:	e0bfffc5 	stb	r2,-1(fp)
	hrl = getChar_Bio();
 8002ea0:	8002da80 	call	8002da8 <getChar_Bio>
 8002ea4:	e0bfff85 	stb	r2,-2(fp)
	sop = getChar_Bio();
 8002ea8:	8002da80 	call	8002da8 <getChar_Bio>
 8002eac:	e0bfff45 	stb	r2,-3(fp)
	rev = getChar_Bio();
 8002eb0:	8002da80 	call	8002da8 <getChar_Bio>
 8002eb4:	e0bfff05 	stb	r2,-4(fp)
	while(rev != 52){
 8002eb8:	00000806 	br	8002edc <get_HR+0x54>
		hrm = hrl;
 8002ebc:	e0bfff83 	ldbu	r2,-2(fp)
 8002ec0:	e0bfffc5 	stb	r2,-1(fp)
		hrl = sop;
 8002ec4:	e0bfff43 	ldbu	r2,-3(fp)
 8002ec8:	e0bfff85 	stb	r2,-2(fp)
		sop = rev;
 8002ecc:	e0bfff03 	ldbu	r2,-4(fp)
 8002ed0:	e0bfff45 	stb	r2,-3(fp)
		rev = getbyte4();
 8002ed4:	8002dec0 	call	8002dec <getbyte4>
 8002ed8:	e0bfff05 	stb	r2,-4(fp)
	unsigned char rev, sop, hrl, hrm;
	hrm = getChar_Bio();
	hrl = getChar_Bio();
	sop = getChar_Bio();
	rev = getChar_Bio();
	while(rev != 52){
 8002edc:	e0bfff03 	ldbu	r2,-4(fp)
 8002ee0:	10800d18 	cmpnei	r2,r2,52
 8002ee4:	103ff51e 	bne	r2,zero,8002ebc <__alt_data_end+0xfc002ebc>
		hrm = hrl;
		hrl = sop;
		sop = rev;
		rev = getbyte4();
	}
	if(hrl >= 128){
 8002ee8:	e0bfff83 	ldbu	r2,-2(fp)
 8002eec:	10803fcc 	andi	r2,r2,255
 8002ef0:	1080201c 	xori	r2,r2,128
 8002ef4:	10bfe004 	addi	r2,r2,-128
 8002ef8:	1000020e 	bge	r2,zero,8002f04 <get_HR+0x7c>
		return hrm;
 8002efc:	e0bfffc3 	ldbu	r2,-1(fp)
 8002f00:	00000106 	br	8002f08 <get_HR+0x80>
		printf("hrm >> 7 is %d \n", hrm);
	}
	else
		return hrl;
 8002f04:	e0bfff83 	ldbu	r2,-2(fp)
}
 8002f08:	e037883a 	mov	sp,fp
 8002f0c:	dfc00117 	ldw	ra,4(sp)
 8002f10:	df000017 	ldw	fp,0(sp)
 8002f14:	dec00204 	addi	sp,sp,8
 8002f18:	f800283a 	ret

08002f1c <get_Spo2>:

unsigned char get_Spo2() {
 8002f1c:	defffd04 	addi	sp,sp,-12
 8002f20:	dfc00215 	stw	ra,8(sp)
 8002f24:	df000115 	stw	fp,4(sp)
 8002f28:	df000104 	addi	fp,sp,4
	unsigned char rev, spo2;
	rev = getbyte4();
 8002f2c:	8002dec0 	call	8002dec <getbyte4>
 8002f30:	e0bfff05 	stb	r2,-4(fp)
	//int i;
	//for (i = 0; i < 14; i++) {
		while (rev != 52) {
 8002f34:	00000406 	br	8002f48 <get_Spo2+0x2c>
			spo2 = rev;
 8002f38:	e0bfff03 	ldbu	r2,-4(fp)
 8002f3c:	e0bfff45 	stb	r2,-3(fp)
			rev = getbyte4();
 8002f40:	8002dec0 	call	8002dec <getbyte4>
 8002f44:	e0bfff05 	stb	r2,-4(fp)
unsigned char get_Spo2() {
	unsigned char rev, spo2;
	rev = getbyte4();
	//int i;
	//for (i = 0; i < 14; i++) {
		while (rev != 52) {
 8002f48:	e0bfff03 	ldbu	r2,-4(fp)
 8002f4c:	10800d18 	cmpnei	r2,r2,52
 8002f50:	103ff91e 	bne	r2,zero,8002f38 <__alt_data_end+0xfc002f38>
			spo2 = rev;
			rev = getbyte4();
		}
	//}
	return spo2;
 8002f54:	e0bfff43 	ldbu	r2,-3(fp)
}
 8002f58:	e037883a 	mov	sp,fp
 8002f5c:	dfc00117 	ldw	ra,4(sp)
 8002f60:	df000017 	ldw	fp,0(sp)
 8002f64:	dec00204 	addi	sp,sp,8
 8002f68:	f800283a 	ret

08002f6c <init_wifi>:
/////*****      WIFI       **//


// Configure serial port (Baud = 115Kbps, 8 bits of data, no parity, 1 stop bit)
void init_wifi(void)
{
 8002f6c:	defffe04 	addi	sp,sp,-8
 8002f70:	dfc00115 	stw	ra,4(sp)
 8002f74:	df000015 	stw	fp,0(sp)
 8002f78:	d839883a 	mov	fp,sp
	//0x03 for resetting the wifi 
	WIFI_CONTROL =0x03;
 8002f7c:	00a10034 	movhi	r2,33792
 8002f80:	10809004 	addi	r2,r2,576
 8002f84:	00c000c4 	movi	r3,3
 8002f88:	10c00005 	stb	r3,0(r2)
    WIFI_CONTROL = 0x15;
 8002f8c:	00a10034 	movhi	r2,33792
 8002f90:	10809004 	addi	r2,r2,576
 8002f94:	00c00544 	movi	r3,21
 8002f98:	10c00005 	stb	r3,0(r2)
    WIFI_BAUD = 0x01;
 8002f9c:	00a10034 	movhi	r2,33792
 8002fa0:	10809104 	addi	r2,r2,580
 8002fa4:	00c00044 	movi	r3,1
 8002fa8:	10c00005 	stb	r3,0(r2)
    putString_wifi("\r\n");
 8002fac:	010200b4 	movhi	r4,2050
 8002fb0:	21359004 	addi	r4,r4,-10688
 8002fb4:	80030700 	call	8003070 <putString_wifi>
    usleep(40000);
 8002fb8:	01271014 	movui	r4,40000
 8002fbc:	8010f200 	call	8010f20 <usleep>
    putString_wifi("\r\n");
 8002fc0:	010200b4 	movhi	r4,2050
 8002fc4:	21359004 	addi	r4,r4,-10688
 8002fc8:	80030700 	call	8003070 <putString_wifi>
    usleep(40000);
 8002fcc:	01271014 	movui	r4,40000
 8002fd0:	8010f200 	call	8010f20 <usleep>


}
 8002fd4:	e037883a 	mov	sp,fp
 8002fd8:	dfc00117 	ldw	ra,4(sp)
 8002fdc:	df000017 	ldw	fp,0(sp)
 8002fe0:	dec00204 	addi	sp,sp,8
 8002fe4:	f800283a 	ret

08002fe8 <wait_for_read_ready>:

// Function blocks till serial port read status is ready
void wait_for_read_ready()
{
 8002fe8:	deffff04 	addi	sp,sp,-4
 8002fec:	df000015 	stw	fp,0(sp)
 8002ff0:	d839883a 	mov	fp,sp
    while((WIFI_STATUS & 0x01) != 0x01);
 8002ff4:	0001883a 	nop
 8002ff8:	00a10034 	movhi	r2,33792
 8002ffc:	10809004 	addi	r2,r2,576
 8003000:	10800003 	ldbu	r2,0(r2)
 8003004:	10803fcc 	andi	r2,r2,255
 8003008:	1080004c 	andi	r2,r2,1
 800300c:	103ffa26 	beq	r2,zero,8002ff8 <__alt_data_end+0xfc002ff8>
}
 8003010:	e037883a 	mov	sp,fp
 8003014:	df000017 	ldw	fp,0(sp)
 8003018:	dec00104 	addi	sp,sp,4
 800301c:	f800283a 	ret

08003020 <putchar_wifi>:

// Write 1-byte of data into serial port [WIFI]
void putchar_wifi(char c)
{
 8003020:	defffe04 	addi	sp,sp,-8
 8003024:	df000115 	stw	fp,4(sp)
 8003028:	df000104 	addi	fp,sp,4
 800302c:	2005883a 	mov	r2,r4
 8003030:	e0bfff05 	stb	r2,-4(fp)
    while ((WIFI_STATUS & 0x02) != 0x02);
 8003034:	0001883a 	nop
 8003038:	00a10034 	movhi	r2,33792
 800303c:	10809004 	addi	r2,r2,576
 8003040:	10800003 	ldbu	r2,0(r2)
 8003044:	10803fcc 	andi	r2,r2,255
 8003048:	1080008c 	andi	r2,r2,2
 800304c:	103ffa26 	beq	r2,zero,8003038 <__alt_data_end+0xfc003038>
    WIFI_TXDATA = c & 0xFF;
 8003050:	00a10034 	movhi	r2,33792
 8003054:	10809084 	addi	r2,r2,578
 8003058:	e0ffff03 	ldbu	r3,-4(fp)
 800305c:	10c00005 	stb	r3,0(r2)
}
 8003060:	e037883a 	mov	sp,fp
 8003064:	df000017 	ldw	fp,0(sp)
 8003068:	dec00104 	addi	sp,sp,4
 800306c:	f800283a 	ret

08003070 <putString_wifi>:

// Write a string (series of 1-byte data) into serial port [WIFI]
void putString_wifi(char *s)
{
 8003070:	defffc04 	addi	sp,sp,-16
 8003074:	dfc00315 	stw	ra,12(sp)
 8003078:	df000215 	stw	fp,8(sp)
 800307c:	df000204 	addi	fp,sp,8
 8003080:	e13fff15 	stw	r4,-4(fp)
    int i;
    for(i=0; s[i]!='\0'; i++){
 8003084:	e03ffe15 	stw	zero,-8(fp)
 8003088:	00000c06 	br	80030bc <putString_wifi+0x4c>
        putchar_wifi((char) s[i]);
 800308c:	e0bffe17 	ldw	r2,-8(fp)
 8003090:	e0ffff17 	ldw	r3,-4(fp)
 8003094:	1885883a 	add	r2,r3,r2
 8003098:	10800003 	ldbu	r2,0(r2)
 800309c:	10803fcc 	andi	r2,r2,255
 80030a0:	1080201c 	xori	r2,r2,128
 80030a4:	10bfe004 	addi	r2,r2,-128
 80030a8:	1009883a 	mov	r4,r2
 80030ac:	80030200 	call	8003020 <putchar_wifi>

// Write a string (series of 1-byte data) into serial port [WIFI]
void putString_wifi(char *s)
{
    int i;
    for(i=0; s[i]!='\0'; i++){
 80030b0:	e0bffe17 	ldw	r2,-8(fp)
 80030b4:	10800044 	addi	r2,r2,1
 80030b8:	e0bffe15 	stw	r2,-8(fp)
 80030bc:	e0bffe17 	ldw	r2,-8(fp)
 80030c0:	e0ffff17 	ldw	r3,-4(fp)
 80030c4:	1885883a 	add	r2,r3,r2
 80030c8:	10800003 	ldbu	r2,0(r2)
 80030cc:	10803fcc 	andi	r2,r2,255
 80030d0:	1080201c 	xori	r2,r2,128
 80030d4:	10bfe004 	addi	r2,r2,-128
 80030d8:	103fec1e 	bne	r2,zero,800308c <__alt_data_end+0xfc00308c>
        putchar_wifi((char) s[i]);
    }
}
 80030dc:	e037883a 	mov	sp,fp
 80030e0:	dfc00117 	ldw	ra,4(sp)
 80030e4:	df000017 	ldw	fp,0(sp)
 80030e8:	dec00204 	addi	sp,sp,8
 80030ec:	f800283a 	ret

080030f0 <getchar_wifi>:

// Read 1-byte of data into serial port [WIFI]
char getchar_wifi(void)
{
 80030f0:	defffe04 	addi	sp,sp,-8
 80030f4:	dfc00115 	stw	ra,4(sp)
 80030f8:	df000015 	stw	fp,0(sp)
 80030fc:	d839883a 	mov	fp,sp
    wait_for_read_ready();
 8003100:	8002fe80 	call	8002fe8 <wait_for_read_ready>
    return WIFI_RXDATA;
 8003104:	00a10034 	movhi	r2,33792
 8003108:	10809084 	addi	r2,r2,578
 800310c:	10800003 	ldbu	r2,0(r2)
}
 8003110:	e037883a 	mov	sp,fp
 8003114:	dfc00117 	ldw	ra,4(sp)
 8003118:	df000017 	ldw	fp,0(sp)
 800311c:	dec00204 	addi	sp,sp,8
 8003120:	f800283a 	ret

08003124 <GetPressNoWait>:
int graph_offset = 350;
int graphing_colour = BLUE;


char invalid[] = "N/A";
Point GetPressNoWait(void) {
 8003124:	defff604 	addi	sp,sp,-40
 8003128:	dfc00915 	stw	ra,36(sp)
 800312c:	df000815 	stw	fp,32(sp)
 8003130:	df000804 	addi	fp,sp,32
	Point p1;
	int buf[4];
	int i;
	int yOffset = 100;
 8003134:	00801904 	movi	r2,100
 8003138:	e0bff915 	stw	r2,-28(fp)
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
 800313c:	80020780 	call	8002078 <WaitForTouch>
	printf("Outof wait Touch\n");
 8003140:	010200b4 	movhi	r4,2050
 8003144:	21359104 	addi	r4,r4,-10684
 8003148:	80041d00 	call	80041d0 <puts>
	// pick up reponse packets
	for (i = 0; i < 4; i++) {
 800314c:	e03ff815 	stw	zero,-32(fp)
 8003150:	00000c06 	br	8003184 <GetPressNoWait+0x60>
		buf[i] = getcharTouch_Screen();
 8003154:	8001f940 	call	8001f94 <getcharTouch_Screen>
 8003158:	1007883a 	mov	r3,r2
 800315c:	e0bff817 	ldw	r2,-32(fp)
 8003160:	1085883a 	add	r2,r2,r2
 8003164:	1085883a 	add	r2,r2,r2
 8003168:	e13ff804 	addi	r4,fp,-32
 800316c:	2085883a 	add	r2,r4,r2
 8003170:	10800404 	addi	r2,r2,16
 8003174:	10c00015 	stw	r3,0(r2)
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
	printf("Outof wait Touch\n");
	// pick up reponse packets
	for (i = 0; i < 4; i++) {
 8003178:	e0bff817 	ldw	r2,-32(fp)
 800317c:	10800044 	addi	r2,r2,1
 8003180:	e0bff815 	stw	r2,-32(fp)
 8003184:	e0bff817 	ldw	r2,-32(fp)
 8003188:	10800110 	cmplti	r2,r2,4
 800318c:	103ff11e 	bne	r2,zero,8003154 <__alt_data_end+0xfc003154>
		buf[i] = getcharTouch_Screen();
	}
	// parse x and y coordinates
	p1.x = (buf[1] << 7) | buf[0];
 8003190:	e0bffd17 	ldw	r2,-12(fp)
 8003194:	100691fa 	slli	r3,r2,7
 8003198:	e0bffc17 	ldw	r2,-16(fp)
 800319c:	1884b03a 	or	r2,r3,r2
 80031a0:	e0bffa15 	stw	r2,-24(fp)
	p1.y = (buf[3] << 7) | buf[2];
 80031a4:	e0bfff17 	ldw	r2,-4(fp)
 80031a8:	100691fa 	slli	r3,r2,7
 80031ac:	e0bffe17 	ldw	r2,-8(fp)
 80031b0:	1884b03a 	or	r2,r3,r2
 80031b4:	e0bffb15 	stw	r2,-20(fp)
	// compute screen coordinates
	p1.x = p1.x * 799 / 4095;
 80031b8:	e0bffa17 	ldw	r2,-24(fp)
 80031bc:	10c0c7e4 	muli	r3,r2,799
 80031c0:	0083ffc4 	movi	r2,4095
 80031c4:	1885283a 	div	r2,r3,r2
 80031c8:	e0bffa15 	stw	r2,-24(fp)
	p1.y = (p1.y - yOffset) * 479 / (4095 - yOffset);
 80031cc:	e0fffb17 	ldw	r3,-20(fp)
 80031d0:	e0bff917 	ldw	r2,-28(fp)
 80031d4:	1885c83a 	sub	r2,r3,r2
 80031d8:	10c077e4 	muli	r3,r2,479
 80031dc:	0103ffc4 	movi	r4,4095
 80031e0:	e0bff917 	ldw	r2,-28(fp)
 80031e4:	2085c83a 	sub	r2,r4,r2
 80031e8:	1885283a 	div	r2,r3,r2
 80031ec:	e0bffb15 	stw	r2,-20(fp)
	printf(" GetPressFromNoWait: X coord =  %d \t Y coord =  %d  \n", p1.x,
 80031f0:	e0fffa17 	ldw	r3,-24(fp)
 80031f4:	e0bffb17 	ldw	r2,-20(fp)
 80031f8:	010200b4 	movhi	r4,2050
 80031fc:	21359604 	addi	r4,r4,-10664
 8003200:	180b883a 	mov	r5,r3
 8003204:	100d883a 	mov	r6,r2
 8003208:	80040bc0 	call	80040bc <printf>
			p1.y);

	return p1;
 800320c:	e0bffa17 	ldw	r2,-24(fp)
 8003210:	e0fffb17 	ldw	r3,-20(fp)
 8003214:	1009883a 	mov	r4,r2
 8003218:	180b883a 	mov	r5,r3

}
 800321c:	2005883a 	mov	r2,r4
 8003220:	2807883a 	mov	r3,r5
 8003224:	e037883a 	mov	sp,fp
 8003228:	dfc00117 	ldw	ra,4(sp)
 800322c:	df000017 	ldw	fp,0(sp)
 8003230:	dec00204 	addi	sp,sp,8
 8003234:	f800283a 	ret

08003238 <GPS_Real_Time>:
///////////////////////////REAL TIME
void GPS_Real_Time() {
 8003238:	defff704 	addi	sp,sp,-36
 800323c:	dfc00815 	stw	ra,32(sp)
 8003240:	df000715 	stw	fp,28(sp)
 8003244:	df000704 	addi	fp,sp,28
	getGpsInfo();
 8003248:	80026480 	call	8002648 <getGpsInfo>
	int i;
	char tmp[8];
	int k = 0;
 800324c:	e03ffc15 	stw	zero,-16(fp)
	int j;
	for (j = 0; j < 8; j++) {
 8003250:	e03ffd15 	stw	zero,-12(fp)
 8003254:	00001b06 	br	80032c4 <GPS_Real_Time+0x8c>

		if ((j == 2) || (j == 5))
 8003258:	e0bffd17 	ldw	r2,-12(fp)
 800325c:	108000a0 	cmpeqi	r2,r2,2
 8003260:	1000031e 	bne	r2,zero,8003270 <GPS_Real_Time+0x38>
 8003264:	e0bffd17 	ldw	r2,-12(fp)
 8003268:	10800158 	cmpnei	r2,r2,5
 800326c:	1000061e 	bne	r2,zero,8003288 <GPS_Real_Time+0x50>
			tmp[j] = ':';
 8003270:	e0fffe04 	addi	r3,fp,-8
 8003274:	e0bffd17 	ldw	r2,-12(fp)
 8003278:	1885883a 	add	r2,r3,r2
 800327c:	00c00e84 	movi	r3,58
 8003280:	10c00005 	stb	r3,0(r2)
 8003284:	00000c06 	br	80032b8 <GPS_Real_Time+0x80>
		else {
			tmp[j] = dataAscii[0][k];
 8003288:	008200b4 	movhi	r2,2050
 800328c:	10851cc4 	addi	r2,r2,5235
 8003290:	e0fffc17 	ldw	r3,-16(fp)
 8003294:	10c5883a 	add	r2,r2,r3
 8003298:	10c00003 	ldbu	r3,0(r2)
 800329c:	e13ffe04 	addi	r4,fp,-8
 80032a0:	e0bffd17 	ldw	r2,-12(fp)
 80032a4:	2085883a 	add	r2,r4,r2
 80032a8:	10c00005 	stb	r3,0(r2)
			k++;
 80032ac:	e0bffc17 	ldw	r2,-16(fp)
 80032b0:	10800044 	addi	r2,r2,1
 80032b4:	e0bffc15 	stw	r2,-16(fp)
	getGpsInfo();
	int i;
	char tmp[8];
	int k = 0;
	int j;
	for (j = 0; j < 8; j++) {
 80032b8:	e0bffd17 	ldw	r2,-12(fp)
 80032bc:	10800044 	addi	r2,r2,1
 80032c0:	e0bffd15 	stw	r2,-12(fp)
 80032c4:	e0bffd17 	ldw	r2,-12(fp)
 80032c8:	10800210 	cmplti	r2,r2,8
 80032cc:	103fe21e 	bne	r2,zero,8003258 <__alt_data_end+0xfc003258>
			tmp[j] = dataAscii[0][k];
			k++;
		}

	}
	for (i = 0; i < 8; i++) {
 80032d0:	e03ffb15 	stw	zero,-20(fp)
 80032d4:	00001406 	br	8003328 <GPS_Real_Time+0xf0>

		OutGraphicsCharFont2a((40 + 13 * i), 120, 4, 1, tmp[i], 1); //for actual value of data
 80032d8:	e0bffb17 	ldw	r2,-20(fp)
 80032dc:	10800364 	muli	r2,r2,13
 80032e0:	11000a04 	addi	r4,r2,40
 80032e4:	e0fffe04 	addi	r3,fp,-8
 80032e8:	e0bffb17 	ldw	r2,-20(fp)
 80032ec:	1885883a 	add	r2,r3,r2
 80032f0:	10800003 	ldbu	r2,0(r2)
 80032f4:	10803fcc 	andi	r2,r2,255
 80032f8:	1080201c 	xori	r2,r2,128
 80032fc:	10bfe004 	addi	r2,r2,-128
 8003300:	d8800015 	stw	r2,0(sp)
 8003304:	00800044 	movi	r2,1
 8003308:	d8800115 	stw	r2,4(sp)
 800330c:	01401e04 	movi	r5,120
 8003310:	01800104 	movi	r6,4
 8003314:	01c00044 	movi	r7,1
 8003318:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
			tmp[j] = dataAscii[0][k];
			k++;
		}

	}
	for (i = 0; i < 8; i++) {
 800331c:	e0bffb17 	ldw	r2,-20(fp)
 8003320:	10800044 	addi	r2,r2,1
 8003324:	e0bffb15 	stw	r2,-20(fp)
 8003328:	e0bffb17 	ldw	r2,-20(fp)
 800332c:	10800210 	cmplti	r2,r2,8
 8003330:	103fe91e 	bne	r2,zero,80032d8 <__alt_data_end+0xfc0032d8>

		OutGraphicsCharFont2a((40 + 13 * i), 120, 4, 1, tmp[i], 1); //for actual value of data

	}
}
 8003334:	e037883a 	mov	sp,fp
 8003338:	dfc00117 	ldw	ra,4(sp)
 800333c:	df000017 	ldw	fp,0(sp)
 8003340:	dec00204 	addi	sp,sp,8
 8003344:	f800283a 	ret

08003348 <main>:


//---------------draw the screen--------------------------------------------

int main() {
 8003348:	defff004 	addi	sp,sp,-64
 800334c:	dfc00f15 	stw	ra,60(sp)
 8003350:	df000e15 	stw	fp,56(sp)
 8003354:	df000e04 	addi	fp,sp,56



	int categ = 0;
 8003358:	e03ff415 	stw	zero,-48(fp)
	int gps_flag = 0;
 800335c:	e03ff815 	stw	zero,-32(fp)
	int x = 190;
 8003360:	00802f84 	movi	r2,190
 8003364:	e0bff515 	stw	r2,-44(fp)

	page1();
 8003368:	8002a9c0 	call	8002a9c <page1>

reset:

	graphing_colour = BLUE;
 800336c:	00800104 	movi	r2,4
 8003370:	d0a01415 	stw	r2,-32688(gp)
	page2(); //menu
 8003374:	8002cec0 	call	8002cec <page2>

	categ = button_Pressed();
 8003378:	80029600 	call	8002960 <button_Pressed>
 800337c:	e0bff415 	stw	r2,-48(fp)

	//the buttonPressed() waits until the screen is touched
	//if no button is pressed then categ will be 0, and keep calling it until a button is pressed

	while (!categ)
 8003380:	00000206 	br	800338c <main+0x44>
		categ = button_Pressed();
 8003384:	80029600 	call	8002960 <button_Pressed>
 8003388:	e0bff415 	stw	r2,-48(fp)
	categ = button_Pressed();

	//the buttonPressed() waits until the screen is touched
	//if no button is pressed then categ will be 0, and keep calling it until a button is pressed

	while (!categ)
 800338c:	e0bff417 	ldw	r2,-48(fp)
 8003390:	103ffc26 	beq	r2,zero,8003384 <__alt_data_end+0xfc003384>
		categ = button_Pressed();

	int i;
	switch (categ) {
 8003394:	e0bff417 	ldw	r2,-48(fp)
 8003398:	108001a8 	cmpgeui	r2,r2,6
 800339c:	1001271e 	bne	r2,zero,800383c <main+0x4f4>
 80033a0:	e0bff417 	ldw	r2,-48(fp)
 80033a4:	100690ba 	slli	r3,r2,2
 80033a8:	00820034 	movhi	r2,2048
 80033ac:	108cef04 	addi	r2,r2,13244
 80033b0:	1885883a 	add	r2,r3,r2
 80033b4:	10800017 	ldw	r2,0(r2)
 80033b8:	1000683a 	jmp	r2
 80033bc:	0800383c 	xorhi	zero,at,224
 80033c0:	080033d4 	ori	zero,at,207
 80033c4:	080034b8 	rdprs	zero,at,210
 80033c8:	08003598 	cmpnei	zero,at,214
 80033cc:	0800375c 	xori	zero,at,221
 80033d0:	08003678 	rdprs	zero,at,217
	case preg:
		for (i = 0; i < sizeof(pregOk_SpO2); i++)
 80033d4:	e03ff615 	stw	zero,-40(fp)
 80033d8:	00000b06 	br	8003408 <main+0xc0>
			okValue_SpO2[i] = pregOk_SpO2[i];
 80033dc:	e0fff617 	ldw	r3,-40(fp)
 80033e0:	d0a00204 	addi	r2,gp,-32760
 80033e4:	1885883a 	add	r2,r3,r2
 80033e8:	10c00003 	ldbu	r3,0(r2)
 80033ec:	e13ff617 	ldw	r4,-40(fp)
 80033f0:	d0a70e04 	addi	r2,gp,-25544
 80033f4:	2085883a 	add	r2,r4,r2
 80033f8:	10c00005 	stb	r3,0(r2)
		categ = button_Pressed();

	int i;
	switch (categ) {
	case preg:
		for (i = 0; i < sizeof(pregOk_SpO2); i++)
 80033fc:	e0bff617 	ldw	r2,-40(fp)
 8003400:	10800044 	addi	r2,r2,1
 8003404:	e0bff615 	stw	r2,-40(fp)
 8003408:	e0bff617 	ldw	r2,-40(fp)
 800340c:	10800230 	cmpltui	r2,r2,8
 8003410:	103ff21e 	bne	r2,zero,80033dc <__alt_data_end+0xfc0033dc>
			okValue_SpO2[i] = pregOk_SpO2[i];
		SpO2_L = pregOk_SpO2_L;
 8003414:	008017c4 	movi	r2,95
 8003418:	d0a00015 	stw	r2,-32768(gp)
		SpO2_H = pregOk_SpO2_H;
 800341c:	008018c4 	movi	r2,99
 8003420:	d0a00115 	stw	r2,-32764(gp)
		for (i = 0; i < sizeof(pregnant); i++)
 8003424:	e03ff615 	stw	zero,-40(fp)
 8003428:	00000d06 	br	8003460 <main+0x118>
			title_cat[i] = pregnant[i];
 800342c:	008200b4 	movhi	r2,2050
 8003430:	10b73304 	addi	r2,r2,-9012
 8003434:	e0fff617 	ldw	r3,-40(fp)
 8003438:	10c5883a 	add	r2,r2,r3
 800343c:	10c00003 	ldbu	r3,0(r2)
 8003440:	008200b4 	movhi	r2,2050
 8003444:	108544c4 	addi	r2,r2,5395
 8003448:	e13ff617 	ldw	r4,-40(fp)
 800344c:	1105883a 	add	r2,r2,r4
 8003450:	10c00005 	stb	r3,0(r2)
	case preg:
		for (i = 0; i < sizeof(pregOk_SpO2); i++)
			okValue_SpO2[i] = pregOk_SpO2[i];
		SpO2_L = pregOk_SpO2_L;
		SpO2_H = pregOk_SpO2_H;
		for (i = 0; i < sizeof(pregnant); i++)
 8003454:	e0bff617 	ldw	r2,-40(fp)
 8003458:	10800044 	addi	r2,r2,1
 800345c:	e0bff615 	stw	r2,-40(fp)
 8003460:	e0bff617 	ldw	r2,-40(fp)
 8003464:	108002b0 	cmpltui	r2,r2,10
 8003468:	103ff01e 	bne	r2,zero,800342c <__alt_data_end+0xfc00342c>
			title_cat[i] = pregnant[i];
		for (i = 0; i < sizeof(pregOk_PR); i++)
 800346c:	e03ff615 	stw	zero,-40(fp)
 8003470:	00000d06 	br	80034a8 <main+0x160>
			okValue_PR[i] = pregOk_PR[i];
 8003474:	008200b4 	movhi	r2,2050
 8003478:	10b73604 	addi	r2,r2,-9000
 800347c:	e0fff617 	ldw	r3,-40(fp)
 8003480:	10c5883a 	add	r2,r2,r3
 8003484:	10c00003 	ldbu	r3,0(r2)
 8003488:	008200b4 	movhi	r2,2050
 800348c:	10851a04 	addi	r2,r2,5224
 8003490:	e13ff617 	ldw	r4,-40(fp)
 8003494:	1105883a 	add	r2,r2,r4
 8003498:	10c00005 	stb	r3,0(r2)
			okValue_SpO2[i] = pregOk_SpO2[i];
		SpO2_L = pregOk_SpO2_L;
		SpO2_H = pregOk_SpO2_H;
		for (i = 0; i < sizeof(pregnant); i++)
			title_cat[i] = pregnant[i];
		for (i = 0; i < sizeof(pregOk_PR); i++)
 800349c:	e0bff617 	ldw	r2,-40(fp)
 80034a0:	10800044 	addi	r2,r2,1
 80034a4:	e0bff615 	stw	r2,-40(fp)
 80034a8:	e0bff617 	ldw	r2,-40(fp)
 80034ac:	108002f0 	cmpltui	r2,r2,11
 80034b0:	103ff01e 	bne	r2,zero,8003474 <__alt_data_end+0xfc003474>
			okValue_PR[i] = pregOk_PR[i];
		break;
 80034b4:	00011906 	br	800391c <main+0x5d4>
	case anemia:
		for (i = 0; i < sizeof(anemiaOk_SpO2); i++)
 80034b8:	e03ff615 	stw	zero,-40(fp)
 80034bc:	00000b06 	br	80034ec <main+0x1a4>
			okValue_SpO2[i] = anemiaOk_SpO2[i];
 80034c0:	e0fff617 	ldw	r3,-40(fp)
 80034c4:	d0a00604 	addi	r2,gp,-32744
 80034c8:	1885883a 	add	r2,r3,r2
 80034cc:	10c00003 	ldbu	r3,0(r2)
 80034d0:	e13ff617 	ldw	r4,-40(fp)
 80034d4:	d0a70e04 	addi	r2,gp,-25544
 80034d8:	2085883a 	add	r2,r4,r2
 80034dc:	10c00005 	stb	r3,0(r2)
			title_cat[i] = pregnant[i];
		for (i = 0; i < sizeof(pregOk_PR); i++)
			okValue_PR[i] = pregOk_PR[i];
		break;
	case anemia:
		for (i = 0; i < sizeof(anemiaOk_SpO2); i++)
 80034e0:	e0bff617 	ldw	r2,-40(fp)
 80034e4:	10800044 	addi	r2,r2,1
 80034e8:	e0bff615 	stw	r2,-40(fp)
 80034ec:	e0bff617 	ldw	r2,-40(fp)
 80034f0:	10800230 	cmpltui	r2,r2,8
 80034f4:	103ff21e 	bne	r2,zero,80034c0 <__alt_data_end+0xfc0034c0>
			okValue_SpO2[i] = anemiaOk_SpO2[i];
		SpO2_L = anemiaOk_SpO2_L;
 80034f8:	00801704 	movi	r2,92
 80034fc:	d0a00015 	stw	r2,-32768(gp)
		SpO2_H = anemiaOk_SpO2_H;
 8003500:	008018c4 	movi	r2,99
 8003504:	d0a00115 	stw	r2,-32764(gp)
		for (i = 0; i < sizeof(anemic); i++)
 8003508:	e03ff615 	stw	zero,-40(fp)
 800350c:	00000c06 	br	8003540 <main+0x1f8>
			title_cat[i] = anemic[i];
 8003510:	e0fff617 	ldw	r3,-40(fp)
 8003514:	d0a00404 	addi	r2,gp,-32752
 8003518:	1885883a 	add	r2,r3,r2
 800351c:	10c00003 	ldbu	r3,0(r2)
 8003520:	008200b4 	movhi	r2,2050
 8003524:	108544c4 	addi	r2,r2,5395
 8003528:	e13ff617 	ldw	r4,-40(fp)
 800352c:	1105883a 	add	r2,r2,r4
 8003530:	10c00005 	stb	r3,0(r2)
	case anemia:
		for (i = 0; i < sizeof(anemiaOk_SpO2); i++)
			okValue_SpO2[i] = anemiaOk_SpO2[i];
		SpO2_L = anemiaOk_SpO2_L;
		SpO2_H = anemiaOk_SpO2_H;
		for (i = 0; i < sizeof(anemic); i++)
 8003534:	e0bff617 	ldw	r2,-40(fp)
 8003538:	10800044 	addi	r2,r2,1
 800353c:	e0bff615 	stw	r2,-40(fp)
 8003540:	e0bff617 	ldw	r2,-40(fp)
 8003544:	10800230 	cmpltui	r2,r2,8
 8003548:	103ff11e 	bne	r2,zero,8003510 <__alt_data_end+0xfc003510>
			title_cat[i] = anemic[i];
		for (i = 0; i < sizeof(anemiaOk_PR); i++)
 800354c:	e03ff615 	stw	zero,-40(fp)
 8003550:	00000d06 	br	8003588 <main+0x240>
			okValue_PR[i] = anemiaOk_PR[i];
 8003554:	008200b4 	movhi	r2,2050
 8003558:	10b73904 	addi	r2,r2,-8988
 800355c:	e0fff617 	ldw	r3,-40(fp)
 8003560:	10c5883a 	add	r2,r2,r3
 8003564:	10c00003 	ldbu	r3,0(r2)
 8003568:	008200b4 	movhi	r2,2050
 800356c:	10851a04 	addi	r2,r2,5224
 8003570:	e13ff617 	ldw	r4,-40(fp)
 8003574:	1105883a 	add	r2,r2,r4
 8003578:	10c00005 	stb	r3,0(r2)
			okValue_SpO2[i] = anemiaOk_SpO2[i];
		SpO2_L = anemiaOk_SpO2_L;
		SpO2_H = anemiaOk_SpO2_H;
		for (i = 0; i < sizeof(anemic); i++)
			title_cat[i] = anemic[i];
		for (i = 0; i < sizeof(anemiaOk_PR); i++)
 800357c:	e0bff617 	ldw	r2,-40(fp)
 8003580:	10800044 	addi	r2,r2,1
 8003584:	e0bff615 	stw	r2,-40(fp)
 8003588:	e0bff617 	ldw	r2,-40(fp)
 800358c:	108002f0 	cmpltui	r2,r2,11
 8003590:	103ff01e 	bne	r2,zero,8003554 <__alt_data_end+0xfc003554>
			okValue_PR[i] = anemiaOk_PR[i];
		break;
 8003594:	0000e106 	br	800391c <main+0x5d4>
	case child:
		for (i = 0; i < sizeof(childOk_SpO2); i++)
 8003598:	e03ff615 	stw	zero,-40(fp)
 800359c:	00000b06 	br	80035cc <main+0x284>
			okValue_SpO2[i] = childOk_SpO2[i];
 80035a0:	e0fff617 	ldw	r3,-40(fp)
 80035a4:	d0a00a04 	addi	r2,gp,-32728
 80035a8:	1885883a 	add	r2,r3,r2
 80035ac:	10c00003 	ldbu	r3,0(r2)
 80035b0:	e13ff617 	ldw	r4,-40(fp)
 80035b4:	d0a70e04 	addi	r2,gp,-25544
 80035b8:	2085883a 	add	r2,r4,r2
 80035bc:	10c00005 	stb	r3,0(r2)
			title_cat[i] = anemic[i];
		for (i = 0; i < sizeof(anemiaOk_PR); i++)
			okValue_PR[i] = anemiaOk_PR[i];
		break;
	case child:
		for (i = 0; i < sizeof(childOk_SpO2); i++)
 80035c0:	e0bff617 	ldw	r2,-40(fp)
 80035c4:	10800044 	addi	r2,r2,1
 80035c8:	e0bff615 	stw	r2,-40(fp)
 80035cc:	e0bff617 	ldw	r2,-40(fp)
 80035d0:	10800230 	cmpltui	r2,r2,8
 80035d4:	103ff21e 	bne	r2,zero,80035a0 <__alt_data_end+0xfc0035a0>
			okValue_SpO2[i] = childOk_SpO2[i];
		SpO2_L = childOk_SpO2_L;
 80035d8:	00801744 	movi	r2,93
 80035dc:	d0a00015 	stw	r2,-32768(gp)
		SpO2_H = childOk_SpO2_H;
 80035e0:	008018c4 	movi	r2,99
 80035e4:	d0a00115 	stw	r2,-32764(gp)
		for (i = 0; i < sizeof(chil); i++)
 80035e8:	e03ff615 	stw	zero,-40(fp)
 80035ec:	00000c06 	br	8003620 <main+0x2d8>
			title_cat[i] = chil[i];
 80035f0:	e0fff617 	ldw	r3,-40(fp)
 80035f4:	d0a00804 	addi	r2,gp,-32736
 80035f8:	1885883a 	add	r2,r3,r2
 80035fc:	10c00003 	ldbu	r3,0(r2)
 8003600:	008200b4 	movhi	r2,2050
 8003604:	108544c4 	addi	r2,r2,5395
 8003608:	e13ff617 	ldw	r4,-40(fp)
 800360c:	1105883a 	add	r2,r2,r4
 8003610:	10c00005 	stb	r3,0(r2)
	case child:
		for (i = 0; i < sizeof(childOk_SpO2); i++)
			okValue_SpO2[i] = childOk_SpO2[i];
		SpO2_L = childOk_SpO2_L;
		SpO2_H = childOk_SpO2_H;
		for (i = 0; i < sizeof(chil); i++)
 8003614:	e0bff617 	ldw	r2,-40(fp)
 8003618:	10800044 	addi	r2,r2,1
 800361c:	e0bff615 	stw	r2,-40(fp)
 8003620:	e0bff617 	ldw	r2,-40(fp)
 8003624:	10800230 	cmpltui	r2,r2,8
 8003628:	103ff11e 	bne	r2,zero,80035f0 <__alt_data_end+0xfc0035f0>
			title_cat[i] = chil[i];
		for (i = 0; i < sizeof(childOk_PR); i++)
 800362c:	e03ff615 	stw	zero,-40(fp)
 8003630:	00000d06 	br	8003668 <main+0x320>
			okValue_PR[i] = childOk_PR[i];
 8003634:	008200b4 	movhi	r2,2050
 8003638:	10b73c04 	addi	r2,r2,-8976
 800363c:	e0fff617 	ldw	r3,-40(fp)
 8003640:	10c5883a 	add	r2,r2,r3
 8003644:	10c00003 	ldbu	r3,0(r2)
 8003648:	008200b4 	movhi	r2,2050
 800364c:	10851a04 	addi	r2,r2,5224
 8003650:	e13ff617 	ldw	r4,-40(fp)
 8003654:	1105883a 	add	r2,r2,r4
 8003658:	10c00005 	stb	r3,0(r2)
			okValue_SpO2[i] = childOk_SpO2[i];
		SpO2_L = childOk_SpO2_L;
		SpO2_H = childOk_SpO2_H;
		for (i = 0; i < sizeof(chil); i++)
			title_cat[i] = chil[i];
		for (i = 0; i < sizeof(childOk_PR); i++)
 800365c:	e0bff617 	ldw	r2,-40(fp)
 8003660:	10800044 	addi	r2,r2,1
 8003664:	e0bff615 	stw	r2,-40(fp)
 8003668:	e0bff617 	ldw	r2,-40(fp)
 800366c:	108002f0 	cmpltui	r2,r2,11
 8003670:	103ff01e 	bne	r2,zero,8003634 <__alt_data_end+0xfc003634>
			okValue_PR[i] = childOk_PR[i];
		break;
 8003674:	0000a906 	br	800391c <main+0x5d4>
	case pulm:
		for (i = 0; i < sizeof(pulmOk_SpO2); i++)
 8003678:	e03ff615 	stw	zero,-40(fp)
 800367c:	00000b06 	br	80036ac <main+0x364>
			okValue_SpO2[i] = pulmOk_SpO2[i];
 8003680:	e0fff617 	ldw	r3,-40(fp)
 8003684:	d0a00c04 	addi	r2,gp,-32720
 8003688:	1885883a 	add	r2,r3,r2
 800368c:	10c00003 	ldbu	r3,0(r2)
 8003690:	e13ff617 	ldw	r4,-40(fp)
 8003694:	d0a70e04 	addi	r2,gp,-25544
 8003698:	2085883a 	add	r2,r4,r2
 800369c:	10c00005 	stb	r3,0(r2)
			title_cat[i] = chil[i];
		for (i = 0; i < sizeof(childOk_PR); i++)
			okValue_PR[i] = childOk_PR[i];
		break;
	case pulm:
		for (i = 0; i < sizeof(pulmOk_SpO2); i++)
 80036a0:	e0bff617 	ldw	r2,-40(fp)
 80036a4:	10800044 	addi	r2,r2,1
 80036a8:	e0bff615 	stw	r2,-40(fp)
 80036ac:	e0bff617 	ldw	r2,-40(fp)
 80036b0:	10800230 	cmpltui	r2,r2,8
 80036b4:	103ff21e 	bne	r2,zero,8003680 <__alt_data_end+0xfc003680>
			okValue_SpO2[i] = pulmOk_SpO2[i];
		SpO2_H = pulmOk_SpO2_H;
 80036b8:	008018c4 	movi	r2,99
 80036bc:	d0a00115 	stw	r2,-32764(gp)
		SpO2_L = pulmOk_SpO2_L;
 80036c0:	00801684 	movi	r2,90
 80036c4:	d0a00015 	stw	r2,-32768(gp)
		for (i = 0; i < sizeof(pulmonary); i++)
 80036c8:	e03ff615 	stw	zero,-40(fp)
 80036cc:	00000d06 	br	8003704 <main+0x3bc>
			title_cat[i] = pulmonary[i];
 80036d0:	008200b4 	movhi	r2,2050
 80036d4:	10b73f04 	addi	r2,r2,-8964
 80036d8:	e0fff617 	ldw	r3,-40(fp)
 80036dc:	10c5883a 	add	r2,r2,r3
 80036e0:	10c00003 	ldbu	r3,0(r2)
 80036e4:	008200b4 	movhi	r2,2050
 80036e8:	108544c4 	addi	r2,r2,5395
 80036ec:	e13ff617 	ldw	r4,-40(fp)
 80036f0:	1105883a 	add	r2,r2,r4
 80036f4:	10c00005 	stb	r3,0(r2)
	case pulm:
		for (i = 0; i < sizeof(pulmOk_SpO2); i++)
			okValue_SpO2[i] = pulmOk_SpO2[i];
		SpO2_H = pulmOk_SpO2_H;
		SpO2_L = pulmOk_SpO2_L;
		for (i = 0; i < sizeof(pulmonary); i++)
 80036f8:	e0bff617 	ldw	r2,-40(fp)
 80036fc:	10800044 	addi	r2,r2,1
 8003700:	e0bff615 	stw	r2,-40(fp)
 8003704:	e0bff617 	ldw	r2,-40(fp)
 8003708:	108002b0 	cmpltui	r2,r2,10
 800370c:	103ff01e 	bne	r2,zero,80036d0 <__alt_data_end+0xfc0036d0>
			title_cat[i] = pulmonary[i];
		for (i = 0; i < sizeof(pulmOk_PR); i++)
 8003710:	e03ff615 	stw	zero,-40(fp)
 8003714:	00000d06 	br	800374c <main+0x404>
			okValue_PR[i] = pulmOk_PR[i];
 8003718:	008200b4 	movhi	r2,2050
 800371c:	10b74204 	addi	r2,r2,-8952
 8003720:	e0fff617 	ldw	r3,-40(fp)
 8003724:	10c5883a 	add	r2,r2,r3
 8003728:	10c00003 	ldbu	r3,0(r2)
 800372c:	008200b4 	movhi	r2,2050
 8003730:	10851a04 	addi	r2,r2,5224
 8003734:	e13ff617 	ldw	r4,-40(fp)
 8003738:	1105883a 	add	r2,r2,r4
 800373c:	10c00005 	stb	r3,0(r2)
			okValue_SpO2[i] = pulmOk_SpO2[i];
		SpO2_H = pulmOk_SpO2_H;
		SpO2_L = pulmOk_SpO2_L;
		for (i = 0; i < sizeof(pulmonary); i++)
			title_cat[i] = pulmonary[i];
		for (i = 0; i < sizeof(pulmOk_PR); i++)
 8003740:	e0bff617 	ldw	r2,-40(fp)
 8003744:	10800044 	addi	r2,r2,1
 8003748:	e0bff615 	stw	r2,-40(fp)
 800374c:	e0bff617 	ldw	r2,-40(fp)
 8003750:	108002b0 	cmpltui	r2,r2,10
 8003754:	103ff01e 	bne	r2,zero,8003718 <__alt_data_end+0xfc003718>
			okValue_PR[i] = pulmOk_PR[i];
		break;
 8003758:	00007006 	br	800391c <main+0x5d4>
	case healthy:
		for (i = 0; i < sizeof(healthyOk_SpO2); i++)
 800375c:	e03ff615 	stw	zero,-40(fp)
 8003760:	00000b06 	br	8003790 <main+0x448>
			okValue_SpO2[i] = healthyOk_SpO2[i];
 8003764:	e0fff617 	ldw	r3,-40(fp)
 8003768:	d0a01004 	addi	r2,gp,-32704
 800376c:	1885883a 	add	r2,r3,r2
 8003770:	10c00003 	ldbu	r3,0(r2)
 8003774:	e13ff617 	ldw	r4,-40(fp)
 8003778:	d0a70e04 	addi	r2,gp,-25544
 800377c:	2085883a 	add	r2,r4,r2
 8003780:	10c00005 	stb	r3,0(r2)
			title_cat[i] = pulmonary[i];
		for (i = 0; i < sizeof(pulmOk_PR); i++)
			okValue_PR[i] = pulmOk_PR[i];
		break;
	case healthy:
		for (i = 0; i < sizeof(healthyOk_SpO2); i++)
 8003784:	e0bff617 	ldw	r2,-40(fp)
 8003788:	10800044 	addi	r2,r2,1
 800378c:	e0bff615 	stw	r2,-40(fp)
 8003790:	e0bff617 	ldw	r2,-40(fp)
 8003794:	10800230 	cmpltui	r2,r2,8
 8003798:	103ff21e 	bne	r2,zero,8003764 <__alt_data_end+0xfc003764>
			okValue_SpO2[i] = healthyOk_SpO2[i];
		SpO2_H = healthyOk_SpO2_H;
 800379c:	008018c4 	movi	r2,99
 80037a0:	d0a00115 	stw	r2,-32764(gp)
		SpO2_L = healthyOk_SpO2_L;
 80037a4:	00801784 	movi	r2,94
 80037a8:	d0a00015 	stw	r2,-32768(gp)
		for (i = 0; i < sizeof(heal); i++)
 80037ac:	e03ff615 	stw	zero,-40(fp)
 80037b0:	00000c06 	br	80037e4 <main+0x49c>
			title_cat[i] = heal[i];
 80037b4:	e0fff617 	ldw	r3,-40(fp)
 80037b8:	d0a00e04 	addi	r2,gp,-32712
 80037bc:	1885883a 	add	r2,r3,r2
 80037c0:	10c00003 	ldbu	r3,0(r2)
 80037c4:	008200b4 	movhi	r2,2050
 80037c8:	108544c4 	addi	r2,r2,5395
 80037cc:	e13ff617 	ldw	r4,-40(fp)
 80037d0:	1105883a 	add	r2,r2,r4
 80037d4:	10c00005 	stb	r3,0(r2)
	case healthy:
		for (i = 0; i < sizeof(healthyOk_SpO2); i++)
			okValue_SpO2[i] = healthyOk_SpO2[i];
		SpO2_H = healthyOk_SpO2_H;
		SpO2_L = healthyOk_SpO2_L;
		for (i = 0; i < sizeof(heal); i++)
 80037d8:	e0bff617 	ldw	r2,-40(fp)
 80037dc:	10800044 	addi	r2,r2,1
 80037e0:	e0bff615 	stw	r2,-40(fp)
 80037e4:	e0bff617 	ldw	r2,-40(fp)
 80037e8:	10800230 	cmpltui	r2,r2,8
 80037ec:	103ff11e 	bne	r2,zero,80037b4 <__alt_data_end+0xfc0037b4>
			title_cat[i] = heal[i];
		for (i = 0; i < sizeof(healthyOk_PR); i++)
 80037f0:	e03ff615 	stw	zero,-40(fp)
 80037f4:	00000d06 	br	800382c <main+0x4e4>
			okValue_PR[i] = healthyOk_PR[i];
 80037f8:	008200b4 	movhi	r2,2050
 80037fc:	10b74504 	addi	r2,r2,-8940
 8003800:	e0fff617 	ldw	r3,-40(fp)
 8003804:	10c5883a 	add	r2,r2,r3
 8003808:	10c00003 	ldbu	r3,0(r2)
 800380c:	008200b4 	movhi	r2,2050
 8003810:	10851a04 	addi	r2,r2,5224
 8003814:	e13ff617 	ldw	r4,-40(fp)
 8003818:	1105883a 	add	r2,r2,r4
 800381c:	10c00005 	stb	r3,0(r2)
			okValue_SpO2[i] = healthyOk_SpO2[i];
		SpO2_H = healthyOk_SpO2_H;
		SpO2_L = healthyOk_SpO2_L;
		for (i = 0; i < sizeof(heal); i++)
			title_cat[i] = heal[i];
		for (i = 0; i < sizeof(healthyOk_PR); i++)
 8003820:	e0bff617 	ldw	r2,-40(fp)
 8003824:	10800044 	addi	r2,r2,1
 8003828:	e0bff615 	stw	r2,-40(fp)
 800382c:	e0bff617 	ldw	r2,-40(fp)
 8003830:	108002b0 	cmpltui	r2,r2,10
 8003834:	103ff01e 	bne	r2,zero,80037f8 <__alt_data_end+0xfc0037f8>
			okValue_PR[i] = healthyOk_PR[i];
		break;
 8003838:	00003806 	br	800391c <main+0x5d4>
	default:
		for (i = 0; i < sizeof(healthyOk_SpO2); i++)
 800383c:	e03ff615 	stw	zero,-40(fp)
 8003840:	00000b06 	br	8003870 <main+0x528>
			okValue_SpO2[i] = healthyOk_SpO2[i];
 8003844:	e0fff617 	ldw	r3,-40(fp)
 8003848:	d0a01004 	addi	r2,gp,-32704
 800384c:	1885883a 	add	r2,r3,r2
 8003850:	10c00003 	ldbu	r3,0(r2)
 8003854:	e13ff617 	ldw	r4,-40(fp)
 8003858:	d0a70e04 	addi	r2,gp,-25544
 800385c:	2085883a 	add	r2,r4,r2
 8003860:	10c00005 	stb	r3,0(r2)
			title_cat[i] = heal[i];
		for (i = 0; i < sizeof(healthyOk_PR); i++)
			okValue_PR[i] = healthyOk_PR[i];
		break;
	default:
		for (i = 0; i < sizeof(healthyOk_SpO2); i++)
 8003864:	e0bff617 	ldw	r2,-40(fp)
 8003868:	10800044 	addi	r2,r2,1
 800386c:	e0bff615 	stw	r2,-40(fp)
 8003870:	e0bff617 	ldw	r2,-40(fp)
 8003874:	10800230 	cmpltui	r2,r2,8
 8003878:	103ff21e 	bne	r2,zero,8003844 <__alt_data_end+0xfc003844>
			okValue_SpO2[i] = healthyOk_SpO2[i];
		SpO2_H = healthyOk_SpO2_H;
 800387c:	008018c4 	movi	r2,99
 8003880:	d0a00115 	stw	r2,-32764(gp)
		SpO2_L = healthyOk_SpO2_L;
 8003884:	00801784 	movi	r2,94
 8003888:	d0a00015 	stw	r2,-32768(gp)
		for (i = 0; i < sizeof(heal); i++)
 800388c:	e03ff615 	stw	zero,-40(fp)
 8003890:	00000c06 	br	80038c4 <main+0x57c>
			title_cat[i] = heal[i];
 8003894:	e0fff617 	ldw	r3,-40(fp)
 8003898:	d0a00e04 	addi	r2,gp,-32712
 800389c:	1885883a 	add	r2,r3,r2
 80038a0:	10c00003 	ldbu	r3,0(r2)
 80038a4:	008200b4 	movhi	r2,2050
 80038a8:	108544c4 	addi	r2,r2,5395
 80038ac:	e13ff617 	ldw	r4,-40(fp)
 80038b0:	1105883a 	add	r2,r2,r4
 80038b4:	10c00005 	stb	r3,0(r2)
	default:
		for (i = 0; i < sizeof(healthyOk_SpO2); i++)
			okValue_SpO2[i] = healthyOk_SpO2[i];
		SpO2_H = healthyOk_SpO2_H;
		SpO2_L = healthyOk_SpO2_L;
		for (i = 0; i < sizeof(heal); i++)
 80038b8:	e0bff617 	ldw	r2,-40(fp)
 80038bc:	10800044 	addi	r2,r2,1
 80038c0:	e0bff615 	stw	r2,-40(fp)
 80038c4:	e0bff617 	ldw	r2,-40(fp)
 80038c8:	10800230 	cmpltui	r2,r2,8
 80038cc:	103ff11e 	bne	r2,zero,8003894 <__alt_data_end+0xfc003894>
			title_cat[i] = heal[i];
		for (i = 0; i < sizeof(healthyOk_PR); i++)
 80038d0:	e03ff615 	stw	zero,-40(fp)
 80038d4:	00000d06 	br	800390c <main+0x5c4>
			okValue_PR[i] = healthyOk_PR[i];
 80038d8:	008200b4 	movhi	r2,2050
 80038dc:	10b74504 	addi	r2,r2,-8940
 80038e0:	e0fff617 	ldw	r3,-40(fp)
 80038e4:	10c5883a 	add	r2,r2,r3
 80038e8:	10c00003 	ldbu	r3,0(r2)
 80038ec:	008200b4 	movhi	r2,2050
 80038f0:	10851a04 	addi	r2,r2,5224
 80038f4:	e13ff617 	ldw	r4,-40(fp)
 80038f8:	1105883a 	add	r2,r2,r4
 80038fc:	10c00005 	stb	r3,0(r2)
			okValue_SpO2[i] = healthyOk_SpO2[i];
		SpO2_H = healthyOk_SpO2_H;
		SpO2_L = healthyOk_SpO2_L;
		for (i = 0; i < sizeof(heal); i++)
			title_cat[i] = heal[i];
		for (i = 0; i < sizeof(healthyOk_PR); i++)
 8003900:	e0bff617 	ldw	r2,-40(fp)
 8003904:	10800044 	addi	r2,r2,1
 8003908:	e0bff615 	stw	r2,-40(fp)
 800390c:	e0bff617 	ldw	r2,-40(fp)
 8003910:	108002b0 	cmpltui	r2,r2,10
 8003914:	103ff01e 	bne	r2,zero,80038d8 <__alt_data_end+0xfc0038d8>
			okValue_PR[i] = healthyOk_PR[i];
		break;
 8003918:	0001883a 	nop
	}
	Init_GPS();
 800391c:	80024700 	call	8002470 <Init_GPS>
	Init_Bio();
 8003920:	8002d580 	call	8002d58 <Init_Bio>


	page3();
 8003924:	8002d240 	call	8002d24 <page3>
	init_wifi();
 8003928:	8002f6c0 	call	8002f6c <init_wifi>
	int pv1 = get_Pulse();
 800392c:	8002e3c0 	call	8002e3c <get_Pulse>
 8003930:	10803fcc 	andi	r2,r2,255
 8003934:	e0bff715 	stw	r2,-36(fp)
	int pv2 = get_Pulse();
 8003938:	8002e3c0 	call	8002e3c <get_Pulse>
 800393c:	10803fcc 	andi	r2,r2,255
 8003940:	e0bff915 	stw	r2,-28(fp)
	//functions that display the hard-coded optimal values
	for (i = 0; i < sizeof(okValue_SpO2); i++)
 8003944:	e03ff615 	stw	zero,-40(fp)
 8003948:	00001406 	br	800399c <main+0x654>
		OutGraphicsCharFont2a((260 + 11 * i), 415, 4, 1, okValue_SpO2[i], 1); //OK VALUE of oxygen
 800394c:	e0bff617 	ldw	r2,-40(fp)
 8003950:	108002e4 	muli	r2,r2,11
 8003954:	11004104 	addi	r4,r2,260
 8003958:	e0fff617 	ldw	r3,-40(fp)
 800395c:	d0a70e04 	addi	r2,gp,-25544
 8003960:	1885883a 	add	r2,r3,r2
 8003964:	10800003 	ldbu	r2,0(r2)
 8003968:	10803fcc 	andi	r2,r2,255
 800396c:	1080201c 	xori	r2,r2,128
 8003970:	10bfe004 	addi	r2,r2,-128
 8003974:	d8800015 	stw	r2,0(sp)
 8003978:	00800044 	movi	r2,1
 800397c:	d8800115 	stw	r2,4(sp)
 8003980:	014067c4 	movi	r5,415
 8003984:	01800104 	movi	r6,4
 8003988:	01c00044 	movi	r7,1
 800398c:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	page3();
	init_wifi();
	int pv1 = get_Pulse();
	int pv2 = get_Pulse();
	//functions that display the hard-coded optimal values
	for (i = 0; i < sizeof(okValue_SpO2); i++)
 8003990:	e0bff617 	ldw	r2,-40(fp)
 8003994:	10800044 	addi	r2,r2,1
 8003998:	e0bff615 	stw	r2,-40(fp)
 800399c:	e0bff617 	ldw	r2,-40(fp)
 80039a0:	108001f0 	cmpltui	r2,r2,7
 80039a4:	103fe91e 	bne	r2,zero,800394c <__alt_data_end+0xfc00394c>
		OutGraphicsCharFont2a((260 + 11 * i), 415, 4, 1, okValue_SpO2[i], 1); //OK VALUE of oxygen

	for (i = 0; i < sizeof(okValue_PR); i++)
 80039a8:	e03ff615 	stw	zero,-40(fp)
 80039ac:	00001506 	br	8003a04 <main+0x6bc>
		OutGraphicsCharFont2a((260 + 11 * i), 438, 4, 1, okValue_PR[i], 1); //OK VALUE of pulse rate
 80039b0:	e0bff617 	ldw	r2,-40(fp)
 80039b4:	108002e4 	muli	r2,r2,11
 80039b8:	11004104 	addi	r4,r2,260
 80039bc:	008200b4 	movhi	r2,2050
 80039c0:	10851a04 	addi	r2,r2,5224
 80039c4:	e0fff617 	ldw	r3,-40(fp)
 80039c8:	10c5883a 	add	r2,r2,r3
 80039cc:	10800003 	ldbu	r2,0(r2)
 80039d0:	10803fcc 	andi	r2,r2,255
 80039d4:	1080201c 	xori	r2,r2,128
 80039d8:	10bfe004 	addi	r2,r2,-128
 80039dc:	d8800015 	stw	r2,0(sp)
 80039e0:	00800044 	movi	r2,1
 80039e4:	d8800115 	stw	r2,4(sp)
 80039e8:	01406d84 	movi	r5,438
 80039ec:	01800104 	movi	r6,4
 80039f0:	01c00044 	movi	r7,1
 80039f4:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
	int pv2 = get_Pulse();
	//functions that display the hard-coded optimal values
	for (i = 0; i < sizeof(okValue_SpO2); i++)
		OutGraphicsCharFont2a((260 + 11 * i), 415, 4, 1, okValue_SpO2[i], 1); //OK VALUE of oxygen

	for (i = 0; i < sizeof(okValue_PR); i++)
 80039f8:	e0bff617 	ldw	r2,-40(fp)
 80039fc:	10800044 	addi	r2,r2,1
 8003a00:	e0bff615 	stw	r2,-40(fp)
 8003a04:	e0bff617 	ldw	r2,-40(fp)
 8003a08:	108002f0 	cmpltui	r2,r2,11
 8003a0c:	103fe81e 	bne	r2,zero,80039b0 <__alt_data_end+0xfc0039b0>
		OutGraphicsCharFont2a((260 + 11 * i), 438, 4, 1, okValue_PR[i], 1); //OK VALUE of pulse rate

	for (i = 0; i < sizeof(title_cat); i++)
 8003a10:	e03ff615 	stw	zero,-40(fp)
 8003a14:	00001506 	br	8003a6c <main+0x724>
		OutGraphicsCharFont2a((454 + 11 * i), 45, 4, 1, title_cat[i], 1); //title of category
 8003a18:	e0bff617 	ldw	r2,-40(fp)
 8003a1c:	108002e4 	muli	r2,r2,11
 8003a20:	11007184 	addi	r4,r2,454
 8003a24:	008200b4 	movhi	r2,2050
 8003a28:	108544c4 	addi	r2,r2,5395
 8003a2c:	e0fff617 	ldw	r3,-40(fp)
 8003a30:	10c5883a 	add	r2,r2,r3
 8003a34:	10800003 	ldbu	r2,0(r2)
 8003a38:	10803fcc 	andi	r2,r2,255
 8003a3c:	1080201c 	xori	r2,r2,128
 8003a40:	10bfe004 	addi	r2,r2,-128
 8003a44:	d8800015 	stw	r2,0(sp)
 8003a48:	00800044 	movi	r2,1
 8003a4c:	d8800115 	stw	r2,4(sp)
 8003a50:	01400b44 	movi	r5,45
 8003a54:	01800104 	movi	r6,4
 8003a58:	01c00044 	movi	r7,1
 8003a5c:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a((260 + 11 * i), 415, 4, 1, okValue_SpO2[i], 1); //OK VALUE of oxygen

	for (i = 0; i < sizeof(okValue_PR); i++)
		OutGraphicsCharFont2a((260 + 11 * i), 438, 4, 1, okValue_PR[i], 1); //OK VALUE of pulse rate

	for (i = 0; i < sizeof(title_cat); i++)
 8003a60:	e0bff617 	ldw	r2,-40(fp)
 8003a64:	10800044 	addi	r2,r2,1
 8003a68:	e0bff615 	stw	r2,-40(fp)
 8003a6c:	e0bff617 	ldw	r2,-40(fp)
 8003a70:	10800270 	cmpltui	r2,r2,9
 8003a74:	103fe81e 	bne	r2,zero,8003a18 <__alt_data_end+0xfc003a18>
		OutGraphicsCharFont2a((454 + 11 * i), 45, 4, 1, title_cat[i], 1); //title of category

refresh:
	graphing_colour = BLUE;
 8003a78:	00800104 	movi	r2,4
 8003a7c:	d0a01415 	stw	r2,-32688(gp)
	x = 190;
 8003a80:	00802f84 	movi	r2,190
 8003a84:	e0bff515 	stw	r2,-44(fp)

	while (1) {

		GPS_Real_Time();
 8003a88:	80032380 	call	8003238 <GPS_Real_Time>

		if (ScreenTouched()) {
 8003a8c:	80020440 	call	8002044 <ScreenTouched>
 8003a90:	10002b26 	beq	r2,zero,8003b40 <main+0x7f8>
			Point res;
			res = GetPressNoWait();
 8003a94:	80031240 	call	8003124 <GetPressNoWait>
 8003a98:	1009883a 	mov	r4,r2
 8003a9c:	180b883a 	mov	r5,r3
 8003aa0:	e13ffd15 	stw	r4,-12(fp)
 8003aa4:	e17ffe15 	stw	r5,-8(fp)
			if ((res.x > 630 && res.x < 700) && (res.y > 410 && res.y < 465)) {
 8003aa8:	e0bffd17 	ldw	r2,-12(fp)
 8003aac:	10809dd0 	cmplti	r2,r2,631
 8003ab0:	10000d1e 	bne	r2,zero,8003ae8 <main+0x7a0>
 8003ab4:	e0bffd17 	ldw	r2,-12(fp)
 8003ab8:	1080af08 	cmpgei	r2,r2,700
 8003abc:	10000a1e 	bne	r2,zero,8003ae8 <main+0x7a0>
 8003ac0:	e0bffe17 	ldw	r2,-8(fp)
 8003ac4:	108066d0 	cmplti	r2,r2,411
 8003ac8:	1000071e 	bne	r2,zero,8003ae8 <main+0x7a0>
 8003acc:	e0bffe17 	ldw	r2,-8(fp)
 8003ad0:	10807448 	cmpgei	r2,r2,465
 8003ad4:	1000041e 	bne	r2,zero,8003ae8 <main+0x7a0>
				printf("before back to reset\n");
 8003ad8:	010200b4 	movhi	r4,2050
 8003adc:	2135a404 	addi	r4,r4,-10608
 8003ae0:	80041d00 	call	80041d0 <puts>
 8003ae4:	003e2106 	br	800336c <__alt_data_end+0xfc00336c>
				goto reset;
			}
			else if ((res.x > 540 && res.x < 610)
 8003ae8:	e0bffd17 	ldw	r2,-12(fp)
 8003aec:	10808750 	cmplti	r2,r2,541
 8003af0:	1000131e 	bne	r2,zero,8003b40 <main+0x7f8>
 8003af4:	e0bffd17 	ldw	r2,-12(fp)
 8003af8:	10809888 	cmpgei	r2,r2,610
 8003afc:	1000101e 	bne	r2,zero,8003b40 <main+0x7f8>
					&& (res.y > 410 && res.y < 465)) {
 8003b00:	e0bffe17 	ldw	r2,-8(fp)
 8003b04:	108066d0 	cmplti	r2,r2,411
 8003b08:	10000d1e 	bne	r2,zero,8003b40 <main+0x7f8>
 8003b0c:	e0bffe17 	ldw	r2,-8(fp)
 8003b10:	10807448 	cmpgei	r2,r2,465
 8003b14:	10000a1e 	bne	r2,zero,8003b40 <main+0x7f8>
				printf("refreshing the screen\n");
 8003b18:	010200b4 	movhi	r4,2050
 8003b1c:	2135aa04 	addi	r4,r4,-10584
 8003b20:	80041d00 	call	80041d0 <puts>
				drawFilledRectangle(75, 400, 180, 700, 0); //color of screen to show pulse rate
 8003b24:	d8000015 	stw	zero,0(sp)
 8003b28:	010012c4 	movi	r4,75
 8003b2c:	01406404 	movi	r5,400
 8003b30:	01802d04 	movi	r6,180
 8003b34:	01c0af04 	movi	r7,700
 8003b38:	8000ee40 	call	8000ee4 <drawFilledRectangle>
 8003b3c:	003fce06 	br	8003a78 <__alt_data_end+0xfc003a78>
				goto refresh;
			}

		}

		int spo2 = get_Spo2();
 8003b40:	8002f1c0 	call	8002f1c <get_Spo2>
 8003b44:	10803fcc 	andi	r2,r2,255
 8003b48:	e0bffa15 	stw	r2,-24(fp)
		int hr = get_HR();
 8003b4c:	8002e880 	call	8002e88 <get_HR>
 8003b50:	10803fcc 	andi	r2,r2,255
 8003b54:	e0bffb15 	stw	r2,-20(fp)
//		pv1 = pv2;
//		pv2 = get_Pulse();

		char oxyL[3];

		if(spo2 > 70 && spo2 < 100){
 8003b58:	e0bffa17 	ldw	r2,-24(fp)
 8003b5c:	108011d0 	cmplti	r2,r2,71
 8003b60:	1000a91e 	bne	r2,zero,8003e08 <main+0xac0>
 8003b64:	e0bffa17 	ldw	r2,-24(fp)
 8003b68:	10801908 	cmpgei	r2,r2,100
 8003b6c:	1000a61e 	bne	r2,zero,8003e08 <main+0xac0>
			//check if in valid range, if not change colors to red
			if( 60 < SpO2_L || spo2 > SpO2_H){
 8003b70:	d0a00017 	ldw	r2,-32768(gp)
 8003b74:	10800f48 	cmpgei	r2,r2,61
 8003b78:	1000031e 	bne	r2,zero,8003b88 <main+0x840>
 8003b7c:	d0e00117 	ldw	r3,-32764(gp)
 8003b80:	e0bffa17 	ldw	r2,-24(fp)
 8003b84:	1880130e 	bge	r3,r2,8003bd4 <main+0x88c>
				graphing_colour = RED;
 8003b88:	00800084 	movi	r2,2
 8003b8c:	d0a01415 	stw	r2,-32688(gp)
				//wifi function goes here~~~

				printf("initializing wifi to get a call\n");
 8003b90:	010200b4 	movhi	r4,2050
 8003b94:	2135b004 	addi	r4,r4,-10560
 8003b98:	80041d00 	call	80041d0 <puts>


					putString_wifi("dofile(\"send_text_message.lua\")");
 8003b9c:	010200b4 	movhi	r4,2050
 8003ba0:	2135b804 	addi	r4,r4,-10528
 8003ba4:	80030700 	call	8003070 <putString_wifi>
					putString_wifi("gpio.mode(3, gpio.OUTPUT)");
 8003ba8:	010200b4 	movhi	r4,2050
 8003bac:	2135c004 	addi	r4,r4,-10496
 8003bb0:	80030700 	call	8003070 <putString_wifi>
					printf("sending commands\n");
 8003bb4:	010200b4 	movhi	r4,2050
 8003bb8:	2135c704 	addi	r4,r4,-10468
 8003bbc:	80041d00 	call	80041d0 <puts>
					usleep(10000);
 8003bc0:	0109c404 	movi	r4,10000
 8003bc4:	8010f200 	call	8010f20 <usleep>

					putString_wifi("check_wifi()");
 8003bc8:	010200b4 	movhi	r4,2050
 8003bcc:	2135cc04 	addi	r4,r4,-10448
 8003bd0:	80030700 	call	8003070 <putString_wifi>

			}
			oxyL[0] = spo2 / 100 + offset;
 8003bd4:	e0fffa17 	ldw	r3,-24(fp)
 8003bd8:	00801904 	movi	r2,100
 8003bdc:	1885283a 	div	r2,r3,r2
 8003be0:	1007883a 	mov	r3,r2
 8003be4:	d0a01217 	ldw	r2,-32696(gp)
 8003be8:	1885883a 	add	r2,r3,r2
 8003bec:	e0bffc05 	stb	r2,-16(fp)
			spo2 = spo2 % 100;
 8003bf0:	e0bffa17 	ldw	r2,-24(fp)
 8003bf4:	00c01904 	movi	r3,100
 8003bf8:	10c7283a 	div	r3,r2,r3
 8003bfc:	18c01924 	muli	r3,r3,100
 8003c00:	10c5c83a 	sub	r2,r2,r3
 8003c04:	e0bffa15 	stw	r2,-24(fp)
			oxyL[0] = spo2 / 10 + offset;
 8003c08:	e0fffa17 	ldw	r3,-24(fp)
 8003c0c:	00800284 	movi	r2,10
 8003c10:	1885283a 	div	r2,r3,r2
 8003c14:	1007883a 	mov	r3,r2
 8003c18:	d0a01217 	ldw	r2,-32696(gp)
 8003c1c:	1885883a 	add	r2,r3,r2
 8003c20:	e0bffc05 	stb	r2,-16(fp)
			spo2 = spo2 % 10;
 8003c24:	e0bffa17 	ldw	r2,-24(fp)
 8003c28:	00c00284 	movi	r3,10
 8003c2c:	10c7283a 	div	r3,r2,r3
 8003c30:	18c002a4 	muli	r3,r3,10
 8003c34:	10c5c83a 	sub	r2,r2,r3
 8003c38:	e0bffa15 	stw	r2,-24(fp)
			oxyL[1] = spo2 + offset;
 8003c3c:	e0bffa17 	ldw	r2,-24(fp)
 8003c40:	1007883a 	mov	r3,r2
 8003c44:	d0a01217 	ldw	r2,-32696(gp)
 8003c48:	1885883a 	add	r2,r3,r2
 8003c4c:	e0bffc45 	stb	r2,-15(fp)
			for (i = 0; i < sizeof(oxyL); i++){
 8003c50:	e03ff615 	stw	zero,-40(fp)
 8003c54:	00002506 	br	8003cec <main+0x9a4>
				OutGraphicsCharFont2a((60 + 11 * i), 230, WHITE, 1, invalid[i], 1); //sp02
 8003c58:	e0bff617 	ldw	r2,-40(fp)
 8003c5c:	108002e4 	muli	r2,r2,11
 8003c60:	11000f04 	addi	r4,r2,60
 8003c64:	e0fff617 	ldw	r3,-40(fp)
 8003c68:	d0a01504 	addi	r2,gp,-32684
 8003c6c:	1885883a 	add	r2,r3,r2
 8003c70:	10800003 	ldbu	r2,0(r2)
 8003c74:	10803fcc 	andi	r2,r2,255
 8003c78:	1080201c 	xori	r2,r2,128
 8003c7c:	10bfe004 	addi	r2,r2,-128
 8003c80:	d8800015 	stw	r2,0(sp)
 8003c84:	00800044 	movi	r2,1
 8003c88:	d8800115 	stw	r2,4(sp)
 8003c8c:	01403984 	movi	r5,230
 8003c90:	01800044 	movi	r6,1
 8003c94:	01c00044 	movi	r7,1
 8003c98:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a((60 + 11 * i), 230, graphing_colour, 1, oxyL[i], 1); //sp02
 8003c9c:	e0bff617 	ldw	r2,-40(fp)
 8003ca0:	108002e4 	muli	r2,r2,11
 8003ca4:	11000f04 	addi	r4,r2,60
 8003ca8:	d1a01417 	ldw	r6,-32688(gp)
 8003cac:	e0fffc04 	addi	r3,fp,-16
 8003cb0:	e0bff617 	ldw	r2,-40(fp)
 8003cb4:	1885883a 	add	r2,r3,r2
 8003cb8:	10800003 	ldbu	r2,0(r2)
 8003cbc:	10803fcc 	andi	r2,r2,255
 8003cc0:	1080201c 	xori	r2,r2,128
 8003cc4:	10bfe004 	addi	r2,r2,-128
 8003cc8:	d8800015 	stw	r2,0(sp)
 8003ccc:	00800044 	movi	r2,1
 8003cd0:	d8800115 	stw	r2,4(sp)
 8003cd4:	01403984 	movi	r5,230
 8003cd8:	01c00044 	movi	r7,1
 8003cdc:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
			oxyL[0] = spo2 / 100 + offset;
			spo2 = spo2 % 100;
			oxyL[0] = spo2 / 10 + offset;
			spo2 = spo2 % 10;
			oxyL[1] = spo2 + offset;
			for (i = 0; i < sizeof(oxyL); i++){
 8003ce0:	e0bff617 	ldw	r2,-40(fp)
 8003ce4:	10800044 	addi	r2,r2,1
 8003ce8:	e0bff615 	stw	r2,-40(fp)
 8003cec:	e0bff617 	ldw	r2,-40(fp)
 8003cf0:	108000f0 	cmpltui	r2,r2,3
 8003cf4:	103fd81e 	bne	r2,zero,8003c58 <__alt_data_end+0xfc003c58>
				OutGraphicsCharFont2a((60 + 11 * i), 230, WHITE, 1, invalid[i], 1); //sp02
				OutGraphicsCharFont2a((60 + 11 * i), 230, graphing_colour, 1, oxyL[i], 1); //sp02
			}
		printf("hr = %d\n", hr );
 8003cf8:	010200b4 	movhi	r4,2050
 8003cfc:	2135d004 	addi	r4,r4,-10432
 8003d00:	e17ffb17 	ldw	r5,-20(fp)
 8003d04:	80040bc0 	call	80040bc <printf>
		if(hr > 50 &&  hr < 128){
 8003d08:	e0bffb17 	ldw	r2,-20(fp)
 8003d0c:	10800cd0 	cmplti	r2,r2,51
 8003d10:	10003c1e 	bne	r2,zero,8003e04 <main+0xabc>
 8003d14:	e0bffb17 	ldw	r2,-20(fp)
 8003d18:	10802008 	cmpgei	r2,r2,128
 8003d1c:	1000391e 	bne	r2,zero,8003e04 <main+0xabc>
			char HR[3];
			HR[0] = hr / 100 + offset;
 8003d20:	e0fffb17 	ldw	r3,-20(fp)
 8003d24:	00801904 	movi	r2,100
 8003d28:	1885283a 	div	r2,r3,r2
 8003d2c:	1007883a 	mov	r3,r2
 8003d30:	d0a01217 	ldw	r2,-32696(gp)
 8003d34:	1885883a 	add	r2,r3,r2
 8003d38:	e0bfff05 	stb	r2,-4(fp)
			hr = hr % 100;
 8003d3c:	e0bffb17 	ldw	r2,-20(fp)
 8003d40:	00c01904 	movi	r3,100
 8003d44:	10c7283a 	div	r3,r2,r3
 8003d48:	18c01924 	muli	r3,r3,100
 8003d4c:	10c5c83a 	sub	r2,r2,r3
 8003d50:	e0bffb15 	stw	r2,-20(fp)
			HR[1] = hr / 10 + offset;
 8003d54:	e0fffb17 	ldw	r3,-20(fp)
 8003d58:	00800284 	movi	r2,10
 8003d5c:	1885283a 	div	r2,r3,r2
 8003d60:	1007883a 	mov	r3,r2
 8003d64:	d0a01217 	ldw	r2,-32696(gp)
 8003d68:	1885883a 	add	r2,r3,r2
 8003d6c:	e0bfff45 	stb	r2,-3(fp)
			hr = hr % 10;
 8003d70:	e0bffb17 	ldw	r2,-20(fp)
 8003d74:	00c00284 	movi	r3,10
 8003d78:	10c7283a 	div	r3,r2,r3
 8003d7c:	18c002a4 	muli	r3,r3,10
 8003d80:	10c5c83a 	sub	r2,r2,r3
 8003d84:	e0bffb15 	stw	r2,-20(fp)
			HR[2] = hr + offset;
 8003d88:	e0bffb17 	ldw	r2,-20(fp)
 8003d8c:	1007883a 	mov	r3,r2
 8003d90:	d0a01217 	ldw	r2,-32696(gp)
 8003d94:	1885883a 	add	r2,r3,r2
 8003d98:	e0bfff85 	stb	r2,-2(fp)
			for (i = 0; i <  sizeof(HR); i++)
 8003d9c:	e03ff615 	stw	zero,-40(fp)
 8003da0:	00001406 	br	8003df4 <main+0xaac>
				OutGraphicsCharFont2a((60 + 11 * i), 340, graphing_colour, 1, HR[i], 1); //pulse
 8003da4:	e0bff617 	ldw	r2,-40(fp)
 8003da8:	108002e4 	muli	r2,r2,11
 8003dac:	11000f04 	addi	r4,r2,60
 8003db0:	d1a01417 	ldw	r6,-32688(gp)
 8003db4:	e0ffff04 	addi	r3,fp,-4
 8003db8:	e0bff617 	ldw	r2,-40(fp)
 8003dbc:	1885883a 	add	r2,r3,r2
 8003dc0:	10800003 	ldbu	r2,0(r2)
 8003dc4:	10803fcc 	andi	r2,r2,255
 8003dc8:	1080201c 	xori	r2,r2,128
 8003dcc:	10bfe004 	addi	r2,r2,-128
 8003dd0:	d8800015 	stw	r2,0(sp)
 8003dd4:	00800044 	movi	r2,1
 8003dd8:	d8800115 	stw	r2,4(sp)
 8003ddc:	01405504 	movi	r5,340
 8003de0:	01c00044 	movi	r7,1
 8003de4:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
			HR[0] = hr / 100 + offset;
			hr = hr % 100;
			HR[1] = hr / 10 + offset;
			hr = hr % 10;
			HR[2] = hr + offset;
			for (i = 0; i <  sizeof(HR); i++)
 8003de8:	e0bff617 	ldw	r2,-40(fp)
 8003dec:	10800044 	addi	r2,r2,1
 8003df0:	e0bff615 	stw	r2,-40(fp)
 8003df4:	e0bff617 	ldw	r2,-40(fp)
 8003df8:	108000f0 	cmpltui	r2,r2,3
 8003dfc:	103fe91e 	bne	r2,zero,8003da4 <__alt_data_end+0xfc003da4>
			for (i = 0; i < sizeof(oxyL); i++){
				OutGraphicsCharFont2a((60 + 11 * i), 230, WHITE, 1, invalid[i], 1); //sp02
				OutGraphicsCharFont2a((60 + 11 * i), 230, graphing_colour, 1, oxyL[i], 1); //sp02
			}
		printf("hr = %d\n", hr );
		if(hr > 50 &&  hr < 128){
 8003e00:	00002b06 	br	8003eb0 <main+0xb68>
 8003e04:	00002a06 	br	8003eb0 <main+0xb68>
				OutGraphicsCharFont2a((60 + 11 * i), 340, graphing_colour, 1, HR[i], 1); //pulse
		}

	}
	else
		for (i = 0; i <  sizeof(invalid); i++){
 8003e08:	e03ff615 	stw	zero,-40(fp)
 8003e0c:	00002506 	br	8003ea4 <main+0xb5c>
			OutGraphicsCharFont2a((60 + 11 * i), 230, 0, 1, invalid[i], 1); //pulse
 8003e10:	e0bff617 	ldw	r2,-40(fp)
 8003e14:	108002e4 	muli	r2,r2,11
 8003e18:	11000f04 	addi	r4,r2,60
 8003e1c:	e0fff617 	ldw	r3,-40(fp)
 8003e20:	d0a01504 	addi	r2,gp,-32684
 8003e24:	1885883a 	add	r2,r3,r2
 8003e28:	10800003 	ldbu	r2,0(r2)
 8003e2c:	10803fcc 	andi	r2,r2,255
 8003e30:	1080201c 	xori	r2,r2,128
 8003e34:	10bfe004 	addi	r2,r2,-128
 8003e38:	d8800015 	stw	r2,0(sp)
 8003e3c:	00800044 	movi	r2,1
 8003e40:	d8800115 	stw	r2,4(sp)
 8003e44:	01403984 	movi	r5,230
 8003e48:	000d883a 	mov	r6,zero
 8003e4c:	01c00044 	movi	r7,1
 8003e50:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
			OutGraphicsCharFont2a((60 + 11 * i), 340, 0, 1, invalid[i], 1);
 8003e54:	e0bff617 	ldw	r2,-40(fp)
 8003e58:	108002e4 	muli	r2,r2,11
 8003e5c:	11000f04 	addi	r4,r2,60
 8003e60:	e0fff617 	ldw	r3,-40(fp)
 8003e64:	d0a01504 	addi	r2,gp,-32684
 8003e68:	1885883a 	add	r2,r3,r2
 8003e6c:	10800003 	ldbu	r2,0(r2)
 8003e70:	10803fcc 	andi	r2,r2,255
 8003e74:	1080201c 	xori	r2,r2,128
 8003e78:	10bfe004 	addi	r2,r2,-128
 8003e7c:	d8800015 	stw	r2,0(sp)
 8003e80:	00800044 	movi	r2,1
 8003e84:	d8800115 	stw	r2,4(sp)
 8003e88:	01405504 	movi	r5,340
 8003e8c:	000d883a 	mov	r6,zero
 8003e90:	01c00044 	movi	r7,1
 8003e94:	80003b00 	call	80003b0 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a((60 + 11 * i), 340, graphing_colour, 1, HR[i], 1); //pulse
		}

	}
	else
		for (i = 0; i <  sizeof(invalid); i++){
 8003e98:	e0bff617 	ldw	r2,-40(fp)
 8003e9c:	10800044 	addi	r2,r2,1
 8003ea0:	e0bff615 	stw	r2,-40(fp)
 8003ea4:	e0bff617 	ldw	r2,-40(fp)
 8003ea8:	10800130 	cmpltui	r2,r2,4
 8003eac:	103fd81e 	bne	r2,zero,8003e10 <__alt_data_end+0xfc003e10>
			OutGraphicsCharFont2a((60 + 11 * i), 230, 0, 1, invalid[i], 1); //pulse
			OutGraphicsCharFont2a((60 + 11 * i), 340, 0, 1, invalid[i], 1);
		}

		//plot the graph here for the values
		pv2 = get_Pulse();
 8003eb0:	8002e3c0 	call	8002e3c <get_Pulse>
 8003eb4:	10803fcc 	andi	r2,r2,255
 8003eb8:	e0bff915 	stw	r2,-28(fp)
		DrawLineHardware(x , graph_offset - pv1 , x+10 , graph_offset - pv2, graphing_colour);
 8003ebc:	d0e01317 	ldw	r3,-32692(gp)
 8003ec0:	e0bff717 	ldw	r2,-36(fp)
 8003ec4:	188bc83a 	sub	r5,r3,r2
 8003ec8:	e0bff517 	ldw	r2,-44(fp)
 8003ecc:	11800284 	addi	r6,r2,10
 8003ed0:	d0e01317 	ldw	r3,-32692(gp)
 8003ed4:	e0bff917 	ldw	r2,-28(fp)
 8003ed8:	1887c83a 	sub	r3,r3,r2
 8003edc:	d0a01417 	ldw	r2,-32688(gp)
 8003ee0:	d8800015 	stw	r2,0(sp)
 8003ee4:	e13ff517 	ldw	r4,-44(fp)
 8003ee8:	180f883a 	mov	r7,r3
 8003eec:	80008440 	call	8000844 <DrawLineHardware>
		x = x + 10;
 8003ef0:	e0bff517 	ldw	r2,-44(fp)
 8003ef4:	10800284 	addi	r2,r2,10
 8003ef8:	e0bff515 	stw	r2,-44(fp)
		if(x > 690){
 8003efc:	e0bff517 	ldw	r2,-44(fp)
 8003f00:	1080acd0 	cmplti	r2,r2,691
 8003f04:	1000081e 	bne	r2,zero,8003f28 <main+0xbe0>
			x = 180;
 8003f08:	00802d04 	movi	r2,180
 8003f0c:	e0bff515 	stw	r2,-44(fp)
			drawFilledRectangle(75, 400, 180, 700, 0);//clear the plot area
 8003f10:	d8000015 	stw	zero,0(sp)
 8003f14:	010012c4 	movi	r4,75
 8003f18:	01406404 	movi	r5,400
 8003f1c:	01802d04 	movi	r6,180
 8003f20:	01c0af04 	movi	r7,700
 8003f24:	8000ee40 	call	8000ee4 <drawFilledRectangle>
		}
		pv1 = pv2;
 8003f28:	e0bff917 	ldw	r2,-28(fp)
 8003f2c:	e0bff715 	stw	r2,-36(fp)
		pv2 = get_Pulse();
 8003f30:	8002e3c0 	call	8002e3c <get_Pulse>
 8003f34:	10803fcc 	andi	r2,r2,255
 8003f38:	e0bff915 	stw	r2,-28(fp)


	}
 8003f3c:	003ed206 	br	8003a88 <__alt_data_end+0xfc003a88>

08003f40 <atoi>:
 8003f40:	000b883a 	mov	r5,zero
 8003f44:	01800284 	movi	r6,10
 8003f48:	80044dc1 	jmpi	80044dc <strtol>

08003f4c <_atoi_r>:
 8003f4c:	000d883a 	mov	r6,zero
 8003f50:	01c00284 	movi	r7,10
 8003f54:	800427c1 	jmpi	800427c <_strtol_r>

08003f58 <memcpy>:
 8003f58:	deffff04 	addi	sp,sp,-4
 8003f5c:	dc000015 	stw	r16,0(sp)
 8003f60:	00c003c4 	movi	r3,15
 8003f64:	2005883a 	mov	r2,r4
 8003f68:	1980432e 	bgeu	r3,r6,8004078 <memcpy+0x120>
 8003f6c:	2146b03a 	or	r3,r4,r5
 8003f70:	18c000cc 	andi	r3,r3,3
 8003f74:	1800421e 	bne	r3,zero,8004080 <memcpy+0x128>
 8003f78:	343ffc04 	addi	r16,r6,-16
 8003f7c:	8020d13a 	srli	r16,r16,4
 8003f80:	28c00104 	addi	r3,r5,4
 8003f84:	23400104 	addi	r13,r4,4
 8003f88:	801e913a 	slli	r15,r16,4
 8003f8c:	2b000204 	addi	r12,r5,8
 8003f90:	22c00204 	addi	r11,r4,8
 8003f94:	7bc00504 	addi	r15,r15,20
 8003f98:	2a800304 	addi	r10,r5,12
 8003f9c:	22400304 	addi	r9,r4,12
 8003fa0:	2bdf883a 	add	r15,r5,r15
 8003fa4:	2811883a 	mov	r8,r5
 8003fa8:	200f883a 	mov	r7,r4
 8003fac:	41000017 	ldw	r4,0(r8)
 8003fb0:	39c00404 	addi	r7,r7,16
 8003fb4:	18c00404 	addi	r3,r3,16
 8003fb8:	393ffc15 	stw	r4,-16(r7)
 8003fbc:	1bbffc17 	ldw	r14,-16(r3)
 8003fc0:	6b400404 	addi	r13,r13,16
 8003fc4:	5ac00404 	addi	r11,r11,16
 8003fc8:	6bbffc15 	stw	r14,-16(r13)
 8003fcc:	63800017 	ldw	r14,0(r12)
 8003fd0:	4a400404 	addi	r9,r9,16
 8003fd4:	42000404 	addi	r8,r8,16
 8003fd8:	5bbffc15 	stw	r14,-16(r11)
 8003fdc:	53800017 	ldw	r14,0(r10)
 8003fe0:	63000404 	addi	r12,r12,16
 8003fe4:	52800404 	addi	r10,r10,16
 8003fe8:	4bbffc15 	stw	r14,-16(r9)
 8003fec:	1bffef1e 	bne	r3,r15,8003fac <__alt_data_end+0xfc003fac>
 8003ff0:	81c00044 	addi	r7,r16,1
 8003ff4:	380e913a 	slli	r7,r7,4
 8003ff8:	310003cc 	andi	r4,r6,15
 8003ffc:	02c000c4 	movi	r11,3
 8004000:	11c7883a 	add	r3,r2,r7
 8004004:	29cb883a 	add	r5,r5,r7
 8004008:	59001f2e 	bgeu	r11,r4,8004088 <memcpy+0x130>
 800400c:	1813883a 	mov	r9,r3
 8004010:	2811883a 	mov	r8,r5
 8004014:	200f883a 	mov	r7,r4
 8004018:	42800017 	ldw	r10,0(r8)
 800401c:	4a400104 	addi	r9,r9,4
 8004020:	39ffff04 	addi	r7,r7,-4
 8004024:	4abfff15 	stw	r10,-4(r9)
 8004028:	42000104 	addi	r8,r8,4
 800402c:	59fffa36 	bltu	r11,r7,8004018 <__alt_data_end+0xfc004018>
 8004030:	213fff04 	addi	r4,r4,-4
 8004034:	2008d0ba 	srli	r4,r4,2
 8004038:	318000cc 	andi	r6,r6,3
 800403c:	21000044 	addi	r4,r4,1
 8004040:	2109883a 	add	r4,r4,r4
 8004044:	2109883a 	add	r4,r4,r4
 8004048:	1907883a 	add	r3,r3,r4
 800404c:	290b883a 	add	r5,r5,r4
 8004050:	30000626 	beq	r6,zero,800406c <memcpy+0x114>
 8004054:	198d883a 	add	r6,r3,r6
 8004058:	29c00003 	ldbu	r7,0(r5)
 800405c:	18c00044 	addi	r3,r3,1
 8004060:	29400044 	addi	r5,r5,1
 8004064:	19ffffc5 	stb	r7,-1(r3)
 8004068:	19bffb1e 	bne	r3,r6,8004058 <__alt_data_end+0xfc004058>
 800406c:	dc000017 	ldw	r16,0(sp)
 8004070:	dec00104 	addi	sp,sp,4
 8004074:	f800283a 	ret
 8004078:	2007883a 	mov	r3,r4
 800407c:	003ff406 	br	8004050 <__alt_data_end+0xfc004050>
 8004080:	2007883a 	mov	r3,r4
 8004084:	003ff306 	br	8004054 <__alt_data_end+0xfc004054>
 8004088:	200d883a 	mov	r6,r4
 800408c:	003ff006 	br	8004050 <__alt_data_end+0xfc004050>

08004090 <_printf_r>:
 8004090:	defffd04 	addi	sp,sp,-12
 8004094:	dfc00015 	stw	ra,0(sp)
 8004098:	d9800115 	stw	r6,4(sp)
 800409c:	d9c00215 	stw	r7,8(sp)
 80040a0:	280d883a 	mov	r6,r5
 80040a4:	21400217 	ldw	r5,8(r4)
 80040a8:	d9c00104 	addi	r7,sp,4
 80040ac:	80045000 	call	8004500 <___vfprintf_internal_r>
 80040b0:	dfc00017 	ldw	ra,0(sp)
 80040b4:	dec00304 	addi	sp,sp,12
 80040b8:	f800283a 	ret

080040bc <printf>:
 80040bc:	defffc04 	addi	sp,sp,-16
 80040c0:	dfc00015 	stw	ra,0(sp)
 80040c4:	d9400115 	stw	r5,4(sp)
 80040c8:	d9800215 	stw	r6,8(sp)
 80040cc:	d9c00315 	stw	r7,12(sp)
 80040d0:	008200b4 	movhi	r2,2050
 80040d4:	10be0b04 	addi	r2,r2,-2004
 80040d8:	10800017 	ldw	r2,0(r2)
 80040dc:	200b883a 	mov	r5,r4
 80040e0:	d9800104 	addi	r6,sp,4
 80040e4:	11000217 	ldw	r4,8(r2)
 80040e8:	80064fc0 	call	80064fc <__vfprintf_internal>
 80040ec:	dfc00017 	ldw	ra,0(sp)
 80040f0:	dec00404 	addi	sp,sp,16
 80040f4:	f800283a 	ret

080040f8 <_putchar_r>:
 80040f8:	21800217 	ldw	r6,8(r4)
 80040fc:	800accc1 	jmpi	800accc <_putc_r>

08004100 <putchar>:
 8004100:	008200b4 	movhi	r2,2050
 8004104:	10be0b04 	addi	r2,r2,-2004
 8004108:	200b883a 	mov	r5,r4
 800410c:	11000017 	ldw	r4,0(r2)
 8004110:	21800217 	ldw	r6,8(r4)
 8004114:	800accc1 	jmpi	800accc <_putc_r>

08004118 <_puts_r>:
 8004118:	defff604 	addi	sp,sp,-40
 800411c:	dc000715 	stw	r16,28(sp)
 8004120:	2021883a 	mov	r16,r4
 8004124:	2809883a 	mov	r4,r5
 8004128:	dc400815 	stw	r17,32(sp)
 800412c:	dfc00915 	stw	ra,36(sp)
 8004130:	2823883a 	mov	r17,r5
 8004134:	80041e40 	call	80041e4 <strlen>
 8004138:	00c200b4 	movhi	r3,2050
 800413c:	18fe0b04 	addi	r3,r3,-2004
 8004140:	18c00017 	ldw	r3,0(r3)
 8004144:	11000044 	addi	r4,r2,1
 8004148:	d8800115 	stw	r2,4(sp)
 800414c:	18c00217 	ldw	r3,8(r3)
 8004150:	014200b4 	movhi	r5,2050
 8004154:	2975d304 	addi	r5,r5,-10420
 8004158:	1880030b 	ldhu	r2,12(r3)
 800415c:	d9400215 	stw	r5,8(sp)
 8004160:	d9000615 	stw	r4,24(sp)
 8004164:	01400044 	movi	r5,1
 8004168:	01000084 	movi	r4,2
 800416c:	d9000515 	stw	r4,20(sp)
 8004170:	dc400015 	stw	r17,0(sp)
 8004174:	d9400315 	stw	r5,12(sp)
 8004178:	dec00415 	stw	sp,16(sp)
 800417c:	1108000c 	andi	r4,r2,8192
 8004180:	2000061e 	bne	r4,zero,800419c <_puts_r+0x84>
 8004184:	19401917 	ldw	r5,100(r3)
 8004188:	0137ffc4 	movi	r4,-8193
 800418c:	10880014 	ori	r2,r2,8192
 8004190:	2908703a 	and	r4,r5,r4
 8004194:	1880030d 	sth	r2,12(r3)
 8004198:	19001915 	stw	r4,100(r3)
 800419c:	81400217 	ldw	r5,8(r16)
 80041a0:	8009883a 	mov	r4,r16
 80041a4:	d9800404 	addi	r6,sp,16
 80041a8:	80089840 	call	8008984 <__sfvwrite_r>
 80041ac:	1000061e 	bne	r2,zero,80041c8 <_puts_r+0xb0>
 80041b0:	00800284 	movi	r2,10
 80041b4:	dfc00917 	ldw	ra,36(sp)
 80041b8:	dc400817 	ldw	r17,32(sp)
 80041bc:	dc000717 	ldw	r16,28(sp)
 80041c0:	dec00a04 	addi	sp,sp,40
 80041c4:	f800283a 	ret
 80041c8:	00bfffc4 	movi	r2,-1
 80041cc:	003ff906 	br	80041b4 <__alt_data_end+0xfc0041b4>

080041d0 <puts>:
 80041d0:	008200b4 	movhi	r2,2050
 80041d4:	10be0b04 	addi	r2,r2,-2004
 80041d8:	200b883a 	mov	r5,r4
 80041dc:	11000017 	ldw	r4,0(r2)
 80041e0:	80041181 	jmpi	8004118 <_puts_r>

080041e4 <strlen>:
 80041e4:	208000cc 	andi	r2,r4,3
 80041e8:	10002026 	beq	r2,zero,800426c <strlen+0x88>
 80041ec:	20800007 	ldb	r2,0(r4)
 80041f0:	10002026 	beq	r2,zero,8004274 <strlen+0x90>
 80041f4:	2005883a 	mov	r2,r4
 80041f8:	00000206 	br	8004204 <strlen+0x20>
 80041fc:	10c00007 	ldb	r3,0(r2)
 8004200:	18001826 	beq	r3,zero,8004264 <strlen+0x80>
 8004204:	10800044 	addi	r2,r2,1
 8004208:	10c000cc 	andi	r3,r2,3
 800420c:	183ffb1e 	bne	r3,zero,80041fc <__alt_data_end+0xfc0041fc>
 8004210:	10c00017 	ldw	r3,0(r2)
 8004214:	01ffbff4 	movhi	r7,65279
 8004218:	39ffbfc4 	addi	r7,r7,-257
 800421c:	00ca303a 	nor	r5,zero,r3
 8004220:	01a02074 	movhi	r6,32897
 8004224:	19c7883a 	add	r3,r3,r7
 8004228:	31a02004 	addi	r6,r6,-32640
 800422c:	1946703a 	and	r3,r3,r5
 8004230:	1986703a 	and	r3,r3,r6
 8004234:	1800091e 	bne	r3,zero,800425c <strlen+0x78>
 8004238:	10800104 	addi	r2,r2,4
 800423c:	10c00017 	ldw	r3,0(r2)
 8004240:	19cb883a 	add	r5,r3,r7
 8004244:	00c6303a 	nor	r3,zero,r3
 8004248:	28c6703a 	and	r3,r5,r3
 800424c:	1986703a 	and	r3,r3,r6
 8004250:	183ff926 	beq	r3,zero,8004238 <__alt_data_end+0xfc004238>
 8004254:	00000106 	br	800425c <strlen+0x78>
 8004258:	10800044 	addi	r2,r2,1
 800425c:	10c00007 	ldb	r3,0(r2)
 8004260:	183ffd1e 	bne	r3,zero,8004258 <__alt_data_end+0xfc004258>
 8004264:	1105c83a 	sub	r2,r2,r4
 8004268:	f800283a 	ret
 800426c:	2005883a 	mov	r2,r4
 8004270:	003fe706 	br	8004210 <__alt_data_end+0xfc004210>
 8004274:	0005883a 	mov	r2,zero
 8004278:	f800283a 	ret

0800427c <_strtol_r>:
 800427c:	008200b4 	movhi	r2,2050
 8004280:	defff404 	addi	sp,sp,-48
 8004284:	10be0904 	addi	r2,r2,-2012
 8004288:	dcc00515 	stw	r19,20(sp)
 800428c:	14c00017 	ldw	r19,0(r2)
 8004290:	dd800815 	stw	r22,32(sp)
 8004294:	dd400715 	stw	r21,28(sp)
 8004298:	dd000615 	stw	r20,24(sp)
 800429c:	dfc00b15 	stw	ra,44(sp)
 80042a0:	df000a15 	stw	fp,40(sp)
 80042a4:	ddc00915 	stw	r23,36(sp)
 80042a8:	dc800415 	stw	r18,16(sp)
 80042ac:	dc400315 	stw	r17,12(sp)
 80042b0:	dc000215 	stw	r16,8(sp)
 80042b4:	282b883a 	mov	r21,r5
 80042b8:	d9000015 	stw	r4,0(sp)
 80042bc:	3029883a 	mov	r20,r6
 80042c0:	382d883a 	mov	r22,r7
 80042c4:	2813883a 	mov	r9,r5
 80042c8:	4a000007 	ldb	r8,0(r9)
 80042cc:	4807883a 	mov	r3,r9
 80042d0:	4a400044 	addi	r9,r9,1
 80042d4:	9a05883a 	add	r2,r19,r8
 80042d8:	10800043 	ldbu	r2,1(r2)
 80042dc:	1080020c 	andi	r2,r2,8
 80042e0:	103ff91e 	bne	r2,zero,80042c8 <__alt_data_end+0xfc0042c8>
 80042e4:	00800b44 	movi	r2,45
 80042e8:	4025883a 	mov	r18,r8
 80042ec:	4823883a 	mov	r17,r9
 80042f0:	40805826 	beq	r8,r2,8004454 <_strtol_r+0x1d8>
 80042f4:	00800ac4 	movi	r2,43
 80042f8:	40805a26 	beq	r8,r2,8004464 <_strtol_r+0x1e8>
 80042fc:	0039883a 	mov	fp,zero
 8004300:	b0000426 	beq	r22,zero,8004314 <_strtol_r+0x98>
 8004304:	00800404 	movi	r2,16
 8004308:	b0805a26 	beq	r22,r2,8004474 <_strtol_r+0x1f8>
 800430c:	b02f883a 	mov	r23,r22
 8004310:	00000406 	br	8004324 <_strtol_r+0xa8>
 8004314:	00800c04 	movi	r2,48
 8004318:	90806526 	beq	r18,r2,80044b0 <_strtol_r+0x234>
 800431c:	05800284 	movi	r22,10
 8004320:	b02f883a 	mov	r23,r22
 8004324:	00e00034 	movhi	r3,32768
 8004328:	18ffffc4 	addi	r3,r3,-1
 800432c:	e0e1883a 	add	r16,fp,r3
 8004330:	b80b883a 	mov	r5,r23
 8004334:	8009883a 	mov	r4,r16
 8004338:	800e0bc0 	call	800e0bc <__umodsi3>
 800433c:	8009883a 	mov	r4,r16
 8004340:	b80b883a 	mov	r5,r23
 8004344:	d8800115 	stw	r2,4(sp)
 8004348:	800e0b40 	call	800e0b4 <__udivsi3>
 800434c:	9c91883a 	add	r8,r19,r18
 8004350:	42000043 	ldbu	r8,1(r8)
 8004354:	8807883a 	mov	r3,r17
 8004358:	000d883a 	mov	r6,zero
 800435c:	4240010c 	andi	r9,r8,4
 8004360:	0009883a 	mov	r4,zero
 8004364:	02800044 	movi	r10,1
 8004368:	017fffc4 	movi	r5,-1
 800436c:	d9c00117 	ldw	r7,4(sp)
 8004370:	48000e26 	beq	r9,zero,80043ac <_strtol_r+0x130>
 8004374:	923ff404 	addi	r8,r18,-48
 8004378:	4580120e 	bge	r8,r22,80043c4 <_strtol_r+0x148>
 800437c:	31400526 	beq	r6,r5,8004394 <_strtol_r+0x118>
 8004380:	11002736 	bltu	r2,r4,8004420 <_strtol_r+0x1a4>
 8004384:	20802526 	beq	r4,r2,800441c <_strtol_r+0x1a0>
 8004388:	25c9383a 	mul	r4,r4,r23
 800438c:	01800044 	movi	r6,1
 8004390:	4109883a 	add	r4,r8,r4
 8004394:	1c800007 	ldb	r18,0(r3)
 8004398:	18c00044 	addi	r3,r3,1
 800439c:	9c91883a 	add	r8,r19,r18
 80043a0:	42000043 	ldbu	r8,1(r8)
 80043a4:	4240010c 	andi	r9,r8,4
 80043a8:	483ff21e 	bne	r9,zero,8004374 <__alt_data_end+0xfc004374>
 80043ac:	420000cc 	andi	r8,r8,3
 80043b0:	40000426 	beq	r8,zero,80043c4 <_strtol_r+0x148>
 80043b4:	42801c26 	beq	r8,r10,8004428 <_strtol_r+0x1ac>
 80043b8:	024015c4 	movi	r9,87
 80043bc:	9251c83a 	sub	r8,r18,r9
 80043c0:	45bfee16 	blt	r8,r22,800437c <__alt_data_end+0xfc00437c>
 80043c4:	00bfffc4 	movi	r2,-1
 80043c8:	30801926 	beq	r6,r2,8004430 <_strtol_r+0x1b4>
 80043cc:	0705c83a 	sub	r2,zero,fp
 80043d0:	2084f03a 	xor	r2,r4,r2
 80043d4:	1739883a 	add	fp,r2,fp
 80043d8:	e005883a 	mov	r2,fp
 80043dc:	a0000326 	beq	r20,zero,80043ec <_strtol_r+0x170>
 80043e0:	30001a1e 	bne	r6,zero,800444c <_strtol_r+0x1d0>
 80043e4:	a80b883a 	mov	r5,r21
 80043e8:	a1400015 	stw	r5,0(r20)
 80043ec:	dfc00b17 	ldw	ra,44(sp)
 80043f0:	df000a17 	ldw	fp,40(sp)
 80043f4:	ddc00917 	ldw	r23,36(sp)
 80043f8:	dd800817 	ldw	r22,32(sp)
 80043fc:	dd400717 	ldw	r21,28(sp)
 8004400:	dd000617 	ldw	r20,24(sp)
 8004404:	dcc00517 	ldw	r19,20(sp)
 8004408:	dc800417 	ldw	r18,16(sp)
 800440c:	dc400317 	ldw	r17,12(sp)
 8004410:	dc000217 	ldw	r16,8(sp)
 8004414:	dec00c04 	addi	sp,sp,48
 8004418:	f800283a 	ret
 800441c:	3a3fda0e 	bge	r7,r8,8004388 <__alt_data_end+0xfc004388>
 8004420:	01bfffc4 	movi	r6,-1
 8004424:	003fdb06 	br	8004394 <__alt_data_end+0xfc004394>
 8004428:	02400dc4 	movi	r9,55
 800442c:	003fe306 	br	80043bc <__alt_data_end+0xfc0043bc>
 8004430:	d9000017 	ldw	r4,0(sp)
 8004434:	00800884 	movi	r2,34
 8004438:	20800015 	stw	r2,0(r4)
 800443c:	00a00034 	movhi	r2,32768
 8004440:	10bfffc4 	addi	r2,r2,-1
 8004444:	e085883a 	add	r2,fp,r2
 8004448:	a03fe826 	beq	r20,zero,80043ec <__alt_data_end+0xfc0043ec>
 800444c:	197fffc4 	addi	r5,r3,-1
 8004450:	003fe506 	br	80043e8 <__alt_data_end+0xfc0043e8>
 8004454:	1c400084 	addi	r17,r3,2
 8004458:	1c800047 	ldb	r18,1(r3)
 800445c:	07000044 	movi	fp,1
 8004460:	003fa706 	br	8004300 <__alt_data_end+0xfc004300>
 8004464:	1c400084 	addi	r17,r3,2
 8004468:	1c800047 	ldb	r18,1(r3)
 800446c:	0039883a 	mov	fp,zero
 8004470:	003fa306 	br	8004300 <__alt_data_end+0xfc004300>
 8004474:	00800c04 	movi	r2,48
 8004478:	90bfa41e 	bne	r18,r2,800430c <__alt_data_end+0xfc00430c>
 800447c:	88c00003 	ldbu	r3,0(r17)
 8004480:	00bff7c4 	movi	r2,-33
 8004484:	1884703a 	and	r2,r3,r2
 8004488:	10803fcc 	andi	r2,r2,255
 800448c:	1080201c 	xori	r2,r2,128
 8004490:	10bfe004 	addi	r2,r2,-128
 8004494:	00c01604 	movi	r3,88
 8004498:	10ff9c1e 	bne	r2,r3,800430c <__alt_data_end+0xfc00430c>
 800449c:	05c00404 	movi	r23,16
 80044a0:	8c800047 	ldb	r18,1(r17)
 80044a4:	b82d883a 	mov	r22,r23
 80044a8:	8c400084 	addi	r17,r17,2
 80044ac:	003f9d06 	br	8004324 <__alt_data_end+0xfc004324>
 80044b0:	88c00003 	ldbu	r3,0(r17)
 80044b4:	00bff7c4 	movi	r2,-33
 80044b8:	1884703a 	and	r2,r3,r2
 80044bc:	10803fcc 	andi	r2,r2,255
 80044c0:	1080201c 	xori	r2,r2,128
 80044c4:	10bfe004 	addi	r2,r2,-128
 80044c8:	00c01604 	movi	r3,88
 80044cc:	10fff326 	beq	r2,r3,800449c <__alt_data_end+0xfc00449c>
 80044d0:	05800204 	movi	r22,8
 80044d4:	b02f883a 	mov	r23,r22
 80044d8:	003f9206 	br	8004324 <__alt_data_end+0xfc004324>

080044dc <strtol>:
 80044dc:	2007883a 	mov	r3,r4
 80044e0:	010200b4 	movhi	r4,2050
 80044e4:	213e0b04 	addi	r4,r4,-2004
 80044e8:	21000017 	ldw	r4,0(r4)
 80044ec:	2805883a 	mov	r2,r5
 80044f0:	300f883a 	mov	r7,r6
 80044f4:	180b883a 	mov	r5,r3
 80044f8:	100d883a 	mov	r6,r2
 80044fc:	800427c1 	jmpi	800427c <_strtol_r>

08004500 <___vfprintf_internal_r>:
 8004500:	defeb604 	addi	sp,sp,-1320
 8004504:	dfc14915 	stw	ra,1316(sp)
 8004508:	ddc14715 	stw	r23,1308(sp)
 800450c:	dd814615 	stw	r22,1304(sp)
 8004510:	282f883a 	mov	r23,r5
 8004514:	202d883a 	mov	r22,r4
 8004518:	d9812a15 	stw	r6,1192(sp)
 800451c:	d9c12d15 	stw	r7,1204(sp)
 8004520:	df014815 	stw	fp,1312(sp)
 8004524:	dd414515 	stw	r21,1300(sp)
 8004528:	dd014415 	stw	r20,1296(sp)
 800452c:	dcc14315 	stw	r19,1292(sp)
 8004530:	dc814215 	stw	r18,1288(sp)
 8004534:	dc414115 	stw	r17,1284(sp)
 8004538:	dc014015 	stw	r16,1280(sp)
 800453c:	80090440 	call	8009044 <_localeconv_r>
 8004540:	10800017 	ldw	r2,0(r2)
 8004544:	1009883a 	mov	r4,r2
 8004548:	d8813515 	stw	r2,1236(sp)
 800454c:	80041e40 	call	80041e4 <strlen>
 8004550:	d8813815 	stw	r2,1248(sp)
 8004554:	b0000226 	beq	r22,zero,8004560 <___vfprintf_internal_r+0x60>
 8004558:	b0800e17 	ldw	r2,56(r22)
 800455c:	10010426 	beq	r2,zero,8004970 <___vfprintf_internal_r+0x470>
 8004560:	b8c0030b 	ldhu	r3,12(r23)
 8004564:	1908000c 	andi	r4,r3,8192
 8004568:	1805883a 	mov	r2,r3
 800456c:	2000071e 	bne	r4,zero,800458c <___vfprintf_internal_r+0x8c>
 8004570:	b9001917 	ldw	r4,100(r23)
 8004574:	18880014 	ori	r2,r3,8192
 8004578:	00f7ffc4 	movi	r3,-8193
 800457c:	20c8703a 	and	r4,r4,r3
 8004580:	b880030d 	sth	r2,12(r23)
 8004584:	1007883a 	mov	r3,r2
 8004588:	b9001915 	stw	r4,100(r23)
 800458c:	1100020c 	andi	r4,r2,8
 8004590:	2000a726 	beq	r4,zero,8004830 <___vfprintf_internal_r+0x330>
 8004594:	b9000417 	ldw	r4,16(r23)
 8004598:	2000a526 	beq	r4,zero,8004830 <___vfprintf_internal_r+0x330>
 800459c:	1080068c 	andi	r2,r2,26
 80045a0:	01000284 	movi	r4,10
 80045a4:	1100ab26 	beq	r2,r4,8004854 <___vfprintf_internal_r+0x354>
 80045a8:	dac10e04 	addi	r11,sp,1080
 80045ac:	db010dc4 	addi	r12,sp,1079
 80045b0:	d8800404 	addi	r2,sp,16
 80045b4:	050200b4 	movhi	r20,2050
 80045b8:	dac12815 	stw	r11,1184(sp)
 80045bc:	5b17c83a 	sub	r11,r11,r12
 80045c0:	a535e484 	addi	r20,r20,-10350
 80045c4:	db012915 	stw	r12,1188(sp)
 80045c8:	d8811e15 	stw	r2,1144(sp)
 80045cc:	d8012015 	stw	zero,1152(sp)
 80045d0:	d8011f15 	stw	zero,1148(sp)
 80045d4:	d8013315 	stw	zero,1228(sp)
 80045d8:	d8013715 	stw	zero,1244(sp)
 80045dc:	d8013915 	stw	zero,1252(sp)
 80045e0:	d8013b15 	stw	zero,1260(sp)
 80045e4:	d8013a15 	stw	zero,1256(sp)
 80045e8:	d8012f15 	stw	zero,1212(sp)
 80045ec:	1011883a 	mov	r8,r2
 80045f0:	dac13c15 	stw	r11,1264(sp)
 80045f4:	db012a17 	ldw	r12,1192(sp)
 80045f8:	60800007 	ldb	r2,0(r12)
 80045fc:	1000df26 	beq	r2,zero,800497c <___vfprintf_internal_r+0x47c>
 8004600:	00c00944 	movi	r3,37
 8004604:	10c0dd26 	beq	r2,r3,800497c <___vfprintf_internal_r+0x47c>
 8004608:	6021883a 	mov	r16,r12
 800460c:	00000106 	br	8004614 <___vfprintf_internal_r+0x114>
 8004610:	10c08426 	beq	r2,r3,8004824 <___vfprintf_internal_r+0x324>
 8004614:	84000044 	addi	r16,r16,1
 8004618:	80800007 	ldb	r2,0(r16)
 800461c:	103ffc1e 	bne	r2,zero,8004610 <__alt_data_end+0xfc004610>
 8004620:	dac12a17 	ldw	r11,1192(sp)
 8004624:	82e3c83a 	sub	r17,r16,r11
 8004628:	88000f26 	beq	r17,zero,8004668 <___vfprintf_internal_r+0x168>
 800462c:	d8c12017 	ldw	r3,1152(sp)
 8004630:	d8811f17 	ldw	r2,1148(sp)
 8004634:	dac12a17 	ldw	r11,1192(sp)
 8004638:	1c47883a 	add	r3,r3,r17
 800463c:	10800044 	addi	r2,r2,1
 8004640:	d8c12015 	stw	r3,1152(sp)
 8004644:	42c00015 	stw	r11,0(r8)
 8004648:	44400115 	stw	r17,4(r8)
 800464c:	d8811f15 	stw	r2,1148(sp)
 8004650:	00c001c4 	movi	r3,7
 8004654:	1880b416 	blt	r3,r2,8004928 <___vfprintf_internal_r+0x428>
 8004658:	42000204 	addi	r8,r8,8
 800465c:	db012f17 	ldw	r12,1212(sp)
 8004660:	6459883a 	add	r12,r12,r17
 8004664:	db012f15 	stw	r12,1212(sp)
 8004668:	80800007 	ldb	r2,0(r16)
 800466c:	1000b526 	beq	r2,zero,8004944 <___vfprintf_internal_r+0x444>
 8004670:	80800044 	addi	r2,r16,1
 8004674:	84000047 	ldb	r16,1(r16)
 8004678:	d8012785 	stb	zero,1182(sp)
 800467c:	000d883a 	mov	r6,zero
 8004680:	027fffc4 	movi	r9,-1
 8004684:	d8012e15 	stw	zero,1208(sp)
 8004688:	0023883a 	mov	r17,zero
 800468c:	01001604 	movi	r4,88
 8004690:	01400244 	movi	r5,9
 8004694:	02800a84 	movi	r10,42
 8004698:	01c01b04 	movi	r7,108
 800469c:	10c00044 	addi	r3,r2,1
 80046a0:	80bff804 	addi	r2,r16,-32
 80046a4:	2082f236 	bltu	r4,r2,8005270 <___vfprintf_internal_r+0xd70>
 80046a8:	100490ba 	slli	r2,r2,2
 80046ac:	02c20034 	movhi	r11,2048
 80046b0:	5ad1b004 	addi	r11,r11,18112
 80046b4:	12c5883a 	add	r2,r2,r11
 80046b8:	10800017 	ldw	r2,0(r2)
 80046bc:	1000683a 	jmp	r2
 80046c0:	080050b8 	rdprs	zero,at,322
 80046c4:	08005270 	cmpltui	zero,at,329
 80046c8:	08005270 	cmpltui	zero,at,329
 80046cc:	080050d8 	cmpnei	zero,at,323
 80046d0:	08005270 	cmpltui	zero,at,329
 80046d4:	08005270 	cmpltui	zero,at,329
 80046d8:	08005270 	cmpltui	zero,at,329
 80046dc:	08005270 	cmpltui	zero,at,329
 80046e0:	08005270 	cmpltui	zero,at,329
 80046e4:	08005270 	cmpltui	zero,at,329
 80046e8:	08005234 	orhi	zero,at,328
 80046ec:	08005260 	cmpeqi	zero,at,329
 80046f0:	08005270 	cmpltui	zero,at,329
 80046f4:	08004984 	addi	zero,at,294
 80046f8:	08004994 	ori	zero,at,294
 80046fc:	08005270 	cmpltui	zero,at,329
 8004700:	080049d4 	ori	zero,at,295
 8004704:	08004ec8 	cmpgei	zero,at,315
 8004708:	08004ec8 	cmpgei	zero,at,315
 800470c:	08004ec8 	cmpgei	zero,at,315
 8004710:	08004ec8 	cmpgei	zero,at,315
 8004714:	08004ec8 	cmpgei	zero,at,315
 8004718:	08004ec8 	cmpgei	zero,at,315
 800471c:	08004ec8 	cmpgei	zero,at,315
 8004720:	08004ec8 	cmpgei	zero,at,315
 8004724:	08004ec8 	cmpgei	zero,at,315
 8004728:	08005270 	cmpltui	zero,at,329
 800472c:	08005270 	cmpltui	zero,at,329
 8004730:	08005270 	cmpltui	zero,at,329
 8004734:	08005270 	cmpltui	zero,at,329
 8004738:	08005270 	cmpltui	zero,at,329
 800473c:	08005270 	cmpltui	zero,at,329
 8004740:	08005270 	cmpltui	zero,at,329
 8004744:	08005270 	cmpltui	zero,at,329
 8004748:	08005270 	cmpltui	zero,at,329
 800474c:	08005270 	cmpltui	zero,at,329
 8004750:	08004efc 	xorhi	zero,at,315
 8004754:	080049e4 	muli	zero,at,295
 8004758:	08005270 	cmpltui	zero,at,329
 800475c:	080049e4 	muli	zero,at,295
 8004760:	08005270 	cmpltui	zero,at,329
 8004764:	08005270 	cmpltui	zero,at,329
 8004768:	08005270 	cmpltui	zero,at,329
 800476c:	08005270 	cmpltui	zero,at,329
 8004770:	08004a88 	cmpgei	zero,at,298
 8004774:	08005270 	cmpltui	zero,at,329
 8004778:	08005270 	cmpltui	zero,at,329
 800477c:	08004a98 	cmpnei	zero,at,298
 8004780:	08005270 	cmpltui	zero,at,329
 8004784:	08005270 	cmpltui	zero,at,329
 8004788:	08005270 	cmpltui	zero,at,329
 800478c:	08005270 	cmpltui	zero,at,329
 8004790:	08005270 	cmpltui	zero,at,329
 8004794:	08004e94 	ori	zero,at,314
 8004798:	08005270 	cmpltui	zero,at,329
 800479c:	08005270 	cmpltui	zero,at,329
 80047a0:	08004f44 	addi	zero,at,317
 80047a4:	08005270 	cmpltui	zero,at,329
 80047a8:	08005270 	cmpltui	zero,at,329
 80047ac:	08005270 	cmpltui	zero,at,329
 80047b0:	08005270 	cmpltui	zero,at,329
 80047b4:	08005270 	cmpltui	zero,at,329
 80047b8:	08005270 	cmpltui	zero,at,329
 80047bc:	08005270 	cmpltui	zero,at,329
 80047c0:	08005270 	cmpltui	zero,at,329
 80047c4:	08005270 	cmpltui	zero,at,329
 80047c8:	08005270 	cmpltui	zero,at,329
 80047cc:	08005138 	rdprs	zero,at,324
 80047d0:	080050e8 	cmpgeui	zero,at,323
 80047d4:	080049e4 	muli	zero,at,295
 80047d8:	080049e4 	muli	zero,at,295
 80047dc:	080049e4 	muli	zero,at,295
 80047e0:	08005128 	cmpgeui	zero,at,324
 80047e4:	080050e8 	cmpgeui	zero,at,323
 80047e8:	08005270 	cmpltui	zero,at,329
 80047ec:	08005270 	cmpltui	zero,at,329
 80047f0:	08005030 	cmpltui	zero,at,320
 80047f4:	08005270 	cmpltui	zero,at,329
 80047f8:	08005044 	addi	zero,at,321
 80047fc:	08005078 	rdprs	zero,at,321
 8004800:	08005178 	rdprs	zero,at,325
 8004804:	08004fa0 	cmpeqi	zero,at,318
 8004808:	08005270 	cmpltui	zero,at,329
 800480c:	080051c0 	call	80051c <__alt_mem_sdram-0x77ffae4>
 8004810:	08005270 	cmpltui	zero,at,329
 8004814:	08004fb0 	cmpltui	zero,at,318
 8004818:	08005270 	cmpltui	zero,at,329
 800481c:	08005270 	cmpltui	zero,at,329
 8004820:	08004ff0 	cmpltui	zero,at,319
 8004824:	db012a17 	ldw	r12,1192(sp)
 8004828:	8323c83a 	sub	r17,r16,r12
 800482c:	003f7e06 	br	8004628 <__alt_data_end+0xfc004628>
 8004830:	b009883a 	mov	r4,r22
 8004834:	b80b883a 	mov	r5,r23
 8004838:	80065200 	call	8006520 <__swsetup_r>
 800483c:	10002d1e 	bne	r2,zero,80048f4 <___vfprintf_internal_r+0x3f4>
 8004840:	b8c0030b 	ldhu	r3,12(r23)
 8004844:	01000284 	movi	r4,10
 8004848:	1805883a 	mov	r2,r3
 800484c:	1080068c 	andi	r2,r2,26
 8004850:	113f551e 	bne	r2,r4,80045a8 <__alt_data_end+0xfc0045a8>
 8004854:	b880038b 	ldhu	r2,14(r23)
 8004858:	113fffcc 	andi	r4,r2,65535
 800485c:	2120001c 	xori	r4,r4,32768
 8004860:	21200004 	addi	r4,r4,-32768
 8004864:	203f5016 	blt	r4,zero,80045a8 <__alt_data_end+0xfc0045a8>
 8004868:	bac01917 	ldw	r11,100(r23)
 800486c:	ba800717 	ldw	r10,28(r23)
 8004870:	ba400917 	ldw	r9,36(r23)
 8004874:	d9812a17 	ldw	r6,1192(sp)
 8004878:	d9c12d17 	ldw	r7,1204(sp)
 800487c:	02010004 	movi	r8,1024
 8004880:	18ffff4c 	andi	r3,r3,65533
 8004884:	d881078d 	sth	r2,1054(sp)
 8004888:	b009883a 	mov	r4,r22
 800488c:	d8800404 	addi	r2,sp,16
 8004890:	d9410404 	addi	r5,sp,1040
 8004894:	d8c1070d 	sth	r3,1052(sp)
 8004898:	dac11d15 	stw	r11,1140(sp)
 800489c:	da810b15 	stw	r10,1068(sp)
 80048a0:	da410d15 	stw	r9,1076(sp)
 80048a4:	d8810415 	stw	r2,1040(sp)
 80048a8:	d8810815 	stw	r2,1056(sp)
 80048ac:	da010615 	stw	r8,1048(sp)
 80048b0:	da010915 	stw	r8,1060(sp)
 80048b4:	d8010a15 	stw	zero,1064(sp)
 80048b8:	80045000 	call	8004500 <___vfprintf_internal_r>
 80048bc:	1021883a 	mov	r16,r2
 80048c0:	10000416 	blt	r2,zero,80048d4 <___vfprintf_internal_r+0x3d4>
 80048c4:	b009883a 	mov	r4,r22
 80048c8:	d9410404 	addi	r5,sp,1040
 80048cc:	8007f780 	call	8007f78 <_fflush_r>
 80048d0:	1006ee1e 	bne	r2,zero,800648c <___vfprintf_internal_r+0x1f8c>
 80048d4:	d881070b 	ldhu	r2,1052(sp)
 80048d8:	1080100c 	andi	r2,r2,64
 80048dc:	10000326 	beq	r2,zero,80048ec <___vfprintf_internal_r+0x3ec>
 80048e0:	b880030b 	ldhu	r2,12(r23)
 80048e4:	10801014 	ori	r2,r2,64
 80048e8:	b880030d 	sth	r2,12(r23)
 80048ec:	8005883a 	mov	r2,r16
 80048f0:	00000106 	br	80048f8 <___vfprintf_internal_r+0x3f8>
 80048f4:	00bfffc4 	movi	r2,-1
 80048f8:	dfc14917 	ldw	ra,1316(sp)
 80048fc:	df014817 	ldw	fp,1312(sp)
 8004900:	ddc14717 	ldw	r23,1308(sp)
 8004904:	dd814617 	ldw	r22,1304(sp)
 8004908:	dd414517 	ldw	r21,1300(sp)
 800490c:	dd014417 	ldw	r20,1296(sp)
 8004910:	dcc14317 	ldw	r19,1292(sp)
 8004914:	dc814217 	ldw	r18,1288(sp)
 8004918:	dc414117 	ldw	r17,1284(sp)
 800491c:	dc014017 	ldw	r16,1280(sp)
 8004920:	dec14a04 	addi	sp,sp,1320
 8004924:	f800283a 	ret
 8004928:	b009883a 	mov	r4,r22
 800492c:	b80b883a 	mov	r5,r23
 8004930:	d9811e04 	addi	r6,sp,1144
 8004934:	800b7780 	call	800b778 <__sprint_r>
 8004938:	1000081e 	bne	r2,zero,800495c <___vfprintf_internal_r+0x45c>
 800493c:	da000404 	addi	r8,sp,16
 8004940:	003f4606 	br	800465c <__alt_data_end+0xfc00465c>
 8004944:	d8812017 	ldw	r2,1152(sp)
 8004948:	10000426 	beq	r2,zero,800495c <___vfprintf_internal_r+0x45c>
 800494c:	b009883a 	mov	r4,r22
 8004950:	b80b883a 	mov	r5,r23
 8004954:	d9811e04 	addi	r6,sp,1144
 8004958:	800b7780 	call	800b778 <__sprint_r>
 800495c:	b880030b 	ldhu	r2,12(r23)
 8004960:	1080100c 	andi	r2,r2,64
 8004964:	103fe31e 	bne	r2,zero,80048f4 <__alt_data_end+0xfc0048f4>
 8004968:	d8812f17 	ldw	r2,1212(sp)
 800496c:	003fe206 	br	80048f8 <__alt_data_end+0xfc0048f8>
 8004970:	b009883a 	mov	r4,r22
 8004974:	80085200 	call	8008520 <__sinit>
 8004978:	003ef906 	br	8004560 <__alt_data_end+0xfc004560>
 800497c:	dc012a17 	ldw	r16,1192(sp)
 8004980:	003f3906 	br	8004668 <__alt_data_end+0xfc004668>
 8004984:	1805883a 	mov	r2,r3
 8004988:	8c400114 	ori	r17,r17,4
 800498c:	1c000007 	ldb	r16,0(r3)
 8004990:	003f4206 	br	800469c <__alt_data_end+0xfc00469c>
 8004994:	1c000007 	ldb	r16,0(r3)
 8004998:	18800044 	addi	r2,r3,1
 800499c:	8286b326 	beq	r16,r10,800646c <___vfprintf_internal_r+0x1f6c>
 80049a0:	82fff404 	addi	r11,r16,-48
 80049a4:	1007883a 	mov	r3,r2
 80049a8:	0013883a 	mov	r9,zero
 80049ac:	2aff3c36 	bltu	r5,r11,80046a0 <__alt_data_end+0xfc0046a0>
 80049b0:	1c000007 	ldb	r16,0(r3)
 80049b4:	4a4002a4 	muli	r9,r9,10
 80049b8:	18c00044 	addi	r3,r3,1
 80049bc:	5a53883a 	add	r9,r11,r9
 80049c0:	82fff404 	addi	r11,r16,-48
 80049c4:	2afffa2e 	bgeu	r5,r11,80049b0 <__alt_data_end+0xfc0049b0>
 80049c8:	483f350e 	bge	r9,zero,80046a0 <__alt_data_end+0xfc0046a0>
 80049cc:	027fffc4 	movi	r9,-1
 80049d0:	003f3306 	br	80046a0 <__alt_data_end+0xfc0046a0>
 80049d4:	8c402014 	ori	r17,r17,128
 80049d8:	1805883a 	mov	r2,r3
 80049dc:	1c000007 	ldb	r16,0(r3)
 80049e0:	003f2e06 	br	800469c <__alt_data_end+0xfc00469c>
 80049e4:	db012d17 	ldw	r12,1204(sp)
 80049e8:	dac12d17 	ldw	r11,1204(sp)
 80049ec:	d8c12a15 	stw	r3,1192(sp)
 80049f0:	63000017 	ldw	r12,0(r12)
 80049f4:	5ac00117 	ldw	r11,4(r11)
 80049f8:	d9812785 	stb	r6,1182(sp)
 80049fc:	6009883a 	mov	r4,r12
 8004a00:	580b883a 	mov	r5,r11
 8004a04:	db013715 	stw	r12,1244(sp)
 8004a08:	da013f15 	stw	r8,1276(sp)
 8004a0c:	da413e15 	stw	r9,1272(sp)
 8004a10:	dac13915 	stw	r11,1252(sp)
 8004a14:	800b3d40 	call	800b3d4 <__fpclassifyd>
 8004a18:	db012d17 	ldw	r12,1204(sp)
 8004a1c:	04800044 	movi	r18,1
 8004a20:	da013f17 	ldw	r8,1276(sp)
 8004a24:	64c00204 	addi	r19,r12,8
 8004a28:	da413e17 	ldw	r9,1272(sp)
 8004a2c:	d9013717 	ldw	r4,1244(sp)
 8004a30:	d9413917 	ldw	r5,1252(sp)
 8004a34:	1484581e 	bne	r2,r18,8005b98 <___vfprintf_internal_r+0x1698>
 8004a38:	000d883a 	mov	r6,zero
 8004a3c:	000f883a 	mov	r7,zero
 8004a40:	800f3900 	call	800f390 <__ledf2>
 8004a44:	da013f17 	ldw	r8,1276(sp)
 8004a48:	1005ef16 	blt	r2,zero,8006208 <___vfprintf_internal_r+0x1d08>
 8004a4c:	dd412783 	ldbu	r21,1182(sp)
 8004a50:	008011c4 	movi	r2,71
 8004a54:	14053b0e 	bge	r2,r16,8005f44 <___vfprintf_internal_r+0x1a44>
 8004a58:	00c200b4 	movhi	r3,2050
 8004a5c:	18f5d504 	addi	r3,r3,-10412
 8004a60:	d8c13115 	stw	r3,1220(sp)
 8004a64:	02c000c4 	movi	r11,3
 8004a68:	00bfdfc4 	movi	r2,-129
 8004a6c:	dac12b15 	stw	r11,1196(sp)
 8004a70:	88a2703a 	and	r17,r17,r2
 8004a74:	dcc12d15 	stw	r19,1204(sp)
 8004a78:	5825883a 	mov	r18,r11
 8004a7c:	d8013215 	stw	zero,1224(sp)
 8004a80:	d8013415 	stw	zero,1232(sp)
 8004a84:	00003206 	br	8004b50 <___vfprintf_internal_r+0x650>
 8004a88:	8c400214 	ori	r17,r17,8
 8004a8c:	1805883a 	mov	r2,r3
 8004a90:	1c000007 	ldb	r16,0(r3)
 8004a94:	003f0106 	br	800469c <__alt_data_end+0xfc00469c>
 8004a98:	8c400414 	ori	r17,r17,16
 8004a9c:	d8c12a15 	stw	r3,1192(sp)
 8004aa0:	88c0080c 	andi	r3,r17,32
 8004aa4:	d8812d17 	ldw	r2,1204(sp)
 8004aa8:	18017726 	beq	r3,zero,8005088 <___vfprintf_internal_r+0xb88>
 8004aac:	db012d17 	ldw	r12,1204(sp)
 8004ab0:	14c00017 	ldw	r19,0(r2)
 8004ab4:	17000117 	ldw	fp,4(r2)
 8004ab8:	63000204 	addi	r12,r12,8
 8004abc:	db012d15 	stw	r12,1204(sp)
 8004ac0:	0005883a 	mov	r2,zero
 8004ac4:	9f06b03a 	or	r3,r19,fp
 8004ac8:	d8012785 	stb	zero,1182(sp)
 8004acc:	da413215 	stw	r9,1224(sp)
 8004ad0:	002b883a 	mov	r21,zero
 8004ad4:	48000216 	blt	r9,zero,8004ae0 <___vfprintf_internal_r+0x5e0>
 8004ad8:	013fdfc4 	movi	r4,-129
 8004adc:	8922703a 	and	r17,r17,r4
 8004ae0:	1801ed1e 	bne	r3,zero,8005298 <___vfprintf_internal_r+0xd98>
 8004ae4:	4802e026 	beq	r9,zero,8005668 <___vfprintf_internal_r+0x1168>
 8004ae8:	10803fcc 	andi	r2,r2,255
 8004aec:	00c00044 	movi	r3,1
 8004af0:	10c20f26 	beq	r2,r3,8005330 <___vfprintf_internal_r+0xe30>
 8004af4:	00c00084 	movi	r3,2
 8004af8:	10c2fd26 	beq	r2,r3,80056f0 <___vfprintf_internal_r+0x11f0>
 8004afc:	d8c10e04 	addi	r3,sp,1080
 8004b00:	9808d0fa 	srli	r4,r19,3
 8004b04:	e00a977a 	slli	r5,fp,29
 8004b08:	e038d0fa 	srli	fp,fp,3
 8004b0c:	9cc001cc 	andi	r19,r19,7
 8004b10:	98800c04 	addi	r2,r19,48
 8004b14:	18ffffc4 	addi	r3,r3,-1
 8004b18:	2926b03a 	or	r19,r5,r4
 8004b1c:	18800005 	stb	r2,0(r3)
 8004b20:	9f08b03a 	or	r4,r19,fp
 8004b24:	203ff61e 	bne	r4,zero,8004b00 <__alt_data_end+0xfc004b00>
 8004b28:	8900004c 	andi	r4,r17,1
 8004b2c:	d8c13115 	stw	r3,1220(sp)
 8004b30:	2003791e 	bne	r4,zero,8005918 <___vfprintf_internal_r+0x1418>
 8004b34:	dac12817 	ldw	r11,1184(sp)
 8004b38:	58e5c83a 	sub	r18,r11,r3
 8004b3c:	9005883a 	mov	r2,r18
 8004b40:	9240010e 	bge	r18,r9,8004b48 <___vfprintf_internal_r+0x648>
 8004b44:	4805883a 	mov	r2,r9
 8004b48:	d8812b15 	stw	r2,1196(sp)
 8004b4c:	d8013415 	stw	zero,1232(sp)
 8004b50:	a8803fcc 	andi	r2,r21,255
 8004b54:	1080201c 	xori	r2,r2,128
 8004b58:	10bfe004 	addi	r2,r2,-128
 8004b5c:	10000326 	beq	r2,zero,8004b6c <___vfprintf_internal_r+0x66c>
 8004b60:	db012b17 	ldw	r12,1196(sp)
 8004b64:	63000044 	addi	r12,r12,1
 8004b68:	db012b15 	stw	r12,1196(sp)
 8004b6c:	88c0008c 	andi	r3,r17,2
 8004b70:	d8c12c15 	stw	r3,1200(sp)
 8004b74:	18000326 	beq	r3,zero,8004b84 <___vfprintf_internal_r+0x684>
 8004b78:	dac12b17 	ldw	r11,1196(sp)
 8004b7c:	5ac00084 	addi	r11,r11,2
 8004b80:	dac12b15 	stw	r11,1196(sp)
 8004b84:	8b00210c 	andi	r12,r17,132
 8004b88:	db013015 	stw	r12,1216(sp)
 8004b8c:	6001c01e 	bne	r12,zero,8005290 <___vfprintf_internal_r+0xd90>
 8004b90:	dac12e17 	ldw	r11,1208(sp)
 8004b94:	db012b17 	ldw	r12,1196(sp)
 8004b98:	5b39c83a 	sub	fp,r11,r12
 8004b9c:	0701bc0e 	bge	zero,fp,8005290 <___vfprintf_internal_r+0xd90>
 8004ba0:	02400404 	movi	r9,16
 8004ba4:	d8c12017 	ldw	r3,1152(sp)
 8004ba8:	d8811f17 	ldw	r2,1148(sp)
 8004bac:	4f05220e 	bge	r9,fp,8006038 <___vfprintf_internal_r+0x1b38>
 8004bb0:	014200b4 	movhi	r5,2050
 8004bb4:	2975e884 	addi	r5,r5,-10334
 8004bb8:	d9413615 	stw	r5,1240(sp)
 8004bbc:	482b883a 	mov	r21,r9
 8004bc0:	04c001c4 	movi	r19,7
 8004bc4:	00000306 	br	8004bd4 <___vfprintf_internal_r+0x6d4>
 8004bc8:	e73ffc04 	addi	fp,fp,-16
 8004bcc:	42000204 	addi	r8,r8,8
 8004bd0:	af00130e 	bge	r21,fp,8004c20 <___vfprintf_internal_r+0x720>
 8004bd4:	02c200b4 	movhi	r11,2050
 8004bd8:	18c00404 	addi	r3,r3,16
 8004bdc:	10800044 	addi	r2,r2,1
 8004be0:	5af5e884 	addi	r11,r11,-10334
 8004be4:	42c00015 	stw	r11,0(r8)
 8004be8:	45400115 	stw	r21,4(r8)
 8004bec:	d8c12015 	stw	r3,1152(sp)
 8004bf0:	d8811f15 	stw	r2,1148(sp)
 8004bf4:	98bff40e 	bge	r19,r2,8004bc8 <__alt_data_end+0xfc004bc8>
 8004bf8:	b009883a 	mov	r4,r22
 8004bfc:	b80b883a 	mov	r5,r23
 8004c00:	d9811e04 	addi	r6,sp,1144
 8004c04:	800b7780 	call	800b778 <__sprint_r>
 8004c08:	103f541e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8004c0c:	e73ffc04 	addi	fp,fp,-16
 8004c10:	d8c12017 	ldw	r3,1152(sp)
 8004c14:	d8811f17 	ldw	r2,1148(sp)
 8004c18:	da000404 	addi	r8,sp,16
 8004c1c:	af3fed16 	blt	r21,fp,8004bd4 <__alt_data_end+0xfc004bd4>
 8004c20:	db013617 	ldw	r12,1240(sp)
 8004c24:	e0c7883a 	add	r3,fp,r3
 8004c28:	10800044 	addi	r2,r2,1
 8004c2c:	43000015 	stw	r12,0(r8)
 8004c30:	47000115 	stw	fp,4(r8)
 8004c34:	d8c12015 	stw	r3,1152(sp)
 8004c38:	d8811f15 	stw	r2,1148(sp)
 8004c3c:	010001c4 	movi	r4,7
 8004c40:	2082f416 	blt	r4,r2,8005814 <___vfprintf_internal_r+0x1314>
 8004c44:	d8812787 	ldb	r2,1182(sp)
 8004c48:	42000204 	addi	r8,r8,8
 8004c4c:	10000c26 	beq	r2,zero,8004c80 <___vfprintf_internal_r+0x780>
 8004c50:	d8811f17 	ldw	r2,1148(sp)
 8004c54:	d9012784 	addi	r4,sp,1182
 8004c58:	18c00044 	addi	r3,r3,1
 8004c5c:	10800044 	addi	r2,r2,1
 8004c60:	41000015 	stw	r4,0(r8)
 8004c64:	01000044 	movi	r4,1
 8004c68:	41000115 	stw	r4,4(r8)
 8004c6c:	d8c12015 	stw	r3,1152(sp)
 8004c70:	d8811f15 	stw	r2,1148(sp)
 8004c74:	010001c4 	movi	r4,7
 8004c78:	20828d16 	blt	r4,r2,80056b0 <___vfprintf_internal_r+0x11b0>
 8004c7c:	42000204 	addi	r8,r8,8
 8004c80:	dac12c17 	ldw	r11,1200(sp)
 8004c84:	58000c26 	beq	r11,zero,8004cb8 <___vfprintf_internal_r+0x7b8>
 8004c88:	d8811f17 	ldw	r2,1148(sp)
 8004c8c:	d9012704 	addi	r4,sp,1180
 8004c90:	18c00084 	addi	r3,r3,2
 8004c94:	10800044 	addi	r2,r2,1
 8004c98:	41000015 	stw	r4,0(r8)
 8004c9c:	01000084 	movi	r4,2
 8004ca0:	41000115 	stw	r4,4(r8)
 8004ca4:	d8c12015 	stw	r3,1152(sp)
 8004ca8:	d8811f15 	stw	r2,1148(sp)
 8004cac:	010001c4 	movi	r4,7
 8004cb0:	20828716 	blt	r4,r2,80056d0 <___vfprintf_internal_r+0x11d0>
 8004cb4:	42000204 	addi	r8,r8,8
 8004cb8:	db013017 	ldw	r12,1216(sp)
 8004cbc:	00802004 	movi	r2,128
 8004cc0:	6081e926 	beq	r12,r2,8005468 <___vfprintf_internal_r+0xf68>
 8004cc4:	db013217 	ldw	r12,1224(sp)
 8004cc8:	64abc83a 	sub	r21,r12,r18
 8004ccc:	0540260e 	bge	zero,r21,8004d68 <___vfprintf_internal_r+0x868>
 8004cd0:	07000404 	movi	fp,16
 8004cd4:	d8811f17 	ldw	r2,1148(sp)
 8004cd8:	e5443d0e 	bge	fp,r21,8005dd0 <___vfprintf_internal_r+0x18d0>
 8004cdc:	014200b4 	movhi	r5,2050
 8004ce0:	2975e484 	addi	r5,r5,-10350
 8004ce4:	d9412c15 	stw	r5,1200(sp)
 8004ce8:	04c001c4 	movi	r19,7
 8004cec:	00000306 	br	8004cfc <___vfprintf_internal_r+0x7fc>
 8004cf0:	ad7ffc04 	addi	r21,r21,-16
 8004cf4:	42000204 	addi	r8,r8,8
 8004cf8:	e540110e 	bge	fp,r21,8004d40 <___vfprintf_internal_r+0x840>
 8004cfc:	18c00404 	addi	r3,r3,16
 8004d00:	10800044 	addi	r2,r2,1
 8004d04:	45000015 	stw	r20,0(r8)
 8004d08:	47000115 	stw	fp,4(r8)
 8004d0c:	d8c12015 	stw	r3,1152(sp)
 8004d10:	d8811f15 	stw	r2,1148(sp)
 8004d14:	98bff60e 	bge	r19,r2,8004cf0 <__alt_data_end+0xfc004cf0>
 8004d18:	b009883a 	mov	r4,r22
 8004d1c:	b80b883a 	mov	r5,r23
 8004d20:	d9811e04 	addi	r6,sp,1144
 8004d24:	800b7780 	call	800b778 <__sprint_r>
 8004d28:	103f0c1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8004d2c:	ad7ffc04 	addi	r21,r21,-16
 8004d30:	d8c12017 	ldw	r3,1152(sp)
 8004d34:	d8811f17 	ldw	r2,1148(sp)
 8004d38:	da000404 	addi	r8,sp,16
 8004d3c:	e57fef16 	blt	fp,r21,8004cfc <__alt_data_end+0xfc004cfc>
 8004d40:	dac12c17 	ldw	r11,1200(sp)
 8004d44:	1d47883a 	add	r3,r3,r21
 8004d48:	10800044 	addi	r2,r2,1
 8004d4c:	42c00015 	stw	r11,0(r8)
 8004d50:	45400115 	stw	r21,4(r8)
 8004d54:	d8c12015 	stw	r3,1152(sp)
 8004d58:	d8811f15 	stw	r2,1148(sp)
 8004d5c:	010001c4 	movi	r4,7
 8004d60:	20824b16 	blt	r4,r2,8005690 <___vfprintf_internal_r+0x1190>
 8004d64:	42000204 	addi	r8,r8,8
 8004d68:	8880400c 	andi	r2,r17,256
 8004d6c:	1001761e 	bne	r2,zero,8005348 <___vfprintf_internal_r+0xe48>
 8004d70:	d8811f17 	ldw	r2,1148(sp)
 8004d74:	db013117 	ldw	r12,1220(sp)
 8004d78:	1c87883a 	add	r3,r3,r18
 8004d7c:	10800044 	addi	r2,r2,1
 8004d80:	43000015 	stw	r12,0(r8)
 8004d84:	44800115 	stw	r18,4(r8)
 8004d88:	d8c12015 	stw	r3,1152(sp)
 8004d8c:	d8811f15 	stw	r2,1148(sp)
 8004d90:	010001c4 	movi	r4,7
 8004d94:	20822616 	blt	r4,r2,8005630 <___vfprintf_internal_r+0x1130>
 8004d98:	42000204 	addi	r8,r8,8
 8004d9c:	8c40010c 	andi	r17,r17,4
 8004da0:	88003126 	beq	r17,zero,8004e68 <___vfprintf_internal_r+0x968>
 8004da4:	db012e17 	ldw	r12,1208(sp)
 8004da8:	dac12b17 	ldw	r11,1196(sp)
 8004dac:	62e1c83a 	sub	r16,r12,r11
 8004db0:	04002d0e 	bge	zero,r16,8004e68 <___vfprintf_internal_r+0x968>
 8004db4:	04400404 	movi	r17,16
 8004db8:	d8811f17 	ldw	r2,1148(sp)
 8004dbc:	8c04df0e 	bge	r17,r16,800613c <___vfprintf_internal_r+0x1c3c>
 8004dc0:	010200b4 	movhi	r4,2050
 8004dc4:	2135e884 	addi	r4,r4,-10334
 8004dc8:	d9013615 	stw	r4,1240(sp)
 8004dcc:	048001c4 	movi	r18,7
 8004dd0:	00000306 	br	8004de0 <___vfprintf_internal_r+0x8e0>
 8004dd4:	843ffc04 	addi	r16,r16,-16
 8004dd8:	42000204 	addi	r8,r8,8
 8004ddc:	8c00130e 	bge	r17,r16,8004e2c <___vfprintf_internal_r+0x92c>
 8004de0:	014200b4 	movhi	r5,2050
 8004de4:	18c00404 	addi	r3,r3,16
 8004de8:	10800044 	addi	r2,r2,1
 8004dec:	2975e884 	addi	r5,r5,-10334
 8004df0:	41400015 	stw	r5,0(r8)
 8004df4:	44400115 	stw	r17,4(r8)
 8004df8:	d8c12015 	stw	r3,1152(sp)
 8004dfc:	d8811f15 	stw	r2,1148(sp)
 8004e00:	90bff40e 	bge	r18,r2,8004dd4 <__alt_data_end+0xfc004dd4>
 8004e04:	b009883a 	mov	r4,r22
 8004e08:	b80b883a 	mov	r5,r23
 8004e0c:	d9811e04 	addi	r6,sp,1144
 8004e10:	800b7780 	call	800b778 <__sprint_r>
 8004e14:	103ed11e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8004e18:	843ffc04 	addi	r16,r16,-16
 8004e1c:	d8c12017 	ldw	r3,1152(sp)
 8004e20:	d8811f17 	ldw	r2,1148(sp)
 8004e24:	da000404 	addi	r8,sp,16
 8004e28:	8c3fed16 	blt	r17,r16,8004de0 <__alt_data_end+0xfc004de0>
 8004e2c:	dac13617 	ldw	r11,1240(sp)
 8004e30:	1c07883a 	add	r3,r3,r16
 8004e34:	10800044 	addi	r2,r2,1
 8004e38:	42c00015 	stw	r11,0(r8)
 8004e3c:	44000115 	stw	r16,4(r8)
 8004e40:	d8c12015 	stw	r3,1152(sp)
 8004e44:	d8811f15 	stw	r2,1148(sp)
 8004e48:	010001c4 	movi	r4,7
 8004e4c:	2080060e 	bge	r4,r2,8004e68 <___vfprintf_internal_r+0x968>
 8004e50:	b009883a 	mov	r4,r22
 8004e54:	b80b883a 	mov	r5,r23
 8004e58:	d9811e04 	addi	r6,sp,1144
 8004e5c:	800b7780 	call	800b778 <__sprint_r>
 8004e60:	103ebe1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8004e64:	d8c12017 	ldw	r3,1152(sp)
 8004e68:	d8812b17 	ldw	r2,1196(sp)
 8004e6c:	db012e17 	ldw	r12,1208(sp)
 8004e70:	1300010e 	bge	r2,r12,8004e78 <___vfprintf_internal_r+0x978>
 8004e74:	6005883a 	mov	r2,r12
 8004e78:	dac12f17 	ldw	r11,1212(sp)
 8004e7c:	5897883a 	add	r11,r11,r2
 8004e80:	dac12f15 	stw	r11,1212(sp)
 8004e84:	1801f21e 	bne	r3,zero,8005650 <___vfprintf_internal_r+0x1150>
 8004e88:	d8011f15 	stw	zero,1148(sp)
 8004e8c:	da000404 	addi	r8,sp,16
 8004e90:	003dd806 	br	80045f4 <__alt_data_end+0xfc0045f4>
 8004e94:	8c400414 	ori	r17,r17,16
 8004e98:	d8c12a15 	stw	r3,1192(sp)
 8004e9c:	88c0080c 	andi	r3,r17,32
 8004ea0:	d8812d17 	ldw	r2,1204(sp)
 8004ea4:	18004626 	beq	r3,zero,8004fc0 <___vfprintf_internal_r+0xac0>
 8004ea8:	dac12d17 	ldw	r11,1204(sp)
 8004eac:	14c00017 	ldw	r19,0(r2)
 8004eb0:	17000117 	ldw	fp,4(r2)
 8004eb4:	5ac00204 	addi	r11,r11,8
 8004eb8:	dac12d15 	stw	r11,1204(sp)
 8004ebc:	00800044 	movi	r2,1
 8004ec0:	9f06b03a 	or	r3,r19,fp
 8004ec4:	003f0006 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004ec8:	1805883a 	mov	r2,r3
 8004ecc:	d8012e15 	stw	zero,1208(sp)
 8004ed0:	82fff404 	addi	r11,r16,-48
 8004ed4:	0019883a 	mov	r12,zero
 8004ed8:	14000007 	ldb	r16,0(r2)
 8004edc:	630002a4 	muli	r12,r12,10
 8004ee0:	18c00044 	addi	r3,r3,1
 8004ee4:	1805883a 	mov	r2,r3
 8004ee8:	62d9883a 	add	r12,r12,r11
 8004eec:	82fff404 	addi	r11,r16,-48
 8004ef0:	2afff92e 	bgeu	r5,r11,8004ed8 <__alt_data_end+0xfc004ed8>
 8004ef4:	db012e15 	stw	r12,1208(sp)
 8004ef8:	003de906 	br	80046a0 <__alt_data_end+0xfc0046a0>
 8004efc:	8c400414 	ori	r17,r17,16
 8004f00:	d8c12a15 	stw	r3,1192(sp)
 8004f04:	d9812785 	stb	r6,1182(sp)
 8004f08:	8880080c 	andi	r2,r17,32
 8004f0c:	d8c12d17 	ldw	r3,1204(sp)
 8004f10:	10007a26 	beq	r2,zero,80050fc <___vfprintf_internal_r+0xbfc>
 8004f14:	db012d17 	ldw	r12,1204(sp)
 8004f18:	18800117 	ldw	r2,4(r3)
 8004f1c:	1cc00017 	ldw	r19,0(r3)
 8004f20:	63000204 	addi	r12,r12,8
 8004f24:	db012d15 	stw	r12,1204(sp)
 8004f28:	1039883a 	mov	fp,r2
 8004f2c:	10031016 	blt	r2,zero,8005b70 <___vfprintf_internal_r+0x1670>
 8004f30:	dd412783 	ldbu	r21,1182(sp)
 8004f34:	da413215 	stw	r9,1224(sp)
 8004f38:	00800044 	movi	r2,1
 8004f3c:	9f06b03a 	or	r3,r19,fp
 8004f40:	003ee406 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8004f44:	030200b4 	movhi	r12,2050
 8004f48:	6335d804 	addi	r12,r12,-10400
 8004f4c:	d8c12a15 	stw	r3,1192(sp)
 8004f50:	d9812785 	stb	r6,1182(sp)
 8004f54:	db013b15 	stw	r12,1260(sp)
 8004f58:	88c0080c 	andi	r3,r17,32
 8004f5c:	d8812d17 	ldw	r2,1204(sp)
 8004f60:	18002b26 	beq	r3,zero,8005010 <___vfprintf_internal_r+0xb10>
 8004f64:	dac12d17 	ldw	r11,1204(sp)
 8004f68:	14c00017 	ldw	r19,0(r2)
 8004f6c:	17000117 	ldw	fp,4(r2)
 8004f70:	5ac00204 	addi	r11,r11,8
 8004f74:	dac12d15 	stw	r11,1204(sp)
 8004f78:	8880004c 	andi	r2,r17,1
 8004f7c:	10025b26 	beq	r2,zero,80058ec <___vfprintf_internal_r+0x13ec>
 8004f80:	9f06b03a 	or	r3,r19,fp
 8004f84:	18037026 	beq	r3,zero,8005d48 <___vfprintf_internal_r+0x1848>
 8004f88:	00800c04 	movi	r2,48
 8004f8c:	d8812705 	stb	r2,1180(sp)
 8004f90:	dc012745 	stb	r16,1181(sp)
 8004f94:	8c400094 	ori	r17,r17,2
 8004f98:	00800084 	movi	r2,2
 8004f9c:	003eca06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004fa0:	8c400814 	ori	r17,r17,32
 8004fa4:	1805883a 	mov	r2,r3
 8004fa8:	1c000007 	ldb	r16,0(r3)
 8004fac:	003dbb06 	br	800469c <__alt_data_end+0xfc00469c>
 8004fb0:	d8c12a15 	stw	r3,1192(sp)
 8004fb4:	88c0080c 	andi	r3,r17,32
 8004fb8:	d8812d17 	ldw	r2,1204(sp)
 8004fbc:	183fba1e 	bne	r3,zero,8004ea8 <__alt_data_end+0xfc004ea8>
 8004fc0:	88c0040c 	andi	r3,r17,16
 8004fc4:	18024c1e 	bne	r3,zero,80058f8 <___vfprintf_internal_r+0x13f8>
 8004fc8:	88c0100c 	andi	r3,r17,64
 8004fcc:	18024a26 	beq	r3,zero,80058f8 <___vfprintf_internal_r+0x13f8>
 8004fd0:	dac12d17 	ldw	r11,1204(sp)
 8004fd4:	14c0000b 	ldhu	r19,0(r2)
 8004fd8:	0039883a 	mov	fp,zero
 8004fdc:	5ac00104 	addi	r11,r11,4
 8004fe0:	dac12d15 	stw	r11,1204(sp)
 8004fe4:	00800044 	movi	r2,1
 8004fe8:	9807883a 	mov	r3,r19
 8004fec:	003eb606 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004ff0:	008200b4 	movhi	r2,2050
 8004ff4:	10b5dd04 	addi	r2,r2,-10380
 8004ff8:	d8c12a15 	stw	r3,1192(sp)
 8004ffc:	d8813b15 	stw	r2,1260(sp)
 8005000:	d9812785 	stb	r6,1182(sp)
 8005004:	88c0080c 	andi	r3,r17,32
 8005008:	d8812d17 	ldw	r2,1204(sp)
 800500c:	183fd51e 	bne	r3,zero,8004f64 <__alt_data_end+0xfc004f64>
 8005010:	88c0040c 	andi	r3,r17,16
 8005014:	18034126 	beq	r3,zero,8005d1c <___vfprintf_internal_r+0x181c>
 8005018:	db012d17 	ldw	r12,1204(sp)
 800501c:	14c00017 	ldw	r19,0(r2)
 8005020:	0039883a 	mov	fp,zero
 8005024:	63000104 	addi	r12,r12,4
 8005028:	db012d15 	stw	r12,1204(sp)
 800502c:	003fd206 	br	8004f78 <__alt_data_end+0xfc004f78>
 8005030:	1c000007 	ldb	r16,0(r3)
 8005034:	81c3d626 	beq	r16,r7,8005f90 <___vfprintf_internal_r+0x1a90>
 8005038:	8c400414 	ori	r17,r17,16
 800503c:	1805883a 	mov	r2,r3
 8005040:	003d9606 	br	800469c <__alt_data_end+0xfc00469c>
 8005044:	d8c12a15 	stw	r3,1192(sp)
 8005048:	d9812785 	stb	r6,1182(sp)
 800504c:	8880080c 	andi	r2,r17,32
 8005050:	10033f26 	beq	r2,zero,8005d50 <___vfprintf_internal_r+0x1850>
 8005054:	db012d17 	ldw	r12,1204(sp)
 8005058:	dac12f17 	ldw	r11,1212(sp)
 800505c:	60800017 	ldw	r2,0(r12)
 8005060:	5807d7fa 	srai	r3,r11,31
 8005064:	63000104 	addi	r12,r12,4
 8005068:	db012d15 	stw	r12,1204(sp)
 800506c:	12c00015 	stw	r11,0(r2)
 8005070:	10c00115 	stw	r3,4(r2)
 8005074:	003d5f06 	br	80045f4 <__alt_data_end+0xfc0045f4>
 8005078:	d8c12a15 	stw	r3,1192(sp)
 800507c:	88c0080c 	andi	r3,r17,32
 8005080:	d8812d17 	ldw	r2,1204(sp)
 8005084:	183e891e 	bne	r3,zero,8004aac <__alt_data_end+0xfc004aac>
 8005088:	88c0040c 	andi	r3,r17,16
 800508c:	1801ea1e 	bne	r3,zero,8005838 <___vfprintf_internal_r+0x1338>
 8005090:	88c0100c 	andi	r3,r17,64
 8005094:	1801e826 	beq	r3,zero,8005838 <___vfprintf_internal_r+0x1338>
 8005098:	db012d17 	ldw	r12,1204(sp)
 800509c:	14c0000b 	ldhu	r19,0(r2)
 80050a0:	0039883a 	mov	fp,zero
 80050a4:	63000104 	addi	r12,r12,4
 80050a8:	db012d15 	stw	r12,1204(sp)
 80050ac:	0005883a 	mov	r2,zero
 80050b0:	9807883a 	mov	r3,r19
 80050b4:	003e8406 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 80050b8:	30803fcc 	andi	r2,r6,255
 80050bc:	1080201c 	xori	r2,r2,128
 80050c0:	10bfe004 	addi	r2,r2,-128
 80050c4:	10031d1e 	bne	r2,zero,8005d3c <___vfprintf_internal_r+0x183c>
 80050c8:	1805883a 	mov	r2,r3
 80050cc:	01800804 	movi	r6,32
 80050d0:	1c000007 	ldb	r16,0(r3)
 80050d4:	003d7106 	br	800469c <__alt_data_end+0xfc00469c>
 80050d8:	8c400054 	ori	r17,r17,1
 80050dc:	1805883a 	mov	r2,r3
 80050e0:	1c000007 	ldb	r16,0(r3)
 80050e4:	003d6d06 	br	800469c <__alt_data_end+0xfc00469c>
 80050e8:	d8c12a15 	stw	r3,1192(sp)
 80050ec:	d9812785 	stb	r6,1182(sp)
 80050f0:	8880080c 	andi	r2,r17,32
 80050f4:	d8c12d17 	ldw	r3,1204(sp)
 80050f8:	103f861e 	bne	r2,zero,8004f14 <__alt_data_end+0xfc004f14>
 80050fc:	8880040c 	andi	r2,r17,16
 8005100:	1001f31e 	bne	r2,zero,80058d0 <___vfprintf_internal_r+0x13d0>
 8005104:	8880100c 	andi	r2,r17,64
 8005108:	1001f126 	beq	r2,zero,80058d0 <___vfprintf_internal_r+0x13d0>
 800510c:	1cc0000f 	ldh	r19,0(r3)
 8005110:	db012d17 	ldw	r12,1204(sp)
 8005114:	9839d7fa 	srai	fp,r19,31
 8005118:	63000104 	addi	r12,r12,4
 800511c:	db012d15 	stw	r12,1204(sp)
 8005120:	e005883a 	mov	r2,fp
 8005124:	003f8106 	br	8004f2c <__alt_data_end+0xfc004f2c>
 8005128:	8c401014 	ori	r17,r17,64
 800512c:	1805883a 	mov	r2,r3
 8005130:	1c000007 	ldb	r16,0(r3)
 8005134:	003d5906 	br	800469c <__alt_data_end+0xfc00469c>
 8005138:	db012d17 	ldw	r12,1204(sp)
 800513c:	d8c12a15 	stw	r3,1192(sp)
 8005140:	00c00044 	movi	r3,1
 8005144:	60800017 	ldw	r2,0(r12)
 8005148:	63000104 	addi	r12,r12,4
 800514c:	d8c12b15 	stw	r3,1196(sp)
 8005150:	d8012785 	stb	zero,1182(sp)
 8005154:	d8810405 	stb	r2,1040(sp)
 8005158:	db012d15 	stw	r12,1204(sp)
 800515c:	dac10404 	addi	r11,sp,1040
 8005160:	1825883a 	mov	r18,r3
 8005164:	d8013215 	stw	zero,1224(sp)
 8005168:	d8013415 	stw	zero,1232(sp)
 800516c:	dac13115 	stw	r11,1220(sp)
 8005170:	0005883a 	mov	r2,zero
 8005174:	003e7d06 	br	8004b6c <__alt_data_end+0xfc004b6c>
 8005178:	db012d17 	ldw	r12,1204(sp)
 800517c:	00800c04 	movi	r2,48
 8005180:	d8812705 	stb	r2,1180(sp)
 8005184:	64c00017 	ldw	r19,0(r12)
 8005188:	00801e04 	movi	r2,120
 800518c:	d8812745 	stb	r2,1181(sp)
 8005190:	008200b4 	movhi	r2,2050
 8005194:	10b5dd04 	addi	r2,r2,-10380
 8005198:	63000104 	addi	r12,r12,4
 800519c:	d8c12a15 	stw	r3,1192(sp)
 80051a0:	d8813b15 	stw	r2,1260(sp)
 80051a4:	0039883a 	mov	fp,zero
 80051a8:	8c400094 	ori	r17,r17,2
 80051ac:	db012d15 	stw	r12,1204(sp)
 80051b0:	00800084 	movi	r2,2
 80051b4:	04001e04 	movi	r16,120
 80051b8:	9807883a 	mov	r3,r19
 80051bc:	003e4206 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 80051c0:	dac12d17 	ldw	r11,1204(sp)
 80051c4:	db012d17 	ldw	r12,1204(sp)
 80051c8:	d8c12a15 	stw	r3,1192(sp)
 80051cc:	5ac00017 	ldw	r11,0(r11)
 80051d0:	d8012785 	stb	zero,1182(sp)
 80051d4:	64c00104 	addi	r19,r12,4
 80051d8:	dac13115 	stw	r11,1220(sp)
 80051dc:	5803e826 	beq	r11,zero,8006180 <___vfprintf_internal_r+0x1c80>
 80051e0:	d9013117 	ldw	r4,1220(sp)
 80051e4:	48037a16 	blt	r9,zero,8005fd0 <___vfprintf_internal_r+0x1ad0>
 80051e8:	480d883a 	mov	r6,r9
 80051ec:	000b883a 	mov	r5,zero
 80051f0:	da013f15 	stw	r8,1276(sp)
 80051f4:	da413e15 	stw	r9,1272(sp)
 80051f8:	80099d80 	call	80099d8 <memchr>
 80051fc:	da013f17 	ldw	r8,1276(sp)
 8005200:	da413e17 	ldw	r9,1272(sp)
 8005204:	10044426 	beq	r2,zero,8006318 <___vfprintf_internal_r+0x1e18>
 8005208:	d8c13117 	ldw	r3,1220(sp)
 800520c:	10e5c83a 	sub	r18,r2,r3
 8005210:	4c834416 	blt	r9,r18,8005f24 <___vfprintf_internal_r+0x1a24>
 8005214:	9005883a 	mov	r2,r18
 8005218:	90037216 	blt	r18,zero,8005fe4 <___vfprintf_internal_r+0x1ae4>
 800521c:	dd412783 	ldbu	r21,1182(sp)
 8005220:	d8812b15 	stw	r2,1196(sp)
 8005224:	dcc12d15 	stw	r19,1204(sp)
 8005228:	d8013215 	stw	zero,1224(sp)
 800522c:	d8013415 	stw	zero,1232(sp)
 8005230:	003e4706 	br	8004b50 <__alt_data_end+0xfc004b50>
 8005234:	dac12d17 	ldw	r11,1204(sp)
 8005238:	db012d17 	ldw	r12,1204(sp)
 800523c:	5ac00017 	ldw	r11,0(r11)
 8005240:	dac12e15 	stw	r11,1208(sp)
 8005244:	62c00104 	addi	r11,r12,4
 8005248:	db012e17 	ldw	r12,1208(sp)
 800524c:	60034a16 	blt	r12,zero,8005f78 <___vfprintf_internal_r+0x1a78>
 8005250:	dac12d15 	stw	r11,1204(sp)
 8005254:	1805883a 	mov	r2,r3
 8005258:	1c000007 	ldb	r16,0(r3)
 800525c:	003d0f06 	br	800469c <__alt_data_end+0xfc00469c>
 8005260:	1805883a 	mov	r2,r3
 8005264:	01800ac4 	movi	r6,43
 8005268:	1c000007 	ldb	r16,0(r3)
 800526c:	003d0b06 	br	800469c <__alt_data_end+0xfc00469c>
 8005270:	d8c12a15 	stw	r3,1192(sp)
 8005274:	d9812785 	stb	r6,1182(sp)
 8005278:	803db226 	beq	r16,zero,8004944 <__alt_data_end+0xfc004944>
 800527c:	00c00044 	movi	r3,1
 8005280:	d8c12b15 	stw	r3,1196(sp)
 8005284:	dc010405 	stb	r16,1040(sp)
 8005288:	d8012785 	stb	zero,1182(sp)
 800528c:	003fb306 	br	800515c <__alt_data_end+0xfc00515c>
 8005290:	d8c12017 	ldw	r3,1152(sp)
 8005294:	003e6d06 	br	8004c4c <__alt_data_end+0xfc004c4c>
 8005298:	10803fcc 	andi	r2,r2,255
 800529c:	00c00044 	movi	r3,1
 80052a0:	10fe141e 	bne	r2,r3,8004af4 <__alt_data_end+0xfc004af4>
 80052a4:	e000021e 	bne	fp,zero,80052b0 <___vfprintf_internal_r+0xdb0>
 80052a8:	00800244 	movi	r2,9
 80052ac:	14c0202e 	bgeu	r2,r19,8005330 <___vfprintf_internal_r+0xe30>
 80052b0:	dc012b15 	stw	r16,1196(sp)
 80052b4:	dc412c15 	stw	r17,1200(sp)
 80052b8:	9821883a 	mov	r16,r19
 80052bc:	e023883a 	mov	r17,fp
 80052c0:	dc810e04 	addi	r18,sp,1080
 80052c4:	4027883a 	mov	r19,r8
 80052c8:	4839883a 	mov	fp,r9
 80052cc:	8009883a 	mov	r4,r16
 80052d0:	880b883a 	mov	r5,r17
 80052d4:	01800284 	movi	r6,10
 80052d8:	000f883a 	mov	r7,zero
 80052dc:	800da080 	call	800da08 <__umoddi3>
 80052e0:	10800c04 	addi	r2,r2,48
 80052e4:	94bfffc4 	addi	r18,r18,-1
 80052e8:	8009883a 	mov	r4,r16
 80052ec:	880b883a 	mov	r5,r17
 80052f0:	01800284 	movi	r6,10
 80052f4:	000f883a 	mov	r7,zero
 80052f8:	90800005 	stb	r2,0(r18)
 80052fc:	800d4480 	call	800d448 <__udivdi3>
 8005300:	1021883a 	mov	r16,r2
 8005304:	10c4b03a 	or	r2,r2,r3
 8005308:	1823883a 	mov	r17,r3
 800530c:	103fef1e 	bne	r2,zero,80052cc <__alt_data_end+0xfc0052cc>
 8005310:	dac12817 	ldw	r11,1184(sp)
 8005314:	dc813115 	stw	r18,1220(sp)
 8005318:	dc012b17 	ldw	r16,1196(sp)
 800531c:	9811883a 	mov	r8,r19
 8005320:	dc412c17 	ldw	r17,1200(sp)
 8005324:	e013883a 	mov	r9,fp
 8005328:	5ca5c83a 	sub	r18,r11,r18
 800532c:	003e0306 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8005330:	9cc00c04 	addi	r19,r19,48
 8005334:	d8c10dc4 	addi	r3,sp,1079
 8005338:	dcc10dc5 	stb	r19,1079(sp)
 800533c:	dc813c17 	ldw	r18,1264(sp)
 8005340:	d8c13115 	stw	r3,1220(sp)
 8005344:	003dfd06 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8005348:	00801944 	movi	r2,101
 800534c:	1400710e 	bge	r2,r16,8005514 <___vfprintf_internal_r+0x1014>
 8005350:	d9013717 	ldw	r4,1244(sp)
 8005354:	d9413917 	ldw	r5,1252(sp)
 8005358:	000d883a 	mov	r6,zero
 800535c:	000f883a 	mov	r7,zero
 8005360:	d8c13d15 	stw	r3,1268(sp)
 8005364:	da013f15 	stw	r8,1276(sp)
 8005368:	800f22c0 	call	800f22c <__eqdf2>
 800536c:	d8c13d17 	ldw	r3,1268(sp)
 8005370:	da013f17 	ldw	r8,1276(sp)
 8005374:	1000ef1e 	bne	r2,zero,8005734 <___vfprintf_internal_r+0x1234>
 8005378:	d8811f17 	ldw	r2,1148(sp)
 800537c:	010200b4 	movhi	r4,2050
 8005380:	2135e404 	addi	r4,r4,-10352
 8005384:	18c00044 	addi	r3,r3,1
 8005388:	10800044 	addi	r2,r2,1
 800538c:	41000015 	stw	r4,0(r8)
 8005390:	01000044 	movi	r4,1
 8005394:	41000115 	stw	r4,4(r8)
 8005398:	d8c12015 	stw	r3,1152(sp)
 800539c:	d8811f15 	stw	r2,1148(sp)
 80053a0:	010001c4 	movi	r4,7
 80053a4:	20828e16 	blt	r4,r2,8005de0 <___vfprintf_internal_r+0x18e0>
 80053a8:	42000204 	addi	r8,r8,8
 80053ac:	d8812617 	ldw	r2,1176(sp)
 80053b0:	dac13317 	ldw	r11,1228(sp)
 80053b4:	12c00216 	blt	r2,r11,80053c0 <___vfprintf_internal_r+0xec0>
 80053b8:	8880004c 	andi	r2,r17,1
 80053bc:	103e7726 	beq	r2,zero,8004d9c <__alt_data_end+0xfc004d9c>
 80053c0:	db013817 	ldw	r12,1248(sp)
 80053c4:	d8811f17 	ldw	r2,1148(sp)
 80053c8:	dac13517 	ldw	r11,1236(sp)
 80053cc:	1b07883a 	add	r3,r3,r12
 80053d0:	10800044 	addi	r2,r2,1
 80053d4:	42c00015 	stw	r11,0(r8)
 80053d8:	43000115 	stw	r12,4(r8)
 80053dc:	d8c12015 	stw	r3,1152(sp)
 80053e0:	d8811f15 	stw	r2,1148(sp)
 80053e4:	010001c4 	movi	r4,7
 80053e8:	2082ed16 	blt	r4,r2,8005fa0 <___vfprintf_internal_r+0x1aa0>
 80053ec:	42000204 	addi	r8,r8,8
 80053f0:	db013317 	ldw	r12,1228(sp)
 80053f4:	643fffc4 	addi	r16,r12,-1
 80053f8:	043e680e 	bge	zero,r16,8004d9c <__alt_data_end+0xfc004d9c>
 80053fc:	04800404 	movi	r18,16
 8005400:	d8811f17 	ldw	r2,1148(sp)
 8005404:	94007e0e 	bge	r18,r16,8005600 <___vfprintf_internal_r+0x1100>
 8005408:	014200b4 	movhi	r5,2050
 800540c:	2975e484 	addi	r5,r5,-10350
 8005410:	d9412c15 	stw	r5,1200(sp)
 8005414:	054001c4 	movi	r21,7
 8005418:	00000306 	br	8005428 <___vfprintf_internal_r+0xf28>
 800541c:	42000204 	addi	r8,r8,8
 8005420:	843ffc04 	addi	r16,r16,-16
 8005424:	9400790e 	bge	r18,r16,800560c <___vfprintf_internal_r+0x110c>
 8005428:	18c00404 	addi	r3,r3,16
 800542c:	10800044 	addi	r2,r2,1
 8005430:	45000015 	stw	r20,0(r8)
 8005434:	44800115 	stw	r18,4(r8)
 8005438:	d8c12015 	stw	r3,1152(sp)
 800543c:	d8811f15 	stw	r2,1148(sp)
 8005440:	a8bff60e 	bge	r21,r2,800541c <__alt_data_end+0xfc00541c>
 8005444:	b009883a 	mov	r4,r22
 8005448:	b80b883a 	mov	r5,r23
 800544c:	d9811e04 	addi	r6,sp,1144
 8005450:	800b7780 	call	800b778 <__sprint_r>
 8005454:	103d411e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005458:	d8c12017 	ldw	r3,1152(sp)
 800545c:	d8811f17 	ldw	r2,1148(sp)
 8005460:	da000404 	addi	r8,sp,16
 8005464:	003fee06 	br	8005420 <__alt_data_end+0xfc005420>
 8005468:	dac12e17 	ldw	r11,1208(sp)
 800546c:	db012b17 	ldw	r12,1196(sp)
 8005470:	5b2bc83a 	sub	r21,r11,r12
 8005474:	057e130e 	bge	zero,r21,8004cc4 <__alt_data_end+0xfc004cc4>
 8005478:	07000404 	movi	fp,16
 800547c:	d8811f17 	ldw	r2,1148(sp)
 8005480:	e543640e 	bge	fp,r21,8006214 <___vfprintf_internal_r+0x1d14>
 8005484:	014200b4 	movhi	r5,2050
 8005488:	2975e484 	addi	r5,r5,-10350
 800548c:	d9412c15 	stw	r5,1200(sp)
 8005490:	04c001c4 	movi	r19,7
 8005494:	00000306 	br	80054a4 <___vfprintf_internal_r+0xfa4>
 8005498:	ad7ffc04 	addi	r21,r21,-16
 800549c:	42000204 	addi	r8,r8,8
 80054a0:	e540110e 	bge	fp,r21,80054e8 <___vfprintf_internal_r+0xfe8>
 80054a4:	18c00404 	addi	r3,r3,16
 80054a8:	10800044 	addi	r2,r2,1
 80054ac:	45000015 	stw	r20,0(r8)
 80054b0:	47000115 	stw	fp,4(r8)
 80054b4:	d8c12015 	stw	r3,1152(sp)
 80054b8:	d8811f15 	stw	r2,1148(sp)
 80054bc:	98bff60e 	bge	r19,r2,8005498 <__alt_data_end+0xfc005498>
 80054c0:	b009883a 	mov	r4,r22
 80054c4:	b80b883a 	mov	r5,r23
 80054c8:	d9811e04 	addi	r6,sp,1144
 80054cc:	800b7780 	call	800b778 <__sprint_r>
 80054d0:	103d221e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 80054d4:	ad7ffc04 	addi	r21,r21,-16
 80054d8:	d8c12017 	ldw	r3,1152(sp)
 80054dc:	d8811f17 	ldw	r2,1148(sp)
 80054e0:	da000404 	addi	r8,sp,16
 80054e4:	e57fef16 	blt	fp,r21,80054a4 <__alt_data_end+0xfc0054a4>
 80054e8:	dac12c17 	ldw	r11,1200(sp)
 80054ec:	1d47883a 	add	r3,r3,r21
 80054f0:	10800044 	addi	r2,r2,1
 80054f4:	42c00015 	stw	r11,0(r8)
 80054f8:	45400115 	stw	r21,4(r8)
 80054fc:	d8c12015 	stw	r3,1152(sp)
 8005500:	d8811f15 	stw	r2,1148(sp)
 8005504:	010001c4 	movi	r4,7
 8005508:	20819116 	blt	r4,r2,8005b50 <___vfprintf_internal_r+0x1650>
 800550c:	42000204 	addi	r8,r8,8
 8005510:	003dec06 	br	8004cc4 <__alt_data_end+0xfc004cc4>
 8005514:	db013317 	ldw	r12,1228(sp)
 8005518:	00800044 	movi	r2,1
 800551c:	18c00044 	addi	r3,r3,1
 8005520:	1301530e 	bge	r2,r12,8005a70 <___vfprintf_internal_r+0x1570>
 8005524:	dc011f17 	ldw	r16,1148(sp)
 8005528:	dac13117 	ldw	r11,1220(sp)
 800552c:	00800044 	movi	r2,1
 8005530:	84000044 	addi	r16,r16,1
 8005534:	40800115 	stw	r2,4(r8)
 8005538:	42c00015 	stw	r11,0(r8)
 800553c:	d8c12015 	stw	r3,1152(sp)
 8005540:	dc011f15 	stw	r16,1148(sp)
 8005544:	008001c4 	movi	r2,7
 8005548:	14016b16 	blt	r2,r16,8005af8 <___vfprintf_internal_r+0x15f8>
 800554c:	42000204 	addi	r8,r8,8
 8005550:	db013817 	ldw	r12,1248(sp)
 8005554:	dac13517 	ldw	r11,1236(sp)
 8005558:	84000044 	addi	r16,r16,1
 800555c:	1b07883a 	add	r3,r3,r12
 8005560:	42c00015 	stw	r11,0(r8)
 8005564:	43000115 	stw	r12,4(r8)
 8005568:	d8c12015 	stw	r3,1152(sp)
 800556c:	dc011f15 	stw	r16,1148(sp)
 8005570:	008001c4 	movi	r2,7
 8005574:	14016916 	blt	r2,r16,8005b1c <___vfprintf_internal_r+0x161c>
 8005578:	44800204 	addi	r18,r8,8
 800557c:	d9013717 	ldw	r4,1244(sp)
 8005580:	d9413917 	ldw	r5,1252(sp)
 8005584:	000d883a 	mov	r6,zero
 8005588:	000f883a 	mov	r7,zero
 800558c:	d8c13d15 	stw	r3,1268(sp)
 8005590:	800f22c0 	call	800f22c <__eqdf2>
 8005594:	d8c13d17 	ldw	r3,1268(sp)
 8005598:	db013317 	ldw	r12,1228(sp)
 800559c:	1000ae26 	beq	r2,zero,8005858 <___vfprintf_internal_r+0x1358>
 80055a0:	dac13117 	ldw	r11,1220(sp)
 80055a4:	60bfffc4 	addi	r2,r12,-1
 80055a8:	1887883a 	add	r3,r3,r2
 80055ac:	59000044 	addi	r4,r11,1
 80055b0:	84000044 	addi	r16,r16,1
 80055b4:	90800115 	stw	r2,4(r18)
 80055b8:	91000015 	stw	r4,0(r18)
 80055bc:	d8c12015 	stw	r3,1152(sp)
 80055c0:	dc011f15 	stw	r16,1148(sp)
 80055c4:	008001c4 	movi	r2,7
 80055c8:	14014216 	blt	r2,r16,8005ad4 <___vfprintf_internal_r+0x15d4>
 80055cc:	94800204 	addi	r18,r18,8
 80055d0:	dac13a17 	ldw	r11,1256(sp)
 80055d4:	dd4122c4 	addi	r21,sp,1163
 80055d8:	84000044 	addi	r16,r16,1
 80055dc:	58c7883a 	add	r3,r11,r3
 80055e0:	95400015 	stw	r21,0(r18)
 80055e4:	92c00115 	stw	r11,4(r18)
 80055e8:	d8c12015 	stw	r3,1152(sp)
 80055ec:	dc011f15 	stw	r16,1148(sp)
 80055f0:	008001c4 	movi	r2,7
 80055f4:	14000e16 	blt	r2,r16,8005630 <___vfprintf_internal_r+0x1130>
 80055f8:	92000204 	addi	r8,r18,8
 80055fc:	003de706 	br	8004d9c <__alt_data_end+0xfc004d9c>
 8005600:	010200b4 	movhi	r4,2050
 8005604:	2135e484 	addi	r4,r4,-10350
 8005608:	d9012c15 	stw	r4,1200(sp)
 800560c:	dac12c17 	ldw	r11,1200(sp)
 8005610:	1c07883a 	add	r3,r3,r16
 8005614:	44000115 	stw	r16,4(r8)
 8005618:	42c00015 	stw	r11,0(r8)
 800561c:	10800044 	addi	r2,r2,1
 8005620:	d8c12015 	stw	r3,1152(sp)
 8005624:	d8811f15 	stw	r2,1148(sp)
 8005628:	010001c4 	movi	r4,7
 800562c:	20bdda0e 	bge	r4,r2,8004d98 <__alt_data_end+0xfc004d98>
 8005630:	b009883a 	mov	r4,r22
 8005634:	b80b883a 	mov	r5,r23
 8005638:	d9811e04 	addi	r6,sp,1144
 800563c:	800b7780 	call	800b778 <__sprint_r>
 8005640:	103cc61e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005644:	d8c12017 	ldw	r3,1152(sp)
 8005648:	da000404 	addi	r8,sp,16
 800564c:	003dd306 	br	8004d9c <__alt_data_end+0xfc004d9c>
 8005650:	b009883a 	mov	r4,r22
 8005654:	b80b883a 	mov	r5,r23
 8005658:	d9811e04 	addi	r6,sp,1144
 800565c:	800b7780 	call	800b778 <__sprint_r>
 8005660:	103e0926 	beq	r2,zero,8004e88 <__alt_data_end+0xfc004e88>
 8005664:	003cbd06 	br	800495c <__alt_data_end+0xfc00495c>
 8005668:	10803fcc 	andi	r2,r2,255
 800566c:	1000651e 	bne	r2,zero,8005804 <___vfprintf_internal_r+0x1304>
 8005670:	8880004c 	andi	r2,r17,1
 8005674:	10013226 	beq	r2,zero,8005b40 <___vfprintf_internal_r+0x1640>
 8005678:	00800c04 	movi	r2,48
 800567c:	d8c10dc4 	addi	r3,sp,1079
 8005680:	d8810dc5 	stb	r2,1079(sp)
 8005684:	dc813c17 	ldw	r18,1264(sp)
 8005688:	d8c13115 	stw	r3,1220(sp)
 800568c:	003d2b06 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8005690:	b009883a 	mov	r4,r22
 8005694:	b80b883a 	mov	r5,r23
 8005698:	d9811e04 	addi	r6,sp,1144
 800569c:	800b7780 	call	800b778 <__sprint_r>
 80056a0:	103cae1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 80056a4:	d8c12017 	ldw	r3,1152(sp)
 80056a8:	da000404 	addi	r8,sp,16
 80056ac:	003dae06 	br	8004d68 <__alt_data_end+0xfc004d68>
 80056b0:	b009883a 	mov	r4,r22
 80056b4:	b80b883a 	mov	r5,r23
 80056b8:	d9811e04 	addi	r6,sp,1144
 80056bc:	800b7780 	call	800b778 <__sprint_r>
 80056c0:	103ca61e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 80056c4:	d8c12017 	ldw	r3,1152(sp)
 80056c8:	da000404 	addi	r8,sp,16
 80056cc:	003d6c06 	br	8004c80 <__alt_data_end+0xfc004c80>
 80056d0:	b009883a 	mov	r4,r22
 80056d4:	b80b883a 	mov	r5,r23
 80056d8:	d9811e04 	addi	r6,sp,1144
 80056dc:	800b7780 	call	800b778 <__sprint_r>
 80056e0:	103c9e1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 80056e4:	d8c12017 	ldw	r3,1152(sp)
 80056e8:	da000404 	addi	r8,sp,16
 80056ec:	003d7206 	br	8004cb8 <__alt_data_end+0xfc004cb8>
 80056f0:	d9413b17 	ldw	r5,1260(sp)
 80056f4:	d8c10e04 	addi	r3,sp,1080
 80056f8:	988003cc 	andi	r2,r19,15
 80056fc:	e008973a 	slli	r4,fp,28
 8005700:	2885883a 	add	r2,r5,r2
 8005704:	9826d13a 	srli	r19,r19,4
 8005708:	10800003 	ldbu	r2,0(r2)
 800570c:	e038d13a 	srli	fp,fp,4
 8005710:	18ffffc4 	addi	r3,r3,-1
 8005714:	24e6b03a 	or	r19,r4,r19
 8005718:	18800005 	stb	r2,0(r3)
 800571c:	9f04b03a 	or	r2,r19,fp
 8005720:	103ff51e 	bne	r2,zero,80056f8 <__alt_data_end+0xfc0056f8>
 8005724:	db012817 	ldw	r12,1184(sp)
 8005728:	d8c13115 	stw	r3,1220(sp)
 800572c:	60e5c83a 	sub	r18,r12,r3
 8005730:	003d0206 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8005734:	dc012617 	ldw	r16,1176(sp)
 8005738:	0401b10e 	bge	zero,r16,8005e00 <___vfprintf_internal_r+0x1900>
 800573c:	db013117 	ldw	r12,1220(sp)
 8005740:	dac13317 	ldw	r11,1228(sp)
 8005744:	62e1883a 	add	r16,r12,r11
 8005748:	db013417 	ldw	r12,1232(sp)
 800574c:	5825883a 	mov	r18,r11
 8005750:	62c0010e 	bge	r12,r11,8005758 <___vfprintf_internal_r+0x1258>
 8005754:	6025883a 	mov	r18,r12
 8005758:	04800b0e 	bge	zero,r18,8005788 <___vfprintf_internal_r+0x1288>
 800575c:	d8811f17 	ldw	r2,1148(sp)
 8005760:	dac13117 	ldw	r11,1220(sp)
 8005764:	1c87883a 	add	r3,r3,r18
 8005768:	10800044 	addi	r2,r2,1
 800576c:	42c00015 	stw	r11,0(r8)
 8005770:	44800115 	stw	r18,4(r8)
 8005774:	d8c12015 	stw	r3,1152(sp)
 8005778:	d8811f15 	stw	r2,1148(sp)
 800577c:	010001c4 	movi	r4,7
 8005780:	20824f16 	blt	r4,r2,80060c0 <___vfprintf_internal_r+0x1bc0>
 8005784:	42000204 	addi	r8,r8,8
 8005788:	90024b16 	blt	r18,zero,80060b8 <___vfprintf_internal_r+0x1bb8>
 800578c:	db013417 	ldw	r12,1232(sp)
 8005790:	64a5c83a 	sub	r18,r12,r18
 8005794:	0480730e 	bge	zero,r18,8005964 <___vfprintf_internal_r+0x1464>
 8005798:	05400404 	movi	r21,16
 800579c:	d8811f17 	ldw	r2,1148(sp)
 80057a0:	ac817d0e 	bge	r21,r18,8005d98 <___vfprintf_internal_r+0x1898>
 80057a4:	014200b4 	movhi	r5,2050
 80057a8:	2975e484 	addi	r5,r5,-10350
 80057ac:	d9412c15 	stw	r5,1200(sp)
 80057b0:	070001c4 	movi	fp,7
 80057b4:	00000306 	br	80057c4 <___vfprintf_internal_r+0x12c4>
 80057b8:	42000204 	addi	r8,r8,8
 80057bc:	94bffc04 	addi	r18,r18,-16
 80057c0:	ac81780e 	bge	r21,r18,8005da4 <___vfprintf_internal_r+0x18a4>
 80057c4:	18c00404 	addi	r3,r3,16
 80057c8:	10800044 	addi	r2,r2,1
 80057cc:	45000015 	stw	r20,0(r8)
 80057d0:	45400115 	stw	r21,4(r8)
 80057d4:	d8c12015 	stw	r3,1152(sp)
 80057d8:	d8811f15 	stw	r2,1148(sp)
 80057dc:	e0bff60e 	bge	fp,r2,80057b8 <__alt_data_end+0xfc0057b8>
 80057e0:	b009883a 	mov	r4,r22
 80057e4:	b80b883a 	mov	r5,r23
 80057e8:	d9811e04 	addi	r6,sp,1144
 80057ec:	800b7780 	call	800b778 <__sprint_r>
 80057f0:	103c5a1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 80057f4:	d8c12017 	ldw	r3,1152(sp)
 80057f8:	d8811f17 	ldw	r2,1148(sp)
 80057fc:	da000404 	addi	r8,sp,16
 8005800:	003fee06 	br	80057bc <__alt_data_end+0xfc0057bc>
 8005804:	dac10e04 	addi	r11,sp,1080
 8005808:	0025883a 	mov	r18,zero
 800580c:	dac13115 	stw	r11,1220(sp)
 8005810:	003cca06 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8005814:	b009883a 	mov	r4,r22
 8005818:	b80b883a 	mov	r5,r23
 800581c:	d9811e04 	addi	r6,sp,1144
 8005820:	800b7780 	call	800b778 <__sprint_r>
 8005824:	103c4d1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005828:	d8c12017 	ldw	r3,1152(sp)
 800582c:	d8812787 	ldb	r2,1182(sp)
 8005830:	da000404 	addi	r8,sp,16
 8005834:	003d0506 	br	8004c4c <__alt_data_end+0xfc004c4c>
 8005838:	dac12d17 	ldw	r11,1204(sp)
 800583c:	14c00017 	ldw	r19,0(r2)
 8005840:	0039883a 	mov	fp,zero
 8005844:	5ac00104 	addi	r11,r11,4
 8005848:	dac12d15 	stw	r11,1204(sp)
 800584c:	0005883a 	mov	r2,zero
 8005850:	9807883a 	mov	r3,r19
 8005854:	003c9c06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8005858:	657fffc4 	addi	r21,r12,-1
 800585c:	057f5c0e 	bge	zero,r21,80055d0 <__alt_data_end+0xfc0055d0>
 8005860:	07000404 	movi	fp,16
 8005864:	e5408f0e 	bge	fp,r21,8005aa4 <___vfprintf_internal_r+0x15a4>
 8005868:	010200b4 	movhi	r4,2050
 800586c:	2135e484 	addi	r4,r4,-10350
 8005870:	d9012c15 	stw	r4,1200(sp)
 8005874:	01c001c4 	movi	r7,7
 8005878:	00000306 	br	8005888 <___vfprintf_internal_r+0x1388>
 800587c:	94800204 	addi	r18,r18,8
 8005880:	ad7ffc04 	addi	r21,r21,-16
 8005884:	e5408a0e 	bge	fp,r21,8005ab0 <___vfprintf_internal_r+0x15b0>
 8005888:	18c00404 	addi	r3,r3,16
 800588c:	84000044 	addi	r16,r16,1
 8005890:	95000015 	stw	r20,0(r18)
 8005894:	97000115 	stw	fp,4(r18)
 8005898:	d8c12015 	stw	r3,1152(sp)
 800589c:	dc011f15 	stw	r16,1148(sp)
 80058a0:	3c3ff60e 	bge	r7,r16,800587c <__alt_data_end+0xfc00587c>
 80058a4:	b009883a 	mov	r4,r22
 80058a8:	b80b883a 	mov	r5,r23
 80058ac:	d9811e04 	addi	r6,sp,1144
 80058b0:	d9c13d15 	stw	r7,1268(sp)
 80058b4:	800b7780 	call	800b778 <__sprint_r>
 80058b8:	d9c13d17 	ldw	r7,1268(sp)
 80058bc:	103c271e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 80058c0:	d8c12017 	ldw	r3,1152(sp)
 80058c4:	dc011f17 	ldw	r16,1148(sp)
 80058c8:	dc800404 	addi	r18,sp,16
 80058cc:	003fec06 	br	8005880 <__alt_data_end+0xfc005880>
 80058d0:	1cc00017 	ldw	r19,0(r3)
 80058d4:	dac12d17 	ldw	r11,1204(sp)
 80058d8:	9839d7fa 	srai	fp,r19,31
 80058dc:	5ac00104 	addi	r11,r11,4
 80058e0:	dac12d15 	stw	r11,1204(sp)
 80058e4:	e005883a 	mov	r2,fp
 80058e8:	003d9006 	br	8004f2c <__alt_data_end+0xfc004f2c>
 80058ec:	00800084 	movi	r2,2
 80058f0:	9f06b03a 	or	r3,r19,fp
 80058f4:	003c7406 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 80058f8:	db012d17 	ldw	r12,1204(sp)
 80058fc:	14c00017 	ldw	r19,0(r2)
 8005900:	0039883a 	mov	fp,zero
 8005904:	63000104 	addi	r12,r12,4
 8005908:	db012d15 	stw	r12,1204(sp)
 800590c:	00800044 	movi	r2,1
 8005910:	9807883a 	mov	r3,r19
 8005914:	003c6c06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8005918:	10803fcc 	andi	r2,r2,255
 800591c:	1080201c 	xori	r2,r2,128
 8005920:	10bfe004 	addi	r2,r2,-128
 8005924:	01000c04 	movi	r4,48
 8005928:	1101a526 	beq	r2,r4,8005fc0 <___vfprintf_internal_r+0x1ac0>
 800592c:	dac13117 	ldw	r11,1220(sp)
 8005930:	db012817 	ldw	r12,1184(sp)
 8005934:	193fffc5 	stb	r4,-1(r3)
 8005938:	5affffc4 	addi	r11,r11,-1
 800593c:	dac13115 	stw	r11,1220(sp)
 8005940:	62e5c83a 	sub	r18,r12,r11
 8005944:	003c7d06 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8005948:	b009883a 	mov	r4,r22
 800594c:	b80b883a 	mov	r5,r23
 8005950:	d9811e04 	addi	r6,sp,1144
 8005954:	800b7780 	call	800b778 <__sprint_r>
 8005958:	103c001e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 800595c:	d8c12017 	ldw	r3,1152(sp)
 8005960:	da000404 	addi	r8,sp,16
 8005964:	db013117 	ldw	r12,1220(sp)
 8005968:	dac13417 	ldw	r11,1232(sp)
 800596c:	d8812617 	ldw	r2,1176(sp)
 8005970:	62e5883a 	add	r18,r12,r11
 8005974:	db013317 	ldw	r12,1228(sp)
 8005978:	13000216 	blt	r2,r12,8005984 <___vfprintf_internal_r+0x1484>
 800597c:	8900004c 	andi	r4,r17,1
 8005980:	20000c26 	beq	r4,zero,80059b4 <___vfprintf_internal_r+0x14b4>
 8005984:	dac13817 	ldw	r11,1248(sp)
 8005988:	d9011f17 	ldw	r4,1148(sp)
 800598c:	db013517 	ldw	r12,1236(sp)
 8005990:	1ac7883a 	add	r3,r3,r11
 8005994:	21000044 	addi	r4,r4,1
 8005998:	43000015 	stw	r12,0(r8)
 800599c:	42c00115 	stw	r11,4(r8)
 80059a0:	d8c12015 	stw	r3,1152(sp)
 80059a4:	d9011f15 	stw	r4,1148(sp)
 80059a8:	014001c4 	movi	r5,7
 80059ac:	2901cc16 	blt	r5,r4,80060e0 <___vfprintf_internal_r+0x1be0>
 80059b0:	42000204 	addi	r8,r8,8
 80059b4:	dac13317 	ldw	r11,1228(sp)
 80059b8:	8489c83a 	sub	r4,r16,r18
 80059bc:	5885c83a 	sub	r2,r11,r2
 80059c0:	1021883a 	mov	r16,r2
 80059c4:	2080010e 	bge	r4,r2,80059cc <___vfprintf_internal_r+0x14cc>
 80059c8:	2021883a 	mov	r16,r4
 80059cc:	04000a0e 	bge	zero,r16,80059f8 <___vfprintf_internal_r+0x14f8>
 80059d0:	d9011f17 	ldw	r4,1148(sp)
 80059d4:	1c07883a 	add	r3,r3,r16
 80059d8:	44800015 	stw	r18,0(r8)
 80059dc:	21000044 	addi	r4,r4,1
 80059e0:	44000115 	stw	r16,4(r8)
 80059e4:	d8c12015 	stw	r3,1152(sp)
 80059e8:	d9011f15 	stw	r4,1148(sp)
 80059ec:	014001c4 	movi	r5,7
 80059f0:	2901d616 	blt	r5,r4,800614c <___vfprintf_internal_r+0x1c4c>
 80059f4:	42000204 	addi	r8,r8,8
 80059f8:	8001df16 	blt	r16,zero,8006178 <___vfprintf_internal_r+0x1c78>
 80059fc:	1421c83a 	sub	r16,r2,r16
 8005a00:	043ce60e 	bge	zero,r16,8004d9c <__alt_data_end+0xfc004d9c>
 8005a04:	04800404 	movi	r18,16
 8005a08:	d8811f17 	ldw	r2,1148(sp)
 8005a0c:	943efc0e 	bge	r18,r16,8005600 <__alt_data_end+0xfc005600>
 8005a10:	014200b4 	movhi	r5,2050
 8005a14:	2975e484 	addi	r5,r5,-10350
 8005a18:	d9412c15 	stw	r5,1200(sp)
 8005a1c:	054001c4 	movi	r21,7
 8005a20:	00000306 	br	8005a30 <___vfprintf_internal_r+0x1530>
 8005a24:	42000204 	addi	r8,r8,8
 8005a28:	843ffc04 	addi	r16,r16,-16
 8005a2c:	943ef70e 	bge	r18,r16,800560c <__alt_data_end+0xfc00560c>
 8005a30:	18c00404 	addi	r3,r3,16
 8005a34:	10800044 	addi	r2,r2,1
 8005a38:	45000015 	stw	r20,0(r8)
 8005a3c:	44800115 	stw	r18,4(r8)
 8005a40:	d8c12015 	stw	r3,1152(sp)
 8005a44:	d8811f15 	stw	r2,1148(sp)
 8005a48:	a8bff60e 	bge	r21,r2,8005a24 <__alt_data_end+0xfc005a24>
 8005a4c:	b009883a 	mov	r4,r22
 8005a50:	b80b883a 	mov	r5,r23
 8005a54:	d9811e04 	addi	r6,sp,1144
 8005a58:	800b7780 	call	800b778 <__sprint_r>
 8005a5c:	103bbf1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005a60:	d8c12017 	ldw	r3,1152(sp)
 8005a64:	d8811f17 	ldw	r2,1148(sp)
 8005a68:	da000404 	addi	r8,sp,16
 8005a6c:	003fee06 	br	8005a28 <__alt_data_end+0xfc005a28>
 8005a70:	8888703a 	and	r4,r17,r2
 8005a74:	203eab1e 	bne	r4,zero,8005524 <__alt_data_end+0xfc005524>
 8005a78:	dc011f17 	ldw	r16,1148(sp)
 8005a7c:	db013117 	ldw	r12,1220(sp)
 8005a80:	40800115 	stw	r2,4(r8)
 8005a84:	84000044 	addi	r16,r16,1
 8005a88:	43000015 	stw	r12,0(r8)
 8005a8c:	d8c12015 	stw	r3,1152(sp)
 8005a90:	dc011f15 	stw	r16,1148(sp)
 8005a94:	008001c4 	movi	r2,7
 8005a98:	14000e16 	blt	r2,r16,8005ad4 <___vfprintf_internal_r+0x15d4>
 8005a9c:	44800204 	addi	r18,r8,8
 8005aa0:	003ecb06 	br	80055d0 <__alt_data_end+0xfc0055d0>
 8005aa4:	008200b4 	movhi	r2,2050
 8005aa8:	10b5e484 	addi	r2,r2,-10350
 8005aac:	d8812c15 	stw	r2,1200(sp)
 8005ab0:	dac12c17 	ldw	r11,1200(sp)
 8005ab4:	1d47883a 	add	r3,r3,r21
 8005ab8:	84000044 	addi	r16,r16,1
 8005abc:	92c00015 	stw	r11,0(r18)
 8005ac0:	95400115 	stw	r21,4(r18)
 8005ac4:	d8c12015 	stw	r3,1152(sp)
 8005ac8:	dc011f15 	stw	r16,1148(sp)
 8005acc:	008001c4 	movi	r2,7
 8005ad0:	143ebe0e 	bge	r2,r16,80055cc <__alt_data_end+0xfc0055cc>
 8005ad4:	b009883a 	mov	r4,r22
 8005ad8:	b80b883a 	mov	r5,r23
 8005adc:	d9811e04 	addi	r6,sp,1144
 8005ae0:	800b7780 	call	800b778 <__sprint_r>
 8005ae4:	103b9d1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005ae8:	d8c12017 	ldw	r3,1152(sp)
 8005aec:	dc011f17 	ldw	r16,1148(sp)
 8005af0:	dc800404 	addi	r18,sp,16
 8005af4:	003eb606 	br	80055d0 <__alt_data_end+0xfc0055d0>
 8005af8:	b009883a 	mov	r4,r22
 8005afc:	b80b883a 	mov	r5,r23
 8005b00:	d9811e04 	addi	r6,sp,1144
 8005b04:	800b7780 	call	800b778 <__sprint_r>
 8005b08:	103b941e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005b0c:	d8c12017 	ldw	r3,1152(sp)
 8005b10:	dc011f17 	ldw	r16,1148(sp)
 8005b14:	da000404 	addi	r8,sp,16
 8005b18:	003e8d06 	br	8005550 <__alt_data_end+0xfc005550>
 8005b1c:	b009883a 	mov	r4,r22
 8005b20:	b80b883a 	mov	r5,r23
 8005b24:	d9811e04 	addi	r6,sp,1144
 8005b28:	800b7780 	call	800b778 <__sprint_r>
 8005b2c:	103b8b1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005b30:	d8c12017 	ldw	r3,1152(sp)
 8005b34:	dc011f17 	ldw	r16,1148(sp)
 8005b38:	dc800404 	addi	r18,sp,16
 8005b3c:	003e8f06 	br	800557c <__alt_data_end+0xfc00557c>
 8005b40:	db010e04 	addi	r12,sp,1080
 8005b44:	0025883a 	mov	r18,zero
 8005b48:	db013115 	stw	r12,1220(sp)
 8005b4c:	003bfb06 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8005b50:	b009883a 	mov	r4,r22
 8005b54:	b80b883a 	mov	r5,r23
 8005b58:	d9811e04 	addi	r6,sp,1144
 8005b5c:	800b7780 	call	800b778 <__sprint_r>
 8005b60:	103b7e1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005b64:	d8c12017 	ldw	r3,1152(sp)
 8005b68:	da000404 	addi	r8,sp,16
 8005b6c:	003c5506 	br	8004cc4 <__alt_data_end+0xfc004cc4>
 8005b70:	04e7c83a 	sub	r19,zero,r19
 8005b74:	9804c03a 	cmpne	r2,r19,zero
 8005b78:	0739c83a 	sub	fp,zero,fp
 8005b7c:	e0b9c83a 	sub	fp,fp,r2
 8005b80:	05400b44 	movi	r21,45
 8005b84:	dd412785 	stb	r21,1182(sp)
 8005b88:	da413215 	stw	r9,1224(sp)
 8005b8c:	00800044 	movi	r2,1
 8005b90:	9f06b03a 	or	r3,r19,fp
 8005b94:	003bcf06 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8005b98:	da013f15 	stw	r8,1276(sp)
 8005b9c:	da413e15 	stw	r9,1272(sp)
 8005ba0:	800b3d40 	call	800b3d4 <__fpclassifyd>
 8005ba4:	da013f17 	ldw	r8,1276(sp)
 8005ba8:	da413e17 	ldw	r9,1272(sp)
 8005bac:	1000ce26 	beq	r2,zero,8005ee8 <___vfprintf_internal_r+0x19e8>
 8005bb0:	057ff7c4 	movi	r21,-33
 8005bb4:	00bfffc4 	movi	r2,-1
 8005bb8:	856a703a 	and	r21,r16,r21
 8005bbc:	4881f026 	beq	r9,r2,8006380 <___vfprintf_internal_r+0x1e80>
 8005bc0:	008011c4 	movi	r2,71
 8005bc4:	a881e526 	beq	r21,r2,800635c <___vfprintf_internal_r+0x1e5c>
 8005bc8:	db013917 	ldw	r12,1252(sp)
 8005bcc:	8ac04014 	ori	r11,r17,256
 8005bd0:	dac12d15 	stw	r11,1204(sp)
 8005bd4:	6001e416 	blt	r12,zero,8006368 <___vfprintf_internal_r+0x1e68>
 8005bd8:	dc813917 	ldw	r18,1252(sp)
 8005bdc:	d8012b05 	stb	zero,1196(sp)
 8005be0:	00801984 	movi	r2,102
 8005be4:	80811826 	beq	r16,r2,8006048 <___vfprintf_internal_r+0x1b48>
 8005be8:	00801184 	movi	r2,70
 8005bec:	80811626 	beq	r16,r2,8006048 <___vfprintf_internal_r+0x1b48>
 8005bf0:	00801144 	movi	r2,69
 8005bf4:	a881e026 	beq	r21,r2,8006378 <___vfprintf_internal_r+0x1e78>
 8005bf8:	4839883a 	mov	fp,r9
 8005bfc:	d8812604 	addi	r2,sp,1176
 8005c00:	d8800115 	stw	r2,4(sp)
 8005c04:	d9413717 	ldw	r5,1244(sp)
 8005c08:	d8812504 	addi	r2,sp,1172
 8005c0c:	d8800215 	stw	r2,8(sp)
 8005c10:	d8812104 	addi	r2,sp,1156
 8005c14:	df000015 	stw	fp,0(sp)
 8005c18:	d8800315 	stw	r2,12(sp)
 8005c1c:	b009883a 	mov	r4,r22
 8005c20:	900d883a 	mov	r6,r18
 8005c24:	01c00084 	movi	r7,2
 8005c28:	da013f15 	stw	r8,1276(sp)
 8005c2c:	da413e15 	stw	r9,1272(sp)
 8005c30:	80068500 	call	8006850 <_dtoa_r>
 8005c34:	d8813115 	stw	r2,1220(sp)
 8005c38:	008019c4 	movi	r2,103
 8005c3c:	da013f17 	ldw	r8,1276(sp)
 8005c40:	da413e17 	ldw	r9,1272(sp)
 8005c44:	80800226 	beq	r16,r2,8005c50 <___vfprintf_internal_r+0x1750>
 8005c48:	008011c4 	movi	r2,71
 8005c4c:	8081101e 	bne	r16,r2,8006090 <___vfprintf_internal_r+0x1b90>
 8005c50:	8880004c 	andi	r2,r17,1
 8005c54:	1001df26 	beq	r2,zero,80063d4 <___vfprintf_internal_r+0x1ed4>
 8005c58:	db013117 	ldw	r12,1220(sp)
 8005c5c:	6715883a 	add	r10,r12,fp
 8005c60:	d9013717 	ldw	r4,1244(sp)
 8005c64:	900b883a 	mov	r5,r18
 8005c68:	000d883a 	mov	r6,zero
 8005c6c:	000f883a 	mov	r7,zero
 8005c70:	da013f15 	stw	r8,1276(sp)
 8005c74:	da413e15 	stw	r9,1272(sp)
 8005c78:	da813d15 	stw	r10,1268(sp)
 8005c7c:	800f22c0 	call	800f22c <__eqdf2>
 8005c80:	da013f17 	ldw	r8,1276(sp)
 8005c84:	da413e17 	ldw	r9,1272(sp)
 8005c88:	da813d17 	ldw	r10,1268(sp)
 8005c8c:	10016526 	beq	r2,zero,8006224 <___vfprintf_internal_r+0x1d24>
 8005c90:	d8812117 	ldw	r2,1156(sp)
 8005c94:	1280062e 	bgeu	r2,r10,8005cb0 <___vfprintf_internal_r+0x17b0>
 8005c98:	01000c04 	movi	r4,48
 8005c9c:	10c00044 	addi	r3,r2,1
 8005ca0:	d8c12115 	stw	r3,1156(sp)
 8005ca4:	11000005 	stb	r4,0(r2)
 8005ca8:	d8812117 	ldw	r2,1156(sp)
 8005cac:	12bffb36 	bltu	r2,r10,8005c9c <__alt_data_end+0xfc005c9c>
 8005cb0:	db013117 	ldw	r12,1220(sp)
 8005cb4:	1305c83a 	sub	r2,r2,r12
 8005cb8:	d8813315 	stw	r2,1228(sp)
 8005cbc:	008011c4 	movi	r2,71
 8005cc0:	a8814a26 	beq	r21,r2,80061ec <___vfprintf_internal_r+0x1cec>
 8005cc4:	00801944 	movi	r2,101
 8005cc8:	14020a0e 	bge	r2,r16,80064f4 <___vfprintf_internal_r+0x1ff4>
 8005ccc:	00801984 	movi	r2,102
 8005cd0:	8081b626 	beq	r16,r2,80063ac <___vfprintf_internal_r+0x1eac>
 8005cd4:	db012617 	ldw	r12,1176(sp)
 8005cd8:	db013415 	stw	r12,1232(sp)
 8005cdc:	db013417 	ldw	r12,1232(sp)
 8005ce0:	dac13317 	ldw	r11,1228(sp)
 8005ce4:	62c1a816 	blt	r12,r11,8006388 <___vfprintf_internal_r+0x1e88>
 8005ce8:	8c40004c 	andi	r17,r17,1
 8005cec:	8801ca1e 	bne	r17,zero,8006418 <___vfprintf_internal_r+0x1f18>
 8005cf0:	6005883a 	mov	r2,r12
 8005cf4:	6001b516 	blt	r12,zero,80063cc <___vfprintf_internal_r+0x1ecc>
 8005cf8:	dc813417 	ldw	r18,1232(sp)
 8005cfc:	df012b07 	ldb	fp,1196(sp)
 8005d00:	e001321e 	bne	fp,zero,80061cc <___vfprintf_internal_r+0x1ccc>
 8005d04:	dc412d17 	ldw	r17,1204(sp)
 8005d08:	dd412783 	ldbu	r21,1182(sp)
 8005d0c:	d8812b15 	stw	r2,1196(sp)
 8005d10:	dcc12d15 	stw	r19,1204(sp)
 8005d14:	d8013215 	stw	zero,1224(sp)
 8005d18:	003b8d06 	br	8004b50 <__alt_data_end+0xfc004b50>
 8005d1c:	88c0100c 	andi	r3,r17,64
 8005d20:	18008226 	beq	r3,zero,8005f2c <___vfprintf_internal_r+0x1a2c>
 8005d24:	dac12d17 	ldw	r11,1204(sp)
 8005d28:	14c0000b 	ldhu	r19,0(r2)
 8005d2c:	0039883a 	mov	fp,zero
 8005d30:	5ac00104 	addi	r11,r11,4
 8005d34:	dac12d15 	stw	r11,1204(sp)
 8005d38:	003c8f06 	br	8004f78 <__alt_data_end+0xfc004f78>
 8005d3c:	1c000007 	ldb	r16,0(r3)
 8005d40:	1805883a 	mov	r2,r3
 8005d44:	003a5506 	br	800469c <__alt_data_end+0xfc00469c>
 8005d48:	00800084 	movi	r2,2
 8005d4c:	003b5e06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8005d50:	8880040c 	andi	r2,r17,16
 8005d54:	1000091e 	bne	r2,zero,8005d7c <___vfprintf_internal_r+0x187c>
 8005d58:	8c40100c 	andi	r17,r17,64
 8005d5c:	88000726 	beq	r17,zero,8005d7c <___vfprintf_internal_r+0x187c>
 8005d60:	db012d17 	ldw	r12,1204(sp)
 8005d64:	dac12f17 	ldw	r11,1212(sp)
 8005d68:	60800017 	ldw	r2,0(r12)
 8005d6c:	63000104 	addi	r12,r12,4
 8005d70:	db012d15 	stw	r12,1204(sp)
 8005d74:	12c0000d 	sth	r11,0(r2)
 8005d78:	003a1e06 	br	80045f4 <__alt_data_end+0xfc0045f4>
 8005d7c:	db012d17 	ldw	r12,1204(sp)
 8005d80:	dac12f17 	ldw	r11,1212(sp)
 8005d84:	60800017 	ldw	r2,0(r12)
 8005d88:	63000104 	addi	r12,r12,4
 8005d8c:	db012d15 	stw	r12,1204(sp)
 8005d90:	12c00015 	stw	r11,0(r2)
 8005d94:	003a1706 	br	80045f4 <__alt_data_end+0xfc0045f4>
 8005d98:	010200b4 	movhi	r4,2050
 8005d9c:	2135e484 	addi	r4,r4,-10350
 8005da0:	d9012c15 	stw	r4,1200(sp)
 8005da4:	dac12c17 	ldw	r11,1200(sp)
 8005da8:	1c87883a 	add	r3,r3,r18
 8005dac:	10800044 	addi	r2,r2,1
 8005db0:	42c00015 	stw	r11,0(r8)
 8005db4:	44800115 	stw	r18,4(r8)
 8005db8:	d8c12015 	stw	r3,1152(sp)
 8005dbc:	d8811f15 	stw	r2,1148(sp)
 8005dc0:	010001c4 	movi	r4,7
 8005dc4:	20bee016 	blt	r4,r2,8005948 <__alt_data_end+0xfc005948>
 8005dc8:	42000204 	addi	r8,r8,8
 8005dcc:	003ee506 	br	8005964 <__alt_data_end+0xfc005964>
 8005dd0:	010200b4 	movhi	r4,2050
 8005dd4:	2135e484 	addi	r4,r4,-10350
 8005dd8:	d9012c15 	stw	r4,1200(sp)
 8005ddc:	003bd806 	br	8004d40 <__alt_data_end+0xfc004d40>
 8005de0:	b009883a 	mov	r4,r22
 8005de4:	b80b883a 	mov	r5,r23
 8005de8:	d9811e04 	addi	r6,sp,1144
 8005dec:	800b7780 	call	800b778 <__sprint_r>
 8005df0:	103ada1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005df4:	d8c12017 	ldw	r3,1152(sp)
 8005df8:	da000404 	addi	r8,sp,16
 8005dfc:	003d6b06 	br	80053ac <__alt_data_end+0xfc0053ac>
 8005e00:	d8811f17 	ldw	r2,1148(sp)
 8005e04:	030200b4 	movhi	r12,2050
 8005e08:	01000044 	movi	r4,1
 8005e0c:	18c00044 	addi	r3,r3,1
 8005e10:	10800044 	addi	r2,r2,1
 8005e14:	6335e404 	addi	r12,r12,-10352
 8005e18:	41000115 	stw	r4,4(r8)
 8005e1c:	43000015 	stw	r12,0(r8)
 8005e20:	d8c12015 	stw	r3,1152(sp)
 8005e24:	d8811f15 	stw	r2,1148(sp)
 8005e28:	010001c4 	movi	r4,7
 8005e2c:	20804916 	blt	r4,r2,8005f54 <___vfprintf_internal_r+0x1a54>
 8005e30:	42000204 	addi	r8,r8,8
 8005e34:	8000041e 	bne	r16,zero,8005e48 <___vfprintf_internal_r+0x1948>
 8005e38:	dac13317 	ldw	r11,1228(sp)
 8005e3c:	5800021e 	bne	r11,zero,8005e48 <___vfprintf_internal_r+0x1948>
 8005e40:	8880004c 	andi	r2,r17,1
 8005e44:	103bd526 	beq	r2,zero,8004d9c <__alt_data_end+0xfc004d9c>
 8005e48:	db013817 	ldw	r12,1248(sp)
 8005e4c:	d8811f17 	ldw	r2,1148(sp)
 8005e50:	dac13517 	ldw	r11,1236(sp)
 8005e54:	1b07883a 	add	r3,r3,r12
 8005e58:	10800044 	addi	r2,r2,1
 8005e5c:	42c00015 	stw	r11,0(r8)
 8005e60:	43000115 	stw	r12,4(r8)
 8005e64:	d8c12015 	stw	r3,1152(sp)
 8005e68:	d8811f15 	stw	r2,1148(sp)
 8005e6c:	010001c4 	movi	r4,7
 8005e70:	20813016 	blt	r4,r2,8006334 <___vfprintf_internal_r+0x1e34>
 8005e74:	42000204 	addi	r8,r8,8
 8005e78:	0421c83a 	sub	r16,zero,r16
 8005e7c:	0400630e 	bge	zero,r16,800600c <___vfprintf_internal_r+0x1b0c>
 8005e80:	04800404 	movi	r18,16
 8005e84:	94009f0e 	bge	r18,r16,8006104 <___vfprintf_internal_r+0x1c04>
 8005e88:	010200b4 	movhi	r4,2050
 8005e8c:	2135e484 	addi	r4,r4,-10350
 8005e90:	d9012c15 	stw	r4,1200(sp)
 8005e94:	054001c4 	movi	r21,7
 8005e98:	00000306 	br	8005ea8 <___vfprintf_internal_r+0x19a8>
 8005e9c:	42000204 	addi	r8,r8,8
 8005ea0:	843ffc04 	addi	r16,r16,-16
 8005ea4:	94009a0e 	bge	r18,r16,8006110 <___vfprintf_internal_r+0x1c10>
 8005ea8:	18c00404 	addi	r3,r3,16
 8005eac:	10800044 	addi	r2,r2,1
 8005eb0:	45000015 	stw	r20,0(r8)
 8005eb4:	44800115 	stw	r18,4(r8)
 8005eb8:	d8c12015 	stw	r3,1152(sp)
 8005ebc:	d8811f15 	stw	r2,1148(sp)
 8005ec0:	a8bff60e 	bge	r21,r2,8005e9c <__alt_data_end+0xfc005e9c>
 8005ec4:	b009883a 	mov	r4,r22
 8005ec8:	b80b883a 	mov	r5,r23
 8005ecc:	d9811e04 	addi	r6,sp,1144
 8005ed0:	800b7780 	call	800b778 <__sprint_r>
 8005ed4:	103aa11e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005ed8:	d8c12017 	ldw	r3,1152(sp)
 8005edc:	d8811f17 	ldw	r2,1148(sp)
 8005ee0:	da000404 	addi	r8,sp,16
 8005ee4:	003fee06 	br	8005ea0 <__alt_data_end+0xfc005ea0>
 8005ee8:	008011c4 	movi	r2,71
 8005eec:	1400b316 	blt	r2,r16,80061bc <___vfprintf_internal_r+0x1cbc>
 8005ef0:	030200b4 	movhi	r12,2050
 8005ef4:	6335d604 	addi	r12,r12,-10408
 8005ef8:	db013115 	stw	r12,1220(sp)
 8005efc:	00c000c4 	movi	r3,3
 8005f00:	00bfdfc4 	movi	r2,-129
 8005f04:	d8c12b15 	stw	r3,1196(sp)
 8005f08:	88a2703a 	and	r17,r17,r2
 8005f0c:	dd412783 	ldbu	r21,1182(sp)
 8005f10:	dcc12d15 	stw	r19,1204(sp)
 8005f14:	1825883a 	mov	r18,r3
 8005f18:	d8013215 	stw	zero,1224(sp)
 8005f1c:	d8013415 	stw	zero,1232(sp)
 8005f20:	003b0b06 	br	8004b50 <__alt_data_end+0xfc004b50>
 8005f24:	4825883a 	mov	r18,r9
 8005f28:	003cba06 	br	8005214 <__alt_data_end+0xfc005214>
 8005f2c:	db012d17 	ldw	r12,1204(sp)
 8005f30:	14c00017 	ldw	r19,0(r2)
 8005f34:	0039883a 	mov	fp,zero
 8005f38:	63000104 	addi	r12,r12,4
 8005f3c:	db012d15 	stw	r12,1204(sp)
 8005f40:	003c0d06 	br	8004f78 <__alt_data_end+0xfc004f78>
 8005f44:	008200b4 	movhi	r2,2050
 8005f48:	10b5d404 	addi	r2,r2,-10416
 8005f4c:	d8813115 	stw	r2,1220(sp)
 8005f50:	003ac406 	br	8004a64 <__alt_data_end+0xfc004a64>
 8005f54:	b009883a 	mov	r4,r22
 8005f58:	b80b883a 	mov	r5,r23
 8005f5c:	d9811e04 	addi	r6,sp,1144
 8005f60:	800b7780 	call	800b778 <__sprint_r>
 8005f64:	103a7d1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005f68:	dc012617 	ldw	r16,1176(sp)
 8005f6c:	d8c12017 	ldw	r3,1152(sp)
 8005f70:	da000404 	addi	r8,sp,16
 8005f74:	003faf06 	br	8005e34 <__alt_data_end+0xfc005e34>
 8005f78:	db012e17 	ldw	r12,1208(sp)
 8005f7c:	1805883a 	mov	r2,r3
 8005f80:	dac12d15 	stw	r11,1204(sp)
 8005f84:	0319c83a 	sub	r12,zero,r12
 8005f88:	db012e15 	stw	r12,1208(sp)
 8005f8c:	003a7e06 	br	8004988 <__alt_data_end+0xfc004988>
 8005f90:	18800044 	addi	r2,r3,1
 8005f94:	8c400814 	ori	r17,r17,32
 8005f98:	1c000047 	ldb	r16,1(r3)
 8005f9c:	0039bf06 	br	800469c <__alt_data_end+0xfc00469c>
 8005fa0:	b009883a 	mov	r4,r22
 8005fa4:	b80b883a 	mov	r5,r23
 8005fa8:	d9811e04 	addi	r6,sp,1144
 8005fac:	800b7780 	call	800b778 <__sprint_r>
 8005fb0:	103a6a1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8005fb4:	d8c12017 	ldw	r3,1152(sp)
 8005fb8:	da000404 	addi	r8,sp,16
 8005fbc:	003d0c06 	br	80053f0 <__alt_data_end+0xfc0053f0>
 8005fc0:	db012817 	ldw	r12,1184(sp)
 8005fc4:	d8c13117 	ldw	r3,1220(sp)
 8005fc8:	60e5c83a 	sub	r18,r12,r3
 8005fcc:	003adb06 	br	8004b3c <__alt_data_end+0xfc004b3c>
 8005fd0:	da013f15 	stw	r8,1276(sp)
 8005fd4:	80041e40 	call	80041e4 <strlen>
 8005fd8:	1025883a 	mov	r18,r2
 8005fdc:	da013f17 	ldw	r8,1276(sp)
 8005fe0:	903c8e0e 	bge	r18,zero,800521c <__alt_data_end+0xfc00521c>
 8005fe4:	0005883a 	mov	r2,zero
 8005fe8:	003c8c06 	br	800521c <__alt_data_end+0xfc00521c>
 8005fec:	b009883a 	mov	r4,r22
 8005ff0:	b80b883a 	mov	r5,r23
 8005ff4:	d9811e04 	addi	r6,sp,1144
 8005ff8:	800b7780 	call	800b778 <__sprint_r>
 8005ffc:	103a571e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8006000:	d8c12017 	ldw	r3,1152(sp)
 8006004:	d8811f17 	ldw	r2,1148(sp)
 8006008:	da000404 	addi	r8,sp,16
 800600c:	db013317 	ldw	r12,1228(sp)
 8006010:	dac13117 	ldw	r11,1220(sp)
 8006014:	10800044 	addi	r2,r2,1
 8006018:	60c7883a 	add	r3,r12,r3
 800601c:	42c00015 	stw	r11,0(r8)
 8006020:	43000115 	stw	r12,4(r8)
 8006024:	d8c12015 	stw	r3,1152(sp)
 8006028:	d8811f15 	stw	r2,1148(sp)
 800602c:	010001c4 	movi	r4,7
 8006030:	20bb590e 	bge	r4,r2,8004d98 <__alt_data_end+0xfc004d98>
 8006034:	003d7e06 	br	8005630 <__alt_data_end+0xfc005630>
 8006038:	010200b4 	movhi	r4,2050
 800603c:	2135e884 	addi	r4,r4,-10334
 8006040:	d9013615 	stw	r4,1240(sp)
 8006044:	003af606 	br	8004c20 <__alt_data_end+0xfc004c20>
 8006048:	d8812604 	addi	r2,sp,1176
 800604c:	d8800115 	stw	r2,4(sp)
 8006050:	d9413717 	ldw	r5,1244(sp)
 8006054:	d8812504 	addi	r2,sp,1172
 8006058:	d8800215 	stw	r2,8(sp)
 800605c:	d8812104 	addi	r2,sp,1156
 8006060:	da400015 	stw	r9,0(sp)
 8006064:	d8800315 	stw	r2,12(sp)
 8006068:	b009883a 	mov	r4,r22
 800606c:	900d883a 	mov	r6,r18
 8006070:	01c000c4 	movi	r7,3
 8006074:	da013f15 	stw	r8,1276(sp)
 8006078:	da413e15 	stw	r9,1272(sp)
 800607c:	80068500 	call	8006850 <_dtoa_r>
 8006080:	da413e17 	ldw	r9,1272(sp)
 8006084:	da013f17 	ldw	r8,1276(sp)
 8006088:	d8813115 	stw	r2,1220(sp)
 800608c:	4839883a 	mov	fp,r9
 8006090:	dac13117 	ldw	r11,1220(sp)
 8006094:	00801184 	movi	r2,70
 8006098:	5f15883a 	add	r10,r11,fp
 800609c:	a8bef01e 	bne	r21,r2,8005c60 <__alt_data_end+0xfc005c60>
 80060a0:	59000007 	ldb	r4,0(r11)
 80060a4:	00800c04 	movi	r2,48
 80060a8:	2080e026 	beq	r4,r2,800642c <___vfprintf_internal_r+0x1f2c>
 80060ac:	d8c12617 	ldw	r3,1176(sp)
 80060b0:	50d5883a 	add	r10,r10,r3
 80060b4:	003eea06 	br	8005c60 <__alt_data_end+0xfc005c60>
 80060b8:	0025883a 	mov	r18,zero
 80060bc:	003db306 	br	800578c <__alt_data_end+0xfc00578c>
 80060c0:	b009883a 	mov	r4,r22
 80060c4:	b80b883a 	mov	r5,r23
 80060c8:	d9811e04 	addi	r6,sp,1144
 80060cc:	800b7780 	call	800b778 <__sprint_r>
 80060d0:	103a221e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 80060d4:	d8c12017 	ldw	r3,1152(sp)
 80060d8:	da000404 	addi	r8,sp,16
 80060dc:	003daa06 	br	8005788 <__alt_data_end+0xfc005788>
 80060e0:	b009883a 	mov	r4,r22
 80060e4:	b80b883a 	mov	r5,r23
 80060e8:	d9811e04 	addi	r6,sp,1144
 80060ec:	800b7780 	call	800b778 <__sprint_r>
 80060f0:	103a1a1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 80060f4:	d8812617 	ldw	r2,1176(sp)
 80060f8:	d8c12017 	ldw	r3,1152(sp)
 80060fc:	da000404 	addi	r8,sp,16
 8006100:	003e2c06 	br	80059b4 <__alt_data_end+0xfc0059b4>
 8006104:	030200b4 	movhi	r12,2050
 8006108:	6335e484 	addi	r12,r12,-10350
 800610c:	db012c15 	stw	r12,1200(sp)
 8006110:	dac12c17 	ldw	r11,1200(sp)
 8006114:	1c07883a 	add	r3,r3,r16
 8006118:	10800044 	addi	r2,r2,1
 800611c:	42c00015 	stw	r11,0(r8)
 8006120:	44000115 	stw	r16,4(r8)
 8006124:	d8c12015 	stw	r3,1152(sp)
 8006128:	d8811f15 	stw	r2,1148(sp)
 800612c:	010001c4 	movi	r4,7
 8006130:	20bfae16 	blt	r4,r2,8005fec <__alt_data_end+0xfc005fec>
 8006134:	42000204 	addi	r8,r8,8
 8006138:	003fb406 	br	800600c <__alt_data_end+0xfc00600c>
 800613c:	030200b4 	movhi	r12,2050
 8006140:	6335e884 	addi	r12,r12,-10334
 8006144:	db013615 	stw	r12,1240(sp)
 8006148:	003b3806 	br	8004e2c <__alt_data_end+0xfc004e2c>
 800614c:	b009883a 	mov	r4,r22
 8006150:	b80b883a 	mov	r5,r23
 8006154:	d9811e04 	addi	r6,sp,1144
 8006158:	800b7780 	call	800b778 <__sprint_r>
 800615c:	1039ff1e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8006160:	d8812617 	ldw	r2,1176(sp)
 8006164:	db013317 	ldw	r12,1228(sp)
 8006168:	d8c12017 	ldw	r3,1152(sp)
 800616c:	da000404 	addi	r8,sp,16
 8006170:	6085c83a 	sub	r2,r12,r2
 8006174:	003e2006 	br	80059f8 <__alt_data_end+0xfc0059f8>
 8006178:	0021883a 	mov	r16,zero
 800617c:	003e1f06 	br	80059fc <__alt_data_end+0xfc0059fc>
 8006180:	00800184 	movi	r2,6
 8006184:	1240012e 	bgeu	r2,r9,800618c <___vfprintf_internal_r+0x1c8c>
 8006188:	1013883a 	mov	r9,r2
 800618c:	4825883a 	mov	r18,r9
 8006190:	4805883a 	mov	r2,r9
 8006194:	48009e16 	blt	r9,zero,8006410 <___vfprintf_internal_r+0x1f10>
 8006198:	d8812b15 	stw	r2,1196(sp)
 800619c:	008200b4 	movhi	r2,2050
 80061a0:	10b5e204 	addi	r2,r2,-10360
 80061a4:	d8813115 	stw	r2,1220(sp)
 80061a8:	dcc12d15 	stw	r19,1204(sp)
 80061ac:	d8013215 	stw	zero,1224(sp)
 80061b0:	d8013415 	stw	zero,1232(sp)
 80061b4:	0005883a 	mov	r2,zero
 80061b8:	003a6c06 	br	8004b6c <__alt_data_end+0xfc004b6c>
 80061bc:	008200b4 	movhi	r2,2050
 80061c0:	10b5d704 	addi	r2,r2,-10404
 80061c4:	d8813115 	stw	r2,1220(sp)
 80061c8:	003f4c06 	br	8005efc <__alt_data_end+0xfc005efc>
 80061cc:	00c00b44 	movi	r3,45
 80061d0:	d8812b15 	stw	r2,1196(sp)
 80061d4:	dc412d17 	ldw	r17,1204(sp)
 80061d8:	d8c12785 	stb	r3,1182(sp)
 80061dc:	dcc12d15 	stw	r19,1204(sp)
 80061e0:	d8013215 	stw	zero,1224(sp)
 80061e4:	00800b44 	movi	r2,45
 80061e8:	003a5d06 	br	8004b60 <__alt_data_end+0xfc004b60>
 80061ec:	d8c12617 	ldw	r3,1176(sp)
 80061f0:	00bfff44 	movi	r2,-3
 80061f4:	18800d16 	blt	r3,r2,800622c <___vfprintf_internal_r+0x1d2c>
 80061f8:	48c00c16 	blt	r9,r3,800622c <___vfprintf_internal_r+0x1d2c>
 80061fc:	d8c13415 	stw	r3,1232(sp)
 8006200:	040019c4 	movi	r16,103
 8006204:	003eb506 	br	8005cdc <__alt_data_end+0xfc005cdc>
 8006208:	05400b44 	movi	r21,45
 800620c:	dd412785 	stb	r21,1182(sp)
 8006210:	003a0f06 	br	8004a50 <__alt_data_end+0xfc004a50>
 8006214:	010200b4 	movhi	r4,2050
 8006218:	2135e484 	addi	r4,r4,-10350
 800621c:	d9012c15 	stw	r4,1200(sp)
 8006220:	003cb106 	br	80054e8 <__alt_data_end+0xfc0054e8>
 8006224:	5005883a 	mov	r2,r10
 8006228:	003ea106 	br	8005cb0 <__alt_data_end+0xfc005cb0>
 800622c:	843fff84 	addi	r16,r16,-2
 8006230:	1f3fffc4 	addi	fp,r3,-1
 8006234:	df012615 	stw	fp,1176(sp)
 8006238:	dc0122c5 	stb	r16,1163(sp)
 800623c:	e0009516 	blt	fp,zero,8006494 <___vfprintf_internal_r+0x1f94>
 8006240:	00800ac4 	movi	r2,43
 8006244:	d8812305 	stb	r2,1164(sp)
 8006248:	00800244 	movi	r2,9
 800624c:	1700690e 	bge	r2,fp,80063f4 <___vfprintf_internal_r+0x1ef4>
 8006250:	dd4122c4 	addi	r21,sp,1163
 8006254:	dc012c15 	stw	r16,1200(sp)
 8006258:	8825883a 	mov	r18,r17
 800625c:	a821883a 	mov	r16,r21
 8006260:	4023883a 	mov	r17,r8
 8006264:	e009883a 	mov	r4,fp
 8006268:	01400284 	movi	r5,10
 800626c:	800e0580 	call	800e058 <__modsi3>
 8006270:	10800c04 	addi	r2,r2,48
 8006274:	843fffc4 	addi	r16,r16,-1
 8006278:	e009883a 	mov	r4,fp
 800627c:	01400284 	movi	r5,10
 8006280:	80800005 	stb	r2,0(r16)
 8006284:	800e0040 	call	800e004 <__divsi3>
 8006288:	1039883a 	mov	fp,r2
 800628c:	00800244 	movi	r2,9
 8006290:	173ff416 	blt	r2,fp,8006264 <__alt_data_end+0xfc006264>
 8006294:	8811883a 	mov	r8,r17
 8006298:	e0800c04 	addi	r2,fp,48
 800629c:	9023883a 	mov	r17,r18
 80062a0:	8025883a 	mov	r18,r16
 80062a4:	913fffc4 	addi	r4,r18,-1
 80062a8:	90bfffc5 	stb	r2,-1(r18)
 80062ac:	dc012c17 	ldw	r16,1200(sp)
 80062b0:	25408e2e 	bgeu	r4,r21,80064ec <___vfprintf_internal_r+0x1fec>
 80062b4:	d9412384 	addi	r5,sp,1166
 80062b8:	2c8bc83a 	sub	r5,r5,r18
 80062bc:	d8c12344 	addi	r3,sp,1165
 80062c0:	a94b883a 	add	r5,r21,r5
 80062c4:	00000106 	br	80062cc <___vfprintf_internal_r+0x1dcc>
 80062c8:	20800003 	ldbu	r2,0(r4)
 80062cc:	18800005 	stb	r2,0(r3)
 80062d0:	18c00044 	addi	r3,r3,1
 80062d4:	21000044 	addi	r4,r4,1
 80062d8:	197ffb1e 	bne	r3,r5,80062c8 <__alt_data_end+0xfc0062c8>
 80062dc:	d8812304 	addi	r2,sp,1164
 80062e0:	1485c83a 	sub	r2,r2,r18
 80062e4:	d8c12344 	addi	r3,sp,1165
 80062e8:	1885883a 	add	r2,r3,r2
 80062ec:	dac13317 	ldw	r11,1228(sp)
 80062f0:	156bc83a 	sub	r21,r2,r21
 80062f4:	dd413a15 	stw	r21,1256(sp)
 80062f8:	00800044 	movi	r2,1
 80062fc:	5d65883a 	add	r18,r11,r21
 8006300:	12c0770e 	bge	r2,r11,80064e0 <___vfprintf_internal_r+0x1fe0>
 8006304:	94800044 	addi	r18,r18,1
 8006308:	9005883a 	mov	r2,r18
 800630c:	90007216 	blt	r18,zero,80064d8 <___vfprintf_internal_r+0x1fd8>
 8006310:	d8013415 	stw	zero,1232(sp)
 8006314:	003e7906 	br	8005cfc <__alt_data_end+0xfc005cfc>
 8006318:	da412b15 	stw	r9,1196(sp)
 800631c:	dd412783 	ldbu	r21,1182(sp)
 8006320:	4825883a 	mov	r18,r9
 8006324:	dcc12d15 	stw	r19,1204(sp)
 8006328:	d8013215 	stw	zero,1224(sp)
 800632c:	d8013415 	stw	zero,1232(sp)
 8006330:	003a0706 	br	8004b50 <__alt_data_end+0xfc004b50>
 8006334:	b009883a 	mov	r4,r22
 8006338:	b80b883a 	mov	r5,r23
 800633c:	d9811e04 	addi	r6,sp,1144
 8006340:	800b7780 	call	800b778 <__sprint_r>
 8006344:	1039851e 	bne	r2,zero,800495c <__alt_data_end+0xfc00495c>
 8006348:	dc012617 	ldw	r16,1176(sp)
 800634c:	d8c12017 	ldw	r3,1152(sp)
 8006350:	d8811f17 	ldw	r2,1148(sp)
 8006354:	da000404 	addi	r8,sp,16
 8006358:	003ec706 	br	8005e78 <__alt_data_end+0xfc005e78>
 800635c:	483e1a1e 	bne	r9,zero,8005bc8 <__alt_data_end+0xfc005bc8>
 8006360:	9013883a 	mov	r9,r18
 8006364:	003e1806 	br	8005bc8 <__alt_data_end+0xfc005bc8>
 8006368:	00c00b44 	movi	r3,45
 800636c:	64a0003c 	xorhi	r18,r12,32768
 8006370:	d8c12b05 	stb	r3,1196(sp)
 8006374:	003e1a06 	br	8005be0 <__alt_data_end+0xfc005be0>
 8006378:	4f000044 	addi	fp,r9,1
 800637c:	003e1f06 	br	8005bfc <__alt_data_end+0xfc005bfc>
 8006380:	02400184 	movi	r9,6
 8006384:	003e1006 	br	8005bc8 <__alt_data_end+0xfc005bc8>
 8006388:	d8c13417 	ldw	r3,1232(sp)
 800638c:	00c04b0e 	bge	zero,r3,80064bc <___vfprintf_internal_r+0x1fbc>
 8006390:	04800044 	movi	r18,1
 8006394:	dac13317 	ldw	r11,1228(sp)
 8006398:	92e5883a 	add	r18,r18,r11
 800639c:	9005883a 	mov	r2,r18
 80063a0:	903e560e 	bge	r18,zero,8005cfc <__alt_data_end+0xfc005cfc>
 80063a4:	0005883a 	mov	r2,zero
 80063a8:	003e5406 	br	8005cfc <__alt_data_end+0xfc005cfc>
 80063ac:	d8c12617 	ldw	r3,1176(sp)
 80063b0:	d8c13415 	stw	r3,1232(sp)
 80063b4:	00c03b0e 	bge	zero,r3,80064a4 <___vfprintf_internal_r+0x1fa4>
 80063b8:	4800081e 	bne	r9,zero,80063dc <___vfprintf_internal_r+0x1edc>
 80063bc:	8c40004c 	andi	r17,r17,1
 80063c0:	8800061e 	bne	r17,zero,80063dc <___vfprintf_internal_r+0x1edc>
 80063c4:	1805883a 	mov	r2,r3
 80063c8:	183e4b0e 	bge	r3,zero,8005cf8 <__alt_data_end+0xfc005cf8>
 80063cc:	0005883a 	mov	r2,zero
 80063d0:	003e4906 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 80063d4:	d8812117 	ldw	r2,1156(sp)
 80063d8:	003e3506 	br	8005cb0 <__alt_data_end+0xfc005cb0>
 80063dc:	dac13417 	ldw	r11,1232(sp)
 80063e0:	4a400044 	addi	r9,r9,1
 80063e4:	5a65883a 	add	r18,r11,r9
 80063e8:	9005883a 	mov	r2,r18
 80063ec:	903e430e 	bge	r18,zero,8005cfc <__alt_data_end+0xfc005cfc>
 80063f0:	003fec06 	br	80063a4 <__alt_data_end+0xfc0063a4>
 80063f4:	00800c04 	movi	r2,48
 80063f8:	e0c00c04 	addi	r3,fp,48
 80063fc:	d8812345 	stb	r2,1165(sp)
 8006400:	d8c12385 	stb	r3,1166(sp)
 8006404:	d88123c4 	addi	r2,sp,1167
 8006408:	dd4122c4 	addi	r21,sp,1163
 800640c:	003fb706 	br	80062ec <__alt_data_end+0xfc0062ec>
 8006410:	0005883a 	mov	r2,zero
 8006414:	003f6006 	br	8006198 <__alt_data_end+0xfc006198>
 8006418:	db013417 	ldw	r12,1232(sp)
 800641c:	64800044 	addi	r18,r12,1
 8006420:	9005883a 	mov	r2,r18
 8006424:	903e350e 	bge	r18,zero,8005cfc <__alt_data_end+0xfc005cfc>
 8006428:	003fde06 	br	80063a4 <__alt_data_end+0xfc0063a4>
 800642c:	d9013717 	ldw	r4,1244(sp)
 8006430:	900b883a 	mov	r5,r18
 8006434:	000d883a 	mov	r6,zero
 8006438:	000f883a 	mov	r7,zero
 800643c:	da013f15 	stw	r8,1276(sp)
 8006440:	da413e15 	stw	r9,1272(sp)
 8006444:	da813d15 	stw	r10,1268(sp)
 8006448:	800f22c0 	call	800f22c <__eqdf2>
 800644c:	da013f17 	ldw	r8,1276(sp)
 8006450:	da413e17 	ldw	r9,1272(sp)
 8006454:	da813d17 	ldw	r10,1268(sp)
 8006458:	103f1426 	beq	r2,zero,80060ac <__alt_data_end+0xfc0060ac>
 800645c:	00800044 	movi	r2,1
 8006460:	1707c83a 	sub	r3,r2,fp
 8006464:	d8c12615 	stw	r3,1176(sp)
 8006468:	003f1106 	br	80060b0 <__alt_data_end+0xfc0060b0>
 800646c:	dac12d17 	ldw	r11,1204(sp)
 8006470:	5a400017 	ldw	r9,0(r11)
 8006474:	5ac00104 	addi	r11,r11,4
 8006478:	dac12d15 	stw	r11,1204(sp)
 800647c:	483ec60e 	bge	r9,zero,8005f98 <__alt_data_end+0xfc005f98>
 8006480:	027fffc4 	movi	r9,-1
 8006484:	1c000047 	ldb	r16,1(r3)
 8006488:	00388406 	br	800469c <__alt_data_end+0xfc00469c>
 800648c:	043fffc4 	movi	r16,-1
 8006490:	00391006 	br	80048d4 <__alt_data_end+0xfc0048d4>
 8006494:	00800b44 	movi	r2,45
 8006498:	0739c83a 	sub	fp,zero,fp
 800649c:	d8812305 	stb	r2,1164(sp)
 80064a0:	003f6906 	br	8006248 <__alt_data_end+0xfc006248>
 80064a4:	4800081e 	bne	r9,zero,80064c8 <___vfprintf_internal_r+0x1fc8>
 80064a8:	8c40004c 	andi	r17,r17,1
 80064ac:	8800061e 	bne	r17,zero,80064c8 <___vfprintf_internal_r+0x1fc8>
 80064b0:	00800044 	movi	r2,1
 80064b4:	1025883a 	mov	r18,r2
 80064b8:	003e1006 	br	8005cfc <__alt_data_end+0xfc005cfc>
 80064bc:	04800084 	movi	r18,2
 80064c0:	90e5c83a 	sub	r18,r18,r3
 80064c4:	003fb306 	br	8006394 <__alt_data_end+0xfc006394>
 80064c8:	4c800084 	addi	r18,r9,2
 80064cc:	9005883a 	mov	r2,r18
 80064d0:	903e0a0e 	bge	r18,zero,8005cfc <__alt_data_end+0xfc005cfc>
 80064d4:	003fb306 	br	80063a4 <__alt_data_end+0xfc0063a4>
 80064d8:	0005883a 	mov	r2,zero
 80064dc:	003f8c06 	br	8006310 <__alt_data_end+0xfc006310>
 80064e0:	88a2703a 	and	r17,r17,r2
 80064e4:	883f8826 	beq	r17,zero,8006308 <__alt_data_end+0xfc006308>
 80064e8:	003f8606 	br	8006304 <__alt_data_end+0xfc006304>
 80064ec:	d8812344 	addi	r2,sp,1165
 80064f0:	003f7e06 	br	80062ec <__alt_data_end+0xfc0062ec>
 80064f4:	d8c12617 	ldw	r3,1176(sp)
 80064f8:	003f4d06 	br	8006230 <__alt_data_end+0xfc006230>

080064fc <__vfprintf_internal>:
 80064fc:	2007883a 	mov	r3,r4
 8006500:	010200b4 	movhi	r4,2050
 8006504:	213e0b04 	addi	r4,r4,-2004
 8006508:	21000017 	ldw	r4,0(r4)
 800650c:	2805883a 	mov	r2,r5
 8006510:	300f883a 	mov	r7,r6
 8006514:	180b883a 	mov	r5,r3
 8006518:	100d883a 	mov	r6,r2
 800651c:	80045001 	jmpi	8004500 <___vfprintf_internal_r>

08006520 <__swsetup_r>:
 8006520:	008200b4 	movhi	r2,2050
 8006524:	defffd04 	addi	sp,sp,-12
 8006528:	10be0b04 	addi	r2,r2,-2004
 800652c:	dc400115 	stw	r17,4(sp)
 8006530:	2023883a 	mov	r17,r4
 8006534:	11000017 	ldw	r4,0(r2)
 8006538:	dc000015 	stw	r16,0(sp)
 800653c:	dfc00215 	stw	ra,8(sp)
 8006540:	2821883a 	mov	r16,r5
 8006544:	20000226 	beq	r4,zero,8006550 <__swsetup_r+0x30>
 8006548:	20c00e17 	ldw	r3,56(r4)
 800654c:	18002e26 	beq	r3,zero,8006608 <__swsetup_r+0xe8>
 8006550:	8080030b 	ldhu	r2,12(r16)
 8006554:	10c0020c 	andi	r3,r2,8
 8006558:	100d883a 	mov	r6,r2
 800655c:	18000f26 	beq	r3,zero,800659c <__swsetup_r+0x7c>
 8006560:	80c00417 	ldw	r3,16(r16)
 8006564:	18001526 	beq	r3,zero,80065bc <__swsetup_r+0x9c>
 8006568:	1100004c 	andi	r4,r2,1
 800656c:	20001c1e 	bne	r4,zero,80065e0 <__swsetup_r+0xc0>
 8006570:	1080008c 	andi	r2,r2,2
 8006574:	1000261e 	bne	r2,zero,8006610 <__swsetup_r+0xf0>
 8006578:	80800517 	ldw	r2,20(r16)
 800657c:	80800215 	stw	r2,8(r16)
 8006580:	18001c26 	beq	r3,zero,80065f4 <__swsetup_r+0xd4>
 8006584:	0005883a 	mov	r2,zero
 8006588:	dfc00217 	ldw	ra,8(sp)
 800658c:	dc400117 	ldw	r17,4(sp)
 8006590:	dc000017 	ldw	r16,0(sp)
 8006594:	dec00304 	addi	sp,sp,12
 8006598:	f800283a 	ret
 800659c:	3080040c 	andi	r2,r6,16
 80065a0:	10001726 	beq	r2,zero,8006600 <__swsetup_r+0xe0>
 80065a4:	3080010c 	andi	r2,r6,4
 80065a8:	10001b1e 	bne	r2,zero,8006618 <__swsetup_r+0xf8>
 80065ac:	80c00417 	ldw	r3,16(r16)
 80065b0:	30800214 	ori	r2,r6,8
 80065b4:	8080030d 	sth	r2,12(r16)
 80065b8:	183feb1e 	bne	r3,zero,8006568 <__alt_data_end+0xfc006568>
 80065bc:	1140a00c 	andi	r5,r2,640
 80065c0:	01008004 	movi	r4,512
 80065c4:	293fe826 	beq	r5,r4,8006568 <__alt_data_end+0xfc006568>
 80065c8:	8809883a 	mov	r4,r17
 80065cc:	800b883a 	mov	r5,r16
 80065d0:	80090780 	call	8009078 <__smakebuf_r>
 80065d4:	8080030b 	ldhu	r2,12(r16)
 80065d8:	80c00417 	ldw	r3,16(r16)
 80065dc:	003fe206 	br	8006568 <__alt_data_end+0xfc006568>
 80065e0:	80800517 	ldw	r2,20(r16)
 80065e4:	80000215 	stw	zero,8(r16)
 80065e8:	0085c83a 	sub	r2,zero,r2
 80065ec:	80800615 	stw	r2,24(r16)
 80065f0:	183fe41e 	bne	r3,zero,8006584 <__alt_data_end+0xfc006584>
 80065f4:	8080030b 	ldhu	r2,12(r16)
 80065f8:	1080200c 	andi	r2,r2,128
 80065fc:	103fe226 	beq	r2,zero,8006588 <__alt_data_end+0xfc006588>
 8006600:	00bfffc4 	movi	r2,-1
 8006604:	003fe006 	br	8006588 <__alt_data_end+0xfc006588>
 8006608:	80085200 	call	8008520 <__sinit>
 800660c:	003fd006 	br	8006550 <__alt_data_end+0xfc006550>
 8006610:	0005883a 	mov	r2,zero
 8006614:	003fd906 	br	800657c <__alt_data_end+0xfc00657c>
 8006618:	81400c17 	ldw	r5,48(r16)
 800661c:	28000626 	beq	r5,zero,8006638 <__swsetup_r+0x118>
 8006620:	80801004 	addi	r2,r16,64
 8006624:	28800326 	beq	r5,r2,8006634 <__swsetup_r+0x114>
 8006628:	8809883a 	mov	r4,r17
 800662c:	80086940 	call	8008694 <_free_r>
 8006630:	8180030b 	ldhu	r6,12(r16)
 8006634:	80000c15 	stw	zero,48(r16)
 8006638:	80c00417 	ldw	r3,16(r16)
 800663c:	00bff6c4 	movi	r2,-37
 8006640:	118c703a 	and	r6,r2,r6
 8006644:	80000115 	stw	zero,4(r16)
 8006648:	80c00015 	stw	r3,0(r16)
 800664c:	003fd806 	br	80065b0 <__alt_data_end+0xfc0065b0>

08006650 <quorem>:
 8006650:	defff704 	addi	sp,sp,-36
 8006654:	dc800215 	stw	r18,8(sp)
 8006658:	20800417 	ldw	r2,16(r4)
 800665c:	2c800417 	ldw	r18,16(r5)
 8006660:	dfc00815 	stw	ra,32(sp)
 8006664:	ddc00715 	stw	r23,28(sp)
 8006668:	dd800615 	stw	r22,24(sp)
 800666c:	dd400515 	stw	r21,20(sp)
 8006670:	dd000415 	stw	r20,16(sp)
 8006674:	dcc00315 	stw	r19,12(sp)
 8006678:	dc400115 	stw	r17,4(sp)
 800667c:	dc000015 	stw	r16,0(sp)
 8006680:	14807116 	blt	r2,r18,8006848 <quorem+0x1f8>
 8006684:	94bfffc4 	addi	r18,r18,-1
 8006688:	94ad883a 	add	r22,r18,r18
 800668c:	b5ad883a 	add	r22,r22,r22
 8006690:	2c400504 	addi	r17,r5,20
 8006694:	8da9883a 	add	r20,r17,r22
 8006698:	25400504 	addi	r21,r4,20
 800669c:	282f883a 	mov	r23,r5
 80066a0:	adad883a 	add	r22,r21,r22
 80066a4:	a1400017 	ldw	r5,0(r20)
 80066a8:	2021883a 	mov	r16,r4
 80066ac:	b1000017 	ldw	r4,0(r22)
 80066b0:	29400044 	addi	r5,r5,1
 80066b4:	800e0b40 	call	800e0b4 <__udivsi3>
 80066b8:	1027883a 	mov	r19,r2
 80066bc:	10002c26 	beq	r2,zero,8006770 <quorem+0x120>
 80066c0:	a813883a 	mov	r9,r21
 80066c4:	8811883a 	mov	r8,r17
 80066c8:	0009883a 	mov	r4,zero
 80066cc:	000d883a 	mov	r6,zero
 80066d0:	41c00017 	ldw	r7,0(r8)
 80066d4:	49400017 	ldw	r5,0(r9)
 80066d8:	42000104 	addi	r8,r8,4
 80066dc:	38bfffcc 	andi	r2,r7,65535
 80066e0:	14c5383a 	mul	r2,r2,r19
 80066e4:	380ed43a 	srli	r7,r7,16
 80066e8:	28ffffcc 	andi	r3,r5,65535
 80066ec:	2085883a 	add	r2,r4,r2
 80066f0:	1008d43a 	srli	r4,r2,16
 80066f4:	3ccf383a 	mul	r7,r7,r19
 80066f8:	198d883a 	add	r6,r3,r6
 80066fc:	10ffffcc 	andi	r3,r2,65535
 8006700:	30c7c83a 	sub	r3,r6,r3
 8006704:	280ad43a 	srli	r5,r5,16
 8006708:	21c9883a 	add	r4,r4,r7
 800670c:	180dd43a 	srai	r6,r3,16
 8006710:	20bfffcc 	andi	r2,r4,65535
 8006714:	288bc83a 	sub	r5,r5,r2
 8006718:	298b883a 	add	r5,r5,r6
 800671c:	280e943a 	slli	r7,r5,16
 8006720:	18ffffcc 	andi	r3,r3,65535
 8006724:	2008d43a 	srli	r4,r4,16
 8006728:	38ceb03a 	or	r7,r7,r3
 800672c:	49c00015 	stw	r7,0(r9)
 8006730:	280dd43a 	srai	r6,r5,16
 8006734:	4a400104 	addi	r9,r9,4
 8006738:	a23fe52e 	bgeu	r20,r8,80066d0 <__alt_data_end+0xfc0066d0>
 800673c:	b0800017 	ldw	r2,0(r22)
 8006740:	10000b1e 	bne	r2,zero,8006770 <quorem+0x120>
 8006744:	b0bfff04 	addi	r2,r22,-4
 8006748:	a880082e 	bgeu	r21,r2,800676c <quorem+0x11c>
 800674c:	b0ffff17 	ldw	r3,-4(r22)
 8006750:	18000326 	beq	r3,zero,8006760 <quorem+0x110>
 8006754:	00000506 	br	800676c <quorem+0x11c>
 8006758:	10c00017 	ldw	r3,0(r2)
 800675c:	1800031e 	bne	r3,zero,800676c <quorem+0x11c>
 8006760:	10bfff04 	addi	r2,r2,-4
 8006764:	94bfffc4 	addi	r18,r18,-1
 8006768:	a8bffb36 	bltu	r21,r2,8006758 <__alt_data_end+0xfc006758>
 800676c:	84800415 	stw	r18,16(r16)
 8006770:	8009883a 	mov	r4,r16
 8006774:	b80b883a 	mov	r5,r23
 8006778:	800a6000 	call	800a600 <__mcmp>
 800677c:	10002616 	blt	r2,zero,8006818 <quorem+0x1c8>
 8006780:	9cc00044 	addi	r19,r19,1
 8006784:	a80d883a 	mov	r6,r21
 8006788:	000b883a 	mov	r5,zero
 800678c:	31000017 	ldw	r4,0(r6)
 8006790:	88800017 	ldw	r2,0(r17)
 8006794:	31800104 	addi	r6,r6,4
 8006798:	20ffffcc 	andi	r3,r4,65535
 800679c:	194b883a 	add	r5,r3,r5
 80067a0:	10ffffcc 	andi	r3,r2,65535
 80067a4:	28c7c83a 	sub	r3,r5,r3
 80067a8:	1004d43a 	srli	r2,r2,16
 80067ac:	2008d43a 	srli	r4,r4,16
 80067b0:	180bd43a 	srai	r5,r3,16
 80067b4:	18ffffcc 	andi	r3,r3,65535
 80067b8:	2089c83a 	sub	r4,r4,r2
 80067bc:	2149883a 	add	r4,r4,r5
 80067c0:	2004943a 	slli	r2,r4,16
 80067c4:	8c400104 	addi	r17,r17,4
 80067c8:	200bd43a 	srai	r5,r4,16
 80067cc:	10c6b03a 	or	r3,r2,r3
 80067d0:	30ffff15 	stw	r3,-4(r6)
 80067d4:	a47fed2e 	bgeu	r20,r17,800678c <__alt_data_end+0xfc00678c>
 80067d8:	9485883a 	add	r2,r18,r18
 80067dc:	1085883a 	add	r2,r2,r2
 80067e0:	a887883a 	add	r3,r21,r2
 80067e4:	18800017 	ldw	r2,0(r3)
 80067e8:	10000b1e 	bne	r2,zero,8006818 <quorem+0x1c8>
 80067ec:	18bfff04 	addi	r2,r3,-4
 80067f0:	a880082e 	bgeu	r21,r2,8006814 <quorem+0x1c4>
 80067f4:	18ffff17 	ldw	r3,-4(r3)
 80067f8:	18000326 	beq	r3,zero,8006808 <quorem+0x1b8>
 80067fc:	00000506 	br	8006814 <quorem+0x1c4>
 8006800:	10c00017 	ldw	r3,0(r2)
 8006804:	1800031e 	bne	r3,zero,8006814 <quorem+0x1c4>
 8006808:	10bfff04 	addi	r2,r2,-4
 800680c:	94bfffc4 	addi	r18,r18,-1
 8006810:	a8bffb36 	bltu	r21,r2,8006800 <__alt_data_end+0xfc006800>
 8006814:	84800415 	stw	r18,16(r16)
 8006818:	9805883a 	mov	r2,r19
 800681c:	dfc00817 	ldw	ra,32(sp)
 8006820:	ddc00717 	ldw	r23,28(sp)
 8006824:	dd800617 	ldw	r22,24(sp)
 8006828:	dd400517 	ldw	r21,20(sp)
 800682c:	dd000417 	ldw	r20,16(sp)
 8006830:	dcc00317 	ldw	r19,12(sp)
 8006834:	dc800217 	ldw	r18,8(sp)
 8006838:	dc400117 	ldw	r17,4(sp)
 800683c:	dc000017 	ldw	r16,0(sp)
 8006840:	dec00904 	addi	sp,sp,36
 8006844:	f800283a 	ret
 8006848:	0005883a 	mov	r2,zero
 800684c:	003ff306 	br	800681c <__alt_data_end+0xfc00681c>

08006850 <_dtoa_r>:
 8006850:	20801017 	ldw	r2,64(r4)
 8006854:	deffde04 	addi	sp,sp,-136
 8006858:	dd401d15 	stw	r21,116(sp)
 800685c:	dcc01b15 	stw	r19,108(sp)
 8006860:	dc801a15 	stw	r18,104(sp)
 8006864:	dc401915 	stw	r17,100(sp)
 8006868:	dc001815 	stw	r16,96(sp)
 800686c:	dfc02115 	stw	ra,132(sp)
 8006870:	df002015 	stw	fp,128(sp)
 8006874:	ddc01f15 	stw	r23,124(sp)
 8006878:	dd801e15 	stw	r22,120(sp)
 800687c:	dd001c15 	stw	r20,112(sp)
 8006880:	d9c00315 	stw	r7,12(sp)
 8006884:	2021883a 	mov	r16,r4
 8006888:	302b883a 	mov	r21,r6
 800688c:	2825883a 	mov	r18,r5
 8006890:	dc402417 	ldw	r17,144(sp)
 8006894:	3027883a 	mov	r19,r6
 8006898:	10000826 	beq	r2,zero,80068bc <_dtoa_r+0x6c>
 800689c:	21801117 	ldw	r6,68(r4)
 80068a0:	00c00044 	movi	r3,1
 80068a4:	100b883a 	mov	r5,r2
 80068a8:	1986983a 	sll	r3,r3,r6
 80068ac:	11800115 	stw	r6,4(r2)
 80068b0:	10c00215 	stw	r3,8(r2)
 80068b4:	8009de80 	call	8009de8 <_Bfree>
 80068b8:	80001015 	stw	zero,64(r16)
 80068bc:	a8002d16 	blt	r21,zero,8006974 <_dtoa_r+0x124>
 80068c0:	88000015 	stw	zero,0(r17)
 80068c4:	a8dffc2c 	andhi	r3,r21,32752
 80068c8:	009ffc34 	movhi	r2,32752
 80068cc:	18801b26 	beq	r3,r2,800693c <_dtoa_r+0xec>
 80068d0:	9009883a 	mov	r4,r18
 80068d4:	980b883a 	mov	r5,r19
 80068d8:	000d883a 	mov	r6,zero
 80068dc:	000f883a 	mov	r7,zero
 80068e0:	800f22c0 	call	800f22c <__eqdf2>
 80068e4:	10002a1e 	bne	r2,zero,8006990 <_dtoa_r+0x140>
 80068e8:	d8c02317 	ldw	r3,140(sp)
 80068ec:	d9002517 	ldw	r4,148(sp)
 80068f0:	00800044 	movi	r2,1
 80068f4:	18800015 	stw	r2,0(r3)
 80068f8:	2001a226 	beq	r4,zero,8006f84 <_dtoa_r+0x734>
 80068fc:	008200b4 	movhi	r2,2050
 8006900:	10b5e444 	addi	r2,r2,-10351
 8006904:	20800015 	stw	r2,0(r4)
 8006908:	10bfffc4 	addi	r2,r2,-1
 800690c:	dfc02117 	ldw	ra,132(sp)
 8006910:	df002017 	ldw	fp,128(sp)
 8006914:	ddc01f17 	ldw	r23,124(sp)
 8006918:	dd801e17 	ldw	r22,120(sp)
 800691c:	dd401d17 	ldw	r21,116(sp)
 8006920:	dd001c17 	ldw	r20,112(sp)
 8006924:	dcc01b17 	ldw	r19,108(sp)
 8006928:	dc801a17 	ldw	r18,104(sp)
 800692c:	dc401917 	ldw	r17,100(sp)
 8006930:	dc001817 	ldw	r16,96(sp)
 8006934:	dec02204 	addi	sp,sp,136
 8006938:	f800283a 	ret
 800693c:	d8c02317 	ldw	r3,140(sp)
 8006940:	0089c3c4 	movi	r2,9999
 8006944:	18800015 	stw	r2,0(r3)
 8006948:	90017c26 	beq	r18,zero,8006f3c <_dtoa_r+0x6ec>
 800694c:	008200b4 	movhi	r2,2050
 8006950:	10b69004 	addi	r2,r2,-9664
 8006954:	d9002517 	ldw	r4,148(sp)
 8006958:	203fec26 	beq	r4,zero,800690c <__alt_data_end+0xfc00690c>
 800695c:	10c000c7 	ldb	r3,3(r2)
 8006960:	18017d1e 	bne	r3,zero,8006f58 <_dtoa_r+0x708>
 8006964:	10c000c4 	addi	r3,r2,3
 8006968:	d9802517 	ldw	r6,148(sp)
 800696c:	30c00015 	stw	r3,0(r6)
 8006970:	003fe606 	br	800690c <__alt_data_end+0xfc00690c>
 8006974:	04e00034 	movhi	r19,32768
 8006978:	9cffffc4 	addi	r19,r19,-1
 800697c:	00800044 	movi	r2,1
 8006980:	ace6703a 	and	r19,r21,r19
 8006984:	88800015 	stw	r2,0(r17)
 8006988:	982b883a 	mov	r21,r19
 800698c:	003fcd06 	br	80068c4 <__alt_data_end+0xfc0068c4>
 8006990:	d8800204 	addi	r2,sp,8
 8006994:	a822d53a 	srli	r17,r21,20
 8006998:	d8800015 	stw	r2,0(sp)
 800699c:	8009883a 	mov	r4,r16
 80069a0:	900b883a 	mov	r5,r18
 80069a4:	980d883a 	mov	r6,r19
 80069a8:	d9c00104 	addi	r7,sp,4
 80069ac:	800a9740 	call	800a974 <__d2b>
 80069b0:	1039883a 	mov	fp,r2
 80069b4:	88016a1e 	bne	r17,zero,8006f60 <_dtoa_r+0x710>
 80069b8:	dd000217 	ldw	r20,8(sp)
 80069bc:	dc400117 	ldw	r17,4(sp)
 80069c0:	00befbc4 	movi	r2,-1041
 80069c4:	a463883a 	add	r17,r20,r17
 80069c8:	8882ea16 	blt	r17,r2,8007574 <_dtoa_r+0xd24>
 80069cc:	00bf0384 	movi	r2,-1010
 80069d0:	1445c83a 	sub	r2,r2,r17
 80069d4:	89010484 	addi	r4,r17,1042
 80069d8:	a8aa983a 	sll	r21,r21,r2
 80069dc:	9108d83a 	srl	r4,r18,r4
 80069e0:	a908b03a 	or	r4,r21,r4
 80069e4:	80105bc0 	call	80105bc <__floatunsidf>
 80069e8:	017f8434 	movhi	r5,65040
 80069ec:	01800044 	movi	r6,1
 80069f0:	1009883a 	mov	r4,r2
 80069f4:	194b883a 	add	r5,r3,r5
 80069f8:	8c7fffc4 	addi	r17,r17,-1
 80069fc:	d9800f15 	stw	r6,60(sp)
 8006a00:	000d883a 	mov	r6,zero
 8006a04:	01cffe34 	movhi	r7,16376
 8006a08:	800fb940 	call	800fb94 <__subdf3>
 8006a0c:	0198dbf4 	movhi	r6,25455
 8006a10:	01cff4f4 	movhi	r7,16339
 8006a14:	1009883a 	mov	r4,r2
 8006a18:	180b883a 	mov	r5,r3
 8006a1c:	3190d844 	addi	r6,r6,17249
 8006a20:	39e1e9c4 	addi	r7,r7,-30809
 8006a24:	800f4700 	call	800f470 <__muldf3>
 8006a28:	01a2d874 	movhi	r6,35681
 8006a2c:	01cff1f4 	movhi	r7,16327
 8006a30:	180b883a 	mov	r5,r3
 8006a34:	31b22cc4 	addi	r6,r6,-14157
 8006a38:	39e28a04 	addi	r7,r7,-30168
 8006a3c:	1009883a 	mov	r4,r2
 8006a40:	800e0c40 	call	800e0c4 <__adddf3>
 8006a44:	8809883a 	mov	r4,r17
 8006a48:	102d883a 	mov	r22,r2
 8006a4c:	182b883a 	mov	r21,r3
 8006a50:	80104ec0 	call	80104ec <__floatsidf>
 8006a54:	019427f4 	movhi	r6,20639
 8006a58:	01cff4f4 	movhi	r7,16339
 8006a5c:	1009883a 	mov	r4,r2
 8006a60:	180b883a 	mov	r5,r3
 8006a64:	319e7ec4 	addi	r6,r6,31227
 8006a68:	39d104c4 	addi	r7,r7,17427
 8006a6c:	800f4700 	call	800f470 <__muldf3>
 8006a70:	b009883a 	mov	r4,r22
 8006a74:	a80b883a 	mov	r5,r21
 8006a78:	100d883a 	mov	r6,r2
 8006a7c:	180f883a 	mov	r7,r3
 8006a80:	800e0c40 	call	800e0c4 <__adddf3>
 8006a84:	1009883a 	mov	r4,r2
 8006a88:	180b883a 	mov	r5,r3
 8006a8c:	102d883a 	mov	r22,r2
 8006a90:	182b883a 	mov	r21,r3
 8006a94:	80104640 	call	8010464 <__fixdfsi>
 8006a98:	b009883a 	mov	r4,r22
 8006a9c:	a80b883a 	mov	r5,r21
 8006aa0:	000d883a 	mov	r6,zero
 8006aa4:	000f883a 	mov	r7,zero
 8006aa8:	d8800515 	stw	r2,20(sp)
 8006aac:	800f3900 	call	800f390 <__ledf2>
 8006ab0:	10023116 	blt	r2,zero,8007378 <_dtoa_r+0xb28>
 8006ab4:	d8c00517 	ldw	r3,20(sp)
 8006ab8:	00800584 	movi	r2,22
 8006abc:	10c21f36 	bltu	r2,r3,800733c <_dtoa_r+0xaec>
 8006ac0:	180490fa 	slli	r2,r3,3
 8006ac4:	00c200b4 	movhi	r3,2050
 8006ac8:	18f6ac04 	addi	r3,r3,-9552
 8006acc:	1885883a 	add	r2,r3,r2
 8006ad0:	11000017 	ldw	r4,0(r2)
 8006ad4:	11400117 	ldw	r5,4(r2)
 8006ad8:	900d883a 	mov	r6,r18
 8006adc:	980f883a 	mov	r7,r19
 8006ae0:	800f2b00 	call	800f2b0 <__gedf2>
 8006ae4:	0082a70e 	bge	zero,r2,8007584 <_dtoa_r+0xd34>
 8006ae8:	d9000517 	ldw	r4,20(sp)
 8006aec:	d8000c15 	stw	zero,48(sp)
 8006af0:	213fffc4 	addi	r4,r4,-1
 8006af4:	d9000515 	stw	r4,20(sp)
 8006af8:	a463c83a 	sub	r17,r20,r17
 8006afc:	8dbfffc4 	addi	r22,r17,-1
 8006b00:	b0021916 	blt	r22,zero,8007368 <_dtoa_r+0xb18>
 8006b04:	d8000815 	stw	zero,32(sp)
 8006b08:	d8800517 	ldw	r2,20(sp)
 8006b0c:	10020e16 	blt	r2,zero,8007348 <_dtoa_r+0xaf8>
 8006b10:	b0ad883a 	add	r22,r22,r2
 8006b14:	d8800a15 	stw	r2,40(sp)
 8006b18:	d8000915 	stw	zero,36(sp)
 8006b1c:	d8c00317 	ldw	r3,12(sp)
 8006b20:	00800244 	movi	r2,9
 8006b24:	10c11a36 	bltu	r2,r3,8006f90 <_dtoa_r+0x740>
 8006b28:	00800144 	movi	r2,5
 8006b2c:	10c4fc0e 	bge	r2,r3,8007f20 <_dtoa_r+0x16d0>
 8006b30:	18ffff04 	addi	r3,r3,-4
 8006b34:	d8c00315 	stw	r3,12(sp)
 8006b38:	0029883a 	mov	r20,zero
 8006b3c:	d9800317 	ldw	r6,12(sp)
 8006b40:	008000c4 	movi	r2,3
 8006b44:	3083bd26 	beq	r6,r2,8007a3c <_dtoa_r+0x11ec>
 8006b48:	1183670e 	bge	r2,r6,80078e8 <_dtoa_r+0x1098>
 8006b4c:	d8c00317 	ldw	r3,12(sp)
 8006b50:	00800104 	movi	r2,4
 8006b54:	1882e726 	beq	r3,r2,80076f4 <_dtoa_r+0xea4>
 8006b58:	00800144 	movi	r2,5
 8006b5c:	1884f21e 	bne	r3,r2,8007f28 <_dtoa_r+0x16d8>
 8006b60:	00800044 	movi	r2,1
 8006b64:	d8800b15 	stw	r2,44(sp)
 8006b68:	d8c02217 	ldw	r3,136(sp)
 8006b6c:	d9000517 	ldw	r4,20(sp)
 8006b70:	1907883a 	add	r3,r3,r4
 8006b74:	19800044 	addi	r6,r3,1
 8006b78:	d8c00d15 	stw	r3,52(sp)
 8006b7c:	d9800615 	stw	r6,24(sp)
 8006b80:	0183c30e 	bge	zero,r6,8007a90 <_dtoa_r+0x1240>
 8006b84:	d9800617 	ldw	r6,24(sp)
 8006b88:	3023883a 	mov	r17,r6
 8006b8c:	80001115 	stw	zero,68(r16)
 8006b90:	008005c4 	movi	r2,23
 8006b94:	1184f62e 	bgeu	r2,r6,8007f70 <_dtoa_r+0x1720>
 8006b98:	00c00044 	movi	r3,1
 8006b9c:	00800104 	movi	r2,4
 8006ba0:	1085883a 	add	r2,r2,r2
 8006ba4:	11000504 	addi	r4,r2,20
 8006ba8:	180b883a 	mov	r5,r3
 8006bac:	18c00044 	addi	r3,r3,1
 8006bb0:	313ffb2e 	bgeu	r6,r4,8006ba0 <__alt_data_end+0xfc006ba0>
 8006bb4:	81401115 	stw	r5,68(r16)
 8006bb8:	8009883a 	mov	r4,r16
 8006bbc:	8009d400 	call	8009d40 <_Balloc>
 8006bc0:	d8800715 	stw	r2,28(sp)
 8006bc4:	80801015 	stw	r2,64(r16)
 8006bc8:	00800384 	movi	r2,14
 8006bcc:	1440fd36 	bltu	r2,r17,8006fc4 <_dtoa_r+0x774>
 8006bd0:	a000fc26 	beq	r20,zero,8006fc4 <_dtoa_r+0x774>
 8006bd4:	d8800517 	ldw	r2,20(sp)
 8006bd8:	0083b90e 	bge	zero,r2,8007ac0 <_dtoa_r+0x1270>
 8006bdc:	d8c00517 	ldw	r3,20(sp)
 8006be0:	108003cc 	andi	r2,r2,15
 8006be4:	100490fa 	slli	r2,r2,3
 8006be8:	182fd13a 	srai	r23,r3,4
 8006bec:	00c200b4 	movhi	r3,2050
 8006bf0:	18f6ac04 	addi	r3,r3,-9552
 8006bf4:	1885883a 	add	r2,r3,r2
 8006bf8:	b8c0040c 	andi	r3,r23,16
 8006bfc:	12c00017 	ldw	r11,0(r2)
 8006c00:	12800117 	ldw	r10,4(r2)
 8006c04:	18039726 	beq	r3,zero,8007a64 <_dtoa_r+0x1214>
 8006c08:	008200b4 	movhi	r2,2050
 8006c0c:	10b6a204 	addi	r2,r2,-9592
 8006c10:	11800817 	ldw	r6,32(r2)
 8006c14:	11c00917 	ldw	r7,36(r2)
 8006c18:	9009883a 	mov	r4,r18
 8006c1c:	980b883a 	mov	r5,r19
 8006c20:	da801615 	stw	r10,88(sp)
 8006c24:	dac01515 	stw	r11,84(sp)
 8006c28:	800e9600 	call	800e960 <__divdf3>
 8006c2c:	da801617 	ldw	r10,88(sp)
 8006c30:	dac01517 	ldw	r11,84(sp)
 8006c34:	bdc003cc 	andi	r23,r23,15
 8006c38:	044000c4 	movi	r17,3
 8006c3c:	d8800e15 	stw	r2,56(sp)
 8006c40:	182b883a 	mov	r21,r3
 8006c44:	b8001126 	beq	r23,zero,8006c8c <_dtoa_r+0x43c>
 8006c48:	050200b4 	movhi	r20,2050
 8006c4c:	a536a204 	addi	r20,r20,-9592
 8006c50:	5805883a 	mov	r2,r11
 8006c54:	5007883a 	mov	r3,r10
 8006c58:	b980004c 	andi	r6,r23,1
 8006c5c:	1009883a 	mov	r4,r2
 8006c60:	b82fd07a 	srai	r23,r23,1
 8006c64:	180b883a 	mov	r5,r3
 8006c68:	30000426 	beq	r6,zero,8006c7c <_dtoa_r+0x42c>
 8006c6c:	a1800017 	ldw	r6,0(r20)
 8006c70:	a1c00117 	ldw	r7,4(r20)
 8006c74:	8c400044 	addi	r17,r17,1
 8006c78:	800f4700 	call	800f470 <__muldf3>
 8006c7c:	a5000204 	addi	r20,r20,8
 8006c80:	b83ff51e 	bne	r23,zero,8006c58 <__alt_data_end+0xfc006c58>
 8006c84:	1017883a 	mov	r11,r2
 8006c88:	1815883a 	mov	r10,r3
 8006c8c:	d9000e17 	ldw	r4,56(sp)
 8006c90:	a80b883a 	mov	r5,r21
 8006c94:	580d883a 	mov	r6,r11
 8006c98:	500f883a 	mov	r7,r10
 8006c9c:	800e9600 	call	800e960 <__divdf3>
 8006ca0:	1029883a 	mov	r20,r2
 8006ca4:	182b883a 	mov	r21,r3
 8006ca8:	d9800c17 	ldw	r6,48(sp)
 8006cac:	30000626 	beq	r6,zero,8006cc8 <_dtoa_r+0x478>
 8006cb0:	a009883a 	mov	r4,r20
 8006cb4:	a80b883a 	mov	r5,r21
 8006cb8:	000d883a 	mov	r6,zero
 8006cbc:	01cffc34 	movhi	r7,16368
 8006cc0:	800f3900 	call	800f390 <__ledf2>
 8006cc4:	10043216 	blt	r2,zero,8007d90 <_dtoa_r+0x1540>
 8006cc8:	8809883a 	mov	r4,r17
 8006ccc:	80104ec0 	call	80104ec <__floatsidf>
 8006cd0:	1009883a 	mov	r4,r2
 8006cd4:	180b883a 	mov	r5,r3
 8006cd8:	a00d883a 	mov	r6,r20
 8006cdc:	a80f883a 	mov	r7,r21
 8006ce0:	800f4700 	call	800f470 <__muldf3>
 8006ce4:	000d883a 	mov	r6,zero
 8006ce8:	1009883a 	mov	r4,r2
 8006cec:	180b883a 	mov	r5,r3
 8006cf0:	01d00734 	movhi	r7,16412
 8006cf4:	800e0c40 	call	800e0c4 <__adddf3>
 8006cf8:	1023883a 	mov	r17,r2
 8006cfc:	d9800617 	ldw	r6,24(sp)
 8006d00:	00bf3034 	movhi	r2,64704
 8006d04:	1885883a 	add	r2,r3,r2
 8006d08:	d8800e15 	stw	r2,56(sp)
 8006d0c:	30032e26 	beq	r6,zero,80079c8 <_dtoa_r+0x1178>
 8006d10:	d8c00517 	ldw	r3,20(sp)
 8006d14:	da800617 	ldw	r10,24(sp)
 8006d18:	d8c01215 	stw	r3,72(sp)
 8006d1c:	d9000b17 	ldw	r4,44(sp)
 8006d20:	2003b026 	beq	r4,zero,8007be4 <_dtoa_r+0x1394>
 8006d24:	50bfffc4 	addi	r2,r10,-1
 8006d28:	100490fa 	slli	r2,r2,3
 8006d2c:	00c200b4 	movhi	r3,2050
 8006d30:	18f6ac04 	addi	r3,r3,-9552
 8006d34:	1885883a 	add	r2,r3,r2
 8006d38:	11800017 	ldw	r6,0(r2)
 8006d3c:	11c00117 	ldw	r7,4(r2)
 8006d40:	d8800717 	ldw	r2,28(sp)
 8006d44:	0009883a 	mov	r4,zero
 8006d48:	014ff834 	movhi	r5,16352
 8006d4c:	da801615 	stw	r10,88(sp)
 8006d50:	15c00044 	addi	r23,r2,1
 8006d54:	800e9600 	call	800e960 <__divdf3>
 8006d58:	d9c00e17 	ldw	r7,56(sp)
 8006d5c:	880d883a 	mov	r6,r17
 8006d60:	1009883a 	mov	r4,r2
 8006d64:	180b883a 	mov	r5,r3
 8006d68:	800fb940 	call	800fb94 <__subdf3>
 8006d6c:	a80b883a 	mov	r5,r21
 8006d70:	a009883a 	mov	r4,r20
 8006d74:	d8c01015 	stw	r3,64(sp)
 8006d78:	d8800e15 	stw	r2,56(sp)
 8006d7c:	80104640 	call	8010464 <__fixdfsi>
 8006d80:	1009883a 	mov	r4,r2
 8006d84:	d8801715 	stw	r2,92(sp)
 8006d88:	80104ec0 	call	80104ec <__floatsidf>
 8006d8c:	a009883a 	mov	r4,r20
 8006d90:	a80b883a 	mov	r5,r21
 8006d94:	100d883a 	mov	r6,r2
 8006d98:	180f883a 	mov	r7,r3
 8006d9c:	800fb940 	call	800fb94 <__subdf3>
 8006da0:	da001717 	ldw	r8,92(sp)
 8006da4:	1829883a 	mov	r20,r3
 8006da8:	d8c00717 	ldw	r3,28(sp)
 8006dac:	d9000e17 	ldw	r4,56(sp)
 8006db0:	d9401017 	ldw	r5,64(sp)
 8006db4:	42000c04 	addi	r8,r8,48
 8006db8:	1023883a 	mov	r17,r2
 8006dbc:	1a000005 	stb	r8,0(r3)
 8006dc0:	880d883a 	mov	r6,r17
 8006dc4:	a00f883a 	mov	r7,r20
 8006dc8:	402b883a 	mov	r21,r8
 8006dcc:	800f2b00 	call	800f2b0 <__gedf2>
 8006dd0:	00844516 	blt	zero,r2,8007ee8 <_dtoa_r+0x1698>
 8006dd4:	0009883a 	mov	r4,zero
 8006dd8:	014ffc34 	movhi	r5,16368
 8006ddc:	880d883a 	mov	r6,r17
 8006de0:	a00f883a 	mov	r7,r20
 8006de4:	800fb940 	call	800fb94 <__subdf3>
 8006de8:	d9000e17 	ldw	r4,56(sp)
 8006dec:	d9401017 	ldw	r5,64(sp)
 8006df0:	100d883a 	mov	r6,r2
 8006df4:	180f883a 	mov	r7,r3
 8006df8:	800f2b00 	call	800f2b0 <__gedf2>
 8006dfc:	da801617 	ldw	r10,88(sp)
 8006e00:	00843616 	blt	zero,r2,8007edc <_dtoa_r+0x168c>
 8006e04:	00800044 	movi	r2,1
 8006e08:	12806e0e 	bge	r2,r10,8006fc4 <_dtoa_r+0x774>
 8006e0c:	d9000717 	ldw	r4,28(sp)
 8006e10:	dd801315 	stw	r22,76(sp)
 8006e14:	dc001115 	stw	r16,68(sp)
 8006e18:	2295883a 	add	r10,r4,r10
 8006e1c:	dcc01415 	stw	r19,80(sp)
 8006e20:	502d883a 	mov	r22,r10
 8006e24:	dcc01017 	ldw	r19,64(sp)
 8006e28:	b821883a 	mov	r16,r23
 8006e2c:	dc801015 	stw	r18,64(sp)
 8006e30:	dc800e17 	ldw	r18,56(sp)
 8006e34:	00000906 	br	8006e5c <_dtoa_r+0x60c>
 8006e38:	800fb940 	call	800fb94 <__subdf3>
 8006e3c:	1009883a 	mov	r4,r2
 8006e40:	180b883a 	mov	r5,r3
 8006e44:	900d883a 	mov	r6,r18
 8006e48:	980f883a 	mov	r7,r19
 8006e4c:	800f3900 	call	800f390 <__ledf2>
 8006e50:	10040e16 	blt	r2,zero,8007e8c <_dtoa_r+0x163c>
 8006e54:	b821883a 	mov	r16,r23
 8006e58:	bd841026 	beq	r23,r22,8007e9c <_dtoa_r+0x164c>
 8006e5c:	9009883a 	mov	r4,r18
 8006e60:	980b883a 	mov	r5,r19
 8006e64:	000d883a 	mov	r6,zero
 8006e68:	01d00934 	movhi	r7,16420
 8006e6c:	800f4700 	call	800f470 <__muldf3>
 8006e70:	000d883a 	mov	r6,zero
 8006e74:	01d00934 	movhi	r7,16420
 8006e78:	8809883a 	mov	r4,r17
 8006e7c:	a00b883a 	mov	r5,r20
 8006e80:	1025883a 	mov	r18,r2
 8006e84:	1827883a 	mov	r19,r3
 8006e88:	800f4700 	call	800f470 <__muldf3>
 8006e8c:	180b883a 	mov	r5,r3
 8006e90:	1009883a 	mov	r4,r2
 8006e94:	1823883a 	mov	r17,r3
 8006e98:	1029883a 	mov	r20,r2
 8006e9c:	80104640 	call	8010464 <__fixdfsi>
 8006ea0:	1009883a 	mov	r4,r2
 8006ea4:	102b883a 	mov	r21,r2
 8006ea8:	80104ec0 	call	80104ec <__floatsidf>
 8006eac:	a009883a 	mov	r4,r20
 8006eb0:	880b883a 	mov	r5,r17
 8006eb4:	100d883a 	mov	r6,r2
 8006eb8:	180f883a 	mov	r7,r3
 8006ebc:	800fb940 	call	800fb94 <__subdf3>
 8006ec0:	ad400c04 	addi	r21,r21,48
 8006ec4:	1009883a 	mov	r4,r2
 8006ec8:	180b883a 	mov	r5,r3
 8006ecc:	900d883a 	mov	r6,r18
 8006ed0:	980f883a 	mov	r7,r19
 8006ed4:	85400005 	stb	r21,0(r16)
 8006ed8:	1023883a 	mov	r17,r2
 8006edc:	1829883a 	mov	r20,r3
 8006ee0:	800f3900 	call	800f390 <__ledf2>
 8006ee4:	bdc00044 	addi	r23,r23,1
 8006ee8:	0009883a 	mov	r4,zero
 8006eec:	014ffc34 	movhi	r5,16368
 8006ef0:	880d883a 	mov	r6,r17
 8006ef4:	a00f883a 	mov	r7,r20
 8006ef8:	103fcf0e 	bge	r2,zero,8006e38 <__alt_data_end+0xfc006e38>
 8006efc:	d9801217 	ldw	r6,72(sp)
 8006f00:	dc001117 	ldw	r16,68(sp)
 8006f04:	d9800515 	stw	r6,20(sp)
 8006f08:	8009883a 	mov	r4,r16
 8006f0c:	e00b883a 	mov	r5,fp
 8006f10:	8009de80 	call	8009de8 <_Bfree>
 8006f14:	d8c00517 	ldw	r3,20(sp)
 8006f18:	d9002317 	ldw	r4,140(sp)
 8006f1c:	d9802517 	ldw	r6,148(sp)
 8006f20:	b8000005 	stb	zero,0(r23)
 8006f24:	18800044 	addi	r2,r3,1
 8006f28:	20800015 	stw	r2,0(r4)
 8006f2c:	30027226 	beq	r6,zero,80078f8 <_dtoa_r+0x10a8>
 8006f30:	35c00015 	stw	r23,0(r6)
 8006f34:	d8800717 	ldw	r2,28(sp)
 8006f38:	003e7406 	br	800690c <__alt_data_end+0xfc00690c>
 8006f3c:	00800434 	movhi	r2,16
 8006f40:	10bfffc4 	addi	r2,r2,-1
 8006f44:	a8aa703a 	and	r21,r21,r2
 8006f48:	a83e801e 	bne	r21,zero,800694c <__alt_data_end+0xfc00694c>
 8006f4c:	008200b4 	movhi	r2,2050
 8006f50:	10b68d04 	addi	r2,r2,-9676
 8006f54:	003e7f06 	br	8006954 <__alt_data_end+0xfc006954>
 8006f58:	10c00204 	addi	r3,r2,8
 8006f5c:	003e8206 	br	8006968 <__alt_data_end+0xfc006968>
 8006f60:	01400434 	movhi	r5,16
 8006f64:	297fffc4 	addi	r5,r5,-1
 8006f68:	994a703a 	and	r5,r19,r5
 8006f6c:	9009883a 	mov	r4,r18
 8006f70:	8c7f0044 	addi	r17,r17,-1023
 8006f74:	294ffc34 	orhi	r5,r5,16368
 8006f78:	dd000217 	ldw	r20,8(sp)
 8006f7c:	d8000f15 	stw	zero,60(sp)
 8006f80:	003e9f06 	br	8006a00 <__alt_data_end+0xfc006a00>
 8006f84:	008200b4 	movhi	r2,2050
 8006f88:	10b5e404 	addi	r2,r2,-10352
 8006f8c:	003e5f06 	br	800690c <__alt_data_end+0xfc00690c>
 8006f90:	80001115 	stw	zero,68(r16)
 8006f94:	8009883a 	mov	r4,r16
 8006f98:	000b883a 	mov	r5,zero
 8006f9c:	8009d400 	call	8009d40 <_Balloc>
 8006fa0:	01bfffc4 	movi	r6,-1
 8006fa4:	d8800715 	stw	r2,28(sp)
 8006fa8:	80801015 	stw	r2,64(r16)
 8006fac:	00800044 	movi	r2,1
 8006fb0:	d9800615 	stw	r6,24(sp)
 8006fb4:	d8800b15 	stw	r2,44(sp)
 8006fb8:	d8002215 	stw	zero,136(sp)
 8006fbc:	d9800d15 	stw	r6,52(sp)
 8006fc0:	d8000315 	stw	zero,12(sp)
 8006fc4:	d8800117 	ldw	r2,4(sp)
 8006fc8:	10008e16 	blt	r2,zero,8007204 <_dtoa_r+0x9b4>
 8006fcc:	d9000517 	ldw	r4,20(sp)
 8006fd0:	00c00384 	movi	r3,14
 8006fd4:	19008b16 	blt	r3,r4,8007204 <_dtoa_r+0x9b4>
 8006fd8:	200490fa 	slli	r2,r4,3
 8006fdc:	00c200b4 	movhi	r3,2050
 8006fe0:	d9802217 	ldw	r6,136(sp)
 8006fe4:	18f6ac04 	addi	r3,r3,-9552
 8006fe8:	1885883a 	add	r2,r3,r2
 8006fec:	14400017 	ldw	r17,0(r2)
 8006ff0:	15000117 	ldw	r20,4(r2)
 8006ff4:	3001c716 	blt	r6,zero,8007714 <_dtoa_r+0xec4>
 8006ff8:	880d883a 	mov	r6,r17
 8006ffc:	a00f883a 	mov	r7,r20
 8007000:	9009883a 	mov	r4,r18
 8007004:	980b883a 	mov	r5,r19
 8007008:	800e9600 	call	800e960 <__divdf3>
 800700c:	180b883a 	mov	r5,r3
 8007010:	1009883a 	mov	r4,r2
 8007014:	80104640 	call	8010464 <__fixdfsi>
 8007018:	1009883a 	mov	r4,r2
 800701c:	102d883a 	mov	r22,r2
 8007020:	80104ec0 	call	80104ec <__floatsidf>
 8007024:	1009883a 	mov	r4,r2
 8007028:	180b883a 	mov	r5,r3
 800702c:	880d883a 	mov	r6,r17
 8007030:	a00f883a 	mov	r7,r20
 8007034:	800f4700 	call	800f470 <__muldf3>
 8007038:	9009883a 	mov	r4,r18
 800703c:	980b883a 	mov	r5,r19
 8007040:	100d883a 	mov	r6,r2
 8007044:	180f883a 	mov	r7,r3
 8007048:	800fb940 	call	800fb94 <__subdf3>
 800704c:	d9000717 	ldw	r4,28(sp)
 8007050:	d9800617 	ldw	r6,24(sp)
 8007054:	180b883a 	mov	r5,r3
 8007058:	b0c00c04 	addi	r3,r22,48
 800705c:	20c00005 	stb	r3,0(r4)
 8007060:	25c00044 	addi	r23,r4,1
 8007064:	01000044 	movi	r4,1
 8007068:	1011883a 	mov	r8,r2
 800706c:	2807883a 	mov	r3,r5
 8007070:	31003d26 	beq	r6,r4,8007168 <_dtoa_r+0x918>
 8007074:	000d883a 	mov	r6,zero
 8007078:	01d00934 	movhi	r7,16420
 800707c:	1009883a 	mov	r4,r2
 8007080:	800f4700 	call	800f470 <__muldf3>
 8007084:	1009883a 	mov	r4,r2
 8007088:	180b883a 	mov	r5,r3
 800708c:	000d883a 	mov	r6,zero
 8007090:	000f883a 	mov	r7,zero
 8007094:	1027883a 	mov	r19,r2
 8007098:	182b883a 	mov	r21,r3
 800709c:	800f22c0 	call	800f22c <__eqdf2>
 80070a0:	103f9926 	beq	r2,zero,8006f08 <__alt_data_end+0xfc006f08>
 80070a4:	d8c00617 	ldw	r3,24(sp)
 80070a8:	d9000717 	ldw	r4,28(sp)
 80070ac:	b825883a 	mov	r18,r23
 80070b0:	18bfffc4 	addi	r2,r3,-1
 80070b4:	20ad883a 	add	r22,r4,r2
 80070b8:	dc000315 	stw	r16,12(sp)
 80070bc:	00000a06 	br	80070e8 <_dtoa_r+0x898>
 80070c0:	800f4700 	call	800f470 <__muldf3>
 80070c4:	1009883a 	mov	r4,r2
 80070c8:	180b883a 	mov	r5,r3
 80070cc:	000d883a 	mov	r6,zero
 80070d0:	000f883a 	mov	r7,zero
 80070d4:	1027883a 	mov	r19,r2
 80070d8:	182b883a 	mov	r21,r3
 80070dc:	b825883a 	mov	r18,r23
 80070e0:	800f22c0 	call	800f22c <__eqdf2>
 80070e4:	10022626 	beq	r2,zero,8007980 <_dtoa_r+0x1130>
 80070e8:	880d883a 	mov	r6,r17
 80070ec:	a00f883a 	mov	r7,r20
 80070f0:	9809883a 	mov	r4,r19
 80070f4:	a80b883a 	mov	r5,r21
 80070f8:	800e9600 	call	800e960 <__divdf3>
 80070fc:	180b883a 	mov	r5,r3
 8007100:	1009883a 	mov	r4,r2
 8007104:	80104640 	call	8010464 <__fixdfsi>
 8007108:	1009883a 	mov	r4,r2
 800710c:	1021883a 	mov	r16,r2
 8007110:	80104ec0 	call	80104ec <__floatsidf>
 8007114:	1009883a 	mov	r4,r2
 8007118:	180b883a 	mov	r5,r3
 800711c:	880d883a 	mov	r6,r17
 8007120:	a00f883a 	mov	r7,r20
 8007124:	800f4700 	call	800f470 <__muldf3>
 8007128:	9809883a 	mov	r4,r19
 800712c:	a80b883a 	mov	r5,r21
 8007130:	100d883a 	mov	r6,r2
 8007134:	180f883a 	mov	r7,r3
 8007138:	800fb940 	call	800fb94 <__subdf3>
 800713c:	82000c04 	addi	r8,r16,48
 8007140:	92000005 	stb	r8,0(r18)
 8007144:	1009883a 	mov	r4,r2
 8007148:	180b883a 	mov	r5,r3
 800714c:	000d883a 	mov	r6,zero
 8007150:	01d00934 	movhi	r7,16420
 8007154:	1011883a 	mov	r8,r2
 8007158:	bdc00044 	addi	r23,r23,1
 800715c:	95bfd81e 	bne	r18,r22,80070c0 <__alt_data_end+0xfc0070c0>
 8007160:	802d883a 	mov	r22,r16
 8007164:	dc000317 	ldw	r16,12(sp)
 8007168:	4009883a 	mov	r4,r8
 800716c:	180b883a 	mov	r5,r3
 8007170:	400d883a 	mov	r6,r8
 8007174:	180f883a 	mov	r7,r3
 8007178:	800e0c40 	call	800e0c4 <__adddf3>
 800717c:	8809883a 	mov	r4,r17
 8007180:	a00b883a 	mov	r5,r20
 8007184:	100d883a 	mov	r6,r2
 8007188:	180f883a 	mov	r7,r3
 800718c:	1027883a 	mov	r19,r2
 8007190:	1825883a 	mov	r18,r3
 8007194:	800f3900 	call	800f390 <__ledf2>
 8007198:	10000816 	blt	r2,zero,80071bc <_dtoa_r+0x96c>
 800719c:	8809883a 	mov	r4,r17
 80071a0:	a00b883a 	mov	r5,r20
 80071a4:	980d883a 	mov	r6,r19
 80071a8:	900f883a 	mov	r7,r18
 80071ac:	800f22c0 	call	800f22c <__eqdf2>
 80071b0:	103f551e 	bne	r2,zero,8006f08 <__alt_data_end+0xfc006f08>
 80071b4:	b580004c 	andi	r22,r22,1
 80071b8:	b03f5326 	beq	r22,zero,8006f08 <__alt_data_end+0xfc006f08>
 80071bc:	bd7fffc3 	ldbu	r21,-1(r23)
 80071c0:	b8bfffc4 	addi	r2,r23,-1
 80071c4:	1007883a 	mov	r3,r2
 80071c8:	01400e44 	movi	r5,57
 80071cc:	d9800717 	ldw	r6,28(sp)
 80071d0:	00000506 	br	80071e8 <_dtoa_r+0x998>
 80071d4:	18ffffc4 	addi	r3,r3,-1
 80071d8:	30825e26 	beq	r6,r2,8007b54 <_dtoa_r+0x1304>
 80071dc:	1d400003 	ldbu	r21,0(r3)
 80071e0:	102f883a 	mov	r23,r2
 80071e4:	10bfffc4 	addi	r2,r2,-1
 80071e8:	a9003fcc 	andi	r4,r21,255
 80071ec:	2100201c 	xori	r4,r4,128
 80071f0:	213fe004 	addi	r4,r4,-128
 80071f4:	217ff726 	beq	r4,r5,80071d4 <__alt_data_end+0xfc0071d4>
 80071f8:	aa000044 	addi	r8,r21,1
 80071fc:	12000005 	stb	r8,0(r2)
 8007200:	003f4106 	br	8006f08 <__alt_data_end+0xfc006f08>
 8007204:	d8c00b17 	ldw	r3,44(sp)
 8007208:	18006726 	beq	r3,zero,80073a8 <_dtoa_r+0xb58>
 800720c:	d9000317 	ldw	r4,12(sp)
 8007210:	00c00044 	movi	r3,1
 8007214:	19016a0e 	bge	r3,r4,80077c0 <_dtoa_r+0xf70>
 8007218:	d8800617 	ldw	r2,24(sp)
 800721c:	d8c00917 	ldw	r3,36(sp)
 8007220:	157fffc4 	addi	r21,r2,-1
 8007224:	1d420716 	blt	r3,r21,8007a44 <_dtoa_r+0x11f4>
 8007228:	1d6bc83a 	sub	r21,r3,r21
 800722c:	d8800617 	ldw	r2,24(sp)
 8007230:	1002c716 	blt	r2,zero,8007d50 <_dtoa_r+0x1500>
 8007234:	dd000817 	ldw	r20,32(sp)
 8007238:	d8800617 	ldw	r2,24(sp)
 800723c:	d9800817 	ldw	r6,32(sp)
 8007240:	8009883a 	mov	r4,r16
 8007244:	01400044 	movi	r5,1
 8007248:	308d883a 	add	r6,r6,r2
 800724c:	d9800815 	stw	r6,32(sp)
 8007250:	b0ad883a 	add	r22,r22,r2
 8007254:	800a1400 	call	800a140 <__i2b>
 8007258:	1023883a 	mov	r17,r2
 800725c:	a0000826 	beq	r20,zero,8007280 <_dtoa_r+0xa30>
 8007260:	0580070e 	bge	zero,r22,8007280 <_dtoa_r+0xa30>
 8007264:	b005883a 	mov	r2,r22
 8007268:	a5812016 	blt	r20,r22,80076ec <_dtoa_r+0xe9c>
 800726c:	d8c00817 	ldw	r3,32(sp)
 8007270:	a0a9c83a 	sub	r20,r20,r2
 8007274:	b0adc83a 	sub	r22,r22,r2
 8007278:	1887c83a 	sub	r3,r3,r2
 800727c:	d8c00815 	stw	r3,32(sp)
 8007280:	d9000917 	ldw	r4,36(sp)
 8007284:	0100140e 	bge	zero,r4,80072d8 <_dtoa_r+0xa88>
 8007288:	d9800b17 	ldw	r6,44(sp)
 800728c:	3001e526 	beq	r6,zero,8007a24 <_dtoa_r+0x11d4>
 8007290:	05400e0e 	bge	zero,r21,80072cc <_dtoa_r+0xa7c>
 8007294:	880b883a 	mov	r5,r17
 8007298:	8009883a 	mov	r4,r16
 800729c:	a80d883a 	mov	r6,r21
 80072a0:	800a3780 	call	800a378 <__pow5mult>
 80072a4:	e00d883a 	mov	r6,fp
 80072a8:	8009883a 	mov	r4,r16
 80072ac:	100b883a 	mov	r5,r2
 80072b0:	1023883a 	mov	r17,r2
 80072b4:	800a17c0 	call	800a17c <__multiply>
 80072b8:	102f883a 	mov	r23,r2
 80072bc:	e00b883a 	mov	r5,fp
 80072c0:	8009883a 	mov	r4,r16
 80072c4:	8009de80 	call	8009de8 <_Bfree>
 80072c8:	b839883a 	mov	fp,r23
 80072cc:	d8800917 	ldw	r2,36(sp)
 80072d0:	154dc83a 	sub	r6,r2,r21
 80072d4:	3001281e 	bne	r6,zero,8007778 <_dtoa_r+0xf28>
 80072d8:	05c00044 	movi	r23,1
 80072dc:	8009883a 	mov	r4,r16
 80072e0:	b80b883a 	mov	r5,r23
 80072e4:	800a1400 	call	800a140 <__i2b>
 80072e8:	d8c00a17 	ldw	r3,40(sp)
 80072ec:	102b883a 	mov	r21,r2
 80072f0:	00c0310e 	bge	zero,r3,80073b8 <_dtoa_r+0xb68>
 80072f4:	8009883a 	mov	r4,r16
 80072f8:	100b883a 	mov	r5,r2
 80072fc:	180d883a 	mov	r6,r3
 8007300:	800a3780 	call	800a378 <__pow5mult>
 8007304:	d9000317 	ldw	r4,12(sp)
 8007308:	102b883a 	mov	r21,r2
 800730c:	b9011f0e 	bge	r23,r4,800778c <_dtoa_r+0xf3c>
 8007310:	0027883a 	mov	r19,zero
 8007314:	a8800417 	ldw	r2,16(r21)
 8007318:	10800104 	addi	r2,r2,4
 800731c:	1085883a 	add	r2,r2,r2
 8007320:	1085883a 	add	r2,r2,r2
 8007324:	a885883a 	add	r2,r21,r2
 8007328:	11000017 	ldw	r4,0(r2)
 800732c:	800a0280 	call	800a028 <__hi0bits>
 8007330:	00c00804 	movi	r3,32
 8007334:	1885c83a 	sub	r2,r3,r2
 8007338:	00002506 	br	80073d0 <_dtoa_r+0xb80>
 800733c:	01800044 	movi	r6,1
 8007340:	d9800c15 	stw	r6,48(sp)
 8007344:	003dec06 	br	8006af8 <__alt_data_end+0xfc006af8>
 8007348:	d8c00817 	ldw	r3,32(sp)
 800734c:	d9000517 	ldw	r4,20(sp)
 8007350:	d8000a15 	stw	zero,40(sp)
 8007354:	1907c83a 	sub	r3,r3,r4
 8007358:	010dc83a 	sub	r6,zero,r4
 800735c:	d8c00815 	stw	r3,32(sp)
 8007360:	d9800915 	stw	r6,36(sp)
 8007364:	003ded06 	br	8006b1c <__alt_data_end+0xfc006b1c>
 8007368:	05adc83a 	sub	r22,zero,r22
 800736c:	dd800815 	stw	r22,32(sp)
 8007370:	002d883a 	mov	r22,zero
 8007374:	003de406 	br	8006b08 <__alt_data_end+0xfc006b08>
 8007378:	d9000517 	ldw	r4,20(sp)
 800737c:	80104ec0 	call	80104ec <__floatsidf>
 8007380:	1009883a 	mov	r4,r2
 8007384:	180b883a 	mov	r5,r3
 8007388:	b00d883a 	mov	r6,r22
 800738c:	a80f883a 	mov	r7,r21
 8007390:	800f22c0 	call	800f22c <__eqdf2>
 8007394:	103dc726 	beq	r2,zero,8006ab4 <__alt_data_end+0xfc006ab4>
 8007398:	d8800517 	ldw	r2,20(sp)
 800739c:	10bfffc4 	addi	r2,r2,-1
 80073a0:	d8800515 	stw	r2,20(sp)
 80073a4:	003dc306 	br	8006ab4 <__alt_data_end+0xfc006ab4>
 80073a8:	dd400917 	ldw	r21,36(sp)
 80073ac:	dd000817 	ldw	r20,32(sp)
 80073b0:	0023883a 	mov	r17,zero
 80073b4:	003fa906 	br	800725c <__alt_data_end+0xfc00725c>
 80073b8:	d9800317 	ldw	r6,12(sp)
 80073bc:	b981670e 	bge	r23,r6,800795c <_dtoa_r+0x110c>
 80073c0:	0027883a 	mov	r19,zero
 80073c4:	d8c00a17 	ldw	r3,40(sp)
 80073c8:	183fd21e 	bne	r3,zero,8007314 <__alt_data_end+0xfc007314>
 80073cc:	00800044 	movi	r2,1
 80073d0:	1585883a 	add	r2,r2,r22
 80073d4:	108007cc 	andi	r2,r2,31
 80073d8:	10005f26 	beq	r2,zero,8007558 <_dtoa_r+0xd08>
 80073dc:	00c00804 	movi	r3,32
 80073e0:	1887c83a 	sub	r3,r3,r2
 80073e4:	01000104 	movi	r4,4
 80073e8:	20c2dd0e 	bge	r4,r3,8007f60 <_dtoa_r+0x1710>
 80073ec:	d9000817 	ldw	r4,32(sp)
 80073f0:	00c00704 	movi	r3,28
 80073f4:	1885c83a 	sub	r2,r3,r2
 80073f8:	2089883a 	add	r4,r4,r2
 80073fc:	d9000815 	stw	r4,32(sp)
 8007400:	a0a9883a 	add	r20,r20,r2
 8007404:	b0ad883a 	add	r22,r22,r2
 8007408:	d8800817 	ldw	r2,32(sp)
 800740c:	0080050e 	bge	zero,r2,8007424 <_dtoa_r+0xbd4>
 8007410:	e00b883a 	mov	r5,fp
 8007414:	8009883a 	mov	r4,r16
 8007418:	100d883a 	mov	r6,r2
 800741c:	800a4b80 	call	800a4b8 <__lshift>
 8007420:	1039883a 	mov	fp,r2
 8007424:	0580050e 	bge	zero,r22,800743c <_dtoa_r+0xbec>
 8007428:	a80b883a 	mov	r5,r21
 800742c:	8009883a 	mov	r4,r16
 8007430:	b00d883a 	mov	r6,r22
 8007434:	800a4b80 	call	800a4b8 <__lshift>
 8007438:	102b883a 	mov	r21,r2
 800743c:	d8c00c17 	ldw	r3,48(sp)
 8007440:	1801161e 	bne	r3,zero,800789c <_dtoa_r+0x104c>
 8007444:	d8c00617 	ldw	r3,24(sp)
 8007448:	00c12d0e 	bge	zero,r3,8007900 <_dtoa_r+0x10b0>
 800744c:	d8c00b17 	ldw	r3,44(sp)
 8007450:	1800571e 	bne	r3,zero,80075b0 <_dtoa_r+0xd60>
 8007454:	dc800717 	ldw	r18,28(sp)
 8007458:	dcc00617 	ldw	r19,24(sp)
 800745c:	9029883a 	mov	r20,r18
 8007460:	00000206 	br	800746c <_dtoa_r+0xc1c>
 8007464:	8009e100 	call	8009e10 <__multadd>
 8007468:	1039883a 	mov	fp,r2
 800746c:	e009883a 	mov	r4,fp
 8007470:	a80b883a 	mov	r5,r21
 8007474:	80066500 	call	8006650 <quorem>
 8007478:	10800c04 	addi	r2,r2,48
 800747c:	90800005 	stb	r2,0(r18)
 8007480:	94800044 	addi	r18,r18,1
 8007484:	9507c83a 	sub	r3,r18,r20
 8007488:	8009883a 	mov	r4,r16
 800748c:	e00b883a 	mov	r5,fp
 8007490:	01800284 	movi	r6,10
 8007494:	000f883a 	mov	r7,zero
 8007498:	1cfff216 	blt	r3,r19,8007464 <__alt_data_end+0xfc007464>
 800749c:	1011883a 	mov	r8,r2
 80074a0:	d8800617 	ldw	r2,24(sp)
 80074a4:	00822e0e 	bge	zero,r2,8007d60 <_dtoa_r+0x1510>
 80074a8:	d9000717 	ldw	r4,28(sp)
 80074ac:	0025883a 	mov	r18,zero
 80074b0:	20af883a 	add	r23,r4,r2
 80074b4:	e00b883a 	mov	r5,fp
 80074b8:	01800044 	movi	r6,1
 80074bc:	8009883a 	mov	r4,r16
 80074c0:	da001715 	stw	r8,92(sp)
 80074c4:	800a4b80 	call	800a4b8 <__lshift>
 80074c8:	1009883a 	mov	r4,r2
 80074cc:	a80b883a 	mov	r5,r21
 80074d0:	1039883a 	mov	fp,r2
 80074d4:	800a6000 	call	800a600 <__mcmp>
 80074d8:	da001717 	ldw	r8,92(sp)
 80074dc:	00816e0e 	bge	zero,r2,8007a98 <_dtoa_r+0x1248>
 80074e0:	b93fffc3 	ldbu	r4,-1(r23)
 80074e4:	b8bfffc4 	addi	r2,r23,-1
 80074e8:	1007883a 	mov	r3,r2
 80074ec:	01800e44 	movi	r6,57
 80074f0:	d9c00717 	ldw	r7,28(sp)
 80074f4:	00000506 	br	800750c <_dtoa_r+0xcbc>
 80074f8:	18ffffc4 	addi	r3,r3,-1
 80074fc:	38811926 	beq	r7,r2,8007964 <_dtoa_r+0x1114>
 8007500:	19000003 	ldbu	r4,0(r3)
 8007504:	102f883a 	mov	r23,r2
 8007508:	10bfffc4 	addi	r2,r2,-1
 800750c:	21403fcc 	andi	r5,r4,255
 8007510:	2940201c 	xori	r5,r5,128
 8007514:	297fe004 	addi	r5,r5,-128
 8007518:	29bff726 	beq	r5,r6,80074f8 <__alt_data_end+0xfc0074f8>
 800751c:	21000044 	addi	r4,r4,1
 8007520:	11000005 	stb	r4,0(r2)
 8007524:	8009883a 	mov	r4,r16
 8007528:	a80b883a 	mov	r5,r21
 800752c:	8009de80 	call	8009de8 <_Bfree>
 8007530:	883e7526 	beq	r17,zero,8006f08 <__alt_data_end+0xfc006f08>
 8007534:	90000426 	beq	r18,zero,8007548 <_dtoa_r+0xcf8>
 8007538:	94400326 	beq	r18,r17,8007548 <_dtoa_r+0xcf8>
 800753c:	8009883a 	mov	r4,r16
 8007540:	900b883a 	mov	r5,r18
 8007544:	8009de80 	call	8009de8 <_Bfree>
 8007548:	8009883a 	mov	r4,r16
 800754c:	880b883a 	mov	r5,r17
 8007550:	8009de80 	call	8009de8 <_Bfree>
 8007554:	003e6c06 	br	8006f08 <__alt_data_end+0xfc006f08>
 8007558:	00800704 	movi	r2,28
 800755c:	d9800817 	ldw	r6,32(sp)
 8007560:	a0a9883a 	add	r20,r20,r2
 8007564:	b0ad883a 	add	r22,r22,r2
 8007568:	308d883a 	add	r6,r6,r2
 800756c:	d9800815 	stw	r6,32(sp)
 8007570:	003fa506 	br	8007408 <__alt_data_end+0xfc007408>
 8007574:	013efb84 	movi	r4,-1042
 8007578:	246bc83a 	sub	r21,r4,r17
 800757c:	9548983a 	sll	r4,r18,r21
 8007580:	003d1806 	br	80069e4 <__alt_data_end+0xfc0069e4>
 8007584:	d8000c15 	stw	zero,48(sp)
 8007588:	003d5b06 	br	8006af8 <__alt_data_end+0xfc006af8>
 800758c:	880b883a 	mov	r5,r17
 8007590:	8009883a 	mov	r4,r16
 8007594:	01800284 	movi	r6,10
 8007598:	000f883a 	mov	r7,zero
 800759c:	8009e100 	call	8009e10 <__multadd>
 80075a0:	1023883a 	mov	r17,r2
 80075a4:	d8800d17 	ldw	r2,52(sp)
 80075a8:	0082550e 	bge	zero,r2,8007f00 <_dtoa_r+0x16b0>
 80075ac:	d8800615 	stw	r2,24(sp)
 80075b0:	0500050e 	bge	zero,r20,80075c8 <_dtoa_r+0xd78>
 80075b4:	880b883a 	mov	r5,r17
 80075b8:	8009883a 	mov	r4,r16
 80075bc:	a00d883a 	mov	r6,r20
 80075c0:	800a4b80 	call	800a4b8 <__lshift>
 80075c4:	1023883a 	mov	r17,r2
 80075c8:	98016a1e 	bne	r19,zero,8007b74 <_dtoa_r+0x1324>
 80075cc:	8829883a 	mov	r20,r17
 80075d0:	d9000617 	ldw	r4,24(sp)
 80075d4:	dcc00717 	ldw	r19,28(sp)
 80075d8:	9480004c 	andi	r18,r18,1
 80075dc:	20bfffc4 	addi	r2,r4,-1
 80075e0:	9885883a 	add	r2,r19,r2
 80075e4:	d8800415 	stw	r2,16(sp)
 80075e8:	dc800615 	stw	r18,24(sp)
 80075ec:	e009883a 	mov	r4,fp
 80075f0:	a80b883a 	mov	r5,r21
 80075f4:	80066500 	call	8006650 <quorem>
 80075f8:	e009883a 	mov	r4,fp
 80075fc:	880b883a 	mov	r5,r17
 8007600:	102f883a 	mov	r23,r2
 8007604:	800a6000 	call	800a600 <__mcmp>
 8007608:	8009883a 	mov	r4,r16
 800760c:	a80b883a 	mov	r5,r21
 8007610:	a00d883a 	mov	r6,r20
 8007614:	102d883a 	mov	r22,r2
 8007618:	800a6600 	call	800a660 <__mdiff>
 800761c:	1007883a 	mov	r3,r2
 8007620:	10800317 	ldw	r2,12(r2)
 8007624:	bc800c04 	addi	r18,r23,48
 8007628:	1000971e 	bne	r2,zero,8007888 <_dtoa_r+0x1038>
 800762c:	180b883a 	mov	r5,r3
 8007630:	e009883a 	mov	r4,fp
 8007634:	d8c01515 	stw	r3,84(sp)
 8007638:	800a6000 	call	800a600 <__mcmp>
 800763c:	d8c01517 	ldw	r3,84(sp)
 8007640:	8009883a 	mov	r4,r16
 8007644:	d8801515 	stw	r2,84(sp)
 8007648:	180b883a 	mov	r5,r3
 800764c:	8009de80 	call	8009de8 <_Bfree>
 8007650:	d8801517 	ldw	r2,84(sp)
 8007654:	1000041e 	bne	r2,zero,8007668 <_dtoa_r+0xe18>
 8007658:	d9800317 	ldw	r6,12(sp)
 800765c:	3000021e 	bne	r6,zero,8007668 <_dtoa_r+0xe18>
 8007660:	d8c00617 	ldw	r3,24(sp)
 8007664:	18007626 	beq	r3,zero,8007840 <_dtoa_r+0xff0>
 8007668:	b0005b16 	blt	r22,zero,80077d8 <_dtoa_r+0xf88>
 800766c:	b000041e 	bne	r22,zero,8007680 <_dtoa_r+0xe30>
 8007670:	d9000317 	ldw	r4,12(sp)
 8007674:	2000021e 	bne	r4,zero,8007680 <_dtoa_r+0xe30>
 8007678:	d8c00617 	ldw	r3,24(sp)
 800767c:	18005626 	beq	r3,zero,80077d8 <_dtoa_r+0xf88>
 8007680:	00814d16 	blt	zero,r2,8007bb8 <_dtoa_r+0x1368>
 8007684:	d8c00417 	ldw	r3,16(sp)
 8007688:	9d800044 	addi	r22,r19,1
 800768c:	9c800005 	stb	r18,0(r19)
 8007690:	b02f883a 	mov	r23,r22
 8007694:	98c14c26 	beq	r19,r3,8007bc8 <_dtoa_r+0x1378>
 8007698:	e00b883a 	mov	r5,fp
 800769c:	8009883a 	mov	r4,r16
 80076a0:	01800284 	movi	r6,10
 80076a4:	000f883a 	mov	r7,zero
 80076a8:	8009e100 	call	8009e10 <__multadd>
 80076ac:	1039883a 	mov	fp,r2
 80076b0:	8d006d26 	beq	r17,r20,8007868 <_dtoa_r+0x1018>
 80076b4:	880b883a 	mov	r5,r17
 80076b8:	01800284 	movi	r6,10
 80076bc:	000f883a 	mov	r7,zero
 80076c0:	8009883a 	mov	r4,r16
 80076c4:	8009e100 	call	8009e10 <__multadd>
 80076c8:	a00b883a 	mov	r5,r20
 80076cc:	8009883a 	mov	r4,r16
 80076d0:	01800284 	movi	r6,10
 80076d4:	000f883a 	mov	r7,zero
 80076d8:	1023883a 	mov	r17,r2
 80076dc:	8009e100 	call	8009e10 <__multadd>
 80076e0:	1029883a 	mov	r20,r2
 80076e4:	b027883a 	mov	r19,r22
 80076e8:	003fc006 	br	80075ec <__alt_data_end+0xfc0075ec>
 80076ec:	a005883a 	mov	r2,r20
 80076f0:	003ede06 	br	800726c <__alt_data_end+0xfc00726c>
 80076f4:	01000044 	movi	r4,1
 80076f8:	d9000b15 	stw	r4,44(sp)
 80076fc:	d9802217 	ldw	r6,136(sp)
 8007700:	0180dc0e 	bge	zero,r6,8007a74 <_dtoa_r+0x1224>
 8007704:	3023883a 	mov	r17,r6
 8007708:	d9800d15 	stw	r6,52(sp)
 800770c:	d9800615 	stw	r6,24(sp)
 8007710:	003d1e06 	br	8006b8c <__alt_data_end+0xfc006b8c>
 8007714:	d8800617 	ldw	r2,24(sp)
 8007718:	00be3716 	blt	zero,r2,8006ff8 <__alt_data_end+0xfc006ff8>
 800771c:	1000be1e 	bne	r2,zero,8007a18 <_dtoa_r+0x11c8>
 8007720:	8809883a 	mov	r4,r17
 8007724:	a00b883a 	mov	r5,r20
 8007728:	000d883a 	mov	r6,zero
 800772c:	01d00534 	movhi	r7,16404
 8007730:	800f4700 	call	800f470 <__muldf3>
 8007734:	1009883a 	mov	r4,r2
 8007738:	180b883a 	mov	r5,r3
 800773c:	900d883a 	mov	r6,r18
 8007740:	980f883a 	mov	r7,r19
 8007744:	800f2b00 	call	800f2b0 <__gedf2>
 8007748:	002b883a 	mov	r21,zero
 800774c:	0023883a 	mov	r17,zero
 8007750:	10007a16 	blt	r2,zero,800793c <_dtoa_r+0x10ec>
 8007754:	d9002217 	ldw	r4,136(sp)
 8007758:	ddc00717 	ldw	r23,28(sp)
 800775c:	0108303a 	nor	r4,zero,r4
 8007760:	d9000515 	stw	r4,20(sp)
 8007764:	8009883a 	mov	r4,r16
 8007768:	a80b883a 	mov	r5,r21
 800776c:	8009de80 	call	8009de8 <_Bfree>
 8007770:	883f751e 	bne	r17,zero,8007548 <__alt_data_end+0xfc007548>
 8007774:	003de406 	br	8006f08 <__alt_data_end+0xfc006f08>
 8007778:	e00b883a 	mov	r5,fp
 800777c:	8009883a 	mov	r4,r16
 8007780:	800a3780 	call	800a378 <__pow5mult>
 8007784:	1039883a 	mov	fp,r2
 8007788:	003ed306 	br	80072d8 <__alt_data_end+0xfc0072d8>
 800778c:	903ee01e 	bne	r18,zero,8007310 <__alt_data_end+0xfc007310>
 8007790:	00800434 	movhi	r2,16
 8007794:	10bfffc4 	addi	r2,r2,-1
 8007798:	9884703a 	and	r2,r19,r2
 800779c:	103f081e 	bne	r2,zero,80073c0 <__alt_data_end+0xfc0073c0>
 80077a0:	9cdffc2c 	andhi	r19,r19,32752
 80077a4:	983f0626 	beq	r19,zero,80073c0 <__alt_data_end+0xfc0073c0>
 80077a8:	d8800817 	ldw	r2,32(sp)
 80077ac:	b5800044 	addi	r22,r22,1
 80077b0:	04c00044 	movi	r19,1
 80077b4:	10800044 	addi	r2,r2,1
 80077b8:	d8800815 	stw	r2,32(sp)
 80077bc:	003f0106 	br	80073c4 <__alt_data_end+0xfc0073c4>
 80077c0:	d9800f17 	ldw	r6,60(sp)
 80077c4:	30016826 	beq	r6,zero,8007d68 <_dtoa_r+0x1518>
 80077c8:	10810cc4 	addi	r2,r2,1075
 80077cc:	dd400917 	ldw	r21,36(sp)
 80077d0:	dd000817 	ldw	r20,32(sp)
 80077d4:	003e9906 	br	800723c <__alt_data_end+0xfc00723c>
 80077d8:	9011883a 	mov	r8,r18
 80077dc:	4007883a 	mov	r3,r8
 80077e0:	e02d883a 	mov	r22,fp
 80077e4:	0080100e 	bge	zero,r2,8007828 <_dtoa_r+0xfd8>
 80077e8:	01800044 	movi	r6,1
 80077ec:	8009883a 	mov	r4,r16
 80077f0:	e00b883a 	mov	r5,fp
 80077f4:	da001515 	stw	r8,84(sp)
 80077f8:	da001715 	stw	r8,92(sp)
 80077fc:	800a4b80 	call	800a4b8 <__lshift>
 8007800:	1009883a 	mov	r4,r2
 8007804:	a80b883a 	mov	r5,r21
 8007808:	102d883a 	mov	r22,r2
 800780c:	800a6000 	call	800a600 <__mcmp>
 8007810:	d8c01517 	ldw	r3,84(sp)
 8007814:	da001717 	ldw	r8,92(sp)
 8007818:	0081a50e 	bge	zero,r2,8007eb0 <_dtoa_r+0x1660>
 800781c:	00800e44 	movi	r2,57
 8007820:	40817b26 	beq	r8,r2,8007e10 <_dtoa_r+0x15c0>
 8007824:	40c00044 	addi	r3,r8,1
 8007828:	8825883a 	mov	r18,r17
 800782c:	9dc00044 	addi	r23,r19,1
 8007830:	98c00005 	stb	r3,0(r19)
 8007834:	a023883a 	mov	r17,r20
 8007838:	b039883a 	mov	fp,r22
 800783c:	003f3906 	br	8007524 <__alt_data_end+0xfc007524>
 8007840:	00800e44 	movi	r2,57
 8007844:	9011883a 	mov	r8,r18
 8007848:	90817226 	beq	r18,r2,8007e14 <_dtoa_r+0x15c4>
 800784c:	0580010e 	bge	zero,r22,8007854 <_dtoa_r+0x1004>
 8007850:	ba000c44 	addi	r8,r23,49
 8007854:	8825883a 	mov	r18,r17
 8007858:	9dc00044 	addi	r23,r19,1
 800785c:	9a000005 	stb	r8,0(r19)
 8007860:	a023883a 	mov	r17,r20
 8007864:	003f2f06 	br	8007524 <__alt_data_end+0xfc007524>
 8007868:	880b883a 	mov	r5,r17
 800786c:	8009883a 	mov	r4,r16
 8007870:	01800284 	movi	r6,10
 8007874:	000f883a 	mov	r7,zero
 8007878:	8009e100 	call	8009e10 <__multadd>
 800787c:	1023883a 	mov	r17,r2
 8007880:	1029883a 	mov	r20,r2
 8007884:	003f9706 	br	80076e4 <__alt_data_end+0xfc0076e4>
 8007888:	8009883a 	mov	r4,r16
 800788c:	180b883a 	mov	r5,r3
 8007890:	8009de80 	call	8009de8 <_Bfree>
 8007894:	00800044 	movi	r2,1
 8007898:	003f7306 	br	8007668 <__alt_data_end+0xfc007668>
 800789c:	e009883a 	mov	r4,fp
 80078a0:	a80b883a 	mov	r5,r21
 80078a4:	800a6000 	call	800a600 <__mcmp>
 80078a8:	103ee60e 	bge	r2,zero,8007444 <__alt_data_end+0xfc007444>
 80078ac:	8009883a 	mov	r4,r16
 80078b0:	e00b883a 	mov	r5,fp
 80078b4:	01800284 	movi	r6,10
 80078b8:	000f883a 	mov	r7,zero
 80078bc:	8009e100 	call	8009e10 <__multadd>
 80078c0:	d9000517 	ldw	r4,20(sp)
 80078c4:	d9800b17 	ldw	r6,44(sp)
 80078c8:	1039883a 	mov	fp,r2
 80078cc:	213fffc4 	addi	r4,r4,-1
 80078d0:	d9000515 	stw	r4,20(sp)
 80078d4:	303f2d1e 	bne	r6,zero,800758c <__alt_data_end+0xfc00758c>
 80078d8:	d9000d17 	ldw	r4,52(sp)
 80078dc:	0101780e 	bge	zero,r4,8007ec0 <_dtoa_r+0x1670>
 80078e0:	d9000615 	stw	r4,24(sp)
 80078e4:	003edb06 	br	8007454 <__alt_data_end+0xfc007454>
 80078e8:	00800084 	movi	r2,2
 80078ec:	30818e1e 	bne	r6,r2,8007f28 <_dtoa_r+0x16d8>
 80078f0:	d8000b15 	stw	zero,44(sp)
 80078f4:	003f8106 	br	80076fc <__alt_data_end+0xfc0076fc>
 80078f8:	d8800717 	ldw	r2,28(sp)
 80078fc:	003c0306 	br	800690c <__alt_data_end+0xfc00690c>
 8007900:	d9000317 	ldw	r4,12(sp)
 8007904:	00800084 	movi	r2,2
 8007908:	113ed00e 	bge	r2,r4,800744c <__alt_data_end+0xfc00744c>
 800790c:	d8c00617 	ldw	r3,24(sp)
 8007910:	183f901e 	bne	r3,zero,8007754 <__alt_data_end+0xfc007754>
 8007914:	a80b883a 	mov	r5,r21
 8007918:	8009883a 	mov	r4,r16
 800791c:	01800144 	movi	r6,5
 8007920:	000f883a 	mov	r7,zero
 8007924:	8009e100 	call	8009e10 <__multadd>
 8007928:	e009883a 	mov	r4,fp
 800792c:	100b883a 	mov	r5,r2
 8007930:	102b883a 	mov	r21,r2
 8007934:	800a6000 	call	800a600 <__mcmp>
 8007938:	00bf860e 	bge	zero,r2,8007754 <__alt_data_end+0xfc007754>
 800793c:	d9800717 	ldw	r6,28(sp)
 8007940:	00800c44 	movi	r2,49
 8007944:	30800005 	stb	r2,0(r6)
 8007948:	d8800517 	ldw	r2,20(sp)
 800794c:	35c00044 	addi	r23,r6,1
 8007950:	10800044 	addi	r2,r2,1
 8007954:	d8800515 	stw	r2,20(sp)
 8007958:	003f8206 	br	8007764 <__alt_data_end+0xfc007764>
 800795c:	903e981e 	bne	r18,zero,80073c0 <__alt_data_end+0xfc0073c0>
 8007960:	003f8b06 	br	8007790 <__alt_data_end+0xfc007790>
 8007964:	d9800517 	ldw	r6,20(sp)
 8007968:	d8c00717 	ldw	r3,28(sp)
 800796c:	00800c44 	movi	r2,49
 8007970:	31800044 	addi	r6,r6,1
 8007974:	d9800515 	stw	r6,20(sp)
 8007978:	18800005 	stb	r2,0(r3)
 800797c:	003ee906 	br	8007524 <__alt_data_end+0xfc007524>
 8007980:	dc000317 	ldw	r16,12(sp)
 8007984:	003d6006 	br	8006f08 <__alt_data_end+0xfc006f08>
 8007988:	8809883a 	mov	r4,r17
 800798c:	80104ec0 	call	80104ec <__floatsidf>
 8007990:	a009883a 	mov	r4,r20
 8007994:	a80b883a 	mov	r5,r21
 8007998:	100d883a 	mov	r6,r2
 800799c:	180f883a 	mov	r7,r3
 80079a0:	800f4700 	call	800f470 <__muldf3>
 80079a4:	1009883a 	mov	r4,r2
 80079a8:	180b883a 	mov	r5,r3
 80079ac:	000d883a 	mov	r6,zero
 80079b0:	01d00734 	movhi	r7,16412
 80079b4:	800e0c40 	call	800e0c4 <__adddf3>
 80079b8:	1023883a 	mov	r17,r2
 80079bc:	00bf3034 	movhi	r2,64704
 80079c0:	1885883a 	add	r2,r3,r2
 80079c4:	d8800e15 	stw	r2,56(sp)
 80079c8:	a009883a 	mov	r4,r20
 80079cc:	a80b883a 	mov	r5,r21
 80079d0:	000d883a 	mov	r6,zero
 80079d4:	01d00534 	movhi	r7,16404
 80079d8:	800fb940 	call	800fb94 <__subdf3>
 80079dc:	d9c00e17 	ldw	r7,56(sp)
 80079e0:	1009883a 	mov	r4,r2
 80079e4:	180b883a 	mov	r5,r3
 80079e8:	880d883a 	mov	r6,r17
 80079ec:	102b883a 	mov	r21,r2
 80079f0:	1829883a 	mov	r20,r3
 80079f4:	800f2b00 	call	800f2b0 <__gedf2>
 80079f8:	00807716 	blt	zero,r2,8007bd8 <_dtoa_r+0x1388>
 80079fc:	d8800e17 	ldw	r2,56(sp)
 8007a00:	a809883a 	mov	r4,r21
 8007a04:	a00b883a 	mov	r5,r20
 8007a08:	11e0003c 	xorhi	r7,r2,32768
 8007a0c:	880d883a 	mov	r6,r17
 8007a10:	800f3900 	call	800f390 <__ledf2>
 8007a14:	103d6b0e 	bge	r2,zero,8006fc4 <__alt_data_end+0xfc006fc4>
 8007a18:	002b883a 	mov	r21,zero
 8007a1c:	0023883a 	mov	r17,zero
 8007a20:	003f4c06 	br	8007754 <__alt_data_end+0xfc007754>
 8007a24:	d9800917 	ldw	r6,36(sp)
 8007a28:	e00b883a 	mov	r5,fp
 8007a2c:	8009883a 	mov	r4,r16
 8007a30:	800a3780 	call	800a378 <__pow5mult>
 8007a34:	1039883a 	mov	fp,r2
 8007a38:	003e2706 	br	80072d8 <__alt_data_end+0xfc0072d8>
 8007a3c:	d8000b15 	stw	zero,44(sp)
 8007a40:	003c4906 	br	8006b68 <__alt_data_end+0xfc006b68>
 8007a44:	d9000917 	ldw	r4,36(sp)
 8007a48:	d9800a17 	ldw	r6,40(sp)
 8007a4c:	dd400915 	stw	r21,36(sp)
 8007a50:	a905c83a 	sub	r2,r21,r4
 8007a54:	308d883a 	add	r6,r6,r2
 8007a58:	d9800a15 	stw	r6,40(sp)
 8007a5c:	002b883a 	mov	r21,zero
 8007a60:	003df206 	br	800722c <__alt_data_end+0xfc00722c>
 8007a64:	dc800e15 	stw	r18,56(sp)
 8007a68:	982b883a 	mov	r21,r19
 8007a6c:	04400084 	movi	r17,2
 8007a70:	003c7406 	br	8006c44 <__alt_data_end+0xfc006c44>
 8007a74:	04400044 	movi	r17,1
 8007a78:	dc400d15 	stw	r17,52(sp)
 8007a7c:	dc400615 	stw	r17,24(sp)
 8007a80:	dc402215 	stw	r17,136(sp)
 8007a84:	80001115 	stw	zero,68(r16)
 8007a88:	000b883a 	mov	r5,zero
 8007a8c:	003c4a06 	br	8006bb8 <__alt_data_end+0xfc006bb8>
 8007a90:	3023883a 	mov	r17,r6
 8007a94:	003ffb06 	br	8007a84 <__alt_data_end+0xfc007a84>
 8007a98:	1000021e 	bne	r2,zero,8007aa4 <_dtoa_r+0x1254>
 8007a9c:	4200004c 	andi	r8,r8,1
 8007aa0:	403e8f1e 	bne	r8,zero,80074e0 <__alt_data_end+0xfc0074e0>
 8007aa4:	01000c04 	movi	r4,48
 8007aa8:	00000106 	br	8007ab0 <_dtoa_r+0x1260>
 8007aac:	102f883a 	mov	r23,r2
 8007ab0:	b8bfffc4 	addi	r2,r23,-1
 8007ab4:	10c00007 	ldb	r3,0(r2)
 8007ab8:	193ffc26 	beq	r3,r4,8007aac <__alt_data_end+0xfc007aac>
 8007abc:	003e9906 	br	8007524 <__alt_data_end+0xfc007524>
 8007ac0:	d9000517 	ldw	r4,20(sp)
 8007ac4:	012fc83a 	sub	r23,zero,r4
 8007ac8:	b800ad26 	beq	r23,zero,8007d80 <_dtoa_r+0x1530>
 8007acc:	b88003cc 	andi	r2,r23,15
 8007ad0:	100490fa 	slli	r2,r2,3
 8007ad4:	00c200b4 	movhi	r3,2050
 8007ad8:	18f6ac04 	addi	r3,r3,-9552
 8007adc:	1885883a 	add	r2,r3,r2
 8007ae0:	11800017 	ldw	r6,0(r2)
 8007ae4:	11c00117 	ldw	r7,4(r2)
 8007ae8:	b82fd13a 	srai	r23,r23,4
 8007aec:	9009883a 	mov	r4,r18
 8007af0:	980b883a 	mov	r5,r19
 8007af4:	800f4700 	call	800f470 <__muldf3>
 8007af8:	1029883a 	mov	r20,r2
 8007afc:	182b883a 	mov	r21,r3
 8007b00:	b800f426 	beq	r23,zero,8007ed4 <_dtoa_r+0x1684>
 8007b04:	020200b4 	movhi	r8,2050
 8007b08:	4236a204 	addi	r8,r8,-9592
 8007b0c:	8029883a 	mov	r20,r16
 8007b10:	04400084 	movi	r17,2
 8007b14:	4021883a 	mov	r16,r8
 8007b18:	b980004c 	andi	r6,r23,1
 8007b1c:	1009883a 	mov	r4,r2
 8007b20:	b82fd07a 	srai	r23,r23,1
 8007b24:	180b883a 	mov	r5,r3
 8007b28:	30000426 	beq	r6,zero,8007b3c <_dtoa_r+0x12ec>
 8007b2c:	81800017 	ldw	r6,0(r16)
 8007b30:	81c00117 	ldw	r7,4(r16)
 8007b34:	8c400044 	addi	r17,r17,1
 8007b38:	800f4700 	call	800f470 <__muldf3>
 8007b3c:	84000204 	addi	r16,r16,8
 8007b40:	b83ff51e 	bne	r23,zero,8007b18 <__alt_data_end+0xfc007b18>
 8007b44:	a021883a 	mov	r16,r20
 8007b48:	182b883a 	mov	r21,r3
 8007b4c:	1029883a 	mov	r20,r2
 8007b50:	003c5506 	br	8006ca8 <__alt_data_end+0xfc006ca8>
 8007b54:	d9800517 	ldw	r6,20(sp)
 8007b58:	d9000717 	ldw	r4,28(sp)
 8007b5c:	00c00c04 	movi	r3,48
 8007b60:	31800044 	addi	r6,r6,1
 8007b64:	d9800515 	stw	r6,20(sp)
 8007b68:	20c00005 	stb	r3,0(r4)
 8007b6c:	02000c44 	movi	r8,49
 8007b70:	003da206 	br	80071fc <__alt_data_end+0xfc0071fc>
 8007b74:	89400117 	ldw	r5,4(r17)
 8007b78:	8009883a 	mov	r4,r16
 8007b7c:	8009d400 	call	8009d40 <_Balloc>
 8007b80:	89800417 	ldw	r6,16(r17)
 8007b84:	11000304 	addi	r4,r2,12
 8007b88:	89400304 	addi	r5,r17,12
 8007b8c:	31800084 	addi	r6,r6,2
 8007b90:	318d883a 	add	r6,r6,r6
 8007b94:	318d883a 	add	r6,r6,r6
 8007b98:	1027883a 	mov	r19,r2
 8007b9c:	8003f580 	call	8003f58 <memcpy>
 8007ba0:	8009883a 	mov	r4,r16
 8007ba4:	980b883a 	mov	r5,r19
 8007ba8:	01800044 	movi	r6,1
 8007bac:	800a4b80 	call	800a4b8 <__lshift>
 8007bb0:	1029883a 	mov	r20,r2
 8007bb4:	003e8606 	br	80075d0 <__alt_data_end+0xfc0075d0>
 8007bb8:	00800e44 	movi	r2,57
 8007bbc:	90809526 	beq	r18,r2,8007e14 <_dtoa_r+0x15c4>
 8007bc0:	92000044 	addi	r8,r18,1
 8007bc4:	003f2306 	br	8007854 <__alt_data_end+0xfc007854>
 8007bc8:	9011883a 	mov	r8,r18
 8007bcc:	8825883a 	mov	r18,r17
 8007bd0:	a023883a 	mov	r17,r20
 8007bd4:	003e3706 	br	80074b4 <__alt_data_end+0xfc0074b4>
 8007bd8:	002b883a 	mov	r21,zero
 8007bdc:	0023883a 	mov	r17,zero
 8007be0:	003f5606 	br	800793c <__alt_data_end+0xfc00793c>
 8007be4:	51bfffc4 	addi	r6,r10,-1
 8007be8:	300490fa 	slli	r2,r6,3
 8007bec:	00c200b4 	movhi	r3,2050
 8007bf0:	18f6ac04 	addi	r3,r3,-9552
 8007bf4:	1885883a 	add	r2,r3,r2
 8007bf8:	d9c00e17 	ldw	r7,56(sp)
 8007bfc:	11000017 	ldw	r4,0(r2)
 8007c00:	11400117 	ldw	r5,4(r2)
 8007c04:	d8800717 	ldw	r2,28(sp)
 8007c08:	d9801015 	stw	r6,64(sp)
 8007c0c:	880d883a 	mov	r6,r17
 8007c10:	da801615 	stw	r10,88(sp)
 8007c14:	15c00044 	addi	r23,r2,1
 8007c18:	800f4700 	call	800f470 <__muldf3>
 8007c1c:	a80b883a 	mov	r5,r21
 8007c20:	a009883a 	mov	r4,r20
 8007c24:	d8c01115 	stw	r3,68(sp)
 8007c28:	d8800e15 	stw	r2,56(sp)
 8007c2c:	80104640 	call	8010464 <__fixdfsi>
 8007c30:	1009883a 	mov	r4,r2
 8007c34:	1023883a 	mov	r17,r2
 8007c38:	80104ec0 	call	80104ec <__floatsidf>
 8007c3c:	a009883a 	mov	r4,r20
 8007c40:	a80b883a 	mov	r5,r21
 8007c44:	100d883a 	mov	r6,r2
 8007c48:	180f883a 	mov	r7,r3
 8007c4c:	800fb940 	call	800fb94 <__subdf3>
 8007c50:	1813883a 	mov	r9,r3
 8007c54:	d8c00717 	ldw	r3,28(sp)
 8007c58:	8c400c04 	addi	r17,r17,48
 8007c5c:	1011883a 	mov	r8,r2
 8007c60:	1c400005 	stb	r17,0(r3)
 8007c64:	da801617 	ldw	r10,88(sp)
 8007c68:	00800044 	movi	r2,1
 8007c6c:	50802326 	beq	r10,r2,8007cfc <_dtoa_r+0x14ac>
 8007c70:	d8800717 	ldw	r2,28(sp)
 8007c74:	b82b883a 	mov	r21,r23
 8007c78:	dc001315 	stw	r16,76(sp)
 8007c7c:	12a9883a 	add	r20,r2,r10
 8007c80:	4807883a 	mov	r3,r9
 8007c84:	4005883a 	mov	r2,r8
 8007c88:	dc801415 	stw	r18,80(sp)
 8007c8c:	000d883a 	mov	r6,zero
 8007c90:	01d00934 	movhi	r7,16420
 8007c94:	1009883a 	mov	r4,r2
 8007c98:	180b883a 	mov	r5,r3
 8007c9c:	800f4700 	call	800f470 <__muldf3>
 8007ca0:	180b883a 	mov	r5,r3
 8007ca4:	1009883a 	mov	r4,r2
 8007ca8:	1821883a 	mov	r16,r3
 8007cac:	1025883a 	mov	r18,r2
 8007cb0:	80104640 	call	8010464 <__fixdfsi>
 8007cb4:	1009883a 	mov	r4,r2
 8007cb8:	1023883a 	mov	r17,r2
 8007cbc:	80104ec0 	call	80104ec <__floatsidf>
 8007cc0:	9009883a 	mov	r4,r18
 8007cc4:	800b883a 	mov	r5,r16
 8007cc8:	100d883a 	mov	r6,r2
 8007ccc:	180f883a 	mov	r7,r3
 8007cd0:	8c400c04 	addi	r17,r17,48
 8007cd4:	800fb940 	call	800fb94 <__subdf3>
 8007cd8:	ad400044 	addi	r21,r21,1
 8007cdc:	ac7fffc5 	stb	r17,-1(r21)
 8007ce0:	ad3fea1e 	bne	r21,r20,8007c8c <__alt_data_end+0xfc007c8c>
 8007ce4:	1813883a 	mov	r9,r3
 8007ce8:	d8c01017 	ldw	r3,64(sp)
 8007cec:	dc001317 	ldw	r16,76(sp)
 8007cf0:	dc801417 	ldw	r18,80(sp)
 8007cf4:	1011883a 	mov	r8,r2
 8007cf8:	b8ef883a 	add	r23,r23,r3
 8007cfc:	d9000e17 	ldw	r4,56(sp)
 8007d00:	d9401117 	ldw	r5,68(sp)
 8007d04:	000d883a 	mov	r6,zero
 8007d08:	01cff834 	movhi	r7,16352
 8007d0c:	da001715 	stw	r8,92(sp)
 8007d10:	da401515 	stw	r9,84(sp)
 8007d14:	800e0c40 	call	800e0c4 <__adddf3>
 8007d18:	da001717 	ldw	r8,92(sp)
 8007d1c:	da401517 	ldw	r9,84(sp)
 8007d20:	1009883a 	mov	r4,r2
 8007d24:	400d883a 	mov	r6,r8
 8007d28:	480f883a 	mov	r7,r9
 8007d2c:	180b883a 	mov	r5,r3
 8007d30:	800f3900 	call	800f390 <__ledf2>
 8007d34:	da001717 	ldw	r8,92(sp)
 8007d38:	da401517 	ldw	r9,84(sp)
 8007d3c:	10003b0e 	bge	r2,zero,8007e2c <_dtoa_r+0x15dc>
 8007d40:	d9001217 	ldw	r4,72(sp)
 8007d44:	bd7fffc3 	ldbu	r21,-1(r23)
 8007d48:	d9000515 	stw	r4,20(sp)
 8007d4c:	003d1c06 	br	80071c0 <__alt_data_end+0xfc0071c0>
 8007d50:	d8c00817 	ldw	r3,32(sp)
 8007d54:	18a9c83a 	sub	r20,r3,r2
 8007d58:	0005883a 	mov	r2,zero
 8007d5c:	003d3706 	br	800723c <__alt_data_end+0xfc00723c>
 8007d60:	00800044 	movi	r2,1
 8007d64:	003dd006 	br	80074a8 <__alt_data_end+0xfc0074a8>
 8007d68:	d8c00217 	ldw	r3,8(sp)
 8007d6c:	00800d84 	movi	r2,54
 8007d70:	dd400917 	ldw	r21,36(sp)
 8007d74:	10c5c83a 	sub	r2,r2,r3
 8007d78:	dd000817 	ldw	r20,32(sp)
 8007d7c:	003d2f06 	br	800723c <__alt_data_end+0xfc00723c>
 8007d80:	9029883a 	mov	r20,r18
 8007d84:	982b883a 	mov	r21,r19
 8007d88:	04400084 	movi	r17,2
 8007d8c:	003bc606 	br	8006ca8 <__alt_data_end+0xfc006ca8>
 8007d90:	d8800617 	ldw	r2,24(sp)
 8007d94:	103efc26 	beq	r2,zero,8007988 <__alt_data_end+0xfc007988>
 8007d98:	d8c00d17 	ldw	r3,52(sp)
 8007d9c:	00fc890e 	bge	zero,r3,8006fc4 <__alt_data_end+0xfc006fc4>
 8007da0:	a80b883a 	mov	r5,r21
 8007da4:	a009883a 	mov	r4,r20
 8007da8:	000d883a 	mov	r6,zero
 8007dac:	01d00934 	movhi	r7,16420
 8007db0:	800f4700 	call	800f470 <__muldf3>
 8007db4:	89000044 	addi	r4,r17,1
 8007db8:	1029883a 	mov	r20,r2
 8007dbc:	182b883a 	mov	r21,r3
 8007dc0:	80104ec0 	call	80104ec <__floatsidf>
 8007dc4:	a009883a 	mov	r4,r20
 8007dc8:	a80b883a 	mov	r5,r21
 8007dcc:	100d883a 	mov	r6,r2
 8007dd0:	180f883a 	mov	r7,r3
 8007dd4:	800f4700 	call	800f470 <__muldf3>
 8007dd8:	1009883a 	mov	r4,r2
 8007ddc:	180b883a 	mov	r5,r3
 8007de0:	000d883a 	mov	r6,zero
 8007de4:	01d00734 	movhi	r7,16412
 8007de8:	800e0c40 	call	800e0c4 <__adddf3>
 8007dec:	d9000517 	ldw	r4,20(sp)
 8007df0:	1023883a 	mov	r17,r2
 8007df4:	00bf3034 	movhi	r2,64704
 8007df8:	213fffc4 	addi	r4,r4,-1
 8007dfc:	1885883a 	add	r2,r3,r2
 8007e00:	d9001215 	stw	r4,72(sp)
 8007e04:	d8800e15 	stw	r2,56(sp)
 8007e08:	da800d17 	ldw	r10,52(sp)
 8007e0c:	003bc306 	br	8006d1c <__alt_data_end+0xfc006d1c>
 8007e10:	b039883a 	mov	fp,r22
 8007e14:	01000e44 	movi	r4,57
 8007e18:	8825883a 	mov	r18,r17
 8007e1c:	9dc00044 	addi	r23,r19,1
 8007e20:	99000005 	stb	r4,0(r19)
 8007e24:	a023883a 	mov	r17,r20
 8007e28:	003dae06 	br	80074e4 <__alt_data_end+0xfc0074e4>
 8007e2c:	d9800e17 	ldw	r6,56(sp)
 8007e30:	d9c01117 	ldw	r7,68(sp)
 8007e34:	0009883a 	mov	r4,zero
 8007e38:	014ff834 	movhi	r5,16352
 8007e3c:	da001715 	stw	r8,92(sp)
 8007e40:	da401515 	stw	r9,84(sp)
 8007e44:	800fb940 	call	800fb94 <__subdf3>
 8007e48:	da001717 	ldw	r8,92(sp)
 8007e4c:	da401517 	ldw	r9,84(sp)
 8007e50:	1009883a 	mov	r4,r2
 8007e54:	180b883a 	mov	r5,r3
 8007e58:	400d883a 	mov	r6,r8
 8007e5c:	480f883a 	mov	r7,r9
 8007e60:	800f2b00 	call	800f2b0 <__gedf2>
 8007e64:	00bc570e 	bge	zero,r2,8006fc4 <__alt_data_end+0xfc006fc4>
 8007e68:	01000c04 	movi	r4,48
 8007e6c:	00000106 	br	8007e74 <_dtoa_r+0x1624>
 8007e70:	102f883a 	mov	r23,r2
 8007e74:	b8bfffc4 	addi	r2,r23,-1
 8007e78:	10c00007 	ldb	r3,0(r2)
 8007e7c:	193ffc26 	beq	r3,r4,8007e70 <__alt_data_end+0xfc007e70>
 8007e80:	d9801217 	ldw	r6,72(sp)
 8007e84:	d9800515 	stw	r6,20(sp)
 8007e88:	003c1f06 	br	8006f08 <__alt_data_end+0xfc006f08>
 8007e8c:	d8801217 	ldw	r2,72(sp)
 8007e90:	dc001117 	ldw	r16,68(sp)
 8007e94:	d8800515 	stw	r2,20(sp)
 8007e98:	003cc906 	br	80071c0 <__alt_data_end+0xfc0071c0>
 8007e9c:	dd801317 	ldw	r22,76(sp)
 8007ea0:	dc001117 	ldw	r16,68(sp)
 8007ea4:	dcc01417 	ldw	r19,80(sp)
 8007ea8:	dc801017 	ldw	r18,64(sp)
 8007eac:	003c4506 	br	8006fc4 <__alt_data_end+0xfc006fc4>
 8007eb0:	103e5d1e 	bne	r2,zero,8007828 <__alt_data_end+0xfc007828>
 8007eb4:	4080004c 	andi	r2,r8,1
 8007eb8:	103e5b26 	beq	r2,zero,8007828 <__alt_data_end+0xfc007828>
 8007ebc:	003e5706 	br	800781c <__alt_data_end+0xfc00781c>
 8007ec0:	d8c00317 	ldw	r3,12(sp)
 8007ec4:	00800084 	movi	r2,2
 8007ec8:	10c00a16 	blt	r2,r3,8007ef4 <_dtoa_r+0x16a4>
 8007ecc:	d9000d17 	ldw	r4,52(sp)
 8007ed0:	003e8306 	br	80078e0 <__alt_data_end+0xfc0078e0>
 8007ed4:	04400084 	movi	r17,2
 8007ed8:	003b7306 	br	8006ca8 <__alt_data_end+0xfc006ca8>
 8007edc:	d9801217 	ldw	r6,72(sp)
 8007ee0:	d9800515 	stw	r6,20(sp)
 8007ee4:	003cb606 	br	80071c0 <__alt_data_end+0xfc0071c0>
 8007ee8:	d9001217 	ldw	r4,72(sp)
 8007eec:	d9000515 	stw	r4,20(sp)
 8007ef0:	003c0506 	br	8006f08 <__alt_data_end+0xfc006f08>
 8007ef4:	d9800d17 	ldw	r6,52(sp)
 8007ef8:	d9800615 	stw	r6,24(sp)
 8007efc:	003e8306 	br	800790c <__alt_data_end+0xfc00790c>
 8007f00:	d9800317 	ldw	r6,12(sp)
 8007f04:	00800084 	movi	r2,2
 8007f08:	11800216 	blt	r2,r6,8007f14 <_dtoa_r+0x16c4>
 8007f0c:	d8800d17 	ldw	r2,52(sp)
 8007f10:	003da606 	br	80075ac <__alt_data_end+0xfc0075ac>
 8007f14:	d8800d17 	ldw	r2,52(sp)
 8007f18:	d8800615 	stw	r2,24(sp)
 8007f1c:	003e7b06 	br	800790c <__alt_data_end+0xfc00790c>
 8007f20:	05000044 	movi	r20,1
 8007f24:	003b0506 	br	8006b3c <__alt_data_end+0xfc006b3c>
 8007f28:	8009883a 	mov	r4,r16
 8007f2c:	80001115 	stw	zero,68(r16)
 8007f30:	000b883a 	mov	r5,zero
 8007f34:	8009d400 	call	8009d40 <_Balloc>
 8007f38:	d8800715 	stw	r2,28(sp)
 8007f3c:	d8c00717 	ldw	r3,28(sp)
 8007f40:	00bfffc4 	movi	r2,-1
 8007f44:	01000044 	movi	r4,1
 8007f48:	d8800615 	stw	r2,24(sp)
 8007f4c:	80c01015 	stw	r3,64(r16)
 8007f50:	d9000b15 	stw	r4,44(sp)
 8007f54:	d8002215 	stw	zero,136(sp)
 8007f58:	d8800d15 	stw	r2,52(sp)
 8007f5c:	003c1906 	br	8006fc4 <__alt_data_end+0xfc006fc4>
 8007f60:	193d2926 	beq	r3,r4,8007408 <__alt_data_end+0xfc007408>
 8007f64:	00c00f04 	movi	r3,60
 8007f68:	1885c83a 	sub	r2,r3,r2
 8007f6c:	003d7b06 	br	800755c <__alt_data_end+0xfc00755c>
 8007f70:	000b883a 	mov	r5,zero
 8007f74:	003b1006 	br	8006bb8 <__alt_data_end+0xfc006bb8>

08007f78 <_fflush_r>:
 8007f78:	defffb04 	addi	sp,sp,-20
 8007f7c:	dcc00315 	stw	r19,12(sp)
 8007f80:	dc000015 	stw	r16,0(sp)
 8007f84:	dfc00415 	stw	ra,16(sp)
 8007f88:	dc800215 	stw	r18,8(sp)
 8007f8c:	dc400115 	stw	r17,4(sp)
 8007f90:	2027883a 	mov	r19,r4
 8007f94:	2821883a 	mov	r16,r5
 8007f98:	20000226 	beq	r4,zero,8007fa4 <_fflush_r+0x2c>
 8007f9c:	20800e17 	ldw	r2,56(r4)
 8007fa0:	10005326 	beq	r2,zero,80080f0 <_fflush_r+0x178>
 8007fa4:	8080030b 	ldhu	r2,12(r16)
 8007fa8:	10ffffcc 	andi	r3,r2,65535
 8007fac:	18e0001c 	xori	r3,r3,32768
 8007fb0:	18e00004 	addi	r3,r3,-32768
 8007fb4:	18002c26 	beq	r3,zero,8008068 <_fflush_r+0xf0>
 8007fb8:	10c0020c 	andi	r3,r2,8
 8007fbc:	1800321e 	bne	r3,zero,8008088 <_fflush_r+0x110>
 8007fc0:	80c00117 	ldw	r3,4(r16)
 8007fc4:	10820014 	ori	r2,r2,2048
 8007fc8:	8080030d 	sth	r2,12(r16)
 8007fcc:	00c0570e 	bge	zero,r3,800812c <_fflush_r+0x1b4>
 8007fd0:	82000a17 	ldw	r8,40(r16)
 8007fd4:	40002426 	beq	r8,zero,8008068 <_fflush_r+0xf0>
 8007fd8:	9c400017 	ldw	r17,0(r19)
 8007fdc:	10c4000c 	andi	r3,r2,4096
 8007fe0:	98000015 	stw	zero,0(r19)
 8007fe4:	18004626 	beq	r3,zero,8008100 <_fflush_r+0x188>
 8007fe8:	81801417 	ldw	r6,80(r16)
 8007fec:	10c0010c 	andi	r3,r2,4
 8007ff0:	18000626 	beq	r3,zero,800800c <_fflush_r+0x94>
 8007ff4:	80c00117 	ldw	r3,4(r16)
 8007ff8:	80800c17 	ldw	r2,48(r16)
 8007ffc:	30cdc83a 	sub	r6,r6,r3
 8008000:	10000226 	beq	r2,zero,800800c <_fflush_r+0x94>
 8008004:	80800f17 	ldw	r2,60(r16)
 8008008:	308dc83a 	sub	r6,r6,r2
 800800c:	81400717 	ldw	r5,28(r16)
 8008010:	9809883a 	mov	r4,r19
 8008014:	000f883a 	mov	r7,zero
 8008018:	403ee83a 	callr	r8
 800801c:	00ffffc4 	movi	r3,-1
 8008020:	10c04526 	beq	r2,r3,8008138 <_fflush_r+0x1c0>
 8008024:	80c0030b 	ldhu	r3,12(r16)
 8008028:	81000417 	ldw	r4,16(r16)
 800802c:	80000115 	stw	zero,4(r16)
 8008030:	197dffcc 	andi	r5,r3,63487
 8008034:	8140030d 	sth	r5,12(r16)
 8008038:	81000015 	stw	r4,0(r16)
 800803c:	18c4000c 	andi	r3,r3,4096
 8008040:	18000126 	beq	r3,zero,8008048 <_fflush_r+0xd0>
 8008044:	80801415 	stw	r2,80(r16)
 8008048:	81400c17 	ldw	r5,48(r16)
 800804c:	9c400015 	stw	r17,0(r19)
 8008050:	28000526 	beq	r5,zero,8008068 <_fflush_r+0xf0>
 8008054:	80801004 	addi	r2,r16,64
 8008058:	28800226 	beq	r5,r2,8008064 <_fflush_r+0xec>
 800805c:	9809883a 	mov	r4,r19
 8008060:	80086940 	call	8008694 <_free_r>
 8008064:	80000c15 	stw	zero,48(r16)
 8008068:	0005883a 	mov	r2,zero
 800806c:	dfc00417 	ldw	ra,16(sp)
 8008070:	dcc00317 	ldw	r19,12(sp)
 8008074:	dc800217 	ldw	r18,8(sp)
 8008078:	dc400117 	ldw	r17,4(sp)
 800807c:	dc000017 	ldw	r16,0(sp)
 8008080:	dec00504 	addi	sp,sp,20
 8008084:	f800283a 	ret
 8008088:	84800417 	ldw	r18,16(r16)
 800808c:	903ff626 	beq	r18,zero,8008068 <__alt_data_end+0xfc008068>
 8008090:	84400017 	ldw	r17,0(r16)
 8008094:	108000cc 	andi	r2,r2,3
 8008098:	84800015 	stw	r18,0(r16)
 800809c:	8ca3c83a 	sub	r17,r17,r18
 80080a0:	10001526 	beq	r2,zero,80080f8 <_fflush_r+0x180>
 80080a4:	0005883a 	mov	r2,zero
 80080a8:	80800215 	stw	r2,8(r16)
 80080ac:	04400316 	blt	zero,r17,80080bc <_fflush_r+0x144>
 80080b0:	003fed06 	br	8008068 <__alt_data_end+0xfc008068>
 80080b4:	90a5883a 	add	r18,r18,r2
 80080b8:	047feb0e 	bge	zero,r17,8008068 <__alt_data_end+0xfc008068>
 80080bc:	80800917 	ldw	r2,36(r16)
 80080c0:	81400717 	ldw	r5,28(r16)
 80080c4:	880f883a 	mov	r7,r17
 80080c8:	900d883a 	mov	r6,r18
 80080cc:	9809883a 	mov	r4,r19
 80080d0:	103ee83a 	callr	r2
 80080d4:	88a3c83a 	sub	r17,r17,r2
 80080d8:	00bff616 	blt	zero,r2,80080b4 <__alt_data_end+0xfc0080b4>
 80080dc:	80c0030b 	ldhu	r3,12(r16)
 80080e0:	00bfffc4 	movi	r2,-1
 80080e4:	18c01014 	ori	r3,r3,64
 80080e8:	80c0030d 	sth	r3,12(r16)
 80080ec:	003fdf06 	br	800806c <__alt_data_end+0xfc00806c>
 80080f0:	80085200 	call	8008520 <__sinit>
 80080f4:	003fab06 	br	8007fa4 <__alt_data_end+0xfc007fa4>
 80080f8:	80800517 	ldw	r2,20(r16)
 80080fc:	003fea06 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008100:	81400717 	ldw	r5,28(r16)
 8008104:	000d883a 	mov	r6,zero
 8008108:	9809883a 	mov	r4,r19
 800810c:	01c00044 	movi	r7,1
 8008110:	403ee83a 	callr	r8
 8008114:	100d883a 	mov	r6,r2
 8008118:	00bfffc4 	movi	r2,-1
 800811c:	30801326 	beq	r6,r2,800816c <_fflush_r+0x1f4>
 8008120:	8080030b 	ldhu	r2,12(r16)
 8008124:	82000a17 	ldw	r8,40(r16)
 8008128:	003fb006 	br	8007fec <__alt_data_end+0xfc007fec>
 800812c:	80c00f17 	ldw	r3,60(r16)
 8008130:	00ffa716 	blt	zero,r3,8007fd0 <__alt_data_end+0xfc007fd0>
 8008134:	003fcc06 	br	8008068 <__alt_data_end+0xfc008068>
 8008138:	98c00017 	ldw	r3,0(r19)
 800813c:	183fb926 	beq	r3,zero,8008024 <__alt_data_end+0xfc008024>
 8008140:	01000744 	movi	r4,29
 8008144:	19000226 	beq	r3,r4,8008150 <_fflush_r+0x1d8>
 8008148:	01000584 	movi	r4,22
 800814c:	1900101e 	bne	r3,r4,8008190 <_fflush_r+0x218>
 8008150:	8080030b 	ldhu	r2,12(r16)
 8008154:	80c00417 	ldw	r3,16(r16)
 8008158:	80000115 	stw	zero,4(r16)
 800815c:	10bdffcc 	andi	r2,r2,63487
 8008160:	8080030d 	sth	r2,12(r16)
 8008164:	80c00015 	stw	r3,0(r16)
 8008168:	003fb706 	br	8008048 <__alt_data_end+0xfc008048>
 800816c:	98800017 	ldw	r2,0(r19)
 8008170:	103feb26 	beq	r2,zero,8008120 <__alt_data_end+0xfc008120>
 8008174:	00c00744 	movi	r3,29
 8008178:	10c00226 	beq	r2,r3,8008184 <_fflush_r+0x20c>
 800817c:	00c00584 	movi	r3,22
 8008180:	10ffd61e 	bne	r2,r3,80080dc <__alt_data_end+0xfc0080dc>
 8008184:	9c400015 	stw	r17,0(r19)
 8008188:	0005883a 	mov	r2,zero
 800818c:	003fb706 	br	800806c <__alt_data_end+0xfc00806c>
 8008190:	80c0030b 	ldhu	r3,12(r16)
 8008194:	18c01014 	ori	r3,r3,64
 8008198:	80c0030d 	sth	r3,12(r16)
 800819c:	003fb306 	br	800806c <__alt_data_end+0xfc00806c>

080081a0 <fflush>:
 80081a0:	20000526 	beq	r4,zero,80081b8 <fflush+0x18>
 80081a4:	008200b4 	movhi	r2,2050
 80081a8:	10be0b04 	addi	r2,r2,-2004
 80081ac:	200b883a 	mov	r5,r4
 80081b0:	11000017 	ldw	r4,0(r2)
 80081b4:	8007f781 	jmpi	8007f78 <_fflush_r>
 80081b8:	008200b4 	movhi	r2,2050
 80081bc:	10be0a04 	addi	r2,r2,-2008
 80081c0:	11000017 	ldw	r4,0(r2)
 80081c4:	01420034 	movhi	r5,2048
 80081c8:	295fde04 	addi	r5,r5,32632
 80081cc:	8008ee01 	jmpi	8008ee0 <_fwalk_reent>

080081d0 <__fp_lock>:
 80081d0:	0005883a 	mov	r2,zero
 80081d4:	f800283a 	ret

080081d8 <__fp_unlock>:
 80081d8:	0005883a 	mov	r2,zero
 80081dc:	f800283a 	ret

080081e0 <_cleanup_r>:
 80081e0:	01420074 	movhi	r5,2049
 80081e4:	2973bd04 	addi	r5,r5,-12556
 80081e8:	8008e281 	jmpi	8008e28 <_fwalk>

080081ec <__sinit.part.1>:
 80081ec:	defff604 	addi	sp,sp,-40
 80081f0:	00c20074 	movhi	r3,2049
 80081f4:	dfc00915 	stw	ra,36(sp)
 80081f8:	df000815 	stw	fp,32(sp)
 80081fc:	ddc00715 	stw	r23,28(sp)
 8008200:	dd800615 	stw	r22,24(sp)
 8008204:	dd400515 	stw	r21,20(sp)
 8008208:	dd000415 	stw	r20,16(sp)
 800820c:	dcc00315 	stw	r19,12(sp)
 8008210:	dc800215 	stw	r18,8(sp)
 8008214:	dc400115 	stw	r17,4(sp)
 8008218:	dc000015 	stw	r16,0(sp)
 800821c:	18e07804 	addi	r3,r3,-32288
 8008220:	24000117 	ldw	r16,4(r4)
 8008224:	20c00f15 	stw	r3,60(r4)
 8008228:	07000044 	movi	fp,1
 800822c:	00c000c4 	movi	r3,3
 8008230:	2080bb04 	addi	r2,r4,748
 8008234:	20c0b915 	stw	r3,740(r4)
 8008238:	27000e15 	stw	fp,56(r4)
 800823c:	2080ba15 	stw	r2,744(r4)
 8008240:	2000b815 	stw	zero,736(r4)
 8008244:	05c00204 	movi	r23,8
 8008248:	00800104 	movi	r2,4
 800824c:	2025883a 	mov	r18,r4
 8008250:	b80d883a 	mov	r6,r23
 8008254:	81001704 	addi	r4,r16,92
 8008258:	000b883a 	mov	r5,zero
 800825c:	80000015 	stw	zero,0(r16)
 8008260:	80000115 	stw	zero,4(r16)
 8008264:	80000215 	stw	zero,8(r16)
 8008268:	8080030d 	sth	r2,12(r16)
 800826c:	80001915 	stw	zero,100(r16)
 8008270:	8000038d 	sth	zero,14(r16)
 8008274:	80000415 	stw	zero,16(r16)
 8008278:	80000515 	stw	zero,20(r16)
 800827c:	80000615 	stw	zero,24(r16)
 8008280:	8009c1c0 	call	8009c1c <memset>
 8008284:	05820074 	movhi	r22,2049
 8008288:	94400217 	ldw	r17,8(r18)
 800828c:	05420074 	movhi	r21,2049
 8008290:	05020074 	movhi	r20,2049
 8008294:	04c20074 	movhi	r19,2049
 8008298:	b5ad2704 	addi	r22,r22,-19300
 800829c:	ad6d3e04 	addi	r21,r21,-19208
 80082a0:	a52d5d04 	addi	r20,r20,-19084
 80082a4:	9ced7404 	addi	r19,r19,-18992
 80082a8:	85800815 	stw	r22,32(r16)
 80082ac:	85400915 	stw	r21,36(r16)
 80082b0:	85000a15 	stw	r20,40(r16)
 80082b4:	84c00b15 	stw	r19,44(r16)
 80082b8:	84000715 	stw	r16,28(r16)
 80082bc:	00800284 	movi	r2,10
 80082c0:	89001704 	addi	r4,r17,92
 80082c4:	b80d883a 	mov	r6,r23
 80082c8:	000b883a 	mov	r5,zero
 80082cc:	88000015 	stw	zero,0(r17)
 80082d0:	88000115 	stw	zero,4(r17)
 80082d4:	88000215 	stw	zero,8(r17)
 80082d8:	8880030d 	sth	r2,12(r17)
 80082dc:	88001915 	stw	zero,100(r17)
 80082e0:	8f00038d 	sth	fp,14(r17)
 80082e4:	88000415 	stw	zero,16(r17)
 80082e8:	88000515 	stw	zero,20(r17)
 80082ec:	88000615 	stw	zero,24(r17)
 80082f0:	8009c1c0 	call	8009c1c <memset>
 80082f4:	94000317 	ldw	r16,12(r18)
 80082f8:	00800484 	movi	r2,18
 80082fc:	8c400715 	stw	r17,28(r17)
 8008300:	8d800815 	stw	r22,32(r17)
 8008304:	8d400915 	stw	r21,36(r17)
 8008308:	8d000a15 	stw	r20,40(r17)
 800830c:	8cc00b15 	stw	r19,44(r17)
 8008310:	8080030d 	sth	r2,12(r16)
 8008314:	00800084 	movi	r2,2
 8008318:	80000015 	stw	zero,0(r16)
 800831c:	80000115 	stw	zero,4(r16)
 8008320:	80000215 	stw	zero,8(r16)
 8008324:	80001915 	stw	zero,100(r16)
 8008328:	8080038d 	sth	r2,14(r16)
 800832c:	80000415 	stw	zero,16(r16)
 8008330:	80000515 	stw	zero,20(r16)
 8008334:	80000615 	stw	zero,24(r16)
 8008338:	81001704 	addi	r4,r16,92
 800833c:	000b883a 	mov	r5,zero
 8008340:	b80d883a 	mov	r6,r23
 8008344:	8009c1c0 	call	8009c1c <memset>
 8008348:	84000715 	stw	r16,28(r16)
 800834c:	85800815 	stw	r22,32(r16)
 8008350:	85400915 	stw	r21,36(r16)
 8008354:	85000a15 	stw	r20,40(r16)
 8008358:	84c00b15 	stw	r19,44(r16)
 800835c:	dfc00917 	ldw	ra,36(sp)
 8008360:	df000817 	ldw	fp,32(sp)
 8008364:	ddc00717 	ldw	r23,28(sp)
 8008368:	dd800617 	ldw	r22,24(sp)
 800836c:	dd400517 	ldw	r21,20(sp)
 8008370:	dd000417 	ldw	r20,16(sp)
 8008374:	dcc00317 	ldw	r19,12(sp)
 8008378:	dc800217 	ldw	r18,8(sp)
 800837c:	dc400117 	ldw	r17,4(sp)
 8008380:	dc000017 	ldw	r16,0(sp)
 8008384:	dec00a04 	addi	sp,sp,40
 8008388:	f800283a 	ret

0800838c <__sfmoreglue>:
 800838c:	defffc04 	addi	sp,sp,-16
 8008390:	dc400115 	stw	r17,4(sp)
 8008394:	2c401a24 	muli	r17,r5,104
 8008398:	dc800215 	stw	r18,8(sp)
 800839c:	2825883a 	mov	r18,r5
 80083a0:	89400304 	addi	r5,r17,12
 80083a4:	dc000015 	stw	r16,0(sp)
 80083a8:	dfc00315 	stw	ra,12(sp)
 80083ac:	80092300 	call	8009230 <_malloc_r>
 80083b0:	1021883a 	mov	r16,r2
 80083b4:	10000726 	beq	r2,zero,80083d4 <__sfmoreglue+0x48>
 80083b8:	11000304 	addi	r4,r2,12
 80083bc:	10000015 	stw	zero,0(r2)
 80083c0:	14800115 	stw	r18,4(r2)
 80083c4:	11000215 	stw	r4,8(r2)
 80083c8:	000b883a 	mov	r5,zero
 80083cc:	880d883a 	mov	r6,r17
 80083d0:	8009c1c0 	call	8009c1c <memset>
 80083d4:	8005883a 	mov	r2,r16
 80083d8:	dfc00317 	ldw	ra,12(sp)
 80083dc:	dc800217 	ldw	r18,8(sp)
 80083e0:	dc400117 	ldw	r17,4(sp)
 80083e4:	dc000017 	ldw	r16,0(sp)
 80083e8:	dec00404 	addi	sp,sp,16
 80083ec:	f800283a 	ret

080083f0 <__sfp>:
 80083f0:	008200b4 	movhi	r2,2050
 80083f4:	defffb04 	addi	sp,sp,-20
 80083f8:	10be0a04 	addi	r2,r2,-2008
 80083fc:	dc800215 	stw	r18,8(sp)
 8008400:	14800017 	ldw	r18,0(r2)
 8008404:	dcc00315 	stw	r19,12(sp)
 8008408:	dfc00415 	stw	ra,16(sp)
 800840c:	90800e17 	ldw	r2,56(r18)
 8008410:	dc400115 	stw	r17,4(sp)
 8008414:	dc000015 	stw	r16,0(sp)
 8008418:	2027883a 	mov	r19,r4
 800841c:	1000021e 	bne	r2,zero,8008428 <__sfp+0x38>
 8008420:	9009883a 	mov	r4,r18
 8008424:	80081ec0 	call	80081ec <__sinit.part.1>
 8008428:	9480b804 	addi	r18,r18,736
 800842c:	047fffc4 	movi	r17,-1
 8008430:	91400117 	ldw	r5,4(r18)
 8008434:	94000217 	ldw	r16,8(r18)
 8008438:	297fffc4 	addi	r5,r5,-1
 800843c:	28000a16 	blt	r5,zero,8008468 <__sfp+0x78>
 8008440:	8080030f 	ldh	r2,12(r16)
 8008444:	10000c26 	beq	r2,zero,8008478 <__sfp+0x88>
 8008448:	80c01d04 	addi	r3,r16,116
 800844c:	00000206 	br	8008458 <__sfp+0x68>
 8008450:	18bfe60f 	ldh	r2,-104(r3)
 8008454:	10000826 	beq	r2,zero,8008478 <__sfp+0x88>
 8008458:	297fffc4 	addi	r5,r5,-1
 800845c:	1c3ffd04 	addi	r16,r3,-12
 8008460:	18c01a04 	addi	r3,r3,104
 8008464:	2c7ffa1e 	bne	r5,r17,8008450 <__alt_data_end+0xfc008450>
 8008468:	90800017 	ldw	r2,0(r18)
 800846c:	10001d26 	beq	r2,zero,80084e4 <__sfp+0xf4>
 8008470:	1025883a 	mov	r18,r2
 8008474:	003fee06 	br	8008430 <__alt_data_end+0xfc008430>
 8008478:	00bfffc4 	movi	r2,-1
 800847c:	8080038d 	sth	r2,14(r16)
 8008480:	00800044 	movi	r2,1
 8008484:	8080030d 	sth	r2,12(r16)
 8008488:	80001915 	stw	zero,100(r16)
 800848c:	80000015 	stw	zero,0(r16)
 8008490:	80000215 	stw	zero,8(r16)
 8008494:	80000115 	stw	zero,4(r16)
 8008498:	80000415 	stw	zero,16(r16)
 800849c:	80000515 	stw	zero,20(r16)
 80084a0:	80000615 	stw	zero,24(r16)
 80084a4:	81001704 	addi	r4,r16,92
 80084a8:	000b883a 	mov	r5,zero
 80084ac:	01800204 	movi	r6,8
 80084b0:	8009c1c0 	call	8009c1c <memset>
 80084b4:	8005883a 	mov	r2,r16
 80084b8:	80000c15 	stw	zero,48(r16)
 80084bc:	80000d15 	stw	zero,52(r16)
 80084c0:	80001115 	stw	zero,68(r16)
 80084c4:	80001215 	stw	zero,72(r16)
 80084c8:	dfc00417 	ldw	ra,16(sp)
 80084cc:	dcc00317 	ldw	r19,12(sp)
 80084d0:	dc800217 	ldw	r18,8(sp)
 80084d4:	dc400117 	ldw	r17,4(sp)
 80084d8:	dc000017 	ldw	r16,0(sp)
 80084dc:	dec00504 	addi	sp,sp,20
 80084e0:	f800283a 	ret
 80084e4:	9809883a 	mov	r4,r19
 80084e8:	01400104 	movi	r5,4
 80084ec:	800838c0 	call	800838c <__sfmoreglue>
 80084f0:	90800015 	stw	r2,0(r18)
 80084f4:	103fde1e 	bne	r2,zero,8008470 <__alt_data_end+0xfc008470>
 80084f8:	00800304 	movi	r2,12
 80084fc:	98800015 	stw	r2,0(r19)
 8008500:	0005883a 	mov	r2,zero
 8008504:	003ff006 	br	80084c8 <__alt_data_end+0xfc0084c8>

08008508 <_cleanup>:
 8008508:	008200b4 	movhi	r2,2050
 800850c:	10be0a04 	addi	r2,r2,-2008
 8008510:	11000017 	ldw	r4,0(r2)
 8008514:	01420074 	movhi	r5,2049
 8008518:	2973bd04 	addi	r5,r5,-12556
 800851c:	8008e281 	jmpi	8008e28 <_fwalk>

08008520 <__sinit>:
 8008520:	20800e17 	ldw	r2,56(r4)
 8008524:	10000126 	beq	r2,zero,800852c <__sinit+0xc>
 8008528:	f800283a 	ret
 800852c:	80081ec1 	jmpi	80081ec <__sinit.part.1>

08008530 <__sfp_lock_acquire>:
 8008530:	f800283a 	ret

08008534 <__sfp_lock_release>:
 8008534:	f800283a 	ret

08008538 <__sinit_lock_acquire>:
 8008538:	f800283a 	ret

0800853c <__sinit_lock_release>:
 800853c:	f800283a 	ret

08008540 <__fp_lock_all>:
 8008540:	008200b4 	movhi	r2,2050
 8008544:	10be0b04 	addi	r2,r2,-2004
 8008548:	11000017 	ldw	r4,0(r2)
 800854c:	01420074 	movhi	r5,2049
 8008550:	29607404 	addi	r5,r5,-32304
 8008554:	8008e281 	jmpi	8008e28 <_fwalk>

08008558 <__fp_unlock_all>:
 8008558:	008200b4 	movhi	r2,2050
 800855c:	10be0b04 	addi	r2,r2,-2004
 8008560:	11000017 	ldw	r4,0(r2)
 8008564:	01420074 	movhi	r5,2049
 8008568:	29607604 	addi	r5,r5,-32296
 800856c:	8008e281 	jmpi	8008e28 <_fwalk>

08008570 <_malloc_trim_r>:
 8008570:	defffb04 	addi	sp,sp,-20
 8008574:	dcc00315 	stw	r19,12(sp)
 8008578:	04c200b4 	movhi	r19,2050
 800857c:	dc800215 	stw	r18,8(sp)
 8008580:	dc400115 	stw	r17,4(sp)
 8008584:	dc000015 	stw	r16,0(sp)
 8008588:	dfc00415 	stw	ra,16(sp)
 800858c:	2821883a 	mov	r16,r5
 8008590:	9cf86f04 	addi	r19,r19,-7748
 8008594:	2025883a 	mov	r18,r4
 8008598:	8010c840 	call	8010c84 <__malloc_lock>
 800859c:	98800217 	ldw	r2,8(r19)
 80085a0:	14400117 	ldw	r17,4(r2)
 80085a4:	00bfff04 	movi	r2,-4
 80085a8:	88a2703a 	and	r17,r17,r2
 80085ac:	8c21c83a 	sub	r16,r17,r16
 80085b0:	8403fbc4 	addi	r16,r16,4079
 80085b4:	8020d33a 	srli	r16,r16,12
 80085b8:	0083ffc4 	movi	r2,4095
 80085bc:	843fffc4 	addi	r16,r16,-1
 80085c0:	8020933a 	slli	r16,r16,12
 80085c4:	1400060e 	bge	r2,r16,80085e0 <_malloc_trim_r+0x70>
 80085c8:	9009883a 	mov	r4,r18
 80085cc:	000b883a 	mov	r5,zero
 80085d0:	800b4480 	call	800b448 <_sbrk_r>
 80085d4:	98c00217 	ldw	r3,8(r19)
 80085d8:	1c47883a 	add	r3,r3,r17
 80085dc:	10c00a26 	beq	r2,r3,8008608 <_malloc_trim_r+0x98>
 80085e0:	9009883a 	mov	r4,r18
 80085e4:	8010ca40 	call	8010ca4 <__malloc_unlock>
 80085e8:	0005883a 	mov	r2,zero
 80085ec:	dfc00417 	ldw	ra,16(sp)
 80085f0:	dcc00317 	ldw	r19,12(sp)
 80085f4:	dc800217 	ldw	r18,8(sp)
 80085f8:	dc400117 	ldw	r17,4(sp)
 80085fc:	dc000017 	ldw	r16,0(sp)
 8008600:	dec00504 	addi	sp,sp,20
 8008604:	f800283a 	ret
 8008608:	9009883a 	mov	r4,r18
 800860c:	040bc83a 	sub	r5,zero,r16
 8008610:	800b4480 	call	800b448 <_sbrk_r>
 8008614:	00ffffc4 	movi	r3,-1
 8008618:	10c00d26 	beq	r2,r3,8008650 <_malloc_trim_r+0xe0>
 800861c:	00c200b4 	movhi	r3,2050
 8008620:	18c51004 	addi	r3,r3,5184
 8008624:	18800017 	ldw	r2,0(r3)
 8008628:	99000217 	ldw	r4,8(r19)
 800862c:	8c23c83a 	sub	r17,r17,r16
 8008630:	8c400054 	ori	r17,r17,1
 8008634:	1421c83a 	sub	r16,r2,r16
 8008638:	24400115 	stw	r17,4(r4)
 800863c:	9009883a 	mov	r4,r18
 8008640:	1c000015 	stw	r16,0(r3)
 8008644:	8010ca40 	call	8010ca4 <__malloc_unlock>
 8008648:	00800044 	movi	r2,1
 800864c:	003fe706 	br	80085ec <__alt_data_end+0xfc0085ec>
 8008650:	9009883a 	mov	r4,r18
 8008654:	000b883a 	mov	r5,zero
 8008658:	800b4480 	call	800b448 <_sbrk_r>
 800865c:	99000217 	ldw	r4,8(r19)
 8008660:	014003c4 	movi	r5,15
 8008664:	1107c83a 	sub	r3,r2,r4
 8008668:	28ffdd0e 	bge	r5,r3,80085e0 <__alt_data_end+0xfc0085e0>
 800866c:	014200b4 	movhi	r5,2050
 8008670:	297e0d04 	addi	r5,r5,-1996
 8008674:	29400017 	ldw	r5,0(r5)
 8008678:	18c00054 	ori	r3,r3,1
 800867c:	20c00115 	stw	r3,4(r4)
 8008680:	00c200b4 	movhi	r3,2050
 8008684:	1145c83a 	sub	r2,r2,r5
 8008688:	18c51004 	addi	r3,r3,5184
 800868c:	18800015 	stw	r2,0(r3)
 8008690:	003fd306 	br	80085e0 <__alt_data_end+0xfc0085e0>

08008694 <_free_r>:
 8008694:	28004c26 	beq	r5,zero,80087c8 <_free_r+0x134>
 8008698:	defffd04 	addi	sp,sp,-12
 800869c:	dc400115 	stw	r17,4(sp)
 80086a0:	dc000015 	stw	r16,0(sp)
 80086a4:	2023883a 	mov	r17,r4
 80086a8:	2821883a 	mov	r16,r5
 80086ac:	dfc00215 	stw	ra,8(sp)
 80086b0:	8010c840 	call	8010c84 <__malloc_lock>
 80086b4:	813fff17 	ldw	r4,-4(r16)
 80086b8:	00bfff84 	movi	r2,-2
 80086bc:	024200b4 	movhi	r9,2050
 80086c0:	81bffe04 	addi	r6,r16,-8
 80086c4:	2084703a 	and	r2,r4,r2
 80086c8:	4a786f04 	addi	r9,r9,-7748
 80086cc:	308b883a 	add	r5,r6,r2
 80086d0:	2a000117 	ldw	r8,4(r5)
 80086d4:	49c00217 	ldw	r7,8(r9)
 80086d8:	00ffff04 	movi	r3,-4
 80086dc:	40c6703a 	and	r3,r8,r3
 80086e0:	39405326 	beq	r7,r5,8008830 <_free_r+0x19c>
 80086e4:	28c00115 	stw	r3,4(r5)
 80086e8:	2100004c 	andi	r4,r4,1
 80086ec:	2000091e 	bne	r4,zero,8008714 <_free_r+0x80>
 80086f0:	81fffe17 	ldw	r7,-8(r16)
 80086f4:	4a000204 	addi	r8,r9,8
 80086f8:	31cdc83a 	sub	r6,r6,r7
 80086fc:	31000217 	ldw	r4,8(r6)
 8008700:	11c5883a 	add	r2,r2,r7
 8008704:	22006126 	beq	r4,r8,800888c <_free_r+0x1f8>
 8008708:	31c00317 	ldw	r7,12(r6)
 800870c:	21c00315 	stw	r7,12(r4)
 8008710:	39000215 	stw	r4,8(r7)
 8008714:	28c9883a 	add	r4,r5,r3
 8008718:	21c00117 	ldw	r7,4(r4)
 800871c:	39c0004c 	andi	r7,r7,1
 8008720:	38000d1e 	bne	r7,zero,8008758 <_free_r+0xc4>
 8008724:	29000217 	ldw	r4,8(r5)
 8008728:	10c5883a 	add	r2,r2,r3
 800872c:	00c200b4 	movhi	r3,2050
 8008730:	18f87104 	addi	r3,r3,-7740
 8008734:	20c07526 	beq	r4,r3,800890c <_free_r+0x278>
 8008738:	29c00317 	ldw	r7,12(r5)
 800873c:	11400054 	ori	r5,r2,1
 8008740:	3087883a 	add	r3,r6,r2
 8008744:	21c00315 	stw	r7,12(r4)
 8008748:	39000215 	stw	r4,8(r7)
 800874c:	31400115 	stw	r5,4(r6)
 8008750:	18800015 	stw	r2,0(r3)
 8008754:	00000406 	br	8008768 <_free_r+0xd4>
 8008758:	10c00054 	ori	r3,r2,1
 800875c:	30c00115 	stw	r3,4(r6)
 8008760:	3087883a 	add	r3,r6,r2
 8008764:	18800015 	stw	r2,0(r3)
 8008768:	00c07fc4 	movi	r3,511
 800876c:	18801736 	bltu	r3,r2,80087cc <_free_r+0x138>
 8008770:	1004d0fa 	srli	r2,r2,3
 8008774:	01400044 	movi	r5,1
 8008778:	49000117 	ldw	r4,4(r9)
 800877c:	1087883a 	add	r3,r2,r2
 8008780:	18c7883a 	add	r3,r3,r3
 8008784:	1005d0ba 	srai	r2,r2,2
 8008788:	18c7883a 	add	r3,r3,r3
 800878c:	1a47883a 	add	r3,r3,r9
 8008790:	19c00217 	ldw	r7,8(r3)
 8008794:	2884983a 	sll	r2,r5,r2
 8008798:	30c00315 	stw	r3,12(r6)
 800879c:	31c00215 	stw	r7,8(r6)
 80087a0:	1104b03a 	or	r2,r2,r4
 80087a4:	19800215 	stw	r6,8(r3)
 80087a8:	48800115 	stw	r2,4(r9)
 80087ac:	39800315 	stw	r6,12(r7)
 80087b0:	8809883a 	mov	r4,r17
 80087b4:	dfc00217 	ldw	ra,8(sp)
 80087b8:	dc400117 	ldw	r17,4(sp)
 80087bc:	dc000017 	ldw	r16,0(sp)
 80087c0:	dec00304 	addi	sp,sp,12
 80087c4:	8010ca41 	jmpi	8010ca4 <__malloc_unlock>
 80087c8:	f800283a 	ret
 80087cc:	1006d27a 	srli	r3,r2,9
 80087d0:	01000104 	movi	r4,4
 80087d4:	20c04036 	bltu	r4,r3,80088d8 <_free_r+0x244>
 80087d8:	1006d1ba 	srli	r3,r2,6
 80087dc:	19400e04 	addi	r5,r3,56
 80087e0:	2947883a 	add	r3,r5,r5
 80087e4:	18c7883a 	add	r3,r3,r3
 80087e8:	18c7883a 	add	r3,r3,r3
 80087ec:	1a49883a 	add	r4,r3,r9
 80087f0:	20c00217 	ldw	r3,8(r4)
 80087f4:	01c200b4 	movhi	r7,2050
 80087f8:	39f86f04 	addi	r7,r7,-7748
 80087fc:	19003b26 	beq	r3,r4,80088ec <_free_r+0x258>
 8008800:	01ffff04 	movi	r7,-4
 8008804:	19400117 	ldw	r5,4(r3)
 8008808:	29ca703a 	and	r5,r5,r7
 800880c:	1140022e 	bgeu	r2,r5,8008818 <_free_r+0x184>
 8008810:	18c00217 	ldw	r3,8(r3)
 8008814:	20fffb1e 	bne	r4,r3,8008804 <__alt_data_end+0xfc008804>
 8008818:	18800317 	ldw	r2,12(r3)
 800881c:	30800315 	stw	r2,12(r6)
 8008820:	30c00215 	stw	r3,8(r6)
 8008824:	11800215 	stw	r6,8(r2)
 8008828:	19800315 	stw	r6,12(r3)
 800882c:	003fe006 	br	80087b0 <__alt_data_end+0xfc0087b0>
 8008830:	2100004c 	andi	r4,r4,1
 8008834:	1885883a 	add	r2,r3,r2
 8008838:	2000071e 	bne	r4,zero,8008858 <_free_r+0x1c4>
 800883c:	817ffe17 	ldw	r5,-8(r16)
 8008840:	314dc83a 	sub	r6,r6,r5
 8008844:	30c00317 	ldw	r3,12(r6)
 8008848:	31000217 	ldw	r4,8(r6)
 800884c:	1145883a 	add	r2,r2,r5
 8008850:	20c00315 	stw	r3,12(r4)
 8008854:	19000215 	stw	r4,8(r3)
 8008858:	10c00054 	ori	r3,r2,1
 800885c:	30c00115 	stw	r3,4(r6)
 8008860:	00c200b4 	movhi	r3,2050
 8008864:	18fe0e04 	addi	r3,r3,-1992
 8008868:	18c00017 	ldw	r3,0(r3)
 800886c:	49800215 	stw	r6,8(r9)
 8008870:	10ffcf36 	bltu	r2,r3,80087b0 <__alt_data_end+0xfc0087b0>
 8008874:	008200b4 	movhi	r2,2050
 8008878:	10850804 	addi	r2,r2,5152
 800887c:	11400017 	ldw	r5,0(r2)
 8008880:	8809883a 	mov	r4,r17
 8008884:	80085700 	call	8008570 <_malloc_trim_r>
 8008888:	003fc906 	br	80087b0 <__alt_data_end+0xfc0087b0>
 800888c:	28c9883a 	add	r4,r5,r3
 8008890:	21000117 	ldw	r4,4(r4)
 8008894:	2100004c 	andi	r4,r4,1
 8008898:	20000a1e 	bne	r4,zero,80088c4 <_free_r+0x230>
 800889c:	29000317 	ldw	r4,12(r5)
 80088a0:	29400217 	ldw	r5,8(r5)
 80088a4:	10c5883a 	add	r2,r2,r3
 80088a8:	10c00054 	ori	r3,r2,1
 80088ac:	29000315 	stw	r4,12(r5)
 80088b0:	21400215 	stw	r5,8(r4)
 80088b4:	30c00115 	stw	r3,4(r6)
 80088b8:	308d883a 	add	r6,r6,r2
 80088bc:	30800015 	stw	r2,0(r6)
 80088c0:	003fbb06 	br	80087b0 <__alt_data_end+0xfc0087b0>
 80088c4:	10c00054 	ori	r3,r2,1
 80088c8:	30c00115 	stw	r3,4(r6)
 80088cc:	308d883a 	add	r6,r6,r2
 80088d0:	30800015 	stw	r2,0(r6)
 80088d4:	003fb606 	br	80087b0 <__alt_data_end+0xfc0087b0>
 80088d8:	01000504 	movi	r4,20
 80088dc:	20c01436 	bltu	r4,r3,8008930 <_free_r+0x29c>
 80088e0:	194016c4 	addi	r5,r3,91
 80088e4:	2947883a 	add	r3,r5,r5
 80088e8:	003fbe06 	br	80087e4 <__alt_data_end+0xfc0087e4>
 80088ec:	280bd0ba 	srai	r5,r5,2
 80088f0:	00800044 	movi	r2,1
 80088f4:	39000117 	ldw	r4,4(r7)
 80088f8:	114a983a 	sll	r5,r2,r5
 80088fc:	1805883a 	mov	r2,r3
 8008900:	2908b03a 	or	r4,r5,r4
 8008904:	39000115 	stw	r4,4(r7)
 8008908:	003fc406 	br	800881c <__alt_data_end+0xfc00881c>
 800890c:	49800515 	stw	r6,20(r9)
 8008910:	49800415 	stw	r6,16(r9)
 8008914:	10c00054 	ori	r3,r2,1
 8008918:	31000315 	stw	r4,12(r6)
 800891c:	31000215 	stw	r4,8(r6)
 8008920:	30c00115 	stw	r3,4(r6)
 8008924:	308d883a 	add	r6,r6,r2
 8008928:	30800015 	stw	r2,0(r6)
 800892c:	003fa006 	br	80087b0 <__alt_data_end+0xfc0087b0>
 8008930:	01001504 	movi	r4,84
 8008934:	20c00436 	bltu	r4,r3,8008948 <_free_r+0x2b4>
 8008938:	1006d33a 	srli	r3,r2,12
 800893c:	19401b84 	addi	r5,r3,110
 8008940:	2947883a 	add	r3,r5,r5
 8008944:	003fa706 	br	80087e4 <__alt_data_end+0xfc0087e4>
 8008948:	01005504 	movi	r4,340
 800894c:	20c00436 	bltu	r4,r3,8008960 <_free_r+0x2cc>
 8008950:	1006d3fa 	srli	r3,r2,15
 8008954:	19401dc4 	addi	r5,r3,119
 8008958:	2947883a 	add	r3,r5,r5
 800895c:	003fa106 	br	80087e4 <__alt_data_end+0xfc0087e4>
 8008960:	01015504 	movi	r4,1364
 8008964:	20c00436 	bltu	r4,r3,8008978 <_free_r+0x2e4>
 8008968:	1006d4ba 	srli	r3,r2,18
 800896c:	19401f04 	addi	r5,r3,124
 8008970:	2947883a 	add	r3,r5,r5
 8008974:	003f9b06 	br	80087e4 <__alt_data_end+0xfc0087e4>
 8008978:	00c03f04 	movi	r3,252
 800897c:	01401f84 	movi	r5,126
 8008980:	003f9806 	br	80087e4 <__alt_data_end+0xfc0087e4>

08008984 <__sfvwrite_r>:
 8008984:	30800217 	ldw	r2,8(r6)
 8008988:	10004526 	beq	r2,zero,8008aa0 <__sfvwrite_r+0x11c>
 800898c:	28c0030b 	ldhu	r3,12(r5)
 8008990:	defff404 	addi	sp,sp,-48
 8008994:	dd400715 	stw	r21,28(sp)
 8008998:	dcc00515 	stw	r19,20(sp)
 800899c:	dc000215 	stw	r16,8(sp)
 80089a0:	dfc00b15 	stw	ra,44(sp)
 80089a4:	df000a15 	stw	fp,40(sp)
 80089a8:	ddc00915 	stw	r23,36(sp)
 80089ac:	dd800815 	stw	r22,32(sp)
 80089b0:	dd000615 	stw	r20,24(sp)
 80089b4:	dc800415 	stw	r18,16(sp)
 80089b8:	dc400315 	stw	r17,12(sp)
 80089bc:	1880020c 	andi	r2,r3,8
 80089c0:	2821883a 	mov	r16,r5
 80089c4:	202b883a 	mov	r21,r4
 80089c8:	3027883a 	mov	r19,r6
 80089cc:	10002526 	beq	r2,zero,8008a64 <__sfvwrite_r+0xe0>
 80089d0:	28800417 	ldw	r2,16(r5)
 80089d4:	10002326 	beq	r2,zero,8008a64 <__sfvwrite_r+0xe0>
 80089d8:	1880008c 	andi	r2,r3,2
 80089dc:	9c400017 	ldw	r17,0(r19)
 80089e0:	10003126 	beq	r2,zero,8008aa8 <__sfvwrite_r+0x124>
 80089e4:	0029883a 	mov	r20,zero
 80089e8:	0025883a 	mov	r18,zero
 80089ec:	05810004 	movi	r22,1024
 80089f0:	a00d883a 	mov	r6,r20
 80089f4:	a809883a 	mov	r4,r21
 80089f8:	90002526 	beq	r18,zero,8008a90 <__sfvwrite_r+0x10c>
 80089fc:	900f883a 	mov	r7,r18
 8008a00:	81400717 	ldw	r5,28(r16)
 8008a04:	b480012e 	bgeu	r22,r18,8008a0c <__sfvwrite_r+0x88>
 8008a08:	01c10004 	movi	r7,1024
 8008a0c:	80800917 	ldw	r2,36(r16)
 8008a10:	103ee83a 	callr	r2
 8008a14:	0080510e 	bge	zero,r2,8008b5c <__sfvwrite_r+0x1d8>
 8008a18:	98c00217 	ldw	r3,8(r19)
 8008a1c:	a0a9883a 	add	r20,r20,r2
 8008a20:	90a5c83a 	sub	r18,r18,r2
 8008a24:	1885c83a 	sub	r2,r3,r2
 8008a28:	98800215 	stw	r2,8(r19)
 8008a2c:	103ff01e 	bne	r2,zero,80089f0 <__alt_data_end+0xfc0089f0>
 8008a30:	0005883a 	mov	r2,zero
 8008a34:	dfc00b17 	ldw	ra,44(sp)
 8008a38:	df000a17 	ldw	fp,40(sp)
 8008a3c:	ddc00917 	ldw	r23,36(sp)
 8008a40:	dd800817 	ldw	r22,32(sp)
 8008a44:	dd400717 	ldw	r21,28(sp)
 8008a48:	dd000617 	ldw	r20,24(sp)
 8008a4c:	dcc00517 	ldw	r19,20(sp)
 8008a50:	dc800417 	ldw	r18,16(sp)
 8008a54:	dc400317 	ldw	r17,12(sp)
 8008a58:	dc000217 	ldw	r16,8(sp)
 8008a5c:	dec00c04 	addi	sp,sp,48
 8008a60:	f800283a 	ret
 8008a64:	a809883a 	mov	r4,r21
 8008a68:	800b883a 	mov	r5,r16
 8008a6c:	80065200 	call	8006520 <__swsetup_r>
 8008a70:	80c0030b 	ldhu	r3,12(r16)
 8008a74:	103fd826 	beq	r2,zero,80089d8 <__alt_data_end+0xfc0089d8>
 8008a78:	18c01014 	ori	r3,r3,64
 8008a7c:	80c0030d 	sth	r3,12(r16)
 8008a80:	00c00244 	movi	r3,9
 8008a84:	00bfffc4 	movi	r2,-1
 8008a88:	a8c00015 	stw	r3,0(r21)
 8008a8c:	003fe906 	br	8008a34 <__alt_data_end+0xfc008a34>
 8008a90:	8d000017 	ldw	r20,0(r17)
 8008a94:	8c800117 	ldw	r18,4(r17)
 8008a98:	8c400204 	addi	r17,r17,8
 8008a9c:	003fd406 	br	80089f0 <__alt_data_end+0xfc0089f0>
 8008aa0:	0005883a 	mov	r2,zero
 8008aa4:	f800283a 	ret
 8008aa8:	1880004c 	andi	r2,r3,1
 8008aac:	1000301e 	bne	r2,zero,8008b70 <__sfvwrite_r+0x1ec>
 8008ab0:	002f883a 	mov	r23,zero
 8008ab4:	0025883a 	mov	r18,zero
 8008ab8:	90001c26 	beq	r18,zero,8008b2c <__sfvwrite_r+0x1a8>
 8008abc:	1880800c 	andi	r2,r3,512
 8008ac0:	85000217 	ldw	r20,8(r16)
 8008ac4:	10006c26 	beq	r2,zero,8008c78 <__sfvwrite_r+0x2f4>
 8008ac8:	a02d883a 	mov	r22,r20
 8008acc:	95008536 	bltu	r18,r20,8008ce4 <__sfvwrite_r+0x360>
 8008ad0:	1881200c 	andi	r2,r3,1152
 8008ad4:	10009d1e 	bne	r2,zero,8008d4c <__sfvwrite_r+0x3c8>
 8008ad8:	81000017 	ldw	r4,0(r16)
 8008adc:	a039883a 	mov	fp,r20
 8008ae0:	9029883a 	mov	r20,r18
 8008ae4:	b80b883a 	mov	r5,r23
 8008ae8:	b00d883a 	mov	r6,r22
 8008aec:	8009ac00 	call	8009ac0 <memmove>
 8008af0:	80c00217 	ldw	r3,8(r16)
 8008af4:	81000017 	ldw	r4,0(r16)
 8008af8:	9005883a 	mov	r2,r18
 8008afc:	1f39c83a 	sub	fp,r3,fp
 8008b00:	258f883a 	add	r7,r4,r22
 8008b04:	87000215 	stw	fp,8(r16)
 8008b08:	81c00015 	stw	r7,0(r16)
 8008b0c:	98c00217 	ldw	r3,8(r19)
 8008b10:	b8af883a 	add	r23,r23,r2
 8008b14:	90a5c83a 	sub	r18,r18,r2
 8008b18:	1d05c83a 	sub	r2,r3,r20
 8008b1c:	98800215 	stw	r2,8(r19)
 8008b20:	103fc326 	beq	r2,zero,8008a30 <__alt_data_end+0xfc008a30>
 8008b24:	80c0030b 	ldhu	r3,12(r16)
 8008b28:	903fe41e 	bne	r18,zero,8008abc <__alt_data_end+0xfc008abc>
 8008b2c:	8dc00017 	ldw	r23,0(r17)
 8008b30:	8c800117 	ldw	r18,4(r17)
 8008b34:	8c400204 	addi	r17,r17,8
 8008b38:	003fdf06 	br	8008ab8 <__alt_data_end+0xfc008ab8>
 8008b3c:	800ae340 	call	800ae34 <_realloc_r>
 8008b40:	102d883a 	mov	r22,r2
 8008b44:	1000a01e 	bne	r2,zero,8008dc8 <__sfvwrite_r+0x444>
 8008b48:	81400417 	ldw	r5,16(r16)
 8008b4c:	a809883a 	mov	r4,r21
 8008b50:	80086940 	call	8008694 <_free_r>
 8008b54:	00800304 	movi	r2,12
 8008b58:	a8800015 	stw	r2,0(r21)
 8008b5c:	80c0030b 	ldhu	r3,12(r16)
 8008b60:	00bfffc4 	movi	r2,-1
 8008b64:	18c01014 	ori	r3,r3,64
 8008b68:	80c0030d 	sth	r3,12(r16)
 8008b6c:	003fb106 	br	8008a34 <__alt_data_end+0xfc008a34>
 8008b70:	0029883a 	mov	r20,zero
 8008b74:	0011883a 	mov	r8,zero
 8008b78:	0039883a 	mov	fp,zero
 8008b7c:	0025883a 	mov	r18,zero
 8008b80:	90001f26 	beq	r18,zero,8008c00 <__sfvwrite_r+0x27c>
 8008b84:	40006826 	beq	r8,zero,8008d28 <__sfvwrite_r+0x3a4>
 8008b88:	a02f883a 	mov	r23,r20
 8008b8c:	9500012e 	bgeu	r18,r20,8008b94 <__sfvwrite_r+0x210>
 8008b90:	902f883a 	mov	r23,r18
 8008b94:	81000017 	ldw	r4,0(r16)
 8008b98:	80800417 	ldw	r2,16(r16)
 8008b9c:	b82d883a 	mov	r22,r23
 8008ba0:	81800217 	ldw	r6,8(r16)
 8008ba4:	81c00517 	ldw	r7,20(r16)
 8008ba8:	1100022e 	bgeu	r2,r4,8008bb4 <__sfvwrite_r+0x230>
 8008bac:	31c7883a 	add	r3,r6,r7
 8008bb0:	1dc01816 	blt	r3,r23,8008c14 <__sfvwrite_r+0x290>
 8008bb4:	b9c03f16 	blt	r23,r7,8008cb4 <__sfvwrite_r+0x330>
 8008bb8:	80800917 	ldw	r2,36(r16)
 8008bbc:	81400717 	ldw	r5,28(r16)
 8008bc0:	a809883a 	mov	r4,r21
 8008bc4:	da000115 	stw	r8,4(sp)
 8008bc8:	e00d883a 	mov	r6,fp
 8008bcc:	103ee83a 	callr	r2
 8008bd0:	102d883a 	mov	r22,r2
 8008bd4:	da000117 	ldw	r8,4(sp)
 8008bd8:	00bfe00e 	bge	zero,r2,8008b5c <__alt_data_end+0xfc008b5c>
 8008bdc:	a5a9c83a 	sub	r20,r20,r22
 8008be0:	a0001f26 	beq	r20,zero,8008c60 <__sfvwrite_r+0x2dc>
 8008be4:	98800217 	ldw	r2,8(r19)
 8008be8:	e5b9883a 	add	fp,fp,r22
 8008bec:	95a5c83a 	sub	r18,r18,r22
 8008bf0:	15adc83a 	sub	r22,r2,r22
 8008bf4:	9d800215 	stw	r22,8(r19)
 8008bf8:	b03f8d26 	beq	r22,zero,8008a30 <__alt_data_end+0xfc008a30>
 8008bfc:	903fe11e 	bne	r18,zero,8008b84 <__alt_data_end+0xfc008b84>
 8008c00:	8f000017 	ldw	fp,0(r17)
 8008c04:	8c800117 	ldw	r18,4(r17)
 8008c08:	0011883a 	mov	r8,zero
 8008c0c:	8c400204 	addi	r17,r17,8
 8008c10:	003fdb06 	br	8008b80 <__alt_data_end+0xfc008b80>
 8008c14:	180d883a 	mov	r6,r3
 8008c18:	e00b883a 	mov	r5,fp
 8008c1c:	da000115 	stw	r8,4(sp)
 8008c20:	d8c00015 	stw	r3,0(sp)
 8008c24:	8009ac00 	call	8009ac0 <memmove>
 8008c28:	d8c00017 	ldw	r3,0(sp)
 8008c2c:	80800017 	ldw	r2,0(r16)
 8008c30:	a809883a 	mov	r4,r21
 8008c34:	800b883a 	mov	r5,r16
 8008c38:	10c5883a 	add	r2,r2,r3
 8008c3c:	80800015 	stw	r2,0(r16)
 8008c40:	d8c00015 	stw	r3,0(sp)
 8008c44:	8007f780 	call	8007f78 <_fflush_r>
 8008c48:	d8c00017 	ldw	r3,0(sp)
 8008c4c:	da000117 	ldw	r8,4(sp)
 8008c50:	103fc21e 	bne	r2,zero,8008b5c <__alt_data_end+0xfc008b5c>
 8008c54:	182d883a 	mov	r22,r3
 8008c58:	a5a9c83a 	sub	r20,r20,r22
 8008c5c:	a03fe11e 	bne	r20,zero,8008be4 <__alt_data_end+0xfc008be4>
 8008c60:	a809883a 	mov	r4,r21
 8008c64:	800b883a 	mov	r5,r16
 8008c68:	8007f780 	call	8007f78 <_fflush_r>
 8008c6c:	103fbb1e 	bne	r2,zero,8008b5c <__alt_data_end+0xfc008b5c>
 8008c70:	0011883a 	mov	r8,zero
 8008c74:	003fdb06 	br	8008be4 <__alt_data_end+0xfc008be4>
 8008c78:	81000017 	ldw	r4,0(r16)
 8008c7c:	80800417 	ldw	r2,16(r16)
 8008c80:	1100012e 	bgeu	r2,r4,8008c88 <__sfvwrite_r+0x304>
 8008c84:	a4805a36 	bltu	r20,r18,8008df0 <__sfvwrite_r+0x46c>
 8008c88:	81c00517 	ldw	r7,20(r16)
 8008c8c:	91c01a36 	bltu	r18,r7,8008cf8 <__sfvwrite_r+0x374>
 8008c90:	80800917 	ldw	r2,36(r16)
 8008c94:	81400717 	ldw	r5,28(r16)
 8008c98:	a809883a 	mov	r4,r21
 8008c9c:	b80d883a 	mov	r6,r23
 8008ca0:	103ee83a 	callr	r2
 8008ca4:	1029883a 	mov	r20,r2
 8008ca8:	00bfac0e 	bge	zero,r2,8008b5c <__alt_data_end+0xfc008b5c>
 8008cac:	a005883a 	mov	r2,r20
 8008cb0:	003f9606 	br	8008b0c <__alt_data_end+0xfc008b0c>
 8008cb4:	b80d883a 	mov	r6,r23
 8008cb8:	e00b883a 	mov	r5,fp
 8008cbc:	da000115 	stw	r8,4(sp)
 8008cc0:	8009ac00 	call	8009ac0 <memmove>
 8008cc4:	80800217 	ldw	r2,8(r16)
 8008cc8:	80c00017 	ldw	r3,0(r16)
 8008ccc:	da000117 	ldw	r8,4(sp)
 8008cd0:	15c5c83a 	sub	r2,r2,r23
 8008cd4:	1def883a 	add	r23,r3,r23
 8008cd8:	80800215 	stw	r2,8(r16)
 8008cdc:	85c00015 	stw	r23,0(r16)
 8008ce0:	003fbe06 	br	8008bdc <__alt_data_end+0xfc008bdc>
 8008ce4:	81000017 	ldw	r4,0(r16)
 8008ce8:	9039883a 	mov	fp,r18
 8008cec:	9029883a 	mov	r20,r18
 8008cf0:	902d883a 	mov	r22,r18
 8008cf4:	003f7b06 	br	8008ae4 <__alt_data_end+0xfc008ae4>
 8008cf8:	b80b883a 	mov	r5,r23
 8008cfc:	900d883a 	mov	r6,r18
 8008d00:	8009ac00 	call	8009ac0 <memmove>
 8008d04:	80c00217 	ldw	r3,8(r16)
 8008d08:	80800017 	ldw	r2,0(r16)
 8008d0c:	9029883a 	mov	r20,r18
 8008d10:	1c87c83a 	sub	r3,r3,r18
 8008d14:	1485883a 	add	r2,r2,r18
 8008d18:	80800015 	stw	r2,0(r16)
 8008d1c:	80c00215 	stw	r3,8(r16)
 8008d20:	9005883a 	mov	r2,r18
 8008d24:	003f7906 	br	8008b0c <__alt_data_end+0xfc008b0c>
 8008d28:	e009883a 	mov	r4,fp
 8008d2c:	01400284 	movi	r5,10
 8008d30:	900d883a 	mov	r6,r18
 8008d34:	80099d80 	call	80099d8 <memchr>
 8008d38:	10003826 	beq	r2,zero,8008e1c <__sfvwrite_r+0x498>
 8008d3c:	10800044 	addi	r2,r2,1
 8008d40:	1729c83a 	sub	r20,r2,fp
 8008d44:	02000044 	movi	r8,1
 8008d48:	003f8f06 	br	8008b88 <__alt_data_end+0xfc008b88>
 8008d4c:	80800517 	ldw	r2,20(r16)
 8008d50:	81400417 	ldw	r5,16(r16)
 8008d54:	87000017 	ldw	fp,0(r16)
 8008d58:	10a9883a 	add	r20,r2,r2
 8008d5c:	a085883a 	add	r2,r20,r2
 8008d60:	1028d7fa 	srli	r20,r2,31
 8008d64:	e179c83a 	sub	fp,fp,r5
 8008d68:	e1000044 	addi	r4,fp,1
 8008d6c:	a085883a 	add	r2,r20,r2
 8008d70:	1029d07a 	srai	r20,r2,1
 8008d74:	2485883a 	add	r2,r4,r18
 8008d78:	a00d883a 	mov	r6,r20
 8008d7c:	a080022e 	bgeu	r20,r2,8008d88 <__sfvwrite_r+0x404>
 8008d80:	1029883a 	mov	r20,r2
 8008d84:	100d883a 	mov	r6,r2
 8008d88:	18c1000c 	andi	r3,r3,1024
 8008d8c:	a809883a 	mov	r4,r21
 8008d90:	183f6a26 	beq	r3,zero,8008b3c <__alt_data_end+0xfc008b3c>
 8008d94:	300b883a 	mov	r5,r6
 8008d98:	80092300 	call	8009230 <_malloc_r>
 8008d9c:	102d883a 	mov	r22,r2
 8008da0:	103f6c26 	beq	r2,zero,8008b54 <__alt_data_end+0xfc008b54>
 8008da4:	81400417 	ldw	r5,16(r16)
 8008da8:	1009883a 	mov	r4,r2
 8008dac:	e00d883a 	mov	r6,fp
 8008db0:	8003f580 	call	8003f58 <memcpy>
 8008db4:	8080030b 	ldhu	r2,12(r16)
 8008db8:	00fedfc4 	movi	r3,-1153
 8008dbc:	10c4703a 	and	r2,r2,r3
 8008dc0:	10802014 	ori	r2,r2,128
 8008dc4:	8080030d 	sth	r2,12(r16)
 8008dc8:	b709883a 	add	r4,r22,fp
 8008dcc:	a707c83a 	sub	r3,r20,fp
 8008dd0:	85800415 	stw	r22,16(r16)
 8008dd4:	85000515 	stw	r20,20(r16)
 8008dd8:	81000015 	stw	r4,0(r16)
 8008ddc:	9039883a 	mov	fp,r18
 8008de0:	80c00215 	stw	r3,8(r16)
 8008de4:	9029883a 	mov	r20,r18
 8008de8:	902d883a 	mov	r22,r18
 8008dec:	003f3d06 	br	8008ae4 <__alt_data_end+0xfc008ae4>
 8008df0:	b80b883a 	mov	r5,r23
 8008df4:	a00d883a 	mov	r6,r20
 8008df8:	8009ac00 	call	8009ac0 <memmove>
 8008dfc:	80800017 	ldw	r2,0(r16)
 8008e00:	a809883a 	mov	r4,r21
 8008e04:	800b883a 	mov	r5,r16
 8008e08:	1505883a 	add	r2,r2,r20
 8008e0c:	80800015 	stw	r2,0(r16)
 8008e10:	8007f780 	call	8007f78 <_fflush_r>
 8008e14:	103fa526 	beq	r2,zero,8008cac <__alt_data_end+0xfc008cac>
 8008e18:	003f5006 	br	8008b5c <__alt_data_end+0xfc008b5c>
 8008e1c:	95000044 	addi	r20,r18,1
 8008e20:	02000044 	movi	r8,1
 8008e24:	003f5806 	br	8008b88 <__alt_data_end+0xfc008b88>

08008e28 <_fwalk>:
 8008e28:	defff804 	addi	sp,sp,-32
 8008e2c:	dd400515 	stw	r21,20(sp)
 8008e30:	2540b804 	addi	r21,r4,736
 8008e34:	dd800615 	stw	r22,24(sp)
 8008e38:	dd000415 	stw	r20,16(sp)
 8008e3c:	dfc00715 	stw	ra,28(sp)
 8008e40:	dcc00315 	stw	r19,12(sp)
 8008e44:	dc800215 	stw	r18,8(sp)
 8008e48:	dc400115 	stw	r17,4(sp)
 8008e4c:	dc000015 	stw	r16,0(sp)
 8008e50:	2829883a 	mov	r20,r5
 8008e54:	002d883a 	mov	r22,zero
 8008e58:	80085300 	call	8008530 <__sfp_lock_acquire>
 8008e5c:	a8001426 	beq	r21,zero,8008eb0 <_fwalk+0x88>
 8008e60:	04ffffc4 	movi	r19,-1
 8008e64:	ac400117 	ldw	r17,4(r21)
 8008e68:	ac800217 	ldw	r18,8(r21)
 8008e6c:	8c7fffc4 	addi	r17,r17,-1
 8008e70:	88000d16 	blt	r17,zero,8008ea8 <_fwalk+0x80>
 8008e74:	94000304 	addi	r16,r18,12
 8008e78:	94800384 	addi	r18,r18,14
 8008e7c:	80c0000f 	ldh	r3,0(r16)
 8008e80:	8c7fffc4 	addi	r17,r17,-1
 8008e84:	813ffd04 	addi	r4,r16,-12
 8008e88:	18000426 	beq	r3,zero,8008e9c <_fwalk+0x74>
 8008e8c:	90c0000f 	ldh	r3,0(r18)
 8008e90:	1cc00226 	beq	r3,r19,8008e9c <_fwalk+0x74>
 8008e94:	a03ee83a 	callr	r20
 8008e98:	b0acb03a 	or	r22,r22,r2
 8008e9c:	84001a04 	addi	r16,r16,104
 8008ea0:	94801a04 	addi	r18,r18,104
 8008ea4:	8cfff51e 	bne	r17,r19,8008e7c <__alt_data_end+0xfc008e7c>
 8008ea8:	ad400017 	ldw	r21,0(r21)
 8008eac:	a83fed1e 	bne	r21,zero,8008e64 <__alt_data_end+0xfc008e64>
 8008eb0:	80085340 	call	8008534 <__sfp_lock_release>
 8008eb4:	b005883a 	mov	r2,r22
 8008eb8:	dfc00717 	ldw	ra,28(sp)
 8008ebc:	dd800617 	ldw	r22,24(sp)
 8008ec0:	dd400517 	ldw	r21,20(sp)
 8008ec4:	dd000417 	ldw	r20,16(sp)
 8008ec8:	dcc00317 	ldw	r19,12(sp)
 8008ecc:	dc800217 	ldw	r18,8(sp)
 8008ed0:	dc400117 	ldw	r17,4(sp)
 8008ed4:	dc000017 	ldw	r16,0(sp)
 8008ed8:	dec00804 	addi	sp,sp,32
 8008edc:	f800283a 	ret

08008ee0 <_fwalk_reent>:
 8008ee0:	defff804 	addi	sp,sp,-32
 8008ee4:	dd400515 	stw	r21,20(sp)
 8008ee8:	2540b804 	addi	r21,r4,736
 8008eec:	dd800615 	stw	r22,24(sp)
 8008ef0:	dd000415 	stw	r20,16(sp)
 8008ef4:	dcc00315 	stw	r19,12(sp)
 8008ef8:	dfc00715 	stw	ra,28(sp)
 8008efc:	dc800215 	stw	r18,8(sp)
 8008f00:	dc400115 	stw	r17,4(sp)
 8008f04:	dc000015 	stw	r16,0(sp)
 8008f08:	2027883a 	mov	r19,r4
 8008f0c:	2829883a 	mov	r20,r5
 8008f10:	002d883a 	mov	r22,zero
 8008f14:	80085300 	call	8008530 <__sfp_lock_acquire>
 8008f18:	a8001326 	beq	r21,zero,8008f68 <_fwalk_reent+0x88>
 8008f1c:	04bfffc4 	movi	r18,-1
 8008f20:	ac400117 	ldw	r17,4(r21)
 8008f24:	ac000217 	ldw	r16,8(r21)
 8008f28:	8c7fffc4 	addi	r17,r17,-1
 8008f2c:	88000c16 	blt	r17,zero,8008f60 <_fwalk_reent+0x80>
 8008f30:	84000304 	addi	r16,r16,12
 8008f34:	80c0000f 	ldh	r3,0(r16)
 8008f38:	8c7fffc4 	addi	r17,r17,-1
 8008f3c:	817ffd04 	addi	r5,r16,-12
 8008f40:	18000526 	beq	r3,zero,8008f58 <_fwalk_reent+0x78>
 8008f44:	80c0008f 	ldh	r3,2(r16)
 8008f48:	9809883a 	mov	r4,r19
 8008f4c:	1c800226 	beq	r3,r18,8008f58 <_fwalk_reent+0x78>
 8008f50:	a03ee83a 	callr	r20
 8008f54:	b0acb03a 	or	r22,r22,r2
 8008f58:	84001a04 	addi	r16,r16,104
 8008f5c:	8cbff51e 	bne	r17,r18,8008f34 <__alt_data_end+0xfc008f34>
 8008f60:	ad400017 	ldw	r21,0(r21)
 8008f64:	a83fee1e 	bne	r21,zero,8008f20 <__alt_data_end+0xfc008f20>
 8008f68:	80085340 	call	8008534 <__sfp_lock_release>
 8008f6c:	b005883a 	mov	r2,r22
 8008f70:	dfc00717 	ldw	ra,28(sp)
 8008f74:	dd800617 	ldw	r22,24(sp)
 8008f78:	dd400517 	ldw	r21,20(sp)
 8008f7c:	dd000417 	ldw	r20,16(sp)
 8008f80:	dcc00317 	ldw	r19,12(sp)
 8008f84:	dc800217 	ldw	r18,8(sp)
 8008f88:	dc400117 	ldw	r17,4(sp)
 8008f8c:	dc000017 	ldw	r16,0(sp)
 8008f90:	dec00804 	addi	sp,sp,32
 8008f94:	f800283a 	ret

08008f98 <_setlocale_r>:
 8008f98:	30001b26 	beq	r6,zero,8009008 <_setlocale_r+0x70>
 8008f9c:	014200b4 	movhi	r5,2050
 8008fa0:	defffe04 	addi	sp,sp,-8
 8008fa4:	29769204 	addi	r5,r5,-9656
 8008fa8:	3009883a 	mov	r4,r6
 8008fac:	dc000015 	stw	r16,0(sp)
 8008fb0:	dfc00115 	stw	ra,4(sp)
 8008fb4:	3021883a 	mov	r16,r6
 8008fb8:	800b5d80 	call	800b5d8 <strcmp>
 8008fbc:	1000061e 	bne	r2,zero,8008fd8 <_setlocale_r+0x40>
 8008fc0:	008200b4 	movhi	r2,2050
 8008fc4:	10b69104 	addi	r2,r2,-9660
 8008fc8:	dfc00117 	ldw	ra,4(sp)
 8008fcc:	dc000017 	ldw	r16,0(sp)
 8008fd0:	dec00204 	addi	sp,sp,8
 8008fd4:	f800283a 	ret
 8008fd8:	014200b4 	movhi	r5,2050
 8008fdc:	29769104 	addi	r5,r5,-9660
 8008fe0:	8009883a 	mov	r4,r16
 8008fe4:	800b5d80 	call	800b5d8 <strcmp>
 8008fe8:	103ff526 	beq	r2,zero,8008fc0 <__alt_data_end+0xfc008fc0>
 8008fec:	014200b4 	movhi	r5,2050
 8008ff0:	2975dc04 	addi	r5,r5,-10384
 8008ff4:	8009883a 	mov	r4,r16
 8008ff8:	800b5d80 	call	800b5d8 <strcmp>
 8008ffc:	103ff026 	beq	r2,zero,8008fc0 <__alt_data_end+0xfc008fc0>
 8009000:	0005883a 	mov	r2,zero
 8009004:	003ff006 	br	8008fc8 <__alt_data_end+0xfc008fc8>
 8009008:	008200b4 	movhi	r2,2050
 800900c:	10b69104 	addi	r2,r2,-9660
 8009010:	f800283a 	ret

08009014 <__locale_charset>:
 8009014:	008200b4 	movhi	r2,2050
 8009018:	10b85904 	addi	r2,r2,-7836
 800901c:	f800283a 	ret

08009020 <__locale_mb_cur_max>:
 8009020:	008200b4 	movhi	r2,2050
 8009024:	10be0c04 	addi	r2,r2,-2000
 8009028:	10800017 	ldw	r2,0(r2)
 800902c:	f800283a 	ret

08009030 <__locale_msgcharset>:
 8009030:	008200b4 	movhi	r2,2050
 8009034:	10b85104 	addi	r2,r2,-7868
 8009038:	f800283a 	ret

0800903c <__locale_cjk_lang>:
 800903c:	0005883a 	mov	r2,zero
 8009040:	f800283a 	ret

08009044 <_localeconv_r>:
 8009044:	008200b4 	movhi	r2,2050
 8009048:	10b86104 	addi	r2,r2,-7804
 800904c:	f800283a 	ret

08009050 <setlocale>:
 8009050:	00c200b4 	movhi	r3,2050
 8009054:	18fe0b04 	addi	r3,r3,-2004
 8009058:	2005883a 	mov	r2,r4
 800905c:	19000017 	ldw	r4,0(r3)
 8009060:	280d883a 	mov	r6,r5
 8009064:	100b883a 	mov	r5,r2
 8009068:	8008f981 	jmpi	8008f98 <_setlocale_r>

0800906c <localeconv>:
 800906c:	008200b4 	movhi	r2,2050
 8009070:	10b86104 	addi	r2,r2,-7804
 8009074:	f800283a 	ret

08009078 <__smakebuf_r>:
 8009078:	2880030b 	ldhu	r2,12(r5)
 800907c:	10c0008c 	andi	r3,r2,2
 8009080:	1800401e 	bne	r3,zero,8009184 <__smakebuf_r+0x10c>
 8009084:	deffec04 	addi	sp,sp,-80
 8009088:	dc000f15 	stw	r16,60(sp)
 800908c:	2821883a 	mov	r16,r5
 8009090:	2940038f 	ldh	r5,14(r5)
 8009094:	dc401015 	stw	r17,64(sp)
 8009098:	dfc01315 	stw	ra,76(sp)
 800909c:	dcc01215 	stw	r19,72(sp)
 80090a0:	dc801115 	stw	r18,68(sp)
 80090a4:	2023883a 	mov	r17,r4
 80090a8:	28001b16 	blt	r5,zero,8009118 <__smakebuf_r+0xa0>
 80090ac:	d80d883a 	mov	r6,sp
 80090b0:	800d0e40 	call	800d0e4 <_fstat_r>
 80090b4:	10001716 	blt	r2,zero,8009114 <__smakebuf_r+0x9c>
 80090b8:	d8800117 	ldw	r2,4(sp)
 80090bc:	00e00014 	movui	r3,32768
 80090c0:	10bc000c 	andi	r2,r2,61440
 80090c4:	10c03726 	beq	r2,r3,80091a4 <__smakebuf_r+0x12c>
 80090c8:	80c0030b 	ldhu	r3,12(r16)
 80090cc:	18c20014 	ori	r3,r3,2048
 80090d0:	80c0030d 	sth	r3,12(r16)
 80090d4:	00c80004 	movi	r3,8192
 80090d8:	10c03c1e 	bne	r2,r3,80091cc <__smakebuf_r+0x154>
 80090dc:	8140038f 	ldh	r5,14(r16)
 80090e0:	8809883a 	mov	r4,r17
 80090e4:	800d13c0 	call	800d13c <_isatty_r>
 80090e8:	10004e26 	beq	r2,zero,8009224 <__smakebuf_r+0x1ac>
 80090ec:	8080030b 	ldhu	r2,12(r16)
 80090f0:	04c00044 	movi	r19,1
 80090f4:	80c010c4 	addi	r3,r16,67
 80090f8:	14c4b03a 	or	r2,r2,r19
 80090fc:	8080030d 	sth	r2,12(r16)
 8009100:	80c00015 	stw	r3,0(r16)
 8009104:	80c00415 	stw	r3,16(r16)
 8009108:	84c00515 	stw	r19,20(r16)
 800910c:	04810004 	movi	r18,1024
 8009110:	00000706 	br	8009130 <__smakebuf_r+0xb8>
 8009114:	8080030b 	ldhu	r2,12(r16)
 8009118:	10c0200c 	andi	r3,r2,128
 800911c:	18001f1e 	bne	r3,zero,800919c <__smakebuf_r+0x124>
 8009120:	04810004 	movi	r18,1024
 8009124:	10820014 	ori	r2,r2,2048
 8009128:	8080030d 	sth	r2,12(r16)
 800912c:	0027883a 	mov	r19,zero
 8009130:	8809883a 	mov	r4,r17
 8009134:	900b883a 	mov	r5,r18
 8009138:	80092300 	call	8009230 <_malloc_r>
 800913c:	10002e26 	beq	r2,zero,80091f8 <__smakebuf_r+0x180>
 8009140:	80c0030b 	ldhu	r3,12(r16)
 8009144:	01020074 	movhi	r4,2049
 8009148:	21207804 	addi	r4,r4,-32288
 800914c:	89000f15 	stw	r4,60(r17)
 8009150:	18c02014 	ori	r3,r3,128
 8009154:	80c0030d 	sth	r3,12(r16)
 8009158:	80800015 	stw	r2,0(r16)
 800915c:	80800415 	stw	r2,16(r16)
 8009160:	84800515 	stw	r18,20(r16)
 8009164:	98001c1e 	bne	r19,zero,80091d8 <__smakebuf_r+0x160>
 8009168:	dfc01317 	ldw	ra,76(sp)
 800916c:	dcc01217 	ldw	r19,72(sp)
 8009170:	dc801117 	ldw	r18,68(sp)
 8009174:	dc401017 	ldw	r17,64(sp)
 8009178:	dc000f17 	ldw	r16,60(sp)
 800917c:	dec01404 	addi	sp,sp,80
 8009180:	f800283a 	ret
 8009184:	288010c4 	addi	r2,r5,67
 8009188:	28800015 	stw	r2,0(r5)
 800918c:	28800415 	stw	r2,16(r5)
 8009190:	00800044 	movi	r2,1
 8009194:	28800515 	stw	r2,20(r5)
 8009198:	f800283a 	ret
 800919c:	04801004 	movi	r18,64
 80091a0:	003fe006 	br	8009124 <__alt_data_end+0xfc009124>
 80091a4:	81000a17 	ldw	r4,40(r16)
 80091a8:	00c20074 	movhi	r3,2049
 80091ac:	18ed5d04 	addi	r3,r3,-19084
 80091b0:	20ffc51e 	bne	r4,r3,80090c8 <__alt_data_end+0xfc0090c8>
 80091b4:	80c0030b 	ldhu	r3,12(r16)
 80091b8:	01010004 	movi	r4,1024
 80091bc:	81001315 	stw	r4,76(r16)
 80091c0:	1906b03a 	or	r3,r3,r4
 80091c4:	80c0030d 	sth	r3,12(r16)
 80091c8:	003fc206 	br	80090d4 <__alt_data_end+0xfc0090d4>
 80091cc:	0027883a 	mov	r19,zero
 80091d0:	04810004 	movi	r18,1024
 80091d4:	003fd606 	br	8009130 <__alt_data_end+0xfc009130>
 80091d8:	8140038f 	ldh	r5,14(r16)
 80091dc:	8809883a 	mov	r4,r17
 80091e0:	800d13c0 	call	800d13c <_isatty_r>
 80091e4:	103fe026 	beq	r2,zero,8009168 <__alt_data_end+0xfc009168>
 80091e8:	8080030b 	ldhu	r2,12(r16)
 80091ec:	10800054 	ori	r2,r2,1
 80091f0:	8080030d 	sth	r2,12(r16)
 80091f4:	003fdc06 	br	8009168 <__alt_data_end+0xfc009168>
 80091f8:	8080030b 	ldhu	r2,12(r16)
 80091fc:	10c0800c 	andi	r3,r2,512
 8009200:	183fd91e 	bne	r3,zero,8009168 <__alt_data_end+0xfc009168>
 8009204:	10800094 	ori	r2,r2,2
 8009208:	80c010c4 	addi	r3,r16,67
 800920c:	8080030d 	sth	r2,12(r16)
 8009210:	00800044 	movi	r2,1
 8009214:	80c00015 	stw	r3,0(r16)
 8009218:	80c00415 	stw	r3,16(r16)
 800921c:	80800515 	stw	r2,20(r16)
 8009220:	003fd106 	br	8009168 <__alt_data_end+0xfc009168>
 8009224:	04c00044 	movi	r19,1
 8009228:	04810004 	movi	r18,1024
 800922c:	003fc006 	br	8009130 <__alt_data_end+0xfc009130>

08009230 <_malloc_r>:
 8009230:	defff504 	addi	sp,sp,-44
 8009234:	dc800315 	stw	r18,12(sp)
 8009238:	dfc00a15 	stw	ra,40(sp)
 800923c:	df000915 	stw	fp,36(sp)
 8009240:	ddc00815 	stw	r23,32(sp)
 8009244:	dd800715 	stw	r22,28(sp)
 8009248:	dd400615 	stw	r21,24(sp)
 800924c:	dd000515 	stw	r20,20(sp)
 8009250:	dcc00415 	stw	r19,16(sp)
 8009254:	dc400215 	stw	r17,8(sp)
 8009258:	dc000115 	stw	r16,4(sp)
 800925c:	288002c4 	addi	r2,r5,11
 8009260:	00c00584 	movi	r3,22
 8009264:	2025883a 	mov	r18,r4
 8009268:	18802a2e 	bgeu	r3,r2,8009314 <_malloc_r+0xe4>
 800926c:	047ffe04 	movi	r17,-8
 8009270:	1462703a 	and	r17,r2,r17
 8009274:	88009e16 	blt	r17,zero,80094f0 <_malloc_r+0x2c0>
 8009278:	89409d36 	bltu	r17,r5,80094f0 <_malloc_r+0x2c0>
 800927c:	8010c840 	call	8010c84 <__malloc_lock>
 8009280:	00807dc4 	movi	r2,503
 8009284:	14402736 	bltu	r2,r17,8009324 <_malloc_r+0xf4>
 8009288:	8806d0fa 	srli	r3,r17,3
 800928c:	04c200b4 	movhi	r19,2050
 8009290:	9cf86f04 	addi	r19,r19,-7748
 8009294:	18c5883a 	add	r2,r3,r3
 8009298:	1085883a 	add	r2,r2,r2
 800929c:	1085883a 	add	r2,r2,r2
 80092a0:	9885883a 	add	r2,r19,r2
 80092a4:	14000317 	ldw	r16,12(r2)
 80092a8:	80814a26 	beq	r16,r2,80097d4 <_malloc_r+0x5a4>
 80092ac:	80c00117 	ldw	r3,4(r16)
 80092b0:	81000317 	ldw	r4,12(r16)
 80092b4:	00bfff04 	movi	r2,-4
 80092b8:	1884703a 	and	r2,r3,r2
 80092bc:	81400217 	ldw	r5,8(r16)
 80092c0:	8085883a 	add	r2,r16,r2
 80092c4:	10c00117 	ldw	r3,4(r2)
 80092c8:	29000315 	stw	r4,12(r5)
 80092cc:	21400215 	stw	r5,8(r4)
 80092d0:	18c00054 	ori	r3,r3,1
 80092d4:	10c00115 	stw	r3,4(r2)
 80092d8:	9009883a 	mov	r4,r18
 80092dc:	8010ca40 	call	8010ca4 <__malloc_unlock>
 80092e0:	80800204 	addi	r2,r16,8
 80092e4:	dfc00a17 	ldw	ra,40(sp)
 80092e8:	df000917 	ldw	fp,36(sp)
 80092ec:	ddc00817 	ldw	r23,32(sp)
 80092f0:	dd800717 	ldw	r22,28(sp)
 80092f4:	dd400617 	ldw	r21,24(sp)
 80092f8:	dd000517 	ldw	r20,20(sp)
 80092fc:	dcc00417 	ldw	r19,16(sp)
 8009300:	dc800317 	ldw	r18,12(sp)
 8009304:	dc400217 	ldw	r17,8(sp)
 8009308:	dc000117 	ldw	r16,4(sp)
 800930c:	dec00b04 	addi	sp,sp,44
 8009310:	f800283a 	ret
 8009314:	04400404 	movi	r17,16
 8009318:	89407536 	bltu	r17,r5,80094f0 <_malloc_r+0x2c0>
 800931c:	8010c840 	call	8010c84 <__malloc_lock>
 8009320:	003fd906 	br	8009288 <__alt_data_end+0xfc009288>
 8009324:	8806d27a 	srli	r3,r17,9
 8009328:	18007526 	beq	r3,zero,8009500 <_malloc_r+0x2d0>
 800932c:	00800104 	movi	r2,4
 8009330:	10c0ef36 	bltu	r2,r3,80096f0 <_malloc_r+0x4c0>
 8009334:	8806d1ba 	srli	r3,r17,6
 8009338:	19c00e04 	addi	r7,r3,56
 800933c:	39cb883a 	add	r5,r7,r7
 8009340:	04c200b4 	movhi	r19,2050
 8009344:	294b883a 	add	r5,r5,r5
 8009348:	9cf86f04 	addi	r19,r19,-7748
 800934c:	294b883a 	add	r5,r5,r5
 8009350:	994b883a 	add	r5,r19,r5
 8009354:	2c000317 	ldw	r16,12(r5)
 8009358:	2c000e26 	beq	r5,r16,8009394 <_malloc_r+0x164>
 800935c:	80800117 	ldw	r2,4(r16)
 8009360:	01bfff04 	movi	r6,-4
 8009364:	010003c4 	movi	r4,15
 8009368:	1184703a 	and	r2,r2,r6
 800936c:	1447c83a 	sub	r3,r2,r17
 8009370:	20c00716 	blt	r4,r3,8009390 <_malloc_r+0x160>
 8009374:	1800650e 	bge	r3,zero,800950c <_malloc_r+0x2dc>
 8009378:	84000317 	ldw	r16,12(r16)
 800937c:	2c000526 	beq	r5,r16,8009394 <_malloc_r+0x164>
 8009380:	80800117 	ldw	r2,4(r16)
 8009384:	1184703a 	and	r2,r2,r6
 8009388:	1447c83a 	sub	r3,r2,r17
 800938c:	20fff90e 	bge	r4,r3,8009374 <__alt_data_end+0xfc009374>
 8009390:	39ffffc4 	addi	r7,r7,-1
 8009394:	38c00044 	addi	r3,r7,1
 8009398:	018200b4 	movhi	r6,2050
 800939c:	9c000417 	ldw	r16,16(r19)
 80093a0:	31b86f04 	addi	r6,r6,-7748
 80093a4:	32400204 	addi	r9,r6,8
 80093a8:	82410326 	beq	r16,r9,80097b8 <_malloc_r+0x588>
 80093ac:	81000117 	ldw	r4,4(r16)
 80093b0:	00bfff04 	movi	r2,-4
 80093b4:	208e703a 	and	r7,r4,r2
 80093b8:	3c45c83a 	sub	r2,r7,r17
 80093bc:	010003c4 	movi	r4,15
 80093c0:	2080ee16 	blt	r4,r2,800977c <_malloc_r+0x54c>
 80093c4:	32400515 	stw	r9,20(r6)
 80093c8:	32400415 	stw	r9,16(r6)
 80093cc:	1000510e 	bge	r2,zero,8009514 <_malloc_r+0x2e4>
 80093d0:	00807fc4 	movi	r2,511
 80093d4:	11c0ce36 	bltu	r2,r7,8009710 <_malloc_r+0x4e0>
 80093d8:	3808d0fa 	srli	r4,r7,3
 80093dc:	01c00044 	movi	r7,1
 80093e0:	30800117 	ldw	r2,4(r6)
 80093e4:	210b883a 	add	r5,r4,r4
 80093e8:	294b883a 	add	r5,r5,r5
 80093ec:	2009d0ba 	srai	r4,r4,2
 80093f0:	294b883a 	add	r5,r5,r5
 80093f4:	298b883a 	add	r5,r5,r6
 80093f8:	2a000217 	ldw	r8,8(r5)
 80093fc:	3908983a 	sll	r4,r7,r4
 8009400:	81400315 	stw	r5,12(r16)
 8009404:	82000215 	stw	r8,8(r16)
 8009408:	2088b03a 	or	r4,r4,r2
 800940c:	2c000215 	stw	r16,8(r5)
 8009410:	31000115 	stw	r4,4(r6)
 8009414:	44000315 	stw	r16,12(r8)
 8009418:	1805d0ba 	srai	r2,r3,2
 800941c:	01400044 	movi	r5,1
 8009420:	288a983a 	sll	r5,r5,r2
 8009424:	21404336 	bltu	r4,r5,8009534 <_malloc_r+0x304>
 8009428:	2144703a 	and	r2,r4,r5
 800942c:	10000a1e 	bne	r2,zero,8009458 <_malloc_r+0x228>
 8009430:	00bfff04 	movi	r2,-4
 8009434:	294b883a 	add	r5,r5,r5
 8009438:	1886703a 	and	r3,r3,r2
 800943c:	2144703a 	and	r2,r4,r5
 8009440:	18c00104 	addi	r3,r3,4
 8009444:	1000041e 	bne	r2,zero,8009458 <_malloc_r+0x228>
 8009448:	294b883a 	add	r5,r5,r5
 800944c:	2144703a 	and	r2,r4,r5
 8009450:	18c00104 	addi	r3,r3,4
 8009454:	103ffc26 	beq	r2,zero,8009448 <__alt_data_end+0xfc009448>
 8009458:	023fff04 	movi	r8,-4
 800945c:	01c003c4 	movi	r7,15
 8009460:	18c5883a 	add	r2,r3,r3
 8009464:	1085883a 	add	r2,r2,r2
 8009468:	1085883a 	add	r2,r2,r2
 800946c:	9895883a 	add	r10,r19,r2
 8009470:	52c00304 	addi	r11,r10,12
 8009474:	1819883a 	mov	r12,r3
 8009478:	5c000017 	ldw	r16,0(r11)
 800947c:	59bffd04 	addi	r6,r11,-12
 8009480:	8180041e 	bne	r16,r6,8009494 <_malloc_r+0x264>
 8009484:	0000ce06 	br	80097c0 <_malloc_r+0x590>
 8009488:	2000d70e 	bge	r4,zero,80097e8 <_malloc_r+0x5b8>
 800948c:	84000317 	ldw	r16,12(r16)
 8009490:	8180cb26 	beq	r16,r6,80097c0 <_malloc_r+0x590>
 8009494:	80800117 	ldw	r2,4(r16)
 8009498:	1204703a 	and	r2,r2,r8
 800949c:	1449c83a 	sub	r4,r2,r17
 80094a0:	393ff90e 	bge	r7,r4,8009488 <__alt_data_end+0xfc009488>
 80094a4:	80800317 	ldw	r2,12(r16)
 80094a8:	80c00217 	ldw	r3,8(r16)
 80094ac:	89400054 	ori	r5,r17,1
 80094b0:	81400115 	stw	r5,4(r16)
 80094b4:	18800315 	stw	r2,12(r3)
 80094b8:	10c00215 	stw	r3,8(r2)
 80094bc:	8463883a 	add	r17,r16,r17
 80094c0:	9c400515 	stw	r17,20(r19)
 80094c4:	9c400415 	stw	r17,16(r19)
 80094c8:	20800054 	ori	r2,r4,1
 80094cc:	88800115 	stw	r2,4(r17)
 80094d0:	8a400315 	stw	r9,12(r17)
 80094d4:	8a400215 	stw	r9,8(r17)
 80094d8:	8923883a 	add	r17,r17,r4
 80094dc:	89000015 	stw	r4,0(r17)
 80094e0:	9009883a 	mov	r4,r18
 80094e4:	8010ca40 	call	8010ca4 <__malloc_unlock>
 80094e8:	80800204 	addi	r2,r16,8
 80094ec:	003f7d06 	br	80092e4 <__alt_data_end+0xfc0092e4>
 80094f0:	00800304 	movi	r2,12
 80094f4:	90800015 	stw	r2,0(r18)
 80094f8:	0005883a 	mov	r2,zero
 80094fc:	003f7906 	br	80092e4 <__alt_data_end+0xfc0092e4>
 8009500:	01401f84 	movi	r5,126
 8009504:	01c00fc4 	movi	r7,63
 8009508:	003f8d06 	br	8009340 <__alt_data_end+0xfc009340>
 800950c:	81000317 	ldw	r4,12(r16)
 8009510:	003f6a06 	br	80092bc <__alt_data_end+0xfc0092bc>
 8009514:	81c5883a 	add	r2,r16,r7
 8009518:	10c00117 	ldw	r3,4(r2)
 800951c:	9009883a 	mov	r4,r18
 8009520:	18c00054 	ori	r3,r3,1
 8009524:	10c00115 	stw	r3,4(r2)
 8009528:	8010ca40 	call	8010ca4 <__malloc_unlock>
 800952c:	80800204 	addi	r2,r16,8
 8009530:	003f6c06 	br	80092e4 <__alt_data_end+0xfc0092e4>
 8009534:	9c000217 	ldw	r16,8(r19)
 8009538:	00bfff04 	movi	r2,-4
 800953c:	85800117 	ldw	r22,4(r16)
 8009540:	b0ac703a 	and	r22,r22,r2
 8009544:	b4400336 	bltu	r22,r17,8009554 <_malloc_r+0x324>
 8009548:	b445c83a 	sub	r2,r22,r17
 800954c:	00c003c4 	movi	r3,15
 8009550:	18805d16 	blt	r3,r2,80096c8 <_malloc_r+0x498>
 8009554:	05c200b4 	movhi	r23,2050
 8009558:	008200b4 	movhi	r2,2050
 800955c:	bdfe0d04 	addi	r23,r23,-1996
 8009560:	10850804 	addi	r2,r2,5152
 8009564:	15400017 	ldw	r21,0(r2)
 8009568:	b9000017 	ldw	r4,0(r23)
 800956c:	00ffffc4 	movi	r3,-1
 8009570:	858d883a 	add	r6,r16,r22
 8009574:	8d6b883a 	add	r21,r17,r21
 8009578:	20c0e426 	beq	r4,r3,800990c <_malloc_r+0x6dc>
 800957c:	ad4403c4 	addi	r21,r21,4111
 8009580:	00fc0004 	movi	r3,-4096
 8009584:	a8ea703a 	and	r21,r21,r3
 8009588:	9009883a 	mov	r4,r18
 800958c:	a80b883a 	mov	r5,r21
 8009590:	d9800015 	stw	r6,0(sp)
 8009594:	800b4480 	call	800b448 <_sbrk_r>
 8009598:	00ffffc4 	movi	r3,-1
 800959c:	1029883a 	mov	r20,r2
 80095a0:	d9800017 	ldw	r6,0(sp)
 80095a4:	10c0a426 	beq	r2,r3,8009838 <_malloc_r+0x608>
 80095a8:	1180a236 	bltu	r2,r6,8009834 <_malloc_r+0x604>
 80095ac:	070200b4 	movhi	fp,2050
 80095b0:	e7051004 	addi	fp,fp,5184
 80095b4:	e0c00017 	ldw	r3,0(fp)
 80095b8:	a8c7883a 	add	r3,r21,r3
 80095bc:	e0c00015 	stw	r3,0(fp)
 80095c0:	3500da26 	beq	r6,r20,800992c <_malloc_r+0x6fc>
 80095c4:	b9000017 	ldw	r4,0(r23)
 80095c8:	00bfffc4 	movi	r2,-1
 80095cc:	2080e426 	beq	r4,r2,8009960 <_malloc_r+0x730>
 80095d0:	a185c83a 	sub	r2,r20,r6
 80095d4:	1885883a 	add	r2,r3,r2
 80095d8:	e0800015 	stw	r2,0(fp)
 80095dc:	a0c001cc 	andi	r3,r20,7
 80095e0:	1800b526 	beq	r3,zero,80098b8 <_malloc_r+0x688>
 80095e4:	a0e9c83a 	sub	r20,r20,r3
 80095e8:	00840204 	movi	r2,4104
 80095ec:	a5000204 	addi	r20,r20,8
 80095f0:	10c7c83a 	sub	r3,r2,r3
 80095f4:	a545883a 	add	r2,r20,r21
 80095f8:	1083ffcc 	andi	r2,r2,4095
 80095fc:	18abc83a 	sub	r21,r3,r2
 8009600:	9009883a 	mov	r4,r18
 8009604:	a80b883a 	mov	r5,r21
 8009608:	800b4480 	call	800b448 <_sbrk_r>
 800960c:	00ffffc4 	movi	r3,-1
 8009610:	10c0d026 	beq	r2,r3,8009954 <_malloc_r+0x724>
 8009614:	1507c83a 	sub	r3,r2,r20
 8009618:	a8c7883a 	add	r3,r21,r3
 800961c:	18c00054 	ori	r3,r3,1
 8009620:	e0800017 	ldw	r2,0(fp)
 8009624:	9d000215 	stw	r20,8(r19)
 8009628:	a0c00115 	stw	r3,4(r20)
 800962c:	a887883a 	add	r3,r21,r2
 8009630:	e0c00015 	stw	r3,0(fp)
 8009634:	84c00e26 	beq	r16,r19,8009670 <_malloc_r+0x440>
 8009638:	018003c4 	movi	r6,15
 800963c:	3580a02e 	bgeu	r6,r22,80098c0 <_malloc_r+0x690>
 8009640:	81400117 	ldw	r5,4(r16)
 8009644:	013ffe04 	movi	r4,-8
 8009648:	b0bffd04 	addi	r2,r22,-12
 800964c:	1104703a 	and	r2,r2,r4
 8009650:	2900004c 	andi	r4,r5,1
 8009654:	1108b03a 	or	r4,r2,r4
 8009658:	81000115 	stw	r4,4(r16)
 800965c:	01400144 	movi	r5,5
 8009660:	8089883a 	add	r4,r16,r2
 8009664:	21400115 	stw	r5,4(r4)
 8009668:	21400215 	stw	r5,8(r4)
 800966c:	3080c036 	bltu	r6,r2,8009970 <_malloc_r+0x740>
 8009670:	008200b4 	movhi	r2,2050
 8009674:	10850704 	addi	r2,r2,5148
 8009678:	11000017 	ldw	r4,0(r2)
 800967c:	20c0012e 	bgeu	r4,r3,8009684 <_malloc_r+0x454>
 8009680:	10c00015 	stw	r3,0(r2)
 8009684:	008200b4 	movhi	r2,2050
 8009688:	10850604 	addi	r2,r2,5144
 800968c:	11000017 	ldw	r4,0(r2)
 8009690:	9c000217 	ldw	r16,8(r19)
 8009694:	20c0012e 	bgeu	r4,r3,800969c <_malloc_r+0x46c>
 8009698:	10c00015 	stw	r3,0(r2)
 800969c:	80c00117 	ldw	r3,4(r16)
 80096a0:	00bfff04 	movi	r2,-4
 80096a4:	1886703a 	and	r3,r3,r2
 80096a8:	1c45c83a 	sub	r2,r3,r17
 80096ac:	1c400236 	bltu	r3,r17,80096b8 <_malloc_r+0x488>
 80096b0:	00c003c4 	movi	r3,15
 80096b4:	18800416 	blt	r3,r2,80096c8 <_malloc_r+0x498>
 80096b8:	9009883a 	mov	r4,r18
 80096bc:	8010ca40 	call	8010ca4 <__malloc_unlock>
 80096c0:	0005883a 	mov	r2,zero
 80096c4:	003f0706 	br	80092e4 <__alt_data_end+0xfc0092e4>
 80096c8:	88c00054 	ori	r3,r17,1
 80096cc:	80c00115 	stw	r3,4(r16)
 80096d0:	8463883a 	add	r17,r16,r17
 80096d4:	10800054 	ori	r2,r2,1
 80096d8:	9c400215 	stw	r17,8(r19)
 80096dc:	88800115 	stw	r2,4(r17)
 80096e0:	9009883a 	mov	r4,r18
 80096e4:	8010ca40 	call	8010ca4 <__malloc_unlock>
 80096e8:	80800204 	addi	r2,r16,8
 80096ec:	003efd06 	br	80092e4 <__alt_data_end+0xfc0092e4>
 80096f0:	00800504 	movi	r2,20
 80096f4:	10c0482e 	bgeu	r2,r3,8009818 <_malloc_r+0x5e8>
 80096f8:	00801504 	movi	r2,84
 80096fc:	10c06836 	bltu	r2,r3,80098a0 <_malloc_r+0x670>
 8009700:	8806d33a 	srli	r3,r17,12
 8009704:	19c01b84 	addi	r7,r3,110
 8009708:	39cb883a 	add	r5,r7,r7
 800970c:	003f0c06 	br	8009340 <__alt_data_end+0xfc009340>
 8009710:	3804d27a 	srli	r2,r7,9
 8009714:	01000104 	movi	r4,4
 8009718:	2080422e 	bgeu	r4,r2,8009824 <_malloc_r+0x5f4>
 800971c:	01000504 	movi	r4,20
 8009720:	20807c36 	bltu	r4,r2,8009914 <_malloc_r+0x6e4>
 8009724:	110016c4 	addi	r4,r2,91
 8009728:	210b883a 	add	r5,r4,r4
 800972c:	294b883a 	add	r5,r5,r5
 8009730:	294b883a 	add	r5,r5,r5
 8009734:	994b883a 	add	r5,r19,r5
 8009738:	28800217 	ldw	r2,8(r5)
 800973c:	020200b4 	movhi	r8,2050
 8009740:	42386f04 	addi	r8,r8,-7748
 8009744:	11406326 	beq	r2,r5,80098d4 <_malloc_r+0x6a4>
 8009748:	01bfff04 	movi	r6,-4
 800974c:	11000117 	ldw	r4,4(r2)
 8009750:	2188703a 	and	r4,r4,r6
 8009754:	3900022e 	bgeu	r7,r4,8009760 <_malloc_r+0x530>
 8009758:	10800217 	ldw	r2,8(r2)
 800975c:	28bffb1e 	bne	r5,r2,800974c <__alt_data_end+0xfc00974c>
 8009760:	11800317 	ldw	r6,12(r2)
 8009764:	99000117 	ldw	r4,4(r19)
 8009768:	81800315 	stw	r6,12(r16)
 800976c:	80800215 	stw	r2,8(r16)
 8009770:	34000215 	stw	r16,8(r6)
 8009774:	14000315 	stw	r16,12(r2)
 8009778:	003f2706 	br	8009418 <__alt_data_end+0xfc009418>
 800977c:	88c00054 	ori	r3,r17,1
 8009780:	80c00115 	stw	r3,4(r16)
 8009784:	8463883a 	add	r17,r16,r17
 8009788:	34400515 	stw	r17,20(r6)
 800978c:	34400415 	stw	r17,16(r6)
 8009790:	10c00054 	ori	r3,r2,1
 8009794:	8a400315 	stw	r9,12(r17)
 8009798:	8a400215 	stw	r9,8(r17)
 800979c:	88c00115 	stw	r3,4(r17)
 80097a0:	88a3883a 	add	r17,r17,r2
 80097a4:	88800015 	stw	r2,0(r17)
 80097a8:	9009883a 	mov	r4,r18
 80097ac:	8010ca40 	call	8010ca4 <__malloc_unlock>
 80097b0:	80800204 	addi	r2,r16,8
 80097b4:	003ecb06 	br	80092e4 <__alt_data_end+0xfc0092e4>
 80097b8:	31000117 	ldw	r4,4(r6)
 80097bc:	003f1606 	br	8009418 <__alt_data_end+0xfc009418>
 80097c0:	63000044 	addi	r12,r12,1
 80097c4:	608000cc 	andi	r2,r12,3
 80097c8:	5ac00204 	addi	r11,r11,8
 80097cc:	103f2a1e 	bne	r2,zero,8009478 <__alt_data_end+0xfc009478>
 80097d0:	00002106 	br	8009858 <_malloc_r+0x628>
 80097d4:	80800204 	addi	r2,r16,8
 80097d8:	84000517 	ldw	r16,20(r16)
 80097dc:	143eb31e 	bne	r2,r16,80092ac <__alt_data_end+0xfc0092ac>
 80097e0:	18c00084 	addi	r3,r3,2
 80097e4:	003eec06 	br	8009398 <__alt_data_end+0xfc009398>
 80097e8:	8085883a 	add	r2,r16,r2
 80097ec:	10c00117 	ldw	r3,4(r2)
 80097f0:	81000317 	ldw	r4,12(r16)
 80097f4:	81400217 	ldw	r5,8(r16)
 80097f8:	18c00054 	ori	r3,r3,1
 80097fc:	10c00115 	stw	r3,4(r2)
 8009800:	29000315 	stw	r4,12(r5)
 8009804:	21400215 	stw	r5,8(r4)
 8009808:	9009883a 	mov	r4,r18
 800980c:	8010ca40 	call	8010ca4 <__malloc_unlock>
 8009810:	80800204 	addi	r2,r16,8
 8009814:	003eb306 	br	80092e4 <__alt_data_end+0xfc0092e4>
 8009818:	19c016c4 	addi	r7,r3,91
 800981c:	39cb883a 	add	r5,r7,r7
 8009820:	003ec706 	br	8009340 <__alt_data_end+0xfc009340>
 8009824:	3804d1ba 	srli	r2,r7,6
 8009828:	11000e04 	addi	r4,r2,56
 800982c:	210b883a 	add	r5,r4,r4
 8009830:	003fbe06 	br	800972c <__alt_data_end+0xfc00972c>
 8009834:	84ff5d26 	beq	r16,r19,80095ac <__alt_data_end+0xfc0095ac>
 8009838:	9c000217 	ldw	r16,8(r19)
 800983c:	00bfff04 	movi	r2,-4
 8009840:	80c00117 	ldw	r3,4(r16)
 8009844:	1886703a 	and	r3,r3,r2
 8009848:	003f9706 	br	80096a8 <__alt_data_end+0xfc0096a8>
 800984c:	52800017 	ldw	r10,0(r10)
 8009850:	18ffffc4 	addi	r3,r3,-1
 8009854:	50805c1e 	bne	r10,r2,80099c8 <_malloc_r+0x798>
 8009858:	190000cc 	andi	r4,r3,3
 800985c:	50bffe04 	addi	r2,r10,-8
 8009860:	203ffa1e 	bne	r4,zero,800984c <__alt_data_end+0xfc00984c>
 8009864:	98800117 	ldw	r2,4(r19)
 8009868:	0146303a 	nor	r3,zero,r5
 800986c:	1884703a 	and	r2,r3,r2
 8009870:	98800115 	stw	r2,4(r19)
 8009874:	294b883a 	add	r5,r5,r5
 8009878:	117f2e36 	bltu	r2,r5,8009534 <__alt_data_end+0xfc009534>
 800987c:	283f2d26 	beq	r5,zero,8009534 <__alt_data_end+0xfc009534>
 8009880:	1146703a 	and	r3,r2,r5
 8009884:	1800521e 	bne	r3,zero,80099d0 <_malloc_r+0x7a0>
 8009888:	6007883a 	mov	r3,r12
 800988c:	294b883a 	add	r5,r5,r5
 8009890:	1148703a 	and	r4,r2,r5
 8009894:	18c00104 	addi	r3,r3,4
 8009898:	203ffc26 	beq	r4,zero,800988c <__alt_data_end+0xfc00988c>
 800989c:	003ef006 	br	8009460 <__alt_data_end+0xfc009460>
 80098a0:	00805504 	movi	r2,340
 80098a4:	10c01336 	bltu	r2,r3,80098f4 <_malloc_r+0x6c4>
 80098a8:	8806d3fa 	srli	r3,r17,15
 80098ac:	19c01dc4 	addi	r7,r3,119
 80098b0:	39cb883a 	add	r5,r7,r7
 80098b4:	003ea206 	br	8009340 <__alt_data_end+0xfc009340>
 80098b8:	00c40004 	movi	r3,4096
 80098bc:	003f4d06 	br	80095f4 <__alt_data_end+0xfc0095f4>
 80098c0:	00800044 	movi	r2,1
 80098c4:	a0800115 	stw	r2,4(r20)
 80098c8:	a021883a 	mov	r16,r20
 80098cc:	0007883a 	mov	r3,zero
 80098d0:	003f7506 	br	80096a8 <__alt_data_end+0xfc0096a8>
 80098d4:	200bd0ba 	srai	r5,r4,2
 80098d8:	01800044 	movi	r6,1
 80098dc:	41000117 	ldw	r4,4(r8)
 80098e0:	314a983a 	sll	r5,r6,r5
 80098e4:	100d883a 	mov	r6,r2
 80098e8:	2908b03a 	or	r4,r5,r4
 80098ec:	41000115 	stw	r4,4(r8)
 80098f0:	003f9d06 	br	8009768 <__alt_data_end+0xfc009768>
 80098f4:	00815504 	movi	r2,1364
 80098f8:	10c01336 	bltu	r2,r3,8009948 <_malloc_r+0x718>
 80098fc:	8806d4ba 	srli	r3,r17,18
 8009900:	19c01f04 	addi	r7,r3,124
 8009904:	39cb883a 	add	r5,r7,r7
 8009908:	003e8d06 	br	8009340 <__alt_data_end+0xfc009340>
 800990c:	ad400404 	addi	r21,r21,16
 8009910:	003f1d06 	br	8009588 <__alt_data_end+0xfc009588>
 8009914:	01001504 	movi	r4,84
 8009918:	20801c36 	bltu	r4,r2,800998c <_malloc_r+0x75c>
 800991c:	3804d33a 	srli	r2,r7,12
 8009920:	11001b84 	addi	r4,r2,110
 8009924:	210b883a 	add	r5,r4,r4
 8009928:	003f8006 	br	800972c <__alt_data_end+0xfc00972c>
 800992c:	3083ffcc 	andi	r2,r6,4095
 8009930:	103f241e 	bne	r2,zero,80095c4 <__alt_data_end+0xfc0095c4>
 8009934:	99000217 	ldw	r4,8(r19)
 8009938:	ad85883a 	add	r2,r21,r22
 800993c:	10800054 	ori	r2,r2,1
 8009940:	20800115 	stw	r2,4(r4)
 8009944:	003f4a06 	br	8009670 <__alt_data_end+0xfc009670>
 8009948:	01403f04 	movi	r5,252
 800994c:	01c01f84 	movi	r7,126
 8009950:	003e7b06 	br	8009340 <__alt_data_end+0xfc009340>
 8009954:	00c00044 	movi	r3,1
 8009958:	002b883a 	mov	r21,zero
 800995c:	003f3006 	br	8009620 <__alt_data_end+0xfc009620>
 8009960:	008200b4 	movhi	r2,2050
 8009964:	10be0d04 	addi	r2,r2,-1996
 8009968:	15000015 	stw	r20,0(r2)
 800996c:	003f1b06 	br	80095dc <__alt_data_end+0xfc0095dc>
 8009970:	9009883a 	mov	r4,r18
 8009974:	81400204 	addi	r5,r16,8
 8009978:	80086940 	call	8008694 <_free_r>
 800997c:	008200b4 	movhi	r2,2050
 8009980:	10851004 	addi	r2,r2,5184
 8009984:	10c00017 	ldw	r3,0(r2)
 8009988:	003f3906 	br	8009670 <__alt_data_end+0xfc009670>
 800998c:	01005504 	movi	r4,340
 8009990:	20800436 	bltu	r4,r2,80099a4 <_malloc_r+0x774>
 8009994:	3804d3fa 	srli	r2,r7,15
 8009998:	11001dc4 	addi	r4,r2,119
 800999c:	210b883a 	add	r5,r4,r4
 80099a0:	003f6206 	br	800972c <__alt_data_end+0xfc00972c>
 80099a4:	01015504 	movi	r4,1364
 80099a8:	20800436 	bltu	r4,r2,80099bc <_malloc_r+0x78c>
 80099ac:	3804d4ba 	srli	r2,r7,18
 80099b0:	11001f04 	addi	r4,r2,124
 80099b4:	210b883a 	add	r5,r4,r4
 80099b8:	003f5c06 	br	800972c <__alt_data_end+0xfc00972c>
 80099bc:	01403f04 	movi	r5,252
 80099c0:	01001f84 	movi	r4,126
 80099c4:	003f5906 	br	800972c <__alt_data_end+0xfc00972c>
 80099c8:	98800117 	ldw	r2,4(r19)
 80099cc:	003fa906 	br	8009874 <__alt_data_end+0xfc009874>
 80099d0:	6007883a 	mov	r3,r12
 80099d4:	003ea206 	br	8009460 <__alt_data_end+0xfc009460>

080099d8 <memchr>:
 80099d8:	208000cc 	andi	r2,r4,3
 80099dc:	280f883a 	mov	r7,r5
 80099e0:	10003526 	beq	r2,zero,8009ab8 <memchr+0xe0>
 80099e4:	30bfffc4 	addi	r2,r6,-1
 80099e8:	30001b26 	beq	r6,zero,8009a58 <memchr+0x80>
 80099ec:	21800003 	ldbu	r6,0(r4)
 80099f0:	28c03fcc 	andi	r3,r5,255
 80099f4:	30c01a26 	beq	r6,r3,8009a60 <memchr+0x88>
 80099f8:	180d883a 	mov	r6,r3
 80099fc:	00000406 	br	8009a10 <memchr+0x38>
 8009a00:	10001526 	beq	r2,zero,8009a58 <memchr+0x80>
 8009a04:	20c00003 	ldbu	r3,0(r4)
 8009a08:	10bfffc4 	addi	r2,r2,-1
 8009a0c:	19801426 	beq	r3,r6,8009a60 <memchr+0x88>
 8009a10:	21000044 	addi	r4,r4,1
 8009a14:	20c000cc 	andi	r3,r4,3
 8009a18:	183ff91e 	bne	r3,zero,8009a00 <__alt_data_end+0xfc009a00>
 8009a1c:	024000c4 	movi	r9,3
 8009a20:	48801136 	bltu	r9,r2,8009a68 <memchr+0x90>
 8009a24:	10000c26 	beq	r2,zero,8009a58 <memchr+0x80>
 8009a28:	20c00003 	ldbu	r3,0(r4)
 8009a2c:	29403fcc 	andi	r5,r5,255
 8009a30:	19400b26 	beq	r3,r5,8009a60 <memchr+0x88>
 8009a34:	20c00044 	addi	r3,r4,1
 8009a38:	2085883a 	add	r2,r4,r2
 8009a3c:	39803fcc 	andi	r6,r7,255
 8009a40:	00000306 	br	8009a50 <memchr+0x78>
 8009a44:	18c00044 	addi	r3,r3,1
 8009a48:	197fffc3 	ldbu	r5,-1(r3)
 8009a4c:	29800426 	beq	r5,r6,8009a60 <memchr+0x88>
 8009a50:	1809883a 	mov	r4,r3
 8009a54:	18bffb1e 	bne	r3,r2,8009a44 <__alt_data_end+0xfc009a44>
 8009a58:	0005883a 	mov	r2,zero
 8009a5c:	f800283a 	ret
 8009a60:	2005883a 	mov	r2,r4
 8009a64:	f800283a 	ret
 8009a68:	28c03fcc 	andi	r3,r5,255
 8009a6c:	1810923a 	slli	r8,r3,8
 8009a70:	02ffbff4 	movhi	r11,65279
 8009a74:	02a02074 	movhi	r10,32897
 8009a78:	40c6b03a 	or	r3,r8,r3
 8009a7c:	1810943a 	slli	r8,r3,16
 8009a80:	5affbfc4 	addi	r11,r11,-257
 8009a84:	52a02004 	addi	r10,r10,-32640
 8009a88:	40d0b03a 	or	r8,r8,r3
 8009a8c:	20c00017 	ldw	r3,0(r4)
 8009a90:	40c6f03a 	xor	r3,r8,r3
 8009a94:	1acd883a 	add	r6,r3,r11
 8009a98:	00c6303a 	nor	r3,zero,r3
 8009a9c:	30c6703a 	and	r3,r6,r3
 8009aa0:	1a86703a 	and	r3,r3,r10
 8009aa4:	183fdf1e 	bne	r3,zero,8009a24 <__alt_data_end+0xfc009a24>
 8009aa8:	10bfff04 	addi	r2,r2,-4
 8009aac:	21000104 	addi	r4,r4,4
 8009ab0:	48bff636 	bltu	r9,r2,8009a8c <__alt_data_end+0xfc009a8c>
 8009ab4:	003fdb06 	br	8009a24 <__alt_data_end+0xfc009a24>
 8009ab8:	3005883a 	mov	r2,r6
 8009abc:	003fd706 	br	8009a1c <__alt_data_end+0xfc009a1c>

08009ac0 <memmove>:
 8009ac0:	2005883a 	mov	r2,r4
 8009ac4:	29000b2e 	bgeu	r5,r4,8009af4 <memmove+0x34>
 8009ac8:	298f883a 	add	r7,r5,r6
 8009acc:	21c0092e 	bgeu	r4,r7,8009af4 <memmove+0x34>
 8009ad0:	2187883a 	add	r3,r4,r6
 8009ad4:	198bc83a 	sub	r5,r3,r6
 8009ad8:	30004b26 	beq	r6,zero,8009c08 <memmove+0x148>
 8009adc:	39ffffc4 	addi	r7,r7,-1
 8009ae0:	39000003 	ldbu	r4,0(r7)
 8009ae4:	18ffffc4 	addi	r3,r3,-1
 8009ae8:	19000005 	stb	r4,0(r3)
 8009aec:	197ffb1e 	bne	r3,r5,8009adc <__alt_data_end+0xfc009adc>
 8009af0:	f800283a 	ret
 8009af4:	00c003c4 	movi	r3,15
 8009af8:	1980412e 	bgeu	r3,r6,8009c00 <memmove+0x140>
 8009afc:	1146b03a 	or	r3,r2,r5
 8009b00:	18c000cc 	andi	r3,r3,3
 8009b04:	1800411e 	bne	r3,zero,8009c0c <memmove+0x14c>
 8009b08:	33fffc04 	addi	r15,r6,-16
 8009b0c:	781ed13a 	srli	r15,r15,4
 8009b10:	28c00104 	addi	r3,r5,4
 8009b14:	13400104 	addi	r13,r2,4
 8009b18:	781c913a 	slli	r14,r15,4
 8009b1c:	2b000204 	addi	r12,r5,8
 8009b20:	12c00204 	addi	r11,r2,8
 8009b24:	73800504 	addi	r14,r14,20
 8009b28:	2a800304 	addi	r10,r5,12
 8009b2c:	12400304 	addi	r9,r2,12
 8009b30:	2b9d883a 	add	r14,r5,r14
 8009b34:	2811883a 	mov	r8,r5
 8009b38:	100f883a 	mov	r7,r2
 8009b3c:	41000017 	ldw	r4,0(r8)
 8009b40:	39c00404 	addi	r7,r7,16
 8009b44:	18c00404 	addi	r3,r3,16
 8009b48:	393ffc15 	stw	r4,-16(r7)
 8009b4c:	193ffc17 	ldw	r4,-16(r3)
 8009b50:	6b400404 	addi	r13,r13,16
 8009b54:	5ac00404 	addi	r11,r11,16
 8009b58:	693ffc15 	stw	r4,-16(r13)
 8009b5c:	61000017 	ldw	r4,0(r12)
 8009b60:	4a400404 	addi	r9,r9,16
 8009b64:	42000404 	addi	r8,r8,16
 8009b68:	593ffc15 	stw	r4,-16(r11)
 8009b6c:	51000017 	ldw	r4,0(r10)
 8009b70:	63000404 	addi	r12,r12,16
 8009b74:	52800404 	addi	r10,r10,16
 8009b78:	493ffc15 	stw	r4,-16(r9)
 8009b7c:	1bbfef1e 	bne	r3,r14,8009b3c <__alt_data_end+0xfc009b3c>
 8009b80:	79000044 	addi	r4,r15,1
 8009b84:	2008913a 	slli	r4,r4,4
 8009b88:	328003cc 	andi	r10,r6,15
 8009b8c:	02c000c4 	movi	r11,3
 8009b90:	1107883a 	add	r3,r2,r4
 8009b94:	290b883a 	add	r5,r5,r4
 8009b98:	5a801e2e 	bgeu	r11,r10,8009c14 <memmove+0x154>
 8009b9c:	1813883a 	mov	r9,r3
 8009ba0:	2811883a 	mov	r8,r5
 8009ba4:	500f883a 	mov	r7,r10
 8009ba8:	41000017 	ldw	r4,0(r8)
 8009bac:	4a400104 	addi	r9,r9,4
 8009bb0:	39ffff04 	addi	r7,r7,-4
 8009bb4:	493fff15 	stw	r4,-4(r9)
 8009bb8:	42000104 	addi	r8,r8,4
 8009bbc:	59fffa36 	bltu	r11,r7,8009ba8 <__alt_data_end+0xfc009ba8>
 8009bc0:	513fff04 	addi	r4,r10,-4
 8009bc4:	2008d0ba 	srli	r4,r4,2
 8009bc8:	318000cc 	andi	r6,r6,3
 8009bcc:	21000044 	addi	r4,r4,1
 8009bd0:	2109883a 	add	r4,r4,r4
 8009bd4:	2109883a 	add	r4,r4,r4
 8009bd8:	1907883a 	add	r3,r3,r4
 8009bdc:	290b883a 	add	r5,r5,r4
 8009be0:	30000926 	beq	r6,zero,8009c08 <memmove+0x148>
 8009be4:	198d883a 	add	r6,r3,r6
 8009be8:	29c00003 	ldbu	r7,0(r5)
 8009bec:	18c00044 	addi	r3,r3,1
 8009bf0:	29400044 	addi	r5,r5,1
 8009bf4:	19ffffc5 	stb	r7,-1(r3)
 8009bf8:	19bffb1e 	bne	r3,r6,8009be8 <__alt_data_end+0xfc009be8>
 8009bfc:	f800283a 	ret
 8009c00:	1007883a 	mov	r3,r2
 8009c04:	003ff606 	br	8009be0 <__alt_data_end+0xfc009be0>
 8009c08:	f800283a 	ret
 8009c0c:	1007883a 	mov	r3,r2
 8009c10:	003ff406 	br	8009be4 <__alt_data_end+0xfc009be4>
 8009c14:	500d883a 	mov	r6,r10
 8009c18:	003ff106 	br	8009be0 <__alt_data_end+0xfc009be0>

08009c1c <memset>:
 8009c1c:	20c000cc 	andi	r3,r4,3
 8009c20:	2005883a 	mov	r2,r4
 8009c24:	18004326 	beq	r3,zero,8009d34 <memset+0x118>
 8009c28:	31ffffc4 	addi	r7,r6,-1
 8009c2c:	30004026 	beq	r6,zero,8009d30 <memset+0x114>
 8009c30:	2813883a 	mov	r9,r5
 8009c34:	200d883a 	mov	r6,r4
 8009c38:	2007883a 	mov	r3,r4
 8009c3c:	00000406 	br	8009c50 <memset+0x34>
 8009c40:	3a3fffc4 	addi	r8,r7,-1
 8009c44:	31800044 	addi	r6,r6,1
 8009c48:	38003926 	beq	r7,zero,8009d30 <memset+0x114>
 8009c4c:	400f883a 	mov	r7,r8
 8009c50:	18c00044 	addi	r3,r3,1
 8009c54:	32400005 	stb	r9,0(r6)
 8009c58:	1a0000cc 	andi	r8,r3,3
 8009c5c:	403ff81e 	bne	r8,zero,8009c40 <__alt_data_end+0xfc009c40>
 8009c60:	010000c4 	movi	r4,3
 8009c64:	21c02d2e 	bgeu	r4,r7,8009d1c <memset+0x100>
 8009c68:	29803fcc 	andi	r6,r5,255
 8009c6c:	3008923a 	slli	r4,r6,8
 8009c70:	218cb03a 	or	r6,r4,r6
 8009c74:	3008943a 	slli	r4,r6,16
 8009c78:	218cb03a 	or	r6,r4,r6
 8009c7c:	010003c4 	movi	r4,15
 8009c80:	21c0182e 	bgeu	r4,r7,8009ce4 <memset+0xc8>
 8009c84:	3b3ffc04 	addi	r12,r7,-16
 8009c88:	6018d13a 	srli	r12,r12,4
 8009c8c:	1a000104 	addi	r8,r3,4
 8009c90:	1ac00204 	addi	r11,r3,8
 8009c94:	6008913a 	slli	r4,r12,4
 8009c98:	1a800304 	addi	r10,r3,12
 8009c9c:	1813883a 	mov	r9,r3
 8009ca0:	21000504 	addi	r4,r4,20
 8009ca4:	1909883a 	add	r4,r3,r4
 8009ca8:	49800015 	stw	r6,0(r9)
 8009cac:	41800015 	stw	r6,0(r8)
 8009cb0:	59800015 	stw	r6,0(r11)
 8009cb4:	51800015 	stw	r6,0(r10)
 8009cb8:	42000404 	addi	r8,r8,16
 8009cbc:	4a400404 	addi	r9,r9,16
 8009cc0:	5ac00404 	addi	r11,r11,16
 8009cc4:	52800404 	addi	r10,r10,16
 8009cc8:	413ff71e 	bne	r8,r4,8009ca8 <__alt_data_end+0xfc009ca8>
 8009ccc:	63000044 	addi	r12,r12,1
 8009cd0:	6018913a 	slli	r12,r12,4
 8009cd4:	39c003cc 	andi	r7,r7,15
 8009cd8:	010000c4 	movi	r4,3
 8009cdc:	1b07883a 	add	r3,r3,r12
 8009ce0:	21c00e2e 	bgeu	r4,r7,8009d1c <memset+0x100>
 8009ce4:	1813883a 	mov	r9,r3
 8009ce8:	3811883a 	mov	r8,r7
 8009cec:	010000c4 	movi	r4,3
 8009cf0:	49800015 	stw	r6,0(r9)
 8009cf4:	423fff04 	addi	r8,r8,-4
 8009cf8:	4a400104 	addi	r9,r9,4
 8009cfc:	223ffc36 	bltu	r4,r8,8009cf0 <__alt_data_end+0xfc009cf0>
 8009d00:	393fff04 	addi	r4,r7,-4
 8009d04:	2008d0ba 	srli	r4,r4,2
 8009d08:	39c000cc 	andi	r7,r7,3
 8009d0c:	21000044 	addi	r4,r4,1
 8009d10:	2109883a 	add	r4,r4,r4
 8009d14:	2109883a 	add	r4,r4,r4
 8009d18:	1907883a 	add	r3,r3,r4
 8009d1c:	38000426 	beq	r7,zero,8009d30 <memset+0x114>
 8009d20:	19cf883a 	add	r7,r3,r7
 8009d24:	19400005 	stb	r5,0(r3)
 8009d28:	18c00044 	addi	r3,r3,1
 8009d2c:	19fffd1e 	bne	r3,r7,8009d24 <__alt_data_end+0xfc009d24>
 8009d30:	f800283a 	ret
 8009d34:	2007883a 	mov	r3,r4
 8009d38:	300f883a 	mov	r7,r6
 8009d3c:	003fc806 	br	8009c60 <__alt_data_end+0xfc009c60>

08009d40 <_Balloc>:
 8009d40:	20801317 	ldw	r2,76(r4)
 8009d44:	defffc04 	addi	sp,sp,-16
 8009d48:	dc400115 	stw	r17,4(sp)
 8009d4c:	dc000015 	stw	r16,0(sp)
 8009d50:	dfc00315 	stw	ra,12(sp)
 8009d54:	dc800215 	stw	r18,8(sp)
 8009d58:	2023883a 	mov	r17,r4
 8009d5c:	2821883a 	mov	r16,r5
 8009d60:	10000f26 	beq	r2,zero,8009da0 <_Balloc+0x60>
 8009d64:	8407883a 	add	r3,r16,r16
 8009d68:	18c7883a 	add	r3,r3,r3
 8009d6c:	10c7883a 	add	r3,r2,r3
 8009d70:	18800017 	ldw	r2,0(r3)
 8009d74:	10001126 	beq	r2,zero,8009dbc <_Balloc+0x7c>
 8009d78:	11000017 	ldw	r4,0(r2)
 8009d7c:	19000015 	stw	r4,0(r3)
 8009d80:	10000415 	stw	zero,16(r2)
 8009d84:	10000315 	stw	zero,12(r2)
 8009d88:	dfc00317 	ldw	ra,12(sp)
 8009d8c:	dc800217 	ldw	r18,8(sp)
 8009d90:	dc400117 	ldw	r17,4(sp)
 8009d94:	dc000017 	ldw	r16,0(sp)
 8009d98:	dec00404 	addi	sp,sp,16
 8009d9c:	f800283a 	ret
 8009da0:	01400104 	movi	r5,4
 8009da4:	01800844 	movi	r6,33
 8009da8:	800cd300 	call	800cd30 <_calloc_r>
 8009dac:	88801315 	stw	r2,76(r17)
 8009db0:	103fec1e 	bne	r2,zero,8009d64 <__alt_data_end+0xfc009d64>
 8009db4:	0005883a 	mov	r2,zero
 8009db8:	003ff306 	br	8009d88 <__alt_data_end+0xfc009d88>
 8009dbc:	01400044 	movi	r5,1
 8009dc0:	2c24983a 	sll	r18,r5,r16
 8009dc4:	8809883a 	mov	r4,r17
 8009dc8:	91800144 	addi	r6,r18,5
 8009dcc:	318d883a 	add	r6,r6,r6
 8009dd0:	318d883a 	add	r6,r6,r6
 8009dd4:	800cd300 	call	800cd30 <_calloc_r>
 8009dd8:	103ff626 	beq	r2,zero,8009db4 <__alt_data_end+0xfc009db4>
 8009ddc:	14000115 	stw	r16,4(r2)
 8009de0:	14800215 	stw	r18,8(r2)
 8009de4:	003fe606 	br	8009d80 <__alt_data_end+0xfc009d80>

08009de8 <_Bfree>:
 8009de8:	28000826 	beq	r5,zero,8009e0c <_Bfree+0x24>
 8009dec:	28c00117 	ldw	r3,4(r5)
 8009df0:	20801317 	ldw	r2,76(r4)
 8009df4:	18c7883a 	add	r3,r3,r3
 8009df8:	18c7883a 	add	r3,r3,r3
 8009dfc:	10c5883a 	add	r2,r2,r3
 8009e00:	10c00017 	ldw	r3,0(r2)
 8009e04:	28c00015 	stw	r3,0(r5)
 8009e08:	11400015 	stw	r5,0(r2)
 8009e0c:	f800283a 	ret

08009e10 <__multadd>:
 8009e10:	defffa04 	addi	sp,sp,-24
 8009e14:	dc000115 	stw	r16,4(sp)
 8009e18:	2c000417 	ldw	r16,16(r5)
 8009e1c:	dc800315 	stw	r18,12(sp)
 8009e20:	dc400215 	stw	r17,8(sp)
 8009e24:	dfc00515 	stw	ra,20(sp)
 8009e28:	dcc00415 	stw	r19,16(sp)
 8009e2c:	2823883a 	mov	r17,r5
 8009e30:	2025883a 	mov	r18,r4
 8009e34:	2a400504 	addi	r9,r5,20
 8009e38:	0015883a 	mov	r10,zero
 8009e3c:	4a000017 	ldw	r8,0(r9)
 8009e40:	4a400104 	addi	r9,r9,4
 8009e44:	52800044 	addi	r10,r10,1
 8009e48:	40ffffcc 	andi	r3,r8,65535
 8009e4c:	1987383a 	mul	r3,r3,r6
 8009e50:	4010d43a 	srli	r8,r8,16
 8009e54:	19cf883a 	add	r7,r3,r7
 8009e58:	4191383a 	mul	r8,r8,r6
 8009e5c:	3816d43a 	srli	r11,r7,16
 8009e60:	38ffffcc 	andi	r3,r7,65535
 8009e64:	5a0f883a 	add	r7,r11,r8
 8009e68:	3810943a 	slli	r8,r7,16
 8009e6c:	380ed43a 	srli	r7,r7,16
 8009e70:	40c7883a 	add	r3,r8,r3
 8009e74:	48ffff15 	stw	r3,-4(r9)
 8009e78:	543ff016 	blt	r10,r16,8009e3c <__alt_data_end+0xfc009e3c>
 8009e7c:	38000926 	beq	r7,zero,8009ea4 <__multadd+0x94>
 8009e80:	88800217 	ldw	r2,8(r17)
 8009e84:	80800f0e 	bge	r16,r2,8009ec4 <__multadd+0xb4>
 8009e88:	80800144 	addi	r2,r16,5
 8009e8c:	1085883a 	add	r2,r2,r2
 8009e90:	1085883a 	add	r2,r2,r2
 8009e94:	8885883a 	add	r2,r17,r2
 8009e98:	11c00015 	stw	r7,0(r2)
 8009e9c:	84000044 	addi	r16,r16,1
 8009ea0:	8c000415 	stw	r16,16(r17)
 8009ea4:	8805883a 	mov	r2,r17
 8009ea8:	dfc00517 	ldw	ra,20(sp)
 8009eac:	dcc00417 	ldw	r19,16(sp)
 8009eb0:	dc800317 	ldw	r18,12(sp)
 8009eb4:	dc400217 	ldw	r17,8(sp)
 8009eb8:	dc000117 	ldw	r16,4(sp)
 8009ebc:	dec00604 	addi	sp,sp,24
 8009ec0:	f800283a 	ret
 8009ec4:	89400117 	ldw	r5,4(r17)
 8009ec8:	9009883a 	mov	r4,r18
 8009ecc:	d9c00015 	stw	r7,0(sp)
 8009ed0:	29400044 	addi	r5,r5,1
 8009ed4:	8009d400 	call	8009d40 <_Balloc>
 8009ed8:	89800417 	ldw	r6,16(r17)
 8009edc:	89400304 	addi	r5,r17,12
 8009ee0:	11000304 	addi	r4,r2,12
 8009ee4:	31800084 	addi	r6,r6,2
 8009ee8:	318d883a 	add	r6,r6,r6
 8009eec:	318d883a 	add	r6,r6,r6
 8009ef0:	1027883a 	mov	r19,r2
 8009ef4:	8003f580 	call	8003f58 <memcpy>
 8009ef8:	89000117 	ldw	r4,4(r17)
 8009efc:	90c01317 	ldw	r3,76(r18)
 8009f00:	d9c00017 	ldw	r7,0(sp)
 8009f04:	2109883a 	add	r4,r4,r4
 8009f08:	2109883a 	add	r4,r4,r4
 8009f0c:	1907883a 	add	r3,r3,r4
 8009f10:	18800017 	ldw	r2,0(r3)
 8009f14:	88800015 	stw	r2,0(r17)
 8009f18:	1c400015 	stw	r17,0(r3)
 8009f1c:	9823883a 	mov	r17,r19
 8009f20:	003fd906 	br	8009e88 <__alt_data_end+0xfc009e88>

08009f24 <__s2b>:
 8009f24:	defff904 	addi	sp,sp,-28
 8009f28:	dc400115 	stw	r17,4(sp)
 8009f2c:	dc000015 	stw	r16,0(sp)
 8009f30:	2023883a 	mov	r17,r4
 8009f34:	2821883a 	mov	r16,r5
 8009f38:	39000204 	addi	r4,r7,8
 8009f3c:	01400244 	movi	r5,9
 8009f40:	dcc00315 	stw	r19,12(sp)
 8009f44:	dc800215 	stw	r18,8(sp)
 8009f48:	dfc00615 	stw	ra,24(sp)
 8009f4c:	dd400515 	stw	r21,20(sp)
 8009f50:	dd000415 	stw	r20,16(sp)
 8009f54:	3825883a 	mov	r18,r7
 8009f58:	3027883a 	mov	r19,r6
 8009f5c:	800e0040 	call	800e004 <__divsi3>
 8009f60:	00c00044 	movi	r3,1
 8009f64:	000b883a 	mov	r5,zero
 8009f68:	1880030e 	bge	r3,r2,8009f78 <__s2b+0x54>
 8009f6c:	18c7883a 	add	r3,r3,r3
 8009f70:	29400044 	addi	r5,r5,1
 8009f74:	18bffd16 	blt	r3,r2,8009f6c <__alt_data_end+0xfc009f6c>
 8009f78:	8809883a 	mov	r4,r17
 8009f7c:	8009d400 	call	8009d40 <_Balloc>
 8009f80:	d8c00717 	ldw	r3,28(sp)
 8009f84:	10c00515 	stw	r3,20(r2)
 8009f88:	00c00044 	movi	r3,1
 8009f8c:	10c00415 	stw	r3,16(r2)
 8009f90:	00c00244 	movi	r3,9
 8009f94:	1cc0210e 	bge	r3,r19,800a01c <__s2b+0xf8>
 8009f98:	80eb883a 	add	r21,r16,r3
 8009f9c:	a829883a 	mov	r20,r21
 8009fa0:	84e1883a 	add	r16,r16,r19
 8009fa4:	a1c00007 	ldb	r7,0(r20)
 8009fa8:	8809883a 	mov	r4,r17
 8009fac:	a5000044 	addi	r20,r20,1
 8009fb0:	100b883a 	mov	r5,r2
 8009fb4:	01800284 	movi	r6,10
 8009fb8:	39fff404 	addi	r7,r7,-48
 8009fbc:	8009e100 	call	8009e10 <__multadd>
 8009fc0:	a43ff81e 	bne	r20,r16,8009fa4 <__alt_data_end+0xfc009fa4>
 8009fc4:	ace1883a 	add	r16,r21,r19
 8009fc8:	843ffe04 	addi	r16,r16,-8
 8009fcc:	9c800a0e 	bge	r19,r18,8009ff8 <__s2b+0xd4>
 8009fd0:	94e5c83a 	sub	r18,r18,r19
 8009fd4:	84a5883a 	add	r18,r16,r18
 8009fd8:	81c00007 	ldb	r7,0(r16)
 8009fdc:	8809883a 	mov	r4,r17
 8009fe0:	84000044 	addi	r16,r16,1
 8009fe4:	100b883a 	mov	r5,r2
 8009fe8:	01800284 	movi	r6,10
 8009fec:	39fff404 	addi	r7,r7,-48
 8009ff0:	8009e100 	call	8009e10 <__multadd>
 8009ff4:	84bff81e 	bne	r16,r18,8009fd8 <__alt_data_end+0xfc009fd8>
 8009ff8:	dfc00617 	ldw	ra,24(sp)
 8009ffc:	dd400517 	ldw	r21,20(sp)
 800a000:	dd000417 	ldw	r20,16(sp)
 800a004:	dcc00317 	ldw	r19,12(sp)
 800a008:	dc800217 	ldw	r18,8(sp)
 800a00c:	dc400117 	ldw	r17,4(sp)
 800a010:	dc000017 	ldw	r16,0(sp)
 800a014:	dec00704 	addi	sp,sp,28
 800a018:	f800283a 	ret
 800a01c:	84000284 	addi	r16,r16,10
 800a020:	1827883a 	mov	r19,r3
 800a024:	003fe906 	br	8009fcc <__alt_data_end+0xfc009fcc>

0800a028 <__hi0bits>:
 800a028:	20bfffec 	andhi	r2,r4,65535
 800a02c:	1000141e 	bne	r2,zero,800a080 <__hi0bits+0x58>
 800a030:	2008943a 	slli	r4,r4,16
 800a034:	00800404 	movi	r2,16
 800a038:	20ffc02c 	andhi	r3,r4,65280
 800a03c:	1800021e 	bne	r3,zero,800a048 <__hi0bits+0x20>
 800a040:	2008923a 	slli	r4,r4,8
 800a044:	10800204 	addi	r2,r2,8
 800a048:	20fc002c 	andhi	r3,r4,61440
 800a04c:	1800021e 	bne	r3,zero,800a058 <__hi0bits+0x30>
 800a050:	2008913a 	slli	r4,r4,4
 800a054:	10800104 	addi	r2,r2,4
 800a058:	20f0002c 	andhi	r3,r4,49152
 800a05c:	1800031e 	bne	r3,zero,800a06c <__hi0bits+0x44>
 800a060:	2109883a 	add	r4,r4,r4
 800a064:	10800084 	addi	r2,r2,2
 800a068:	2109883a 	add	r4,r4,r4
 800a06c:	20000316 	blt	r4,zero,800a07c <__hi0bits+0x54>
 800a070:	2110002c 	andhi	r4,r4,16384
 800a074:	2000041e 	bne	r4,zero,800a088 <__hi0bits+0x60>
 800a078:	00800804 	movi	r2,32
 800a07c:	f800283a 	ret
 800a080:	0005883a 	mov	r2,zero
 800a084:	003fec06 	br	800a038 <__alt_data_end+0xfc00a038>
 800a088:	10800044 	addi	r2,r2,1
 800a08c:	f800283a 	ret

0800a090 <__lo0bits>:
 800a090:	20c00017 	ldw	r3,0(r4)
 800a094:	188001cc 	andi	r2,r3,7
 800a098:	10000826 	beq	r2,zero,800a0bc <__lo0bits+0x2c>
 800a09c:	1880004c 	andi	r2,r3,1
 800a0a0:	1000211e 	bne	r2,zero,800a128 <__lo0bits+0x98>
 800a0a4:	1880008c 	andi	r2,r3,2
 800a0a8:	1000211e 	bne	r2,zero,800a130 <__lo0bits+0xa0>
 800a0ac:	1806d0ba 	srli	r3,r3,2
 800a0b0:	00800084 	movi	r2,2
 800a0b4:	20c00015 	stw	r3,0(r4)
 800a0b8:	f800283a 	ret
 800a0bc:	18bfffcc 	andi	r2,r3,65535
 800a0c0:	10001326 	beq	r2,zero,800a110 <__lo0bits+0x80>
 800a0c4:	0005883a 	mov	r2,zero
 800a0c8:	19403fcc 	andi	r5,r3,255
 800a0cc:	2800021e 	bne	r5,zero,800a0d8 <__lo0bits+0x48>
 800a0d0:	1806d23a 	srli	r3,r3,8
 800a0d4:	10800204 	addi	r2,r2,8
 800a0d8:	194003cc 	andi	r5,r3,15
 800a0dc:	2800021e 	bne	r5,zero,800a0e8 <__lo0bits+0x58>
 800a0e0:	1806d13a 	srli	r3,r3,4
 800a0e4:	10800104 	addi	r2,r2,4
 800a0e8:	194000cc 	andi	r5,r3,3
 800a0ec:	2800021e 	bne	r5,zero,800a0f8 <__lo0bits+0x68>
 800a0f0:	1806d0ba 	srli	r3,r3,2
 800a0f4:	10800084 	addi	r2,r2,2
 800a0f8:	1940004c 	andi	r5,r3,1
 800a0fc:	2800081e 	bne	r5,zero,800a120 <__lo0bits+0x90>
 800a100:	1806d07a 	srli	r3,r3,1
 800a104:	1800051e 	bne	r3,zero,800a11c <__lo0bits+0x8c>
 800a108:	00800804 	movi	r2,32
 800a10c:	f800283a 	ret
 800a110:	1806d43a 	srli	r3,r3,16
 800a114:	00800404 	movi	r2,16
 800a118:	003feb06 	br	800a0c8 <__alt_data_end+0xfc00a0c8>
 800a11c:	10800044 	addi	r2,r2,1
 800a120:	20c00015 	stw	r3,0(r4)
 800a124:	f800283a 	ret
 800a128:	0005883a 	mov	r2,zero
 800a12c:	f800283a 	ret
 800a130:	1806d07a 	srli	r3,r3,1
 800a134:	00800044 	movi	r2,1
 800a138:	20c00015 	stw	r3,0(r4)
 800a13c:	f800283a 	ret

0800a140 <__i2b>:
 800a140:	defffd04 	addi	sp,sp,-12
 800a144:	dc000015 	stw	r16,0(sp)
 800a148:	04000044 	movi	r16,1
 800a14c:	dc400115 	stw	r17,4(sp)
 800a150:	2823883a 	mov	r17,r5
 800a154:	800b883a 	mov	r5,r16
 800a158:	dfc00215 	stw	ra,8(sp)
 800a15c:	8009d400 	call	8009d40 <_Balloc>
 800a160:	14400515 	stw	r17,20(r2)
 800a164:	14000415 	stw	r16,16(r2)
 800a168:	dfc00217 	ldw	ra,8(sp)
 800a16c:	dc400117 	ldw	r17,4(sp)
 800a170:	dc000017 	ldw	r16,0(sp)
 800a174:	dec00304 	addi	sp,sp,12
 800a178:	f800283a 	ret

0800a17c <__multiply>:
 800a17c:	defffa04 	addi	sp,sp,-24
 800a180:	dcc00315 	stw	r19,12(sp)
 800a184:	dc800215 	stw	r18,8(sp)
 800a188:	2cc00417 	ldw	r19,16(r5)
 800a18c:	34800417 	ldw	r18,16(r6)
 800a190:	dd000415 	stw	r20,16(sp)
 800a194:	dc400115 	stw	r17,4(sp)
 800a198:	dfc00515 	stw	ra,20(sp)
 800a19c:	dc000015 	stw	r16,0(sp)
 800a1a0:	2829883a 	mov	r20,r5
 800a1a4:	3023883a 	mov	r17,r6
 800a1a8:	9c807016 	blt	r19,r18,800a36c <__multiply+0x1f0>
 800a1ac:	9005883a 	mov	r2,r18
 800a1b0:	9825883a 	mov	r18,r19
 800a1b4:	1027883a 	mov	r19,r2
 800a1b8:	a0800217 	ldw	r2,8(r20)
 800a1bc:	94e1883a 	add	r16,r18,r19
 800a1c0:	a1400117 	ldw	r5,4(r20)
 800a1c4:	1400010e 	bge	r2,r16,800a1cc <__multiply+0x50>
 800a1c8:	29400044 	addi	r5,r5,1
 800a1cc:	8009d400 	call	8009d40 <_Balloc>
 800a1d0:	8417883a 	add	r11,r16,r16
 800a1d4:	13000504 	addi	r12,r2,20
 800a1d8:	5ad7883a 	add	r11,r11,r11
 800a1dc:	62d7883a 	add	r11,r12,r11
 800a1e0:	6007883a 	mov	r3,r12
 800a1e4:	62c0032e 	bgeu	r12,r11,800a1f4 <__multiply+0x78>
 800a1e8:	18000015 	stw	zero,0(r3)
 800a1ec:	18c00104 	addi	r3,r3,4
 800a1f0:	1afffd36 	bltu	r3,r11,800a1e8 <__alt_data_end+0xfc00a1e8>
 800a1f4:	9ce7883a 	add	r19,r19,r19
 800a1f8:	94a5883a 	add	r18,r18,r18
 800a1fc:	89800504 	addi	r6,r17,20
 800a200:	9ce7883a 	add	r19,r19,r19
 800a204:	a3800504 	addi	r14,r20,20
 800a208:	94a5883a 	add	r18,r18,r18
 800a20c:	34db883a 	add	r13,r6,r19
 800a210:	7495883a 	add	r10,r14,r18
 800a214:	3340422e 	bgeu	r6,r13,800a320 <__multiply+0x1a4>
 800a218:	34400017 	ldw	r17,0(r6)
 800a21c:	8cbfffcc 	andi	r18,r17,65535
 800a220:	90001b26 	beq	r18,zero,800a290 <__multiply+0x114>
 800a224:	6013883a 	mov	r9,r12
 800a228:	7023883a 	mov	r17,r14
 800a22c:	0011883a 	mov	r8,zero
 800a230:	88c00017 	ldw	r3,0(r17)
 800a234:	4bc00017 	ldw	r15,0(r9)
 800a238:	8c400104 	addi	r17,r17,4
 800a23c:	19ffffcc 	andi	r7,r3,65535
 800a240:	3c8f383a 	mul	r7,r7,r18
 800a244:	1808d43a 	srli	r4,r3,16
 800a248:	797fffcc 	andi	r5,r15,65535
 800a24c:	29cb883a 	add	r5,r5,r7
 800a250:	2a0b883a 	add	r5,r5,r8
 800a254:	2489383a 	mul	r4,r4,r18
 800a258:	7806d43a 	srli	r3,r15,16
 800a25c:	2810d43a 	srli	r8,r5,16
 800a260:	297fffcc 	andi	r5,r5,65535
 800a264:	1907883a 	add	r3,r3,r4
 800a268:	1a07883a 	add	r3,r3,r8
 800a26c:	1808943a 	slli	r4,r3,16
 800a270:	480f883a 	mov	r7,r9
 800a274:	1810d43a 	srli	r8,r3,16
 800a278:	214ab03a 	or	r5,r4,r5
 800a27c:	49400015 	stw	r5,0(r9)
 800a280:	4a400104 	addi	r9,r9,4
 800a284:	8abfea36 	bltu	r17,r10,800a230 <__alt_data_end+0xfc00a230>
 800a288:	3a000115 	stw	r8,4(r7)
 800a28c:	34400017 	ldw	r17,0(r6)
 800a290:	8822d43a 	srli	r17,r17,16
 800a294:	88001f26 	beq	r17,zero,800a314 <__multiply+0x198>
 800a298:	60c00017 	ldw	r3,0(r12)
 800a29c:	7013883a 	mov	r9,r14
 800a2a0:	601f883a 	mov	r15,r12
 800a2a4:	1811883a 	mov	r8,r3
 800a2a8:	6027883a 	mov	r19,r12
 800a2ac:	000f883a 	mov	r7,zero
 800a2b0:	00000106 	br	800a2b8 <__multiply+0x13c>
 800a2b4:	9027883a 	mov	r19,r18
 800a2b8:	4940000b 	ldhu	r5,0(r9)
 800a2bc:	4010d43a 	srli	r8,r8,16
 800a2c0:	193fffcc 	andi	r4,r3,65535
 800a2c4:	2c4b383a 	mul	r5,r5,r17
 800a2c8:	7bc00104 	addi	r15,r15,4
 800a2cc:	4a400104 	addi	r9,r9,4
 800a2d0:	2a0b883a 	add	r5,r5,r8
 800a2d4:	29cb883a 	add	r5,r5,r7
 800a2d8:	2806943a 	slli	r3,r5,16
 800a2dc:	9c800104 	addi	r18,r19,4
 800a2e0:	280ad43a 	srli	r5,r5,16
 800a2e4:	1908b03a 	or	r4,r3,r4
 800a2e8:	793fff15 	stw	r4,-4(r15)
 800a2ec:	48ffff17 	ldw	r3,-4(r9)
 800a2f0:	92000017 	ldw	r8,0(r18)
 800a2f4:	1806d43a 	srli	r3,r3,16
 800a2f8:	413fffcc 	andi	r4,r8,65535
 800a2fc:	1c47383a 	mul	r3,r3,r17
 800a300:	1907883a 	add	r3,r3,r4
 800a304:	1947883a 	add	r3,r3,r5
 800a308:	180ed43a 	srli	r7,r3,16
 800a30c:	4abfe936 	bltu	r9,r10,800a2b4 <__alt_data_end+0xfc00a2b4>
 800a310:	98c00115 	stw	r3,4(r19)
 800a314:	31800104 	addi	r6,r6,4
 800a318:	63000104 	addi	r12,r12,4
 800a31c:	337fbe36 	bltu	r6,r13,800a218 <__alt_data_end+0xfc00a218>
 800a320:	0400090e 	bge	zero,r16,800a348 <__multiply+0x1cc>
 800a324:	58ffff17 	ldw	r3,-4(r11)
 800a328:	5affff04 	addi	r11,r11,-4
 800a32c:	18000326 	beq	r3,zero,800a33c <__multiply+0x1c0>
 800a330:	00000506 	br	800a348 <__multiply+0x1cc>
 800a334:	58c00017 	ldw	r3,0(r11)
 800a338:	1800031e 	bne	r3,zero,800a348 <__multiply+0x1cc>
 800a33c:	843fffc4 	addi	r16,r16,-1
 800a340:	5affff04 	addi	r11,r11,-4
 800a344:	803ffb1e 	bne	r16,zero,800a334 <__alt_data_end+0xfc00a334>
 800a348:	14000415 	stw	r16,16(r2)
 800a34c:	dfc00517 	ldw	ra,20(sp)
 800a350:	dd000417 	ldw	r20,16(sp)
 800a354:	dcc00317 	ldw	r19,12(sp)
 800a358:	dc800217 	ldw	r18,8(sp)
 800a35c:	dc400117 	ldw	r17,4(sp)
 800a360:	dc000017 	ldw	r16,0(sp)
 800a364:	dec00604 	addi	sp,sp,24
 800a368:	f800283a 	ret
 800a36c:	3029883a 	mov	r20,r6
 800a370:	2823883a 	mov	r17,r5
 800a374:	003f9006 	br	800a1b8 <__alt_data_end+0xfc00a1b8>

0800a378 <__pow5mult>:
 800a378:	defffa04 	addi	sp,sp,-24
 800a37c:	dcc00315 	stw	r19,12(sp)
 800a380:	dc800215 	stw	r18,8(sp)
 800a384:	dc000015 	stw	r16,0(sp)
 800a388:	dfc00515 	stw	ra,20(sp)
 800a38c:	dd000415 	stw	r20,16(sp)
 800a390:	dc400115 	stw	r17,4(sp)
 800a394:	308000cc 	andi	r2,r6,3
 800a398:	3021883a 	mov	r16,r6
 800a39c:	2027883a 	mov	r19,r4
 800a3a0:	2825883a 	mov	r18,r5
 800a3a4:	10002e1e 	bne	r2,zero,800a460 <__pow5mult+0xe8>
 800a3a8:	8021d0ba 	srai	r16,r16,2
 800a3ac:	80001a26 	beq	r16,zero,800a418 <__pow5mult+0xa0>
 800a3b0:	9c401217 	ldw	r17,72(r19)
 800a3b4:	8800061e 	bne	r17,zero,800a3d0 <__pow5mult+0x58>
 800a3b8:	00003406 	br	800a48c <__pow5mult+0x114>
 800a3bc:	8021d07a 	srai	r16,r16,1
 800a3c0:	80001526 	beq	r16,zero,800a418 <__pow5mult+0xa0>
 800a3c4:	88800017 	ldw	r2,0(r17)
 800a3c8:	10001c26 	beq	r2,zero,800a43c <__pow5mult+0xc4>
 800a3cc:	1023883a 	mov	r17,r2
 800a3d0:	80c0004c 	andi	r3,r16,1
 800a3d4:	183ff926 	beq	r3,zero,800a3bc <__alt_data_end+0xfc00a3bc>
 800a3d8:	900b883a 	mov	r5,r18
 800a3dc:	880d883a 	mov	r6,r17
 800a3e0:	9809883a 	mov	r4,r19
 800a3e4:	800a17c0 	call	800a17c <__multiply>
 800a3e8:	90001b26 	beq	r18,zero,800a458 <__pow5mult+0xe0>
 800a3ec:	91c00117 	ldw	r7,4(r18)
 800a3f0:	98c01317 	ldw	r3,76(r19)
 800a3f4:	8021d07a 	srai	r16,r16,1
 800a3f8:	39cf883a 	add	r7,r7,r7
 800a3fc:	39cf883a 	add	r7,r7,r7
 800a400:	19c7883a 	add	r3,r3,r7
 800a404:	19000017 	ldw	r4,0(r3)
 800a408:	91000015 	stw	r4,0(r18)
 800a40c:	1c800015 	stw	r18,0(r3)
 800a410:	1025883a 	mov	r18,r2
 800a414:	803feb1e 	bne	r16,zero,800a3c4 <__alt_data_end+0xfc00a3c4>
 800a418:	9005883a 	mov	r2,r18
 800a41c:	dfc00517 	ldw	ra,20(sp)
 800a420:	dd000417 	ldw	r20,16(sp)
 800a424:	dcc00317 	ldw	r19,12(sp)
 800a428:	dc800217 	ldw	r18,8(sp)
 800a42c:	dc400117 	ldw	r17,4(sp)
 800a430:	dc000017 	ldw	r16,0(sp)
 800a434:	dec00604 	addi	sp,sp,24
 800a438:	f800283a 	ret
 800a43c:	9809883a 	mov	r4,r19
 800a440:	880b883a 	mov	r5,r17
 800a444:	880d883a 	mov	r6,r17
 800a448:	800a17c0 	call	800a17c <__multiply>
 800a44c:	88800015 	stw	r2,0(r17)
 800a450:	10000015 	stw	zero,0(r2)
 800a454:	003fdd06 	br	800a3cc <__alt_data_end+0xfc00a3cc>
 800a458:	1025883a 	mov	r18,r2
 800a45c:	003fd706 	br	800a3bc <__alt_data_end+0xfc00a3bc>
 800a460:	10bfffc4 	addi	r2,r2,-1
 800a464:	1085883a 	add	r2,r2,r2
 800a468:	00c200b4 	movhi	r3,2050
 800a46c:	18f69504 	addi	r3,r3,-9644
 800a470:	1085883a 	add	r2,r2,r2
 800a474:	1885883a 	add	r2,r3,r2
 800a478:	11800017 	ldw	r6,0(r2)
 800a47c:	000f883a 	mov	r7,zero
 800a480:	8009e100 	call	8009e10 <__multadd>
 800a484:	1025883a 	mov	r18,r2
 800a488:	003fc706 	br	800a3a8 <__alt_data_end+0xfc00a3a8>
 800a48c:	05000044 	movi	r20,1
 800a490:	9809883a 	mov	r4,r19
 800a494:	a00b883a 	mov	r5,r20
 800a498:	8009d400 	call	8009d40 <_Balloc>
 800a49c:	1023883a 	mov	r17,r2
 800a4a0:	00809c44 	movi	r2,625
 800a4a4:	88800515 	stw	r2,20(r17)
 800a4a8:	8d000415 	stw	r20,16(r17)
 800a4ac:	9c401215 	stw	r17,72(r19)
 800a4b0:	88000015 	stw	zero,0(r17)
 800a4b4:	003fc606 	br	800a3d0 <__alt_data_end+0xfc00a3d0>

0800a4b8 <__lshift>:
 800a4b8:	defff904 	addi	sp,sp,-28
 800a4bc:	dd000415 	stw	r20,16(sp)
 800a4c0:	dcc00315 	stw	r19,12(sp)
 800a4c4:	3029d17a 	srai	r20,r6,5
 800a4c8:	2cc00417 	ldw	r19,16(r5)
 800a4cc:	28800217 	ldw	r2,8(r5)
 800a4d0:	dd400515 	stw	r21,20(sp)
 800a4d4:	a4e7883a 	add	r19,r20,r19
 800a4d8:	dc800215 	stw	r18,8(sp)
 800a4dc:	dc400115 	stw	r17,4(sp)
 800a4e0:	dc000015 	stw	r16,0(sp)
 800a4e4:	dfc00615 	stw	ra,24(sp)
 800a4e8:	9c000044 	addi	r16,r19,1
 800a4ec:	2823883a 	mov	r17,r5
 800a4f0:	302b883a 	mov	r21,r6
 800a4f4:	2025883a 	mov	r18,r4
 800a4f8:	29400117 	ldw	r5,4(r5)
 800a4fc:	1400030e 	bge	r2,r16,800a50c <__lshift+0x54>
 800a500:	1085883a 	add	r2,r2,r2
 800a504:	29400044 	addi	r5,r5,1
 800a508:	143ffd16 	blt	r2,r16,800a500 <__alt_data_end+0xfc00a500>
 800a50c:	9009883a 	mov	r4,r18
 800a510:	8009d400 	call	8009d40 <_Balloc>
 800a514:	11c00504 	addi	r7,r2,20
 800a518:	0500090e 	bge	zero,r20,800a540 <__lshift+0x88>
 800a51c:	3811883a 	mov	r8,r7
 800a520:	0007883a 	mov	r3,zero
 800a524:	40000015 	stw	zero,0(r8)
 800a528:	18c00044 	addi	r3,r3,1
 800a52c:	42000104 	addi	r8,r8,4
 800a530:	1d3ffc1e 	bne	r3,r20,800a524 <__alt_data_end+0xfc00a524>
 800a534:	18c7883a 	add	r3,r3,r3
 800a538:	18c7883a 	add	r3,r3,r3
 800a53c:	38cf883a 	add	r7,r7,r3
 800a540:	89000417 	ldw	r4,16(r17)
 800a544:	88c00504 	addi	r3,r17,20
 800a548:	a98007cc 	andi	r6,r21,31
 800a54c:	2109883a 	add	r4,r4,r4
 800a550:	2109883a 	add	r4,r4,r4
 800a554:	1909883a 	add	r4,r3,r4
 800a558:	30002326 	beq	r6,zero,800a5e8 <__lshift+0x130>
 800a55c:	01400804 	movi	r5,32
 800a560:	298bc83a 	sub	r5,r5,r6
 800a564:	0013883a 	mov	r9,zero
 800a568:	1a000017 	ldw	r8,0(r3)
 800a56c:	3815883a 	mov	r10,r7
 800a570:	39c00104 	addi	r7,r7,4
 800a574:	4190983a 	sll	r8,r8,r6
 800a578:	18c00104 	addi	r3,r3,4
 800a57c:	4a10b03a 	or	r8,r9,r8
 800a580:	3a3fff15 	stw	r8,-4(r7)
 800a584:	1a3fff17 	ldw	r8,-4(r3)
 800a588:	4152d83a 	srl	r9,r8,r5
 800a58c:	193ff636 	bltu	r3,r4,800a568 <__alt_data_end+0xfc00a568>
 800a590:	52400115 	stw	r9,4(r10)
 800a594:	48000126 	beq	r9,zero,800a59c <__lshift+0xe4>
 800a598:	9c000084 	addi	r16,r19,2
 800a59c:	89000117 	ldw	r4,4(r17)
 800a5a0:	90c01317 	ldw	r3,76(r18)
 800a5a4:	843fffc4 	addi	r16,r16,-1
 800a5a8:	2109883a 	add	r4,r4,r4
 800a5ac:	2109883a 	add	r4,r4,r4
 800a5b0:	1907883a 	add	r3,r3,r4
 800a5b4:	19000017 	ldw	r4,0(r3)
 800a5b8:	14000415 	stw	r16,16(r2)
 800a5bc:	89000015 	stw	r4,0(r17)
 800a5c0:	1c400015 	stw	r17,0(r3)
 800a5c4:	dfc00617 	ldw	ra,24(sp)
 800a5c8:	dd400517 	ldw	r21,20(sp)
 800a5cc:	dd000417 	ldw	r20,16(sp)
 800a5d0:	dcc00317 	ldw	r19,12(sp)
 800a5d4:	dc800217 	ldw	r18,8(sp)
 800a5d8:	dc400117 	ldw	r17,4(sp)
 800a5dc:	dc000017 	ldw	r16,0(sp)
 800a5e0:	dec00704 	addi	sp,sp,28
 800a5e4:	f800283a 	ret
 800a5e8:	19400017 	ldw	r5,0(r3)
 800a5ec:	39c00104 	addi	r7,r7,4
 800a5f0:	18c00104 	addi	r3,r3,4
 800a5f4:	397fff15 	stw	r5,-4(r7)
 800a5f8:	193ffb36 	bltu	r3,r4,800a5e8 <__alt_data_end+0xfc00a5e8>
 800a5fc:	003fe706 	br	800a59c <__alt_data_end+0xfc00a59c>

0800a600 <__mcmp>:
 800a600:	20800417 	ldw	r2,16(r4)
 800a604:	28c00417 	ldw	r3,16(r5)
 800a608:	10c5c83a 	sub	r2,r2,r3
 800a60c:	1000111e 	bne	r2,zero,800a654 <__mcmp+0x54>
 800a610:	18c7883a 	add	r3,r3,r3
 800a614:	18c7883a 	add	r3,r3,r3
 800a618:	21000504 	addi	r4,r4,20
 800a61c:	29400504 	addi	r5,r5,20
 800a620:	20c5883a 	add	r2,r4,r3
 800a624:	28cb883a 	add	r5,r5,r3
 800a628:	00000106 	br	800a630 <__mcmp+0x30>
 800a62c:	20800a2e 	bgeu	r4,r2,800a658 <__mcmp+0x58>
 800a630:	10bfff04 	addi	r2,r2,-4
 800a634:	297fff04 	addi	r5,r5,-4
 800a638:	11800017 	ldw	r6,0(r2)
 800a63c:	28c00017 	ldw	r3,0(r5)
 800a640:	30fffa26 	beq	r6,r3,800a62c <__alt_data_end+0xfc00a62c>
 800a644:	30c00236 	bltu	r6,r3,800a650 <__mcmp+0x50>
 800a648:	00800044 	movi	r2,1
 800a64c:	f800283a 	ret
 800a650:	00bfffc4 	movi	r2,-1
 800a654:	f800283a 	ret
 800a658:	0005883a 	mov	r2,zero
 800a65c:	f800283a 	ret

0800a660 <__mdiff>:
 800a660:	defffb04 	addi	sp,sp,-20
 800a664:	dc000015 	stw	r16,0(sp)
 800a668:	2821883a 	mov	r16,r5
 800a66c:	dcc00315 	stw	r19,12(sp)
 800a670:	300b883a 	mov	r5,r6
 800a674:	2027883a 	mov	r19,r4
 800a678:	8009883a 	mov	r4,r16
 800a67c:	dc800215 	stw	r18,8(sp)
 800a680:	dfc00415 	stw	ra,16(sp)
 800a684:	dc400115 	stw	r17,4(sp)
 800a688:	3025883a 	mov	r18,r6
 800a68c:	800a6000 	call	800a600 <__mcmp>
 800a690:	10005226 	beq	r2,zero,800a7dc <__mdiff+0x17c>
 800a694:	10004c16 	blt	r2,zero,800a7c8 <__mdiff+0x168>
 800a698:	0023883a 	mov	r17,zero
 800a69c:	81400117 	ldw	r5,4(r16)
 800a6a0:	9809883a 	mov	r4,r19
 800a6a4:	8009d400 	call	8009d40 <_Balloc>
 800a6a8:	83400417 	ldw	r13,16(r16)
 800a6ac:	93800417 	ldw	r14,16(r18)
 800a6b0:	81000504 	addi	r4,r16,20
 800a6b4:	6b59883a 	add	r12,r13,r13
 800a6b8:	739d883a 	add	r14,r14,r14
 800a6bc:	6319883a 	add	r12,r12,r12
 800a6c0:	91800504 	addi	r6,r18,20
 800a6c4:	739d883a 	add	r14,r14,r14
 800a6c8:	14400315 	stw	r17,12(r2)
 800a6cc:	2319883a 	add	r12,r4,r12
 800a6d0:	339d883a 	add	r14,r6,r14
 800a6d4:	12400504 	addi	r9,r2,20
 800a6d8:	0007883a 	mov	r3,zero
 800a6dc:	22000017 	ldw	r8,0(r4)
 800a6e0:	32800017 	ldw	r10,0(r6)
 800a6e4:	4ac00104 	addi	r11,r9,4
 800a6e8:	41ffffcc 	andi	r7,r8,65535
 800a6ec:	38c7883a 	add	r3,r7,r3
 800a6f0:	51ffffcc 	andi	r7,r10,65535
 800a6f4:	19cfc83a 	sub	r7,r3,r7
 800a6f8:	4010d43a 	srli	r8,r8,16
 800a6fc:	5014d43a 	srli	r10,r10,16
 800a700:	3807d43a 	srai	r3,r7,16
 800a704:	39ffffcc 	andi	r7,r7,65535
 800a708:	4291c83a 	sub	r8,r8,r10
 800a70c:	40c7883a 	add	r3,r8,r3
 800a710:	1810943a 	slli	r8,r3,16
 800a714:	31800104 	addi	r6,r6,4
 800a718:	21000104 	addi	r4,r4,4
 800a71c:	41ceb03a 	or	r7,r8,r7
 800a720:	49c00015 	stw	r7,0(r9)
 800a724:	1807d43a 	srai	r3,r3,16
 800a728:	580b883a 	mov	r5,r11
 800a72c:	5813883a 	mov	r9,r11
 800a730:	33bfea36 	bltu	r6,r14,800a6dc <__alt_data_end+0xfc00a6dc>
 800a734:	2011883a 	mov	r8,r4
 800a738:	2300152e 	bgeu	r4,r12,800a790 <__mdiff+0x130>
 800a73c:	21400017 	ldw	r5,0(r4)
 800a740:	4a400104 	addi	r9,r9,4
 800a744:	21000104 	addi	r4,r4,4
 800a748:	29ffffcc 	andi	r7,r5,65535
 800a74c:	38c7883a 	add	r3,r7,r3
 800a750:	280ad43a 	srli	r5,r5,16
 800a754:	180dd43a 	srai	r6,r3,16
 800a758:	19ffffcc 	andi	r7,r3,65535
 800a75c:	3147883a 	add	r3,r6,r5
 800a760:	180a943a 	slli	r5,r3,16
 800a764:	1807d43a 	srai	r3,r3,16
 800a768:	29ceb03a 	or	r7,r5,r7
 800a76c:	49ffff15 	stw	r7,-4(r9)
 800a770:	233ff236 	bltu	r4,r12,800a73c <__alt_data_end+0xfc00a73c>
 800a774:	0206303a 	nor	r3,zero,r8
 800a778:	1b07883a 	add	r3,r3,r12
 800a77c:	1806d0ba 	srli	r3,r3,2
 800a780:	18c00044 	addi	r3,r3,1
 800a784:	18c7883a 	add	r3,r3,r3
 800a788:	18c7883a 	add	r3,r3,r3
 800a78c:	58cb883a 	add	r5,r11,r3
 800a790:	28ffff04 	addi	r3,r5,-4
 800a794:	3800041e 	bne	r7,zero,800a7a8 <__mdiff+0x148>
 800a798:	18ffff04 	addi	r3,r3,-4
 800a79c:	19000017 	ldw	r4,0(r3)
 800a7a0:	6b7fffc4 	addi	r13,r13,-1
 800a7a4:	203ffc26 	beq	r4,zero,800a798 <__alt_data_end+0xfc00a798>
 800a7a8:	13400415 	stw	r13,16(r2)
 800a7ac:	dfc00417 	ldw	ra,16(sp)
 800a7b0:	dcc00317 	ldw	r19,12(sp)
 800a7b4:	dc800217 	ldw	r18,8(sp)
 800a7b8:	dc400117 	ldw	r17,4(sp)
 800a7bc:	dc000017 	ldw	r16,0(sp)
 800a7c0:	dec00504 	addi	sp,sp,20
 800a7c4:	f800283a 	ret
 800a7c8:	8005883a 	mov	r2,r16
 800a7cc:	04400044 	movi	r17,1
 800a7d0:	9021883a 	mov	r16,r18
 800a7d4:	1025883a 	mov	r18,r2
 800a7d8:	003fb006 	br	800a69c <__alt_data_end+0xfc00a69c>
 800a7dc:	9809883a 	mov	r4,r19
 800a7e0:	000b883a 	mov	r5,zero
 800a7e4:	8009d400 	call	8009d40 <_Balloc>
 800a7e8:	00c00044 	movi	r3,1
 800a7ec:	10c00415 	stw	r3,16(r2)
 800a7f0:	10000515 	stw	zero,20(r2)
 800a7f4:	003fed06 	br	800a7ac <__alt_data_end+0xfc00a7ac>

0800a7f8 <__ulp>:
 800a7f8:	295ffc2c 	andhi	r5,r5,32752
 800a7fc:	00bf3034 	movhi	r2,64704
 800a800:	2887883a 	add	r3,r5,r2
 800a804:	00c0020e 	bge	zero,r3,800a810 <__ulp+0x18>
 800a808:	0005883a 	mov	r2,zero
 800a80c:	f800283a 	ret
 800a810:	00c7c83a 	sub	r3,zero,r3
 800a814:	180bd53a 	srai	r5,r3,20
 800a818:	008004c4 	movi	r2,19
 800a81c:	11400a0e 	bge	r2,r5,800a848 <__ulp+0x50>
 800a820:	00800c84 	movi	r2,50
 800a824:	0007883a 	mov	r3,zero
 800a828:	11400516 	blt	r2,r5,800a840 <__ulp+0x48>
 800a82c:	00800cc4 	movi	r2,51
 800a830:	114bc83a 	sub	r5,r2,r5
 800a834:	00800044 	movi	r2,1
 800a838:	1144983a 	sll	r2,r2,r5
 800a83c:	f800283a 	ret
 800a840:	00800044 	movi	r2,1
 800a844:	f800283a 	ret
 800a848:	00800234 	movhi	r2,8
 800a84c:	1147d83a 	sra	r3,r2,r5
 800a850:	0005883a 	mov	r2,zero
 800a854:	f800283a 	ret

0800a858 <__b2d>:
 800a858:	defffa04 	addi	sp,sp,-24
 800a85c:	dc000015 	stw	r16,0(sp)
 800a860:	24000417 	ldw	r16,16(r4)
 800a864:	dc400115 	stw	r17,4(sp)
 800a868:	24400504 	addi	r17,r4,20
 800a86c:	8421883a 	add	r16,r16,r16
 800a870:	8421883a 	add	r16,r16,r16
 800a874:	8c21883a 	add	r16,r17,r16
 800a878:	dc800215 	stw	r18,8(sp)
 800a87c:	84bfff17 	ldw	r18,-4(r16)
 800a880:	dd000415 	stw	r20,16(sp)
 800a884:	dcc00315 	stw	r19,12(sp)
 800a888:	9009883a 	mov	r4,r18
 800a88c:	2829883a 	mov	r20,r5
 800a890:	dfc00515 	stw	ra,20(sp)
 800a894:	800a0280 	call	800a028 <__hi0bits>
 800a898:	00c00804 	movi	r3,32
 800a89c:	1887c83a 	sub	r3,r3,r2
 800a8a0:	a0c00015 	stw	r3,0(r20)
 800a8a4:	00c00284 	movi	r3,10
 800a8a8:	84ffff04 	addi	r19,r16,-4
 800a8ac:	18801216 	blt	r3,r2,800a8f8 <__b2d+0xa0>
 800a8b0:	014002c4 	movi	r5,11
 800a8b4:	2889c83a 	sub	r4,r5,r2
 800a8b8:	9106d83a 	srl	r3,r18,r4
 800a8bc:	18cffc34 	orhi	r3,r3,16368
 800a8c0:	8cc0282e 	bgeu	r17,r19,800a964 <__b2d+0x10c>
 800a8c4:	817ffe17 	ldw	r5,-8(r16)
 800a8c8:	290ad83a 	srl	r5,r5,r4
 800a8cc:	10800544 	addi	r2,r2,21
 800a8d0:	9084983a 	sll	r2,r18,r2
 800a8d4:	2884b03a 	or	r2,r5,r2
 800a8d8:	dfc00517 	ldw	ra,20(sp)
 800a8dc:	dd000417 	ldw	r20,16(sp)
 800a8e0:	dcc00317 	ldw	r19,12(sp)
 800a8e4:	dc800217 	ldw	r18,8(sp)
 800a8e8:	dc400117 	ldw	r17,4(sp)
 800a8ec:	dc000017 	ldw	r16,0(sp)
 800a8f0:	dec00604 	addi	sp,sp,24
 800a8f4:	f800283a 	ret
 800a8f8:	113ffd44 	addi	r4,r2,-11
 800a8fc:	8cc00f2e 	bgeu	r17,r19,800a93c <__b2d+0xe4>
 800a900:	81bffe04 	addi	r6,r16,-8
 800a904:	817ffe17 	ldw	r5,-8(r16)
 800a908:	20001326 	beq	r4,zero,800a958 <__b2d+0x100>
 800a90c:	00c00ac4 	movi	r3,43
 800a910:	1885c83a 	sub	r2,r3,r2
 800a914:	2886d83a 	srl	r3,r5,r2
 800a918:	9124983a 	sll	r18,r18,r4
 800a91c:	90e4b03a 	or	r18,r18,r3
 800a920:	90cffc34 	orhi	r3,r18,16368
 800a924:	8980112e 	bgeu	r17,r6,800a96c <__b2d+0x114>
 800a928:	81bffd17 	ldw	r6,-12(r16)
 800a92c:	308cd83a 	srl	r6,r6,r2
 800a930:	2904983a 	sll	r2,r5,r4
 800a934:	1184b03a 	or	r2,r2,r6
 800a938:	003fe706 	br	800a8d8 <__alt_data_end+0xfc00a8d8>
 800a93c:	20000526 	beq	r4,zero,800a954 <__b2d+0xfc>
 800a940:	9124983a 	sll	r18,r18,r4
 800a944:	000d883a 	mov	r6,zero
 800a948:	000b883a 	mov	r5,zero
 800a94c:	90cffc34 	orhi	r3,r18,16368
 800a950:	003ff706 	br	800a930 <__alt_data_end+0xfc00a930>
 800a954:	000b883a 	mov	r5,zero
 800a958:	90cffc34 	orhi	r3,r18,16368
 800a95c:	2805883a 	mov	r2,r5
 800a960:	003fdd06 	br	800a8d8 <__alt_data_end+0xfc00a8d8>
 800a964:	000b883a 	mov	r5,zero
 800a968:	003fd806 	br	800a8cc <__alt_data_end+0xfc00a8cc>
 800a96c:	000d883a 	mov	r6,zero
 800a970:	003fef06 	br	800a930 <__alt_data_end+0xfc00a930>

0800a974 <__d2b>:
 800a974:	defff704 	addi	sp,sp,-36
 800a978:	dc000215 	stw	r16,8(sp)
 800a97c:	3021883a 	mov	r16,r6
 800a980:	dc400315 	stw	r17,12(sp)
 800a984:	8022907a 	slli	r17,r16,1
 800a988:	dd400715 	stw	r21,28(sp)
 800a98c:	282b883a 	mov	r21,r5
 800a990:	01400044 	movi	r5,1
 800a994:	dd000615 	stw	r20,24(sp)
 800a998:	dcc00515 	stw	r19,20(sp)
 800a99c:	dc800415 	stw	r18,16(sp)
 800a9a0:	dfc00815 	stw	ra,32(sp)
 800a9a4:	3829883a 	mov	r20,r7
 800a9a8:	dc800917 	ldw	r18,36(sp)
 800a9ac:	8822d57a 	srli	r17,r17,21
 800a9b0:	8009d400 	call	8009d40 <_Balloc>
 800a9b4:	1027883a 	mov	r19,r2
 800a9b8:	00800434 	movhi	r2,16
 800a9bc:	10bfffc4 	addi	r2,r2,-1
 800a9c0:	808c703a 	and	r6,r16,r2
 800a9c4:	88000126 	beq	r17,zero,800a9cc <__d2b+0x58>
 800a9c8:	31800434 	orhi	r6,r6,16
 800a9cc:	d9800015 	stw	r6,0(sp)
 800a9d0:	a8001f26 	beq	r21,zero,800aa50 <__d2b+0xdc>
 800a9d4:	d9000104 	addi	r4,sp,4
 800a9d8:	dd400115 	stw	r21,4(sp)
 800a9dc:	800a0900 	call	800a090 <__lo0bits>
 800a9e0:	d8c00017 	ldw	r3,0(sp)
 800a9e4:	1000291e 	bne	r2,zero,800aa8c <__d2b+0x118>
 800a9e8:	d9000117 	ldw	r4,4(sp)
 800a9ec:	99000515 	stw	r4,20(r19)
 800a9f0:	1820c03a 	cmpne	r16,r3,zero
 800a9f4:	84000044 	addi	r16,r16,1
 800a9f8:	98c00615 	stw	r3,24(r19)
 800a9fc:	9c000415 	stw	r16,16(r19)
 800aa00:	88001b1e 	bne	r17,zero,800aa70 <__d2b+0xfc>
 800aa04:	800690ba 	slli	r3,r16,2
 800aa08:	10bef384 	addi	r2,r2,-1074
 800aa0c:	a0800015 	stw	r2,0(r20)
 800aa10:	98c5883a 	add	r2,r19,r3
 800aa14:	11000417 	ldw	r4,16(r2)
 800aa18:	8020917a 	slli	r16,r16,5
 800aa1c:	800a0280 	call	800a028 <__hi0bits>
 800aa20:	8085c83a 	sub	r2,r16,r2
 800aa24:	90800015 	stw	r2,0(r18)
 800aa28:	9805883a 	mov	r2,r19
 800aa2c:	dfc00817 	ldw	ra,32(sp)
 800aa30:	dd400717 	ldw	r21,28(sp)
 800aa34:	dd000617 	ldw	r20,24(sp)
 800aa38:	dcc00517 	ldw	r19,20(sp)
 800aa3c:	dc800417 	ldw	r18,16(sp)
 800aa40:	dc400317 	ldw	r17,12(sp)
 800aa44:	dc000217 	ldw	r16,8(sp)
 800aa48:	dec00904 	addi	sp,sp,36
 800aa4c:	f800283a 	ret
 800aa50:	d809883a 	mov	r4,sp
 800aa54:	800a0900 	call	800a090 <__lo0bits>
 800aa58:	d8c00017 	ldw	r3,0(sp)
 800aa5c:	04000044 	movi	r16,1
 800aa60:	9c000415 	stw	r16,16(r19)
 800aa64:	98c00515 	stw	r3,20(r19)
 800aa68:	10800804 	addi	r2,r2,32
 800aa6c:	883fe526 	beq	r17,zero,800aa04 <__alt_data_end+0xfc00aa04>
 800aa70:	8c7ef344 	addi	r17,r17,-1075
 800aa74:	88a3883a 	add	r17,r17,r2
 800aa78:	00c00d44 	movi	r3,53
 800aa7c:	a4400015 	stw	r17,0(r20)
 800aa80:	1885c83a 	sub	r2,r3,r2
 800aa84:	90800015 	stw	r2,0(r18)
 800aa88:	003fe706 	br	800aa28 <__alt_data_end+0xfc00aa28>
 800aa8c:	01000804 	movi	r4,32
 800aa90:	2089c83a 	sub	r4,r4,r2
 800aa94:	1908983a 	sll	r4,r3,r4
 800aa98:	d9400117 	ldw	r5,4(sp)
 800aa9c:	1886d83a 	srl	r3,r3,r2
 800aaa0:	2148b03a 	or	r4,r4,r5
 800aaa4:	99000515 	stw	r4,20(r19)
 800aaa8:	d8c00015 	stw	r3,0(sp)
 800aaac:	003fd006 	br	800a9f0 <__alt_data_end+0xfc00a9f0>

0800aab0 <__ratio>:
 800aab0:	defff904 	addi	sp,sp,-28
 800aab4:	dc400315 	stw	r17,12(sp)
 800aab8:	2823883a 	mov	r17,r5
 800aabc:	d9400104 	addi	r5,sp,4
 800aac0:	dfc00615 	stw	ra,24(sp)
 800aac4:	dcc00515 	stw	r19,20(sp)
 800aac8:	dc800415 	stw	r18,16(sp)
 800aacc:	2027883a 	mov	r19,r4
 800aad0:	dc000215 	stw	r16,8(sp)
 800aad4:	800a8580 	call	800a858 <__b2d>
 800aad8:	8809883a 	mov	r4,r17
 800aadc:	d80b883a 	mov	r5,sp
 800aae0:	1025883a 	mov	r18,r2
 800aae4:	1821883a 	mov	r16,r3
 800aae8:	800a8580 	call	800a858 <__b2d>
 800aaec:	8a400417 	ldw	r9,16(r17)
 800aaf0:	9a000417 	ldw	r8,16(r19)
 800aaf4:	100d883a 	mov	r6,r2
 800aaf8:	d8800017 	ldw	r2,0(sp)
 800aafc:	4251c83a 	sub	r8,r8,r9
 800ab00:	4012917a 	slli	r9,r8,5
 800ab04:	da000117 	ldw	r8,4(sp)
 800ab08:	4091c83a 	sub	r8,r8,r2
 800ab0c:	4251883a 	add	r8,r8,r9
 800ab10:	02000d0e 	bge	zero,r8,800ab48 <__ratio+0x98>
 800ab14:	4010953a 	slli	r8,r8,20
 800ab18:	4421883a 	add	r16,r8,r16
 800ab1c:	9009883a 	mov	r4,r18
 800ab20:	800b883a 	mov	r5,r16
 800ab24:	180f883a 	mov	r7,r3
 800ab28:	800e9600 	call	800e960 <__divdf3>
 800ab2c:	dfc00617 	ldw	ra,24(sp)
 800ab30:	dcc00517 	ldw	r19,20(sp)
 800ab34:	dc800417 	ldw	r18,16(sp)
 800ab38:	dc400317 	ldw	r17,12(sp)
 800ab3c:	dc000217 	ldw	r16,8(sp)
 800ab40:	dec00704 	addi	sp,sp,28
 800ab44:	f800283a 	ret
 800ab48:	4010953a 	slli	r8,r8,20
 800ab4c:	1a07c83a 	sub	r3,r3,r8
 800ab50:	003ff206 	br	800ab1c <__alt_data_end+0xfc00ab1c>

0800ab54 <_mprec_log10>:
 800ab54:	defffe04 	addi	sp,sp,-8
 800ab58:	dc000015 	stw	r16,0(sp)
 800ab5c:	dfc00115 	stw	ra,4(sp)
 800ab60:	008005c4 	movi	r2,23
 800ab64:	2021883a 	mov	r16,r4
 800ab68:	11000d0e 	bge	r2,r4,800aba0 <_mprec_log10+0x4c>
 800ab6c:	0005883a 	mov	r2,zero
 800ab70:	00cffc34 	movhi	r3,16368
 800ab74:	843fffc4 	addi	r16,r16,-1
 800ab78:	1009883a 	mov	r4,r2
 800ab7c:	180b883a 	mov	r5,r3
 800ab80:	000d883a 	mov	r6,zero
 800ab84:	01d00934 	movhi	r7,16420
 800ab88:	800f4700 	call	800f470 <__muldf3>
 800ab8c:	803ff91e 	bne	r16,zero,800ab74 <__alt_data_end+0xfc00ab74>
 800ab90:	dfc00117 	ldw	ra,4(sp)
 800ab94:	dc000017 	ldw	r16,0(sp)
 800ab98:	dec00204 	addi	sp,sp,8
 800ab9c:	f800283a 	ret
 800aba0:	202090fa 	slli	r16,r4,3
 800aba4:	008200b4 	movhi	r2,2050
 800aba8:	10b6ac04 	addi	r2,r2,-9552
 800abac:	1421883a 	add	r16,r2,r16
 800abb0:	80800017 	ldw	r2,0(r16)
 800abb4:	80c00117 	ldw	r3,4(r16)
 800abb8:	dfc00117 	ldw	ra,4(sp)
 800abbc:	dc000017 	ldw	r16,0(sp)
 800abc0:	dec00204 	addi	sp,sp,8
 800abc4:	f800283a 	ret

0800abc8 <__copybits>:
 800abc8:	297fffc4 	addi	r5,r5,-1
 800abcc:	280fd17a 	srai	r7,r5,5
 800abd0:	30c00417 	ldw	r3,16(r6)
 800abd4:	30800504 	addi	r2,r6,20
 800abd8:	39c00044 	addi	r7,r7,1
 800abdc:	18c7883a 	add	r3,r3,r3
 800abe0:	39cf883a 	add	r7,r7,r7
 800abe4:	18c7883a 	add	r3,r3,r3
 800abe8:	39cf883a 	add	r7,r7,r7
 800abec:	10c7883a 	add	r3,r2,r3
 800abf0:	21cf883a 	add	r7,r4,r7
 800abf4:	10c00d2e 	bgeu	r2,r3,800ac2c <__copybits+0x64>
 800abf8:	200b883a 	mov	r5,r4
 800abfc:	12000017 	ldw	r8,0(r2)
 800ac00:	29400104 	addi	r5,r5,4
 800ac04:	10800104 	addi	r2,r2,4
 800ac08:	2a3fff15 	stw	r8,-4(r5)
 800ac0c:	10fffb36 	bltu	r2,r3,800abfc <__alt_data_end+0xfc00abfc>
 800ac10:	1985c83a 	sub	r2,r3,r6
 800ac14:	10bffac4 	addi	r2,r2,-21
 800ac18:	1004d0ba 	srli	r2,r2,2
 800ac1c:	10800044 	addi	r2,r2,1
 800ac20:	1085883a 	add	r2,r2,r2
 800ac24:	1085883a 	add	r2,r2,r2
 800ac28:	2089883a 	add	r4,r4,r2
 800ac2c:	21c0032e 	bgeu	r4,r7,800ac3c <__copybits+0x74>
 800ac30:	20000015 	stw	zero,0(r4)
 800ac34:	21000104 	addi	r4,r4,4
 800ac38:	21fffd36 	bltu	r4,r7,800ac30 <__alt_data_end+0xfc00ac30>
 800ac3c:	f800283a 	ret

0800ac40 <__any_on>:
 800ac40:	20c00417 	ldw	r3,16(r4)
 800ac44:	2805d17a 	srai	r2,r5,5
 800ac48:	21000504 	addi	r4,r4,20
 800ac4c:	18800d0e 	bge	r3,r2,800ac84 <__any_on+0x44>
 800ac50:	18c7883a 	add	r3,r3,r3
 800ac54:	18c7883a 	add	r3,r3,r3
 800ac58:	20c7883a 	add	r3,r4,r3
 800ac5c:	20c0192e 	bgeu	r4,r3,800acc4 <__any_on+0x84>
 800ac60:	18bfff17 	ldw	r2,-4(r3)
 800ac64:	18ffff04 	addi	r3,r3,-4
 800ac68:	1000041e 	bne	r2,zero,800ac7c <__any_on+0x3c>
 800ac6c:	20c0142e 	bgeu	r4,r3,800acc0 <__any_on+0x80>
 800ac70:	18ffff04 	addi	r3,r3,-4
 800ac74:	19400017 	ldw	r5,0(r3)
 800ac78:	283ffc26 	beq	r5,zero,800ac6c <__alt_data_end+0xfc00ac6c>
 800ac7c:	00800044 	movi	r2,1
 800ac80:	f800283a 	ret
 800ac84:	10c00a0e 	bge	r2,r3,800acb0 <__any_on+0x70>
 800ac88:	1085883a 	add	r2,r2,r2
 800ac8c:	1085883a 	add	r2,r2,r2
 800ac90:	294007cc 	andi	r5,r5,31
 800ac94:	2087883a 	add	r3,r4,r2
 800ac98:	283ff026 	beq	r5,zero,800ac5c <__alt_data_end+0xfc00ac5c>
 800ac9c:	19800017 	ldw	r6,0(r3)
 800aca0:	3144d83a 	srl	r2,r6,r5
 800aca4:	114a983a 	sll	r5,r2,r5
 800aca8:	29bff41e 	bne	r5,r6,800ac7c <__alt_data_end+0xfc00ac7c>
 800acac:	003feb06 	br	800ac5c <__alt_data_end+0xfc00ac5c>
 800acb0:	1085883a 	add	r2,r2,r2
 800acb4:	1085883a 	add	r2,r2,r2
 800acb8:	2087883a 	add	r3,r4,r2
 800acbc:	003fe706 	br	800ac5c <__alt_data_end+0xfc00ac5c>
 800acc0:	f800283a 	ret
 800acc4:	0005883a 	mov	r2,zero
 800acc8:	f800283a 	ret

0800accc <_putc_r>:
 800accc:	defffc04 	addi	sp,sp,-16
 800acd0:	dc000215 	stw	r16,8(sp)
 800acd4:	dfc00315 	stw	ra,12(sp)
 800acd8:	2021883a 	mov	r16,r4
 800acdc:	20000226 	beq	r4,zero,800ace8 <_putc_r+0x1c>
 800ace0:	20800e17 	ldw	r2,56(r4)
 800ace4:	10001b26 	beq	r2,zero,800ad54 <_putc_r+0x88>
 800ace8:	30800217 	ldw	r2,8(r6)
 800acec:	10bfffc4 	addi	r2,r2,-1
 800acf0:	30800215 	stw	r2,8(r6)
 800acf4:	10000a16 	blt	r2,zero,800ad20 <_putc_r+0x54>
 800acf8:	30800017 	ldw	r2,0(r6)
 800acfc:	11400005 	stb	r5,0(r2)
 800ad00:	30800017 	ldw	r2,0(r6)
 800ad04:	10c00044 	addi	r3,r2,1
 800ad08:	30c00015 	stw	r3,0(r6)
 800ad0c:	10800003 	ldbu	r2,0(r2)
 800ad10:	dfc00317 	ldw	ra,12(sp)
 800ad14:	dc000217 	ldw	r16,8(sp)
 800ad18:	dec00404 	addi	sp,sp,16
 800ad1c:	f800283a 	ret
 800ad20:	30c00617 	ldw	r3,24(r6)
 800ad24:	10c00616 	blt	r2,r3,800ad40 <_putc_r+0x74>
 800ad28:	30800017 	ldw	r2,0(r6)
 800ad2c:	00c00284 	movi	r3,10
 800ad30:	11400005 	stb	r5,0(r2)
 800ad34:	30800017 	ldw	r2,0(r6)
 800ad38:	11400003 	ldbu	r5,0(r2)
 800ad3c:	28fff11e 	bne	r5,r3,800ad04 <__alt_data_end+0xfc00ad04>
 800ad40:	8009883a 	mov	r4,r16
 800ad44:	dfc00317 	ldw	ra,12(sp)
 800ad48:	dc000217 	ldw	r16,8(sp)
 800ad4c:	dec00404 	addi	sp,sp,16
 800ad50:	800cb101 	jmpi	800cb10 <__swbuf_r>
 800ad54:	d9400015 	stw	r5,0(sp)
 800ad58:	d9800115 	stw	r6,4(sp)
 800ad5c:	80085200 	call	8008520 <__sinit>
 800ad60:	d9800117 	ldw	r6,4(sp)
 800ad64:	d9400017 	ldw	r5,0(sp)
 800ad68:	003fdf06 	br	800ace8 <__alt_data_end+0xfc00ace8>

0800ad6c <putc>:
 800ad6c:	defffc04 	addi	sp,sp,-16
 800ad70:	dc400115 	stw	r17,4(sp)
 800ad74:	044200b4 	movhi	r17,2050
 800ad78:	8c7e0b04 	addi	r17,r17,-2004
 800ad7c:	dc800215 	stw	r18,8(sp)
 800ad80:	2025883a 	mov	r18,r4
 800ad84:	89000017 	ldw	r4,0(r17)
 800ad88:	dc000015 	stw	r16,0(sp)
 800ad8c:	dfc00315 	stw	ra,12(sp)
 800ad90:	2821883a 	mov	r16,r5
 800ad94:	20000226 	beq	r4,zero,800ada0 <putc+0x34>
 800ad98:	20c00e17 	ldw	r3,56(r4)
 800ad9c:	18001a26 	beq	r3,zero,800ae08 <putc+0x9c>
 800ada0:	80800217 	ldw	r2,8(r16)
 800ada4:	10bfffc4 	addi	r2,r2,-1
 800ada8:	80800215 	stw	r2,8(r16)
 800adac:	10000c16 	blt	r2,zero,800ade0 <putc+0x74>
 800adb0:	80800017 	ldw	r2,0(r16)
 800adb4:	14800005 	stb	r18,0(r2)
 800adb8:	80800017 	ldw	r2,0(r16)
 800adbc:	10c00044 	addi	r3,r2,1
 800adc0:	80c00015 	stw	r3,0(r16)
 800adc4:	10800003 	ldbu	r2,0(r2)
 800adc8:	dfc00317 	ldw	ra,12(sp)
 800adcc:	dc800217 	ldw	r18,8(sp)
 800add0:	dc400117 	ldw	r17,4(sp)
 800add4:	dc000017 	ldw	r16,0(sp)
 800add8:	dec00404 	addi	sp,sp,16
 800addc:	f800283a 	ret
 800ade0:	80c00617 	ldw	r3,24(r16)
 800ade4:	10c00a16 	blt	r2,r3,800ae10 <putc+0xa4>
 800ade8:	80800017 	ldw	r2,0(r16)
 800adec:	00c00284 	movi	r3,10
 800adf0:	14800005 	stb	r18,0(r2)
 800adf4:	80800017 	ldw	r2,0(r16)
 800adf8:	11400003 	ldbu	r5,0(r2)
 800adfc:	28ffef1e 	bne	r5,r3,800adbc <__alt_data_end+0xfc00adbc>
 800ae00:	89000017 	ldw	r4,0(r17)
 800ae04:	00000406 	br	800ae18 <putc+0xac>
 800ae08:	80085200 	call	8008520 <__sinit>
 800ae0c:	003fe406 	br	800ada0 <__alt_data_end+0xfc00ada0>
 800ae10:	89000017 	ldw	r4,0(r17)
 800ae14:	900b883a 	mov	r5,r18
 800ae18:	800d883a 	mov	r6,r16
 800ae1c:	dfc00317 	ldw	ra,12(sp)
 800ae20:	dc800217 	ldw	r18,8(sp)
 800ae24:	dc400117 	ldw	r17,4(sp)
 800ae28:	dc000017 	ldw	r16,0(sp)
 800ae2c:	dec00404 	addi	sp,sp,16
 800ae30:	800cb101 	jmpi	800cb10 <__swbuf_r>

0800ae34 <_realloc_r>:
 800ae34:	defff604 	addi	sp,sp,-40
 800ae38:	dcc00315 	stw	r19,12(sp)
 800ae3c:	dc400115 	stw	r17,4(sp)
 800ae40:	dfc00915 	stw	ra,36(sp)
 800ae44:	df000815 	stw	fp,32(sp)
 800ae48:	ddc00715 	stw	r23,28(sp)
 800ae4c:	dd800615 	stw	r22,24(sp)
 800ae50:	dd400515 	stw	r21,20(sp)
 800ae54:	dd000415 	stw	r20,16(sp)
 800ae58:	dc800215 	stw	r18,8(sp)
 800ae5c:	dc000015 	stw	r16,0(sp)
 800ae60:	2827883a 	mov	r19,r5
 800ae64:	3023883a 	mov	r17,r6
 800ae68:	2800bf26 	beq	r5,zero,800b168 <_realloc_r+0x334>
 800ae6c:	2025883a 	mov	r18,r4
 800ae70:	8010c840 	call	8010c84 <__malloc_lock>
 800ae74:	98ffff17 	ldw	r3,-4(r19)
 800ae78:	01bfff04 	movi	r6,-4
 800ae7c:	890002c4 	addi	r4,r17,11
 800ae80:	01c00584 	movi	r7,22
 800ae84:	9d7ffe04 	addi	r21,r19,-8
 800ae88:	19a0703a 	and	r16,r3,r6
 800ae8c:	39003f2e 	bgeu	r7,r4,800af8c <_realloc_r+0x158>
 800ae90:	053ffe04 	movi	r20,-8
 800ae94:	2528703a 	and	r20,r4,r20
 800ae98:	a00f883a 	mov	r7,r20
 800ae9c:	a0008216 	blt	r20,zero,800b0a8 <_realloc_r+0x274>
 800aea0:	a4408136 	bltu	r20,r17,800b0a8 <_realloc_r+0x274>
 800aea4:	81c03c0e 	bge	r16,r7,800af98 <_realloc_r+0x164>
 800aea8:	070200b4 	movhi	fp,2050
 800aeac:	e7386f04 	addi	fp,fp,-7748
 800aeb0:	e1000217 	ldw	r4,8(fp)
 800aeb4:	ac05883a 	add	r2,r21,r16
 800aeb8:	2080bf26 	beq	r4,r2,800b1b8 <_realloc_r+0x384>
 800aebc:	11000117 	ldw	r4,4(r2)
 800aec0:	023fff84 	movi	r8,-2
 800aec4:	2210703a 	and	r8,r4,r8
 800aec8:	1211883a 	add	r8,r2,r8
 800aecc:	41400117 	ldw	r5,4(r8)
 800aed0:	2940004c 	andi	r5,r5,1
 800aed4:	28004a1e 	bne	r5,zero,800b000 <_realloc_r+0x1cc>
 800aed8:	017fff04 	movi	r5,-4
 800aedc:	2148703a 	and	r4,r4,r5
 800aee0:	2409883a 	add	r4,r4,r16
 800aee4:	21c0ad0e 	bge	r4,r7,800b19c <_realloc_r+0x368>
 800aee8:	18c0004c 	andi	r3,r3,1
 800aeec:	18007f1e 	bne	r3,zero,800b0ec <_realloc_r+0x2b8>
 800aef0:	9dfffe17 	ldw	r23,-8(r19)
 800aef4:	adefc83a 	sub	r23,r21,r23
 800aef8:	bd800117 	ldw	r22,4(r23)
 800aefc:	b14a703a 	and	r5,r22,r5
 800af00:	216d883a 	add	r22,r4,r5
 800af04:	b1c04516 	blt	r22,r7,800b01c <_realloc_r+0x1e8>
 800af08:	10c00317 	ldw	r3,12(r2)
 800af0c:	10800217 	ldw	r2,8(r2)
 800af10:	81bfff04 	addi	r6,r16,-4
 800af14:	bc400204 	addi	r17,r23,8
 800af18:	10c00315 	stw	r3,12(r2)
 800af1c:	18800215 	stw	r2,8(r3)
 800af20:	b9400217 	ldw	r5,8(r23)
 800af24:	b8c00317 	ldw	r3,12(r23)
 800af28:	00800904 	movi	r2,36
 800af2c:	28c00315 	stw	r3,12(r5)
 800af30:	19400215 	stw	r5,8(r3)
 800af34:	1180ef36 	bltu	r2,r6,800b2f4 <_realloc_r+0x4c0>
 800af38:	008004c4 	movi	r2,19
 800af3c:	1180da2e 	bgeu	r2,r6,800b2a8 <_realloc_r+0x474>
 800af40:	98800017 	ldw	r2,0(r19)
 800af44:	b8800215 	stw	r2,8(r23)
 800af48:	98800117 	ldw	r2,4(r19)
 800af4c:	b8800315 	stw	r2,12(r23)
 800af50:	008006c4 	movi	r2,27
 800af54:	1180fc2e 	bgeu	r2,r6,800b348 <_realloc_r+0x514>
 800af58:	98800217 	ldw	r2,8(r19)
 800af5c:	b8800415 	stw	r2,16(r23)
 800af60:	98800317 	ldw	r2,12(r19)
 800af64:	b8800515 	stw	r2,20(r23)
 800af68:	00800904 	movi	r2,36
 800af6c:	3080421e 	bne	r6,r2,800b078 <_realloc_r+0x244>
 800af70:	98800417 	ldw	r2,16(r19)
 800af74:	9cc00604 	addi	r19,r19,24
 800af78:	b8c00804 	addi	r3,r23,32
 800af7c:	b8800615 	stw	r2,24(r23)
 800af80:	98bfff17 	ldw	r2,-4(r19)
 800af84:	b8800715 	stw	r2,28(r23)
 800af88:	00003d06 	br	800b080 <_realloc_r+0x24c>
 800af8c:	01c00404 	movi	r7,16
 800af90:	3829883a 	mov	r20,r7
 800af94:	003fc206 	br	800aea0 <__alt_data_end+0xfc00aea0>
 800af98:	9823883a 	mov	r17,r19
 800af9c:	850fc83a 	sub	r7,r16,r20
 800afa0:	008003c4 	movi	r2,15
 800afa4:	18c0004c 	andi	r3,r3,1
 800afa8:	11c04336 	bltu	r2,r7,800b0b8 <_realloc_r+0x284>
 800afac:	1c06b03a 	or	r3,r3,r16
 800afb0:	a8c00115 	stw	r3,4(r21)
 800afb4:	ac21883a 	add	r16,r21,r16
 800afb8:	80c00117 	ldw	r3,4(r16)
 800afbc:	18c00054 	ori	r3,r3,1
 800afc0:	80c00115 	stw	r3,4(r16)
 800afc4:	9009883a 	mov	r4,r18
 800afc8:	8010ca40 	call	8010ca4 <__malloc_unlock>
 800afcc:	8805883a 	mov	r2,r17
 800afd0:	dfc00917 	ldw	ra,36(sp)
 800afd4:	df000817 	ldw	fp,32(sp)
 800afd8:	ddc00717 	ldw	r23,28(sp)
 800afdc:	dd800617 	ldw	r22,24(sp)
 800afe0:	dd400517 	ldw	r21,20(sp)
 800afe4:	dd000417 	ldw	r20,16(sp)
 800afe8:	dcc00317 	ldw	r19,12(sp)
 800afec:	dc800217 	ldw	r18,8(sp)
 800aff0:	dc400117 	ldw	r17,4(sp)
 800aff4:	dc000017 	ldw	r16,0(sp)
 800aff8:	dec00a04 	addi	sp,sp,40
 800affc:	f800283a 	ret
 800b000:	18c0004c 	andi	r3,r3,1
 800b004:	1800391e 	bne	r3,zero,800b0ec <_realloc_r+0x2b8>
 800b008:	9dfffe17 	ldw	r23,-8(r19)
 800b00c:	00bfff04 	movi	r2,-4
 800b010:	adefc83a 	sub	r23,r21,r23
 800b014:	b9400117 	ldw	r5,4(r23)
 800b018:	288a703a 	and	r5,r5,r2
 800b01c:	2c2d883a 	add	r22,r5,r16
 800b020:	b1c03216 	blt	r22,r7,800b0ec <_realloc_r+0x2b8>
 800b024:	b8800317 	ldw	r2,12(r23)
 800b028:	b8c00217 	ldw	r3,8(r23)
 800b02c:	81bfff04 	addi	r6,r16,-4
 800b030:	01000904 	movi	r4,36
 800b034:	18800315 	stw	r2,12(r3)
 800b038:	10c00215 	stw	r3,8(r2)
 800b03c:	bc400204 	addi	r17,r23,8
 800b040:	2180ac36 	bltu	r4,r6,800b2f4 <_realloc_r+0x4c0>
 800b044:	008004c4 	movi	r2,19
 800b048:	1180972e 	bgeu	r2,r6,800b2a8 <_realloc_r+0x474>
 800b04c:	98800017 	ldw	r2,0(r19)
 800b050:	b8800215 	stw	r2,8(r23)
 800b054:	98800117 	ldw	r2,4(r19)
 800b058:	b8800315 	stw	r2,12(r23)
 800b05c:	008006c4 	movi	r2,27
 800b060:	1180b92e 	bgeu	r2,r6,800b348 <_realloc_r+0x514>
 800b064:	98800217 	ldw	r2,8(r19)
 800b068:	b8800415 	stw	r2,16(r23)
 800b06c:	98800317 	ldw	r2,12(r19)
 800b070:	b8800515 	stw	r2,20(r23)
 800b074:	313fbe26 	beq	r6,r4,800af70 <__alt_data_end+0xfc00af70>
 800b078:	b8c00604 	addi	r3,r23,24
 800b07c:	9cc00404 	addi	r19,r19,16
 800b080:	98800017 	ldw	r2,0(r19)
 800b084:	b021883a 	mov	r16,r22
 800b088:	b82b883a 	mov	r21,r23
 800b08c:	18800015 	stw	r2,0(r3)
 800b090:	98800117 	ldw	r2,4(r19)
 800b094:	18800115 	stw	r2,4(r3)
 800b098:	98800217 	ldw	r2,8(r19)
 800b09c:	18800215 	stw	r2,8(r3)
 800b0a0:	b8c00117 	ldw	r3,4(r23)
 800b0a4:	003fbd06 	br	800af9c <__alt_data_end+0xfc00af9c>
 800b0a8:	00800304 	movi	r2,12
 800b0ac:	90800015 	stw	r2,0(r18)
 800b0b0:	0005883a 	mov	r2,zero
 800b0b4:	003fc606 	br	800afd0 <__alt_data_end+0xfc00afd0>
 800b0b8:	1d06b03a 	or	r3,r3,r20
 800b0bc:	ad0b883a 	add	r5,r21,r20
 800b0c0:	a8c00115 	stw	r3,4(r21)
 800b0c4:	38800054 	ori	r2,r7,1
 800b0c8:	28800115 	stw	r2,4(r5)
 800b0cc:	29cf883a 	add	r7,r5,r7
 800b0d0:	38800117 	ldw	r2,4(r7)
 800b0d4:	9009883a 	mov	r4,r18
 800b0d8:	29400204 	addi	r5,r5,8
 800b0dc:	10800054 	ori	r2,r2,1
 800b0e0:	38800115 	stw	r2,4(r7)
 800b0e4:	80086940 	call	8008694 <_free_r>
 800b0e8:	003fb606 	br	800afc4 <__alt_data_end+0xfc00afc4>
 800b0ec:	880b883a 	mov	r5,r17
 800b0f0:	9009883a 	mov	r4,r18
 800b0f4:	80092300 	call	8009230 <_malloc_r>
 800b0f8:	1023883a 	mov	r17,r2
 800b0fc:	1000aa26 	beq	r2,zero,800b3a8 <_realloc_r+0x574>
 800b100:	98ffff17 	ldw	r3,-4(r19)
 800b104:	113ffe04 	addi	r4,r2,-8
 800b108:	00bfff84 	movi	r2,-2
 800b10c:	1884703a 	and	r2,r3,r2
 800b110:	a885883a 	add	r2,r21,r2
 800b114:	20808626 	beq	r4,r2,800b330 <_realloc_r+0x4fc>
 800b118:	81bfff04 	addi	r6,r16,-4
 800b11c:	00800904 	movi	r2,36
 800b120:	11807036 	bltu	r2,r6,800b2e4 <_realloc_r+0x4b0>
 800b124:	00c004c4 	movi	r3,19
 800b128:	19805636 	bltu	r3,r6,800b284 <_realloc_r+0x450>
 800b12c:	8805883a 	mov	r2,r17
 800b130:	9807883a 	mov	r3,r19
 800b134:	19000017 	ldw	r4,0(r3)
 800b138:	11000015 	stw	r4,0(r2)
 800b13c:	19000117 	ldw	r4,4(r3)
 800b140:	11000115 	stw	r4,4(r2)
 800b144:	18c00217 	ldw	r3,8(r3)
 800b148:	10c00215 	stw	r3,8(r2)
 800b14c:	980b883a 	mov	r5,r19
 800b150:	9009883a 	mov	r4,r18
 800b154:	80086940 	call	8008694 <_free_r>
 800b158:	9009883a 	mov	r4,r18
 800b15c:	8010ca40 	call	8010ca4 <__malloc_unlock>
 800b160:	8805883a 	mov	r2,r17
 800b164:	003f9a06 	br	800afd0 <__alt_data_end+0xfc00afd0>
 800b168:	300b883a 	mov	r5,r6
 800b16c:	dfc00917 	ldw	ra,36(sp)
 800b170:	df000817 	ldw	fp,32(sp)
 800b174:	ddc00717 	ldw	r23,28(sp)
 800b178:	dd800617 	ldw	r22,24(sp)
 800b17c:	dd400517 	ldw	r21,20(sp)
 800b180:	dd000417 	ldw	r20,16(sp)
 800b184:	dcc00317 	ldw	r19,12(sp)
 800b188:	dc800217 	ldw	r18,8(sp)
 800b18c:	dc400117 	ldw	r17,4(sp)
 800b190:	dc000017 	ldw	r16,0(sp)
 800b194:	dec00a04 	addi	sp,sp,40
 800b198:	80092301 	jmpi	8009230 <_malloc_r>
 800b19c:	11400317 	ldw	r5,12(r2)
 800b1a0:	10800217 	ldw	r2,8(r2)
 800b1a4:	9823883a 	mov	r17,r19
 800b1a8:	2021883a 	mov	r16,r4
 800b1ac:	11400315 	stw	r5,12(r2)
 800b1b0:	28800215 	stw	r2,8(r5)
 800b1b4:	003f7906 	br	800af9c <__alt_data_end+0xfc00af9c>
 800b1b8:	21000117 	ldw	r4,4(r4)
 800b1bc:	00bfff04 	movi	r2,-4
 800b1c0:	a1800404 	addi	r6,r20,16
 800b1c4:	2088703a 	and	r4,r4,r2
 800b1c8:	2409883a 	add	r4,r4,r16
 800b1cc:	2180380e 	bge	r4,r6,800b2b0 <_realloc_r+0x47c>
 800b1d0:	18c0004c 	andi	r3,r3,1
 800b1d4:	183fc51e 	bne	r3,zero,800b0ec <__alt_data_end+0xfc00b0ec>
 800b1d8:	9dfffe17 	ldw	r23,-8(r19)
 800b1dc:	adefc83a 	sub	r23,r21,r23
 800b1e0:	b9400117 	ldw	r5,4(r23)
 800b1e4:	288a703a 	and	r5,r5,r2
 800b1e8:	216d883a 	add	r22,r4,r5
 800b1ec:	b1bf8b16 	blt	r22,r6,800b01c <__alt_data_end+0xfc00b01c>
 800b1f0:	b8800317 	ldw	r2,12(r23)
 800b1f4:	b8c00217 	ldw	r3,8(r23)
 800b1f8:	81bfff04 	addi	r6,r16,-4
 800b1fc:	01000904 	movi	r4,36
 800b200:	18800315 	stw	r2,12(r3)
 800b204:	10c00215 	stw	r3,8(r2)
 800b208:	bc400204 	addi	r17,r23,8
 800b20c:	21805a36 	bltu	r4,r6,800b378 <_realloc_r+0x544>
 800b210:	008004c4 	movi	r2,19
 800b214:	1180562e 	bgeu	r2,r6,800b370 <_realloc_r+0x53c>
 800b218:	98800017 	ldw	r2,0(r19)
 800b21c:	b8800215 	stw	r2,8(r23)
 800b220:	98800117 	ldw	r2,4(r19)
 800b224:	b8800315 	stw	r2,12(r23)
 800b228:	008006c4 	movi	r2,27
 800b22c:	11805636 	bltu	r2,r6,800b388 <_realloc_r+0x554>
 800b230:	b8800404 	addi	r2,r23,16
 800b234:	9cc00204 	addi	r19,r19,8
 800b238:	98c00017 	ldw	r3,0(r19)
 800b23c:	10c00015 	stw	r3,0(r2)
 800b240:	98c00117 	ldw	r3,4(r19)
 800b244:	10c00115 	stw	r3,4(r2)
 800b248:	98c00217 	ldw	r3,8(r19)
 800b24c:	10c00215 	stw	r3,8(r2)
 800b250:	bd07883a 	add	r3,r23,r20
 800b254:	b505c83a 	sub	r2,r22,r20
 800b258:	e0c00215 	stw	r3,8(fp)
 800b25c:	10800054 	ori	r2,r2,1
 800b260:	18800115 	stw	r2,4(r3)
 800b264:	b8800117 	ldw	r2,4(r23)
 800b268:	9009883a 	mov	r4,r18
 800b26c:	1080004c 	andi	r2,r2,1
 800b270:	a0a8b03a 	or	r20,r20,r2
 800b274:	bd000115 	stw	r20,4(r23)
 800b278:	8010ca40 	call	8010ca4 <__malloc_unlock>
 800b27c:	8805883a 	mov	r2,r17
 800b280:	003f5306 	br	800afd0 <__alt_data_end+0xfc00afd0>
 800b284:	98c00017 	ldw	r3,0(r19)
 800b288:	88c00015 	stw	r3,0(r17)
 800b28c:	98c00117 	ldw	r3,4(r19)
 800b290:	88c00115 	stw	r3,4(r17)
 800b294:	00c006c4 	movi	r3,27
 800b298:	19801d36 	bltu	r3,r6,800b310 <_realloc_r+0x4dc>
 800b29c:	88800204 	addi	r2,r17,8
 800b2a0:	98c00204 	addi	r3,r19,8
 800b2a4:	003fa306 	br	800b134 <__alt_data_end+0xfc00b134>
 800b2a8:	8807883a 	mov	r3,r17
 800b2ac:	003f7406 	br	800b080 <__alt_data_end+0xfc00b080>
 800b2b0:	ad2b883a 	add	r21,r21,r20
 800b2b4:	2505c83a 	sub	r2,r4,r20
 800b2b8:	e5400215 	stw	r21,8(fp)
 800b2bc:	10800054 	ori	r2,r2,1
 800b2c0:	a8800115 	stw	r2,4(r21)
 800b2c4:	98bfff17 	ldw	r2,-4(r19)
 800b2c8:	9009883a 	mov	r4,r18
 800b2cc:	1080004c 	andi	r2,r2,1
 800b2d0:	a0a8b03a 	or	r20,r20,r2
 800b2d4:	9d3fff15 	stw	r20,-4(r19)
 800b2d8:	8010ca40 	call	8010ca4 <__malloc_unlock>
 800b2dc:	9805883a 	mov	r2,r19
 800b2e0:	003f3b06 	br	800afd0 <__alt_data_end+0xfc00afd0>
 800b2e4:	8809883a 	mov	r4,r17
 800b2e8:	980b883a 	mov	r5,r19
 800b2ec:	8009ac00 	call	8009ac0 <memmove>
 800b2f0:	003f9606 	br	800b14c <__alt_data_end+0xfc00b14c>
 800b2f4:	8809883a 	mov	r4,r17
 800b2f8:	980b883a 	mov	r5,r19
 800b2fc:	8009ac00 	call	8009ac0 <memmove>
 800b300:	b8c00117 	ldw	r3,4(r23)
 800b304:	b021883a 	mov	r16,r22
 800b308:	b82b883a 	mov	r21,r23
 800b30c:	003f2306 	br	800af9c <__alt_data_end+0xfc00af9c>
 800b310:	98c00217 	ldw	r3,8(r19)
 800b314:	88c00215 	stw	r3,8(r17)
 800b318:	98c00317 	ldw	r3,12(r19)
 800b31c:	88c00315 	stw	r3,12(r17)
 800b320:	30800c26 	beq	r6,r2,800b354 <_realloc_r+0x520>
 800b324:	88800404 	addi	r2,r17,16
 800b328:	98c00404 	addi	r3,r19,16
 800b32c:	003f8106 	br	800b134 <__alt_data_end+0xfc00b134>
 800b330:	893fff17 	ldw	r4,-4(r17)
 800b334:	00bfff04 	movi	r2,-4
 800b338:	9823883a 	mov	r17,r19
 800b33c:	2084703a 	and	r2,r4,r2
 800b340:	80a1883a 	add	r16,r16,r2
 800b344:	003f1506 	br	800af9c <__alt_data_end+0xfc00af9c>
 800b348:	b8c00404 	addi	r3,r23,16
 800b34c:	9cc00204 	addi	r19,r19,8
 800b350:	003f4b06 	br	800b080 <__alt_data_end+0xfc00b080>
 800b354:	99000417 	ldw	r4,16(r19)
 800b358:	88800604 	addi	r2,r17,24
 800b35c:	98c00604 	addi	r3,r19,24
 800b360:	89000415 	stw	r4,16(r17)
 800b364:	99000517 	ldw	r4,20(r19)
 800b368:	89000515 	stw	r4,20(r17)
 800b36c:	003f7106 	br	800b134 <__alt_data_end+0xfc00b134>
 800b370:	8805883a 	mov	r2,r17
 800b374:	003fb006 	br	800b238 <__alt_data_end+0xfc00b238>
 800b378:	8809883a 	mov	r4,r17
 800b37c:	980b883a 	mov	r5,r19
 800b380:	8009ac00 	call	8009ac0 <memmove>
 800b384:	003fb206 	br	800b250 <__alt_data_end+0xfc00b250>
 800b388:	98800217 	ldw	r2,8(r19)
 800b38c:	b8800415 	stw	r2,16(r23)
 800b390:	98800317 	ldw	r2,12(r19)
 800b394:	b8800515 	stw	r2,20(r23)
 800b398:	31000726 	beq	r6,r4,800b3b8 <_realloc_r+0x584>
 800b39c:	b8800604 	addi	r2,r23,24
 800b3a0:	9cc00404 	addi	r19,r19,16
 800b3a4:	003fa406 	br	800b238 <__alt_data_end+0xfc00b238>
 800b3a8:	9009883a 	mov	r4,r18
 800b3ac:	8010ca40 	call	8010ca4 <__malloc_unlock>
 800b3b0:	0005883a 	mov	r2,zero
 800b3b4:	003f0606 	br	800afd0 <__alt_data_end+0xfc00afd0>
 800b3b8:	98c00417 	ldw	r3,16(r19)
 800b3bc:	9cc00604 	addi	r19,r19,24
 800b3c0:	b8800804 	addi	r2,r23,32
 800b3c4:	b8c00615 	stw	r3,24(r23)
 800b3c8:	98ffff17 	ldw	r3,-4(r19)
 800b3cc:	b8c00715 	stw	r3,28(r23)
 800b3d0:	003f9906 	br	800b238 <__alt_data_end+0xfc00b238>

0800b3d4 <__fpclassifyd>:
 800b3d4:	00a00034 	movhi	r2,32768
 800b3d8:	10bfffc4 	addi	r2,r2,-1
 800b3dc:	2884703a 	and	r2,r5,r2
 800b3e0:	10000726 	beq	r2,zero,800b400 <__fpclassifyd+0x2c>
 800b3e4:	00fffc34 	movhi	r3,65520
 800b3e8:	019ff834 	movhi	r6,32736
 800b3ec:	28c7883a 	add	r3,r5,r3
 800b3f0:	31bfffc4 	addi	r6,r6,-1
 800b3f4:	30c00536 	bltu	r6,r3,800b40c <__fpclassifyd+0x38>
 800b3f8:	00800104 	movi	r2,4
 800b3fc:	f800283a 	ret
 800b400:	2000021e 	bne	r4,zero,800b40c <__fpclassifyd+0x38>
 800b404:	00800084 	movi	r2,2
 800b408:	f800283a 	ret
 800b40c:	00dffc34 	movhi	r3,32752
 800b410:	019ff834 	movhi	r6,32736
 800b414:	28cb883a 	add	r5,r5,r3
 800b418:	31bfffc4 	addi	r6,r6,-1
 800b41c:	317ff62e 	bgeu	r6,r5,800b3f8 <__alt_data_end+0xfc00b3f8>
 800b420:	01400434 	movhi	r5,16
 800b424:	297fffc4 	addi	r5,r5,-1
 800b428:	28800236 	bltu	r5,r2,800b434 <__fpclassifyd+0x60>
 800b42c:	008000c4 	movi	r2,3
 800b430:	f800283a 	ret
 800b434:	10c00226 	beq	r2,r3,800b440 <__fpclassifyd+0x6c>
 800b438:	0005883a 	mov	r2,zero
 800b43c:	f800283a 	ret
 800b440:	2005003a 	cmpeq	r2,r4,zero
 800b444:	f800283a 	ret

0800b448 <_sbrk_r>:
 800b448:	defffd04 	addi	sp,sp,-12
 800b44c:	dc000015 	stw	r16,0(sp)
 800b450:	040200b4 	movhi	r16,2050
 800b454:	dc400115 	stw	r17,4(sp)
 800b458:	84050904 	addi	r16,r16,5156
 800b45c:	2023883a 	mov	r17,r4
 800b460:	2809883a 	mov	r4,r5
 800b464:	dfc00215 	stw	ra,8(sp)
 800b468:	80000015 	stw	zero,0(r16)
 800b46c:	8010e700 	call	8010e70 <sbrk>
 800b470:	00ffffc4 	movi	r3,-1
 800b474:	10c00526 	beq	r2,r3,800b48c <_sbrk_r+0x44>
 800b478:	dfc00217 	ldw	ra,8(sp)
 800b47c:	dc400117 	ldw	r17,4(sp)
 800b480:	dc000017 	ldw	r16,0(sp)
 800b484:	dec00304 	addi	sp,sp,12
 800b488:	f800283a 	ret
 800b48c:	80c00017 	ldw	r3,0(r16)
 800b490:	183ff926 	beq	r3,zero,800b478 <__alt_data_end+0xfc00b478>
 800b494:	88c00015 	stw	r3,0(r17)
 800b498:	003ff706 	br	800b478 <__alt_data_end+0xfc00b478>

0800b49c <__sread>:
 800b49c:	defffe04 	addi	sp,sp,-8
 800b4a0:	dc000015 	stw	r16,0(sp)
 800b4a4:	2821883a 	mov	r16,r5
 800b4a8:	2940038f 	ldh	r5,14(r5)
 800b4ac:	dfc00115 	stw	ra,4(sp)
 800b4b0:	800d1ec0 	call	800d1ec <_read_r>
 800b4b4:	10000716 	blt	r2,zero,800b4d4 <__sread+0x38>
 800b4b8:	80c01417 	ldw	r3,80(r16)
 800b4bc:	1887883a 	add	r3,r3,r2
 800b4c0:	80c01415 	stw	r3,80(r16)
 800b4c4:	dfc00117 	ldw	ra,4(sp)
 800b4c8:	dc000017 	ldw	r16,0(sp)
 800b4cc:	dec00204 	addi	sp,sp,8
 800b4d0:	f800283a 	ret
 800b4d4:	80c0030b 	ldhu	r3,12(r16)
 800b4d8:	18fbffcc 	andi	r3,r3,61439
 800b4dc:	80c0030d 	sth	r3,12(r16)
 800b4e0:	dfc00117 	ldw	ra,4(sp)
 800b4e4:	dc000017 	ldw	r16,0(sp)
 800b4e8:	dec00204 	addi	sp,sp,8
 800b4ec:	f800283a 	ret

0800b4f0 <__seofread>:
 800b4f0:	0005883a 	mov	r2,zero
 800b4f4:	f800283a 	ret

0800b4f8 <__swrite>:
 800b4f8:	2880030b 	ldhu	r2,12(r5)
 800b4fc:	defffb04 	addi	sp,sp,-20
 800b500:	dcc00315 	stw	r19,12(sp)
 800b504:	dc800215 	stw	r18,8(sp)
 800b508:	dc400115 	stw	r17,4(sp)
 800b50c:	dc000015 	stw	r16,0(sp)
 800b510:	dfc00415 	stw	ra,16(sp)
 800b514:	10c0400c 	andi	r3,r2,256
 800b518:	2821883a 	mov	r16,r5
 800b51c:	2027883a 	mov	r19,r4
 800b520:	3025883a 	mov	r18,r6
 800b524:	3823883a 	mov	r17,r7
 800b528:	18000526 	beq	r3,zero,800b540 <__swrite+0x48>
 800b52c:	2940038f 	ldh	r5,14(r5)
 800b530:	000d883a 	mov	r6,zero
 800b534:	01c00084 	movi	r7,2
 800b538:	800d1900 	call	800d190 <_lseek_r>
 800b53c:	8080030b 	ldhu	r2,12(r16)
 800b540:	8140038f 	ldh	r5,14(r16)
 800b544:	10bbffcc 	andi	r2,r2,61439
 800b548:	9809883a 	mov	r4,r19
 800b54c:	900d883a 	mov	r6,r18
 800b550:	880f883a 	mov	r7,r17
 800b554:	8080030d 	sth	r2,12(r16)
 800b558:	dfc00417 	ldw	ra,16(sp)
 800b55c:	dcc00317 	ldw	r19,12(sp)
 800b560:	dc800217 	ldw	r18,8(sp)
 800b564:	dc400117 	ldw	r17,4(sp)
 800b568:	dc000017 	ldw	r16,0(sp)
 800b56c:	dec00504 	addi	sp,sp,20
 800b570:	800cc801 	jmpi	800cc80 <_write_r>

0800b574 <__sseek>:
 800b574:	defffe04 	addi	sp,sp,-8
 800b578:	dc000015 	stw	r16,0(sp)
 800b57c:	2821883a 	mov	r16,r5
 800b580:	2940038f 	ldh	r5,14(r5)
 800b584:	dfc00115 	stw	ra,4(sp)
 800b588:	800d1900 	call	800d190 <_lseek_r>
 800b58c:	00ffffc4 	movi	r3,-1
 800b590:	10c00826 	beq	r2,r3,800b5b4 <__sseek+0x40>
 800b594:	80c0030b 	ldhu	r3,12(r16)
 800b598:	80801415 	stw	r2,80(r16)
 800b59c:	18c40014 	ori	r3,r3,4096
 800b5a0:	80c0030d 	sth	r3,12(r16)
 800b5a4:	dfc00117 	ldw	ra,4(sp)
 800b5a8:	dc000017 	ldw	r16,0(sp)
 800b5ac:	dec00204 	addi	sp,sp,8
 800b5b0:	f800283a 	ret
 800b5b4:	80c0030b 	ldhu	r3,12(r16)
 800b5b8:	18fbffcc 	andi	r3,r3,61439
 800b5bc:	80c0030d 	sth	r3,12(r16)
 800b5c0:	dfc00117 	ldw	ra,4(sp)
 800b5c4:	dc000017 	ldw	r16,0(sp)
 800b5c8:	dec00204 	addi	sp,sp,8
 800b5cc:	f800283a 	ret

0800b5d0 <__sclose>:
 800b5d0:	2940038f 	ldh	r5,14(r5)
 800b5d4:	800ccdc1 	jmpi	800ccdc <_close_r>

0800b5d8 <strcmp>:
 800b5d8:	2144b03a 	or	r2,r4,r5
 800b5dc:	108000cc 	andi	r2,r2,3
 800b5e0:	1000171e 	bne	r2,zero,800b640 <strcmp+0x68>
 800b5e4:	20800017 	ldw	r2,0(r4)
 800b5e8:	28c00017 	ldw	r3,0(r5)
 800b5ec:	10c0141e 	bne	r2,r3,800b640 <strcmp+0x68>
 800b5f0:	027fbff4 	movhi	r9,65279
 800b5f4:	4a7fbfc4 	addi	r9,r9,-257
 800b5f8:	0086303a 	nor	r3,zero,r2
 800b5fc:	02202074 	movhi	r8,32897
 800b600:	1245883a 	add	r2,r2,r9
 800b604:	42202004 	addi	r8,r8,-32640
 800b608:	10c4703a 	and	r2,r2,r3
 800b60c:	1204703a 	and	r2,r2,r8
 800b610:	10000226 	beq	r2,zero,800b61c <strcmp+0x44>
 800b614:	00001706 	br	800b674 <strcmp+0x9c>
 800b618:	1000161e 	bne	r2,zero,800b674 <strcmp+0x9c>
 800b61c:	21000104 	addi	r4,r4,4
 800b620:	20c00017 	ldw	r3,0(r4)
 800b624:	29400104 	addi	r5,r5,4
 800b628:	29800017 	ldw	r6,0(r5)
 800b62c:	1a4f883a 	add	r7,r3,r9
 800b630:	00c4303a 	nor	r2,zero,r3
 800b634:	3884703a 	and	r2,r7,r2
 800b638:	1204703a 	and	r2,r2,r8
 800b63c:	19bff626 	beq	r3,r6,800b618 <__alt_data_end+0xfc00b618>
 800b640:	20800007 	ldb	r2,0(r4)
 800b644:	1000051e 	bne	r2,zero,800b65c <strcmp+0x84>
 800b648:	00000606 	br	800b664 <strcmp+0x8c>
 800b64c:	21000044 	addi	r4,r4,1
 800b650:	20800007 	ldb	r2,0(r4)
 800b654:	29400044 	addi	r5,r5,1
 800b658:	10000226 	beq	r2,zero,800b664 <strcmp+0x8c>
 800b65c:	28c00007 	ldb	r3,0(r5)
 800b660:	10fffa26 	beq	r2,r3,800b64c <__alt_data_end+0xfc00b64c>
 800b664:	20800003 	ldbu	r2,0(r4)
 800b668:	28c00003 	ldbu	r3,0(r5)
 800b66c:	10c5c83a 	sub	r2,r2,r3
 800b670:	f800283a 	ret
 800b674:	0005883a 	mov	r2,zero
 800b678:	f800283a 	ret

0800b67c <__sprint_r.part.0>:
 800b67c:	28801917 	ldw	r2,100(r5)
 800b680:	defff604 	addi	sp,sp,-40
 800b684:	dd400515 	stw	r21,20(sp)
 800b688:	dcc00315 	stw	r19,12(sp)
 800b68c:	dfc00915 	stw	ra,36(sp)
 800b690:	df000815 	stw	fp,32(sp)
 800b694:	ddc00715 	stw	r23,28(sp)
 800b698:	dd800615 	stw	r22,24(sp)
 800b69c:	dd000415 	stw	r20,16(sp)
 800b6a0:	dc800215 	stw	r18,8(sp)
 800b6a4:	dc400115 	stw	r17,4(sp)
 800b6a8:	dc000015 	stw	r16,0(sp)
 800b6ac:	1088000c 	andi	r2,r2,8192
 800b6b0:	2827883a 	mov	r19,r5
 800b6b4:	302b883a 	mov	r21,r6
 800b6b8:	10002d26 	beq	r2,zero,800b770 <__sprint_r.part.0+0xf4>
 800b6bc:	30800217 	ldw	r2,8(r6)
 800b6c0:	35800017 	ldw	r22,0(r6)
 800b6c4:	10002826 	beq	r2,zero,800b768 <__sprint_r.part.0+0xec>
 800b6c8:	2029883a 	mov	r20,r4
 800b6cc:	b5c00104 	addi	r23,r22,4
 800b6d0:	04bfffc4 	movi	r18,-1
 800b6d4:	bc400017 	ldw	r17,0(r23)
 800b6d8:	b4000017 	ldw	r16,0(r22)
 800b6dc:	0039883a 	mov	fp,zero
 800b6e0:	8822d0ba 	srli	r17,r17,2
 800b6e4:	04400316 	blt	zero,r17,800b6f4 <__sprint_r.part.0+0x78>
 800b6e8:	00001706 	br	800b748 <__sprint_r.part.0+0xcc>
 800b6ec:	84000104 	addi	r16,r16,4
 800b6f0:	8f001526 	beq	r17,fp,800b748 <__sprint_r.part.0+0xcc>
 800b6f4:	81400017 	ldw	r5,0(r16)
 800b6f8:	a009883a 	mov	r4,r20
 800b6fc:	980d883a 	mov	r6,r19
 800b700:	800cf080 	call	800cf08 <_fputwc_r>
 800b704:	e7000044 	addi	fp,fp,1
 800b708:	14bff81e 	bne	r2,r18,800b6ec <__alt_data_end+0xfc00b6ec>
 800b70c:	9005883a 	mov	r2,r18
 800b710:	a8000215 	stw	zero,8(r21)
 800b714:	a8000115 	stw	zero,4(r21)
 800b718:	dfc00917 	ldw	ra,36(sp)
 800b71c:	df000817 	ldw	fp,32(sp)
 800b720:	ddc00717 	ldw	r23,28(sp)
 800b724:	dd800617 	ldw	r22,24(sp)
 800b728:	dd400517 	ldw	r21,20(sp)
 800b72c:	dd000417 	ldw	r20,16(sp)
 800b730:	dcc00317 	ldw	r19,12(sp)
 800b734:	dc800217 	ldw	r18,8(sp)
 800b738:	dc400117 	ldw	r17,4(sp)
 800b73c:	dc000017 	ldw	r16,0(sp)
 800b740:	dec00a04 	addi	sp,sp,40
 800b744:	f800283a 	ret
 800b748:	a8c00217 	ldw	r3,8(r21)
 800b74c:	8c63883a 	add	r17,r17,r17
 800b750:	8c63883a 	add	r17,r17,r17
 800b754:	1c45c83a 	sub	r2,r3,r17
 800b758:	a8800215 	stw	r2,8(r21)
 800b75c:	b5800204 	addi	r22,r22,8
 800b760:	bdc00204 	addi	r23,r23,8
 800b764:	103fdb1e 	bne	r2,zero,800b6d4 <__alt_data_end+0xfc00b6d4>
 800b768:	0005883a 	mov	r2,zero
 800b76c:	003fe806 	br	800b710 <__alt_data_end+0xfc00b710>
 800b770:	80089840 	call	8008984 <__sfvwrite_r>
 800b774:	003fe606 	br	800b710 <__alt_data_end+0xfc00b710>

0800b778 <__sprint_r>:
 800b778:	30c00217 	ldw	r3,8(r6)
 800b77c:	18000126 	beq	r3,zero,800b784 <__sprint_r+0xc>
 800b780:	800b67c1 	jmpi	800b67c <__sprint_r.part.0>
 800b784:	30000115 	stw	zero,4(r6)
 800b788:	0005883a 	mov	r2,zero
 800b78c:	f800283a 	ret

0800b790 <___vfiprintf_internal_r>:
 800b790:	defeca04 	addi	sp,sp,-1240
 800b794:	dd813215 	stw	r22,1224(sp)
 800b798:	dd013015 	stw	r20,1216(sp)
 800b79c:	dfc13515 	stw	ra,1236(sp)
 800b7a0:	df013415 	stw	fp,1232(sp)
 800b7a4:	ddc13315 	stw	r23,1228(sp)
 800b7a8:	dd413115 	stw	r21,1220(sp)
 800b7ac:	dcc12f15 	stw	r19,1212(sp)
 800b7b0:	dc812e15 	stw	r18,1208(sp)
 800b7b4:	dc412d15 	stw	r17,1204(sp)
 800b7b8:	dc012c15 	stw	r16,1200(sp)
 800b7bc:	d9012015 	stw	r4,1152(sp)
 800b7c0:	d9c12115 	stw	r7,1156(sp)
 800b7c4:	2829883a 	mov	r20,r5
 800b7c8:	302d883a 	mov	r22,r6
 800b7cc:	20000226 	beq	r4,zero,800b7d8 <___vfiprintf_internal_r+0x48>
 800b7d0:	20800e17 	ldw	r2,56(r4)
 800b7d4:	1001d326 	beq	r2,zero,800bf24 <___vfiprintf_internal_r+0x794>
 800b7d8:	a0c0030b 	ldhu	r3,12(r20)
 800b7dc:	1908000c 	andi	r4,r3,8192
 800b7e0:	1805883a 	mov	r2,r3
 800b7e4:	2000071e 	bne	r4,zero,800b804 <___vfiprintf_internal_r+0x74>
 800b7e8:	a1001917 	ldw	r4,100(r20)
 800b7ec:	18880014 	ori	r2,r3,8192
 800b7f0:	00f7ffc4 	movi	r3,-8193
 800b7f4:	20c8703a 	and	r4,r4,r3
 800b7f8:	a080030d 	sth	r2,12(r20)
 800b7fc:	1007883a 	mov	r3,r2
 800b800:	a1001915 	stw	r4,100(r20)
 800b804:	1100020c 	andi	r4,r2,8
 800b808:	20018926 	beq	r4,zero,800be30 <___vfiprintf_internal_r+0x6a0>
 800b80c:	a1000417 	ldw	r4,16(r20)
 800b810:	20018726 	beq	r4,zero,800be30 <___vfiprintf_internal_r+0x6a0>
 800b814:	1080068c 	andi	r2,r2,26
 800b818:	01000284 	movi	r4,10
 800b81c:	11018d26 	beq	r2,r4,800be54 <___vfiprintf_internal_r+0x6c4>
 800b820:	da810a04 	addi	r10,sp,1064
 800b824:	dac109c4 	addi	r11,sp,1063
 800b828:	070200b4 	movhi	fp,2050
 800b82c:	05c200b4 	movhi	r23,2050
 800b830:	da811e15 	stw	r10,1144(sp)
 800b834:	52d5c83a 	sub	r10,r10,r11
 800b838:	e736e204 	addi	fp,fp,-9336
 800b83c:	bdf6de04 	addi	r23,r23,-9352
 800b840:	dac11f15 	stw	r11,1148(sp)
 800b844:	dec11a15 	stw	sp,1128(sp)
 800b848:	d8011c15 	stw	zero,1136(sp)
 800b84c:	d8011b15 	stw	zero,1132(sp)
 800b850:	d8012615 	stw	zero,1176(sp)
 800b854:	d8012215 	stw	zero,1160(sp)
 800b858:	da812715 	stw	r10,1180(sp)
 800b85c:	d811883a 	mov	r8,sp
 800b860:	b021883a 	mov	r16,r22
 800b864:	80800007 	ldb	r2,0(r16)
 800b868:	10039c26 	beq	r2,zero,800c6dc <___vfiprintf_internal_r+0xf4c>
 800b86c:	01000944 	movi	r4,37
 800b870:	11039a26 	beq	r2,r4,800c6dc <___vfiprintf_internal_r+0xf4c>
 800b874:	8005883a 	mov	r2,r16
 800b878:	00000106 	br	800b880 <___vfiprintf_internal_r+0xf0>
 800b87c:	19000326 	beq	r3,r4,800b88c <___vfiprintf_internal_r+0xfc>
 800b880:	10800044 	addi	r2,r2,1
 800b884:	10c00007 	ldb	r3,0(r2)
 800b888:	183ffc1e 	bne	r3,zero,800b87c <__alt_data_end+0xfc00b87c>
 800b88c:	1425c83a 	sub	r18,r2,r16
 800b890:	1023883a 	mov	r17,r2
 800b894:	90001026 	beq	r18,zero,800b8d8 <___vfiprintf_internal_r+0x148>
 800b898:	d8c11c17 	ldw	r3,1136(sp)
 800b89c:	d8811b17 	ldw	r2,1132(sp)
 800b8a0:	44000015 	stw	r16,0(r8)
 800b8a4:	90c7883a 	add	r3,r18,r3
 800b8a8:	10800044 	addi	r2,r2,1
 800b8ac:	44800115 	stw	r18,4(r8)
 800b8b0:	d8c11c15 	stw	r3,1136(sp)
 800b8b4:	d8811b15 	stw	r2,1132(sp)
 800b8b8:	010001c4 	movi	r4,7
 800b8bc:	2080750e 	bge	r4,r2,800ba94 <___vfiprintf_internal_r+0x304>
 800b8c0:	18039d1e 	bne	r3,zero,800c738 <___vfiprintf_internal_r+0xfa8>
 800b8c4:	dac12217 	ldw	r11,1160(sp)
 800b8c8:	d8011b15 	stw	zero,1132(sp)
 800b8cc:	d811883a 	mov	r8,sp
 800b8d0:	5c97883a 	add	r11,r11,r18
 800b8d4:	dac12215 	stw	r11,1160(sp)
 800b8d8:	88800007 	ldb	r2,0(r17)
 800b8dc:	1002e026 	beq	r2,zero,800c460 <___vfiprintf_internal_r+0xcd0>
 800b8e0:	88c00047 	ldb	r3,1(r17)
 800b8e4:	8c000044 	addi	r16,r17,1
 800b8e8:	d8011d85 	stb	zero,1142(sp)
 800b8ec:	000d883a 	mov	r6,zero
 800b8f0:	027fffc4 	movi	r9,-1
 800b8f4:	0027883a 	mov	r19,zero
 800b8f8:	002b883a 	mov	r21,zero
 800b8fc:	01001604 	movi	r4,88
 800b900:	01400244 	movi	r5,9
 800b904:	03000a84 	movi	r12,42
 800b908:	01c01b04 	movi	r7,108
 800b90c:	84000044 	addi	r16,r16,1
 800b910:	18bff804 	addi	r2,r3,-32
 800b914:	20825f36 	bltu	r4,r2,800c294 <___vfiprintf_internal_r+0xb04>
 800b918:	100490ba 	slli	r2,r2,2
 800b91c:	02820074 	movhi	r10,2049
 800b920:	52ae4c04 	addi	r10,r10,-18128
 800b924:	1285883a 	add	r2,r2,r10
 800b928:	10800017 	ldw	r2,0(r2)
 800b92c:	1000683a 	jmp	r2
 800b930:	0800c104 	addi	zero,at,772
 800b934:	0800c294 	ori	zero,at,778
 800b938:	0800c294 	ori	zero,at,778
 800b93c:	0800c288 	cmpgei	zero,at,778
 800b940:	0800c294 	ori	zero,at,778
 800b944:	0800c294 	ori	zero,at,778
 800b948:	0800c294 	ori	zero,at,778
 800b94c:	0800c294 	ori	zero,at,778
 800b950:	0800c294 	ori	zero,at,778
 800b954:	0800c294 	ori	zero,at,778
 800b958:	0800c260 	cmpeqi	zero,at,777
 800b95c:	0800c27c 	xorhi	zero,at,777
 800b960:	0800c294 	ori	zero,at,778
 800b964:	0800bf34 	orhi	zero,at,764
 800b968:	0800c094 	ori	zero,at,770
 800b96c:	0800c294 	ori	zero,at,778
 800b970:	0800c018 	cmpnei	zero,at,768
 800b974:	0800c024 	muli	zero,at,768
 800b978:	0800c024 	muli	zero,at,768
 800b97c:	0800c024 	muli	zero,at,768
 800b980:	0800c024 	muli	zero,at,768
 800b984:	0800c024 	muli	zero,at,768
 800b988:	0800c024 	muli	zero,at,768
 800b98c:	0800c024 	muli	zero,at,768
 800b990:	0800c024 	muli	zero,at,768
 800b994:	0800c024 	muli	zero,at,768
 800b998:	0800c294 	ori	zero,at,778
 800b99c:	0800c294 	ori	zero,at,778
 800b9a0:	0800c294 	ori	zero,at,778
 800b9a4:	0800c294 	ori	zero,at,778
 800b9a8:	0800c294 	ori	zero,at,778
 800b9ac:	0800c294 	ori	zero,at,778
 800b9b0:	0800c294 	ori	zero,at,778
 800b9b4:	0800c294 	ori	zero,at,778
 800b9b8:	0800c294 	ori	zero,at,778
 800b9bc:	0800c294 	ori	zero,at,778
 800b9c0:	0800c050 	cmplti	zero,at,769
 800b9c4:	0800c294 	ori	zero,at,778
 800b9c8:	0800c294 	ori	zero,at,778
 800b9cc:	0800c294 	ori	zero,at,778
 800b9d0:	0800c294 	ori	zero,at,778
 800b9d4:	0800c294 	ori	zero,at,778
 800b9d8:	0800c294 	ori	zero,at,778
 800b9dc:	0800c294 	ori	zero,at,778
 800b9e0:	0800c294 	ori	zero,at,778
 800b9e4:	0800c294 	ori	zero,at,778
 800b9e8:	0800c294 	ori	zero,at,778
 800b9ec:	0800bae4 	muli	zero,at,747
 800b9f0:	0800c294 	ori	zero,at,778
 800b9f4:	0800c294 	ori	zero,at,778
 800b9f8:	0800c294 	ori	zero,at,778
 800b9fc:	0800c294 	ori	zero,at,778
 800ba00:	0800c294 	ori	zero,at,778
 800ba04:	0800baa8 	cmpgeui	zero,at,746
 800ba08:	0800c294 	ori	zero,at,778
 800ba0c:	0800c294 	ori	zero,at,778
 800ba10:	0800bf90 	cmplti	zero,at,766
 800ba14:	0800c294 	ori	zero,at,778
 800ba18:	0800c294 	ori	zero,at,778
 800ba1c:	0800c294 	ori	zero,at,778
 800ba20:	0800c294 	ori	zero,at,778
 800ba24:	0800c294 	ori	zero,at,778
 800ba28:	0800c294 	ori	zero,at,778
 800ba2c:	0800c294 	ori	zero,at,778
 800ba30:	0800c294 	ori	zero,at,778
 800ba34:	0800c294 	ori	zero,at,778
 800ba38:	0800c294 	ori	zero,at,778
 800ba3c:	0800bfe8 	cmpgeui	zero,at,767
 800ba40:	0800c180 	call	800c18 <__alt_mem_sdram-0x77ff3e8>
 800ba44:	0800c294 	ori	zero,at,778
 800ba48:	0800c294 	ori	zero,at,778
 800ba4c:	0800c294 	ori	zero,at,778
 800ba50:	0800c208 	cmpgei	zero,at,776
 800ba54:	0800c180 	call	800c18 <__alt_mem_sdram-0x77ff3e8>
 800ba58:	0800c294 	ori	zero,at,778
 800ba5c:	0800c294 	ori	zero,at,778
 800ba60:	0800c214 	ori	zero,at,776
 800ba64:	0800c294 	ori	zero,at,778
 800ba68:	0800c0d4 	ori	zero,at,771
 800ba6c:	0800bae8 	cmpgeui	zero,at,747
 800ba70:	0800c1bc 	xorhi	zero,at,774
 800ba74:	0800c1fc 	xorhi	zero,at,775
 800ba78:	0800c294 	ori	zero,at,778
 800ba7c:	0800c120 	cmpeqi	zero,at,772
 800ba80:	0800c294 	ori	zero,at,778
 800ba84:	0800baac 	andhi	zero,at,746
 800ba88:	0800c294 	ori	zero,at,778
 800ba8c:	0800c294 	ori	zero,at,778
 800ba90:	0800c224 	muli	zero,at,776
 800ba94:	42000204 	addi	r8,r8,8
 800ba98:	dac12217 	ldw	r11,1160(sp)
 800ba9c:	5c97883a 	add	r11,r11,r18
 800baa0:	dac12215 	stw	r11,1160(sp)
 800baa4:	003f8c06 	br	800b8d8 <__alt_data_end+0xfc00b8d8>
 800baa8:	ad400414 	ori	r21,r21,16
 800baac:	a880080c 	andi	r2,r21,32
 800bab0:	10012f1e 	bne	r2,zero,800bf70 <___vfiprintf_internal_r+0x7e0>
 800bab4:	a880040c 	andi	r2,r21,16
 800bab8:	1001ff1e 	bne	r2,zero,800c2b8 <___vfiprintf_internal_r+0xb28>
 800babc:	a880100c 	andi	r2,r21,64
 800bac0:	1001fd26 	beq	r2,zero,800c2b8 <___vfiprintf_internal_r+0xb28>
 800bac4:	da812117 	ldw	r10,1156(sp)
 800bac8:	002d883a 	mov	r22,zero
 800bacc:	00800044 	movi	r2,1
 800bad0:	5480000b 	ldhu	r18,0(r10)
 800bad4:	52800104 	addi	r10,r10,4
 800bad8:	da812115 	stw	r10,1156(sp)
 800badc:	9009883a 	mov	r4,r18
 800bae0:	00000a06 	br	800bb0c <___vfiprintf_internal_r+0x37c>
 800bae4:	ad400414 	ori	r21,r21,16
 800bae8:	a880080c 	andi	r2,r21,32
 800baec:	10011426 	beq	r2,zero,800bf40 <___vfiprintf_internal_r+0x7b0>
 800baf0:	da812117 	ldw	r10,1156(sp)
 800baf4:	0005883a 	mov	r2,zero
 800baf8:	54800017 	ldw	r18,0(r10)
 800bafc:	55800117 	ldw	r22,4(r10)
 800bb00:	52800204 	addi	r10,r10,8
 800bb04:	da812115 	stw	r10,1156(sp)
 800bb08:	9588b03a 	or	r4,r18,r22
 800bb0c:	d8011d85 	stb	zero,1142(sp)
 800bb10:	4823883a 	mov	r17,r9
 800bb14:	0019883a 	mov	r12,zero
 800bb18:	48000216 	blt	r9,zero,800bb24 <___vfiprintf_internal_r+0x394>
 800bb1c:	00ffdfc4 	movi	r3,-129
 800bb20:	a8ea703a 	and	r21,r21,r3
 800bb24:	2002221e 	bne	r4,zero,800c3b0 <___vfiprintf_internal_r+0xc20>
 800bb28:	4802c726 	beq	r9,zero,800c648 <___vfiprintf_internal_r+0xeb8>
 800bb2c:	10803fcc 	andi	r2,r2,255
 800bb30:	00c00044 	movi	r3,1
 800bb34:	10c24426 	beq	r2,r3,800c448 <___vfiprintf_internal_r+0xcb8>
 800bb38:	00c00084 	movi	r3,2
 800bb3c:	10c2cc26 	beq	r2,r3,800c670 <___vfiprintf_internal_r+0xee0>
 800bb40:	d8c10a04 	addi	r3,sp,1064
 800bb44:	9008d0fa 	srli	r4,r18,3
 800bb48:	b00a977a 	slli	r5,r22,29
 800bb4c:	b02cd0fa 	srli	r22,r22,3
 800bb50:	948001cc 	andi	r18,r18,7
 800bb54:	90800c04 	addi	r2,r18,48
 800bb58:	18ffffc4 	addi	r3,r3,-1
 800bb5c:	2924b03a 	or	r18,r5,r4
 800bb60:	18800005 	stb	r2,0(r3)
 800bb64:	9588b03a 	or	r4,r18,r22
 800bb68:	203ff61e 	bne	r4,zero,800bb44 <__alt_data_end+0xfc00bb44>
 800bb6c:	a900004c 	andi	r4,r21,1
 800bb70:	d8c12415 	stw	r3,1168(sp)
 800bb74:	2002fb1e 	bne	r4,zero,800c764 <___vfiprintf_internal_r+0xfd4>
 800bb78:	da811e17 	ldw	r10,1144(sp)
 800bb7c:	50e3c83a 	sub	r17,r10,r3
 800bb80:	8825883a 	mov	r18,r17
 800bb84:	8a40010e 	bge	r17,r9,800bb8c <___vfiprintf_internal_r+0x3fc>
 800bb88:	4825883a 	mov	r18,r9
 800bb8c:	63003fcc 	andi	r12,r12,255
 800bb90:	6300201c 	xori	r12,r12,128
 800bb94:	633fe004 	addi	r12,r12,-128
 800bb98:	60000126 	beq	r12,zero,800bba0 <___vfiprintf_internal_r+0x410>
 800bb9c:	94800044 	addi	r18,r18,1
 800bba0:	ab80008c 	andi	r14,r21,2
 800bba4:	70000126 	beq	r14,zero,800bbac <___vfiprintf_internal_r+0x41c>
 800bba8:	94800084 	addi	r18,r18,2
 800bbac:	ad80210c 	andi	r22,r21,132
 800bbb0:	b001df1e 	bne	r22,zero,800c330 <___vfiprintf_internal_r+0xba0>
 800bbb4:	9c8fc83a 	sub	r7,r19,r18
 800bbb8:	01c1dd0e 	bge	zero,r7,800c330 <___vfiprintf_internal_r+0xba0>
 800bbbc:	03000404 	movi	r12,16
 800bbc0:	d8811c17 	ldw	r2,1136(sp)
 800bbc4:	61c3920e 	bge	r12,r7,800ca10 <___vfiprintf_internal_r+0x1280>
 800bbc8:	028200b4 	movhi	r10,2050
 800bbcc:	52b6e204 	addi	r10,r10,-9336
 800bbd0:	dc012915 	stw	r16,1188(sp)
 800bbd4:	d9811b17 	ldw	r6,1132(sp)
 800bbd8:	da812315 	stw	r10,1164(sp)
 800bbdc:	00c001c4 	movi	r3,7
 800bbe0:	da412515 	stw	r9,1172(sp)
 800bbe4:	db812815 	stw	r14,1184(sp)
 800bbe8:	3821883a 	mov	r16,r7
 800bbec:	00000506 	br	800bc04 <___vfiprintf_internal_r+0x474>
 800bbf0:	31400084 	addi	r5,r6,2
 800bbf4:	42000204 	addi	r8,r8,8
 800bbf8:	200d883a 	mov	r6,r4
 800bbfc:	843ffc04 	addi	r16,r16,-16
 800bc00:	64000d0e 	bge	r12,r16,800bc38 <___vfiprintf_internal_r+0x4a8>
 800bc04:	10800404 	addi	r2,r2,16
 800bc08:	31000044 	addi	r4,r6,1
 800bc0c:	47000015 	stw	fp,0(r8)
 800bc10:	43000115 	stw	r12,4(r8)
 800bc14:	d8811c15 	stw	r2,1136(sp)
 800bc18:	d9011b15 	stw	r4,1132(sp)
 800bc1c:	193ff40e 	bge	r3,r4,800bbf0 <__alt_data_end+0xfc00bbf0>
 800bc20:	1001b51e 	bne	r2,zero,800c2f8 <___vfiprintf_internal_r+0xb68>
 800bc24:	843ffc04 	addi	r16,r16,-16
 800bc28:	000d883a 	mov	r6,zero
 800bc2c:	01400044 	movi	r5,1
 800bc30:	d811883a 	mov	r8,sp
 800bc34:	643ff316 	blt	r12,r16,800bc04 <__alt_data_end+0xfc00bc04>
 800bc38:	800f883a 	mov	r7,r16
 800bc3c:	da412517 	ldw	r9,1172(sp)
 800bc40:	db812817 	ldw	r14,1184(sp)
 800bc44:	dc012917 	ldw	r16,1188(sp)
 800bc48:	dac12317 	ldw	r11,1164(sp)
 800bc4c:	3887883a 	add	r3,r7,r2
 800bc50:	41c00115 	stw	r7,4(r8)
 800bc54:	42c00015 	stw	r11,0(r8)
 800bc58:	d8c11c15 	stw	r3,1136(sp)
 800bc5c:	d9411b15 	stw	r5,1132(sp)
 800bc60:	008001c4 	movi	r2,7
 800bc64:	11429316 	blt	r2,r5,800c6b4 <___vfiprintf_internal_r+0xf24>
 800bc68:	d9011d87 	ldb	r4,1142(sp)
 800bc6c:	42000204 	addi	r8,r8,8
 800bc70:	28800044 	addi	r2,r5,1
 800bc74:	2001b31e 	bne	r4,zero,800c344 <___vfiprintf_internal_r+0xbb4>
 800bc78:	70000c26 	beq	r14,zero,800bcac <___vfiprintf_internal_r+0x51c>
 800bc7c:	d9011d04 	addi	r4,sp,1140
 800bc80:	18c00084 	addi	r3,r3,2
 800bc84:	41000015 	stw	r4,0(r8)
 800bc88:	01000084 	movi	r4,2
 800bc8c:	41000115 	stw	r4,4(r8)
 800bc90:	d8c11c15 	stw	r3,1136(sp)
 800bc94:	d8811b15 	stw	r2,1132(sp)
 800bc98:	010001c4 	movi	r4,7
 800bc9c:	20826516 	blt	r4,r2,800c634 <___vfiprintf_internal_r+0xea4>
 800bca0:	100b883a 	mov	r5,r2
 800bca4:	42000204 	addi	r8,r8,8
 800bca8:	10800044 	addi	r2,r2,1
 800bcac:	01002004 	movi	r4,128
 800bcb0:	b1021a26 	beq	r22,r4,800c51c <___vfiprintf_internal_r+0xd8c>
 800bcb4:	4c6dc83a 	sub	r22,r9,r17
 800bcb8:	0580230e 	bge	zero,r22,800bd48 <___vfiprintf_internal_r+0x5b8>
 800bcbc:	01c00404 	movi	r7,16
 800bcc0:	3d83300e 	bge	r7,r22,800c984 <___vfiprintf_internal_r+0x11f4>
 800bcc4:	008200b4 	movhi	r2,2050
 800bcc8:	10b6de04 	addi	r2,r2,-9352
 800bccc:	d8812315 	stw	r2,1164(sp)
 800bcd0:	030001c4 	movi	r12,7
 800bcd4:	00000506 	br	800bcec <___vfiprintf_internal_r+0x55c>
 800bcd8:	28800084 	addi	r2,r5,2
 800bcdc:	42000204 	addi	r8,r8,8
 800bce0:	200b883a 	mov	r5,r4
 800bce4:	b5bffc04 	addi	r22,r22,-16
 800bce8:	3d800d0e 	bge	r7,r22,800bd20 <___vfiprintf_internal_r+0x590>
 800bcec:	18c00404 	addi	r3,r3,16
 800bcf0:	29000044 	addi	r4,r5,1
 800bcf4:	45c00015 	stw	r23,0(r8)
 800bcf8:	41c00115 	stw	r7,4(r8)
 800bcfc:	d8c11c15 	stw	r3,1136(sp)
 800bd00:	d9011b15 	stw	r4,1132(sp)
 800bd04:	613ff40e 	bge	r12,r4,800bcd8 <__alt_data_end+0xfc00bcd8>
 800bd08:	18019b1e 	bne	r3,zero,800c378 <___vfiprintf_internal_r+0xbe8>
 800bd0c:	b5bffc04 	addi	r22,r22,-16
 800bd10:	000b883a 	mov	r5,zero
 800bd14:	00800044 	movi	r2,1
 800bd18:	d811883a 	mov	r8,sp
 800bd1c:	3dbff316 	blt	r7,r22,800bcec <__alt_data_end+0xfc00bcec>
 800bd20:	da812317 	ldw	r10,1164(sp)
 800bd24:	1d87883a 	add	r3,r3,r22
 800bd28:	45800115 	stw	r22,4(r8)
 800bd2c:	42800015 	stw	r10,0(r8)
 800bd30:	d8c11c15 	stw	r3,1136(sp)
 800bd34:	d8811b15 	stw	r2,1132(sp)
 800bd38:	010001c4 	movi	r4,7
 800bd3c:	2081dd16 	blt	r4,r2,800c4b4 <___vfiprintf_internal_r+0xd24>
 800bd40:	42000204 	addi	r8,r8,8
 800bd44:	10800044 	addi	r2,r2,1
 800bd48:	da812417 	ldw	r10,1168(sp)
 800bd4c:	1c47883a 	add	r3,r3,r17
 800bd50:	44400115 	stw	r17,4(r8)
 800bd54:	42800015 	stw	r10,0(r8)
 800bd58:	d8c11c15 	stw	r3,1136(sp)
 800bd5c:	d8811b15 	stw	r2,1132(sp)
 800bd60:	010001c4 	movi	r4,7
 800bd64:	2081dc0e 	bge	r4,r2,800c4d8 <___vfiprintf_internal_r+0xd48>
 800bd68:	1802611e 	bne	r3,zero,800c6f0 <___vfiprintf_internal_r+0xf60>
 800bd6c:	d8011b15 	stw	zero,1132(sp)
 800bd70:	aac0010c 	andi	r11,r21,4
 800bd74:	58002726 	beq	r11,zero,800be14 <___vfiprintf_internal_r+0x684>
 800bd78:	9ca3c83a 	sub	r17,r19,r18
 800bd7c:	d811883a 	mov	r8,sp
 800bd80:	0443510e 	bge	zero,r17,800cac8 <___vfiprintf_internal_r+0x1338>
 800bd84:	01c00404 	movi	r7,16
 800bd88:	3c43320e 	bge	r7,r17,800ca54 <___vfiprintf_internal_r+0x12c4>
 800bd8c:	008200b4 	movhi	r2,2050
 800bd90:	10b6e204 	addi	r2,r2,-9336
 800bd94:	d9011b17 	ldw	r4,1132(sp)
 800bd98:	d8812315 	stw	r2,1164(sp)
 800bd9c:	382d883a 	mov	r22,r7
 800bda0:	054001c4 	movi	r21,7
 800bda4:	00000506 	br	800bdbc <___vfiprintf_internal_r+0x62c>
 800bda8:	21400084 	addi	r5,r4,2
 800bdac:	42000204 	addi	r8,r8,8
 800bdb0:	1009883a 	mov	r4,r2
 800bdb4:	8c7ffc04 	addi	r17,r17,-16
 800bdb8:	b4400d0e 	bge	r22,r17,800bdf0 <___vfiprintf_internal_r+0x660>
 800bdbc:	18c00404 	addi	r3,r3,16
 800bdc0:	20800044 	addi	r2,r4,1
 800bdc4:	47000015 	stw	fp,0(r8)
 800bdc8:	45800115 	stw	r22,4(r8)
 800bdcc:	d8c11c15 	stw	r3,1136(sp)
 800bdd0:	d8811b15 	stw	r2,1132(sp)
 800bdd4:	a8bff40e 	bge	r21,r2,800bda8 <__alt_data_end+0xfc00bda8>
 800bdd8:	1801ac1e 	bne	r3,zero,800c48c <___vfiprintf_internal_r+0xcfc>
 800bddc:	8c7ffc04 	addi	r17,r17,-16
 800bde0:	0009883a 	mov	r4,zero
 800bde4:	01400044 	movi	r5,1
 800bde8:	d811883a 	mov	r8,sp
 800bdec:	b47ff316 	blt	r22,r17,800bdbc <__alt_data_end+0xfc00bdbc>
 800bdf0:	da812317 	ldw	r10,1164(sp)
 800bdf4:	1c47883a 	add	r3,r3,r17
 800bdf8:	44400115 	stw	r17,4(r8)
 800bdfc:	42800015 	stw	r10,0(r8)
 800be00:	d8c11c15 	stw	r3,1136(sp)
 800be04:	d9411b15 	stw	r5,1132(sp)
 800be08:	008001c4 	movi	r2,7
 800be0c:	1141b70e 	bge	r2,r5,800c4ec <___vfiprintf_internal_r+0xd5c>
 800be10:	1802cf1e 	bne	r3,zero,800c950 <___vfiprintf_internal_r+0x11c0>
 800be14:	94c2ca16 	blt	r18,r19,800c940 <___vfiprintf_internal_r+0x11b0>
 800be18:	dac12217 	ldw	r11,1160(sp)
 800be1c:	5c97883a 	add	r11,r11,r18
 800be20:	dac12215 	stw	r11,1160(sp)
 800be24:	d8011b15 	stw	zero,1132(sp)
 800be28:	d811883a 	mov	r8,sp
 800be2c:	003e8d06 	br	800b864 <__alt_data_end+0xfc00b864>
 800be30:	d9012017 	ldw	r4,1152(sp)
 800be34:	a00b883a 	mov	r5,r20
 800be38:	80065200 	call	8006520 <__swsetup_r>
 800be3c:	10002c1e 	bne	r2,zero,800bef0 <___vfiprintf_internal_r+0x760>
 800be40:	a0c0030b 	ldhu	r3,12(r20)
 800be44:	01000284 	movi	r4,10
 800be48:	1805883a 	mov	r2,r3
 800be4c:	1080068c 	andi	r2,r2,26
 800be50:	113e731e 	bne	r2,r4,800b820 <__alt_data_end+0xfc00b820>
 800be54:	a080038b 	ldhu	r2,14(r20)
 800be58:	113fffcc 	andi	r4,r2,65535
 800be5c:	2120001c 	xori	r4,r4,32768
 800be60:	21200004 	addi	r4,r4,-32768
 800be64:	203e6e16 	blt	r4,zero,800b820 <__alt_data_end+0xfc00b820>
 800be68:	a3001917 	ldw	r12,100(r20)
 800be6c:	a2c00717 	ldw	r11,28(r20)
 800be70:	a2800917 	ldw	r10,36(r20)
 800be74:	d9012017 	ldw	r4,1152(sp)
 800be78:	d9c12117 	ldw	r7,1156(sp)
 800be7c:	02410004 	movi	r9,1024
 800be80:	18ffff4c 	andi	r3,r3,65533
 800be84:	da4b883a 	add	r5,sp,r9
 800be88:	b00d883a 	mov	r6,r22
 800be8c:	d8c1030d 	sth	r3,1036(sp)
 800be90:	db011915 	stw	r12,1124(sp)
 800be94:	d881038d 	sth	r2,1038(sp)
 800be98:	dac10715 	stw	r11,1052(sp)
 800be9c:	da810915 	stw	r10,1060(sp)
 800bea0:	dec10015 	stw	sp,1024(sp)
 800bea4:	dec10415 	stw	sp,1040(sp)
 800bea8:	da410215 	stw	r9,1032(sp)
 800beac:	da410515 	stw	r9,1044(sp)
 800beb0:	d8010615 	stw	zero,1048(sp)
 800beb4:	800b7900 	call	800b790 <___vfiprintf_internal_r>
 800beb8:	1021883a 	mov	r16,r2
 800bebc:	10000416 	blt	r2,zero,800bed0 <___vfiprintf_internal_r+0x740>
 800bec0:	d9012017 	ldw	r4,1152(sp)
 800bec4:	d9410004 	addi	r5,sp,1024
 800bec8:	8007f780 	call	8007f78 <_fflush_r>
 800becc:	1002fc1e 	bne	r2,zero,800cac0 <___vfiprintf_internal_r+0x1330>
 800bed0:	d881030b 	ldhu	r2,1036(sp)
 800bed4:	1080100c 	andi	r2,r2,64
 800bed8:	10000326 	beq	r2,zero,800bee8 <___vfiprintf_internal_r+0x758>
 800bedc:	a080030b 	ldhu	r2,12(r20)
 800bee0:	10801014 	ori	r2,r2,64
 800bee4:	a080030d 	sth	r2,12(r20)
 800bee8:	8005883a 	mov	r2,r16
 800beec:	00000106 	br	800bef4 <___vfiprintf_internal_r+0x764>
 800bef0:	00bfffc4 	movi	r2,-1
 800bef4:	dfc13517 	ldw	ra,1236(sp)
 800bef8:	df013417 	ldw	fp,1232(sp)
 800befc:	ddc13317 	ldw	r23,1228(sp)
 800bf00:	dd813217 	ldw	r22,1224(sp)
 800bf04:	dd413117 	ldw	r21,1220(sp)
 800bf08:	dd013017 	ldw	r20,1216(sp)
 800bf0c:	dcc12f17 	ldw	r19,1212(sp)
 800bf10:	dc812e17 	ldw	r18,1208(sp)
 800bf14:	dc412d17 	ldw	r17,1204(sp)
 800bf18:	dc012c17 	ldw	r16,1200(sp)
 800bf1c:	dec13604 	addi	sp,sp,1240
 800bf20:	f800283a 	ret
 800bf24:	80085200 	call	8008520 <__sinit>
 800bf28:	003e2b06 	br	800b7d8 <__alt_data_end+0xfc00b7d8>
 800bf2c:	04e7c83a 	sub	r19,zero,r19
 800bf30:	d8812115 	stw	r2,1156(sp)
 800bf34:	ad400114 	ori	r21,r21,4
 800bf38:	80c00007 	ldb	r3,0(r16)
 800bf3c:	003e7306 	br	800b90c <__alt_data_end+0xfc00b90c>
 800bf40:	a880040c 	andi	r2,r21,16
 800bf44:	1000e41e 	bne	r2,zero,800c2d8 <___vfiprintf_internal_r+0xb48>
 800bf48:	a880100c 	andi	r2,r21,64
 800bf4c:	1000e226 	beq	r2,zero,800c2d8 <___vfiprintf_internal_r+0xb48>
 800bf50:	da812117 	ldw	r10,1156(sp)
 800bf54:	002d883a 	mov	r22,zero
 800bf58:	0005883a 	mov	r2,zero
 800bf5c:	5480000b 	ldhu	r18,0(r10)
 800bf60:	52800104 	addi	r10,r10,4
 800bf64:	da812115 	stw	r10,1156(sp)
 800bf68:	9009883a 	mov	r4,r18
 800bf6c:	003ee706 	br	800bb0c <__alt_data_end+0xfc00bb0c>
 800bf70:	da812117 	ldw	r10,1156(sp)
 800bf74:	00800044 	movi	r2,1
 800bf78:	54800017 	ldw	r18,0(r10)
 800bf7c:	55800117 	ldw	r22,4(r10)
 800bf80:	52800204 	addi	r10,r10,8
 800bf84:	da812115 	stw	r10,1156(sp)
 800bf88:	9588b03a 	or	r4,r18,r22
 800bf8c:	003edf06 	br	800bb0c <__alt_data_end+0xfc00bb0c>
 800bf90:	02c200b4 	movhi	r11,2050
 800bf94:	5af5d804 	addi	r11,r11,-10400
 800bf98:	d9811d85 	stb	r6,1142(sp)
 800bf9c:	dac12615 	stw	r11,1176(sp)
 800bfa0:	a900080c 	andi	r4,r21,32
 800bfa4:	d8812117 	ldw	r2,1156(sp)
 800bfa8:	2000a526 	beq	r4,zero,800c240 <___vfiprintf_internal_r+0xab0>
 800bfac:	da812117 	ldw	r10,1156(sp)
 800bfb0:	14800017 	ldw	r18,0(r2)
 800bfb4:	15800117 	ldw	r22,4(r2)
 800bfb8:	52800204 	addi	r10,r10,8
 800bfbc:	da812115 	stw	r10,1156(sp)
 800bfc0:	a880004c 	andi	r2,r21,1
 800bfc4:	1001d926 	beq	r2,zero,800c72c <___vfiprintf_internal_r+0xf9c>
 800bfc8:	9588b03a 	or	r4,r18,r22
 800bfcc:	20024426 	beq	r4,zero,800c8e0 <___vfiprintf_internal_r+0x1150>
 800bfd0:	00800c04 	movi	r2,48
 800bfd4:	d8811d05 	stb	r2,1140(sp)
 800bfd8:	d8c11d45 	stb	r3,1141(sp)
 800bfdc:	ad400094 	ori	r21,r21,2
 800bfe0:	00800084 	movi	r2,2
 800bfe4:	003ec906 	br	800bb0c <__alt_data_end+0xfc00bb0c>
 800bfe8:	da812117 	ldw	r10,1156(sp)
 800bfec:	04800044 	movi	r18,1
 800bff0:	dac10004 	addi	r11,sp,1024
 800bff4:	50800017 	ldw	r2,0(r10)
 800bff8:	52800104 	addi	r10,r10,4
 800bffc:	d8011d85 	stb	zero,1142(sp)
 800c000:	d8810005 	stb	r2,1024(sp)
 800c004:	da812115 	stw	r10,1156(sp)
 800c008:	9023883a 	mov	r17,r18
 800c00c:	dac12415 	stw	r11,1168(sp)
 800c010:	0013883a 	mov	r9,zero
 800c014:	003ee206 	br	800bba0 <__alt_data_end+0xfc00bba0>
 800c018:	ad402014 	ori	r21,r21,128
 800c01c:	80c00007 	ldb	r3,0(r16)
 800c020:	003e3a06 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c024:	8015883a 	mov	r10,r16
 800c028:	0027883a 	mov	r19,zero
 800c02c:	18bff404 	addi	r2,r3,-48
 800c030:	50c00007 	ldb	r3,0(r10)
 800c034:	9cc002a4 	muli	r19,r19,10
 800c038:	84000044 	addi	r16,r16,1
 800c03c:	8015883a 	mov	r10,r16
 800c040:	98a7883a 	add	r19,r19,r2
 800c044:	18bff404 	addi	r2,r3,-48
 800c048:	28bff92e 	bgeu	r5,r2,800c030 <__alt_data_end+0xfc00c030>
 800c04c:	003e3006 	br	800b910 <__alt_data_end+0xfc00b910>
 800c050:	ad400414 	ori	r21,r21,16
 800c054:	d9811d85 	stb	r6,1142(sp)
 800c058:	a880080c 	andi	r2,r21,32
 800c05c:	d8c12117 	ldw	r3,1156(sp)
 800c060:	10004b26 	beq	r2,zero,800c190 <___vfiprintf_internal_r+0xa00>
 800c064:	da812117 	ldw	r10,1156(sp)
 800c068:	18800117 	ldw	r2,4(r3)
 800c06c:	1c800017 	ldw	r18,0(r3)
 800c070:	52800204 	addi	r10,r10,8
 800c074:	da812115 	stw	r10,1156(sp)
 800c078:	102d883a 	mov	r22,r2
 800c07c:	1001f116 	blt	r2,zero,800c844 <___vfiprintf_internal_r+0x10b4>
 800c080:	db011d83 	ldbu	r12,1142(sp)
 800c084:	4823883a 	mov	r17,r9
 800c088:	00800044 	movi	r2,1
 800c08c:	9588b03a 	or	r4,r18,r22
 800c090:	003ea106 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c094:	80c00007 	ldb	r3,0(r16)
 800c098:	82800044 	addi	r10,r16,1
 800c09c:	1b027f26 	beq	r3,r12,800ca9c <___vfiprintf_internal_r+0x130c>
 800c0a0:	18bff404 	addi	r2,r3,-48
 800c0a4:	5021883a 	mov	r16,r10
 800c0a8:	0013883a 	mov	r9,zero
 800c0ac:	28be1836 	bltu	r5,r2,800b910 <__alt_data_end+0xfc00b910>
 800c0b0:	80c00007 	ldb	r3,0(r16)
 800c0b4:	4a4002a4 	muli	r9,r9,10
 800c0b8:	84000044 	addi	r16,r16,1
 800c0bc:	1253883a 	add	r9,r2,r9
 800c0c0:	18bff404 	addi	r2,r3,-48
 800c0c4:	28bffa2e 	bgeu	r5,r2,800c0b0 <__alt_data_end+0xfc00c0b0>
 800c0c8:	483e110e 	bge	r9,zero,800b910 <__alt_data_end+0xfc00b910>
 800c0cc:	027fffc4 	movi	r9,-1
 800c0d0:	003e0f06 	br	800b910 <__alt_data_end+0xfc00b910>
 800c0d4:	d9811d85 	stb	r6,1142(sp)
 800c0d8:	a880080c 	andi	r2,r21,32
 800c0dc:	1001ee26 	beq	r2,zero,800c898 <___vfiprintf_internal_r+0x1108>
 800c0e0:	da812117 	ldw	r10,1156(sp)
 800c0e4:	dac12217 	ldw	r11,1160(sp)
 800c0e8:	50800017 	ldw	r2,0(r10)
 800c0ec:	5807d7fa 	srai	r3,r11,31
 800c0f0:	52800104 	addi	r10,r10,4
 800c0f4:	da812115 	stw	r10,1156(sp)
 800c0f8:	12c00015 	stw	r11,0(r2)
 800c0fc:	10c00115 	stw	r3,4(r2)
 800c100:	003dd806 	br	800b864 <__alt_data_end+0xfc00b864>
 800c104:	30803fcc 	andi	r2,r6,255
 800c108:	1080201c 	xori	r2,r2,128
 800c10c:	10bfe004 	addi	r2,r2,-128
 800c110:	1001df1e 	bne	r2,zero,800c890 <___vfiprintf_internal_r+0x1100>
 800c114:	01800804 	movi	r6,32
 800c118:	80c00007 	ldb	r3,0(r16)
 800c11c:	003dfb06 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c120:	da812117 	ldw	r10,1156(sp)
 800c124:	dac12117 	ldw	r11,1156(sp)
 800c128:	d8011d85 	stb	zero,1142(sp)
 800c12c:	52800017 	ldw	r10,0(r10)
 800c130:	5d800104 	addi	r22,r11,4
 800c134:	da812415 	stw	r10,1168(sp)
 800c138:	50023b26 	beq	r10,zero,800ca28 <___vfiprintf_internal_r+0x1298>
 800c13c:	d9012417 	ldw	r4,1168(sp)
 800c140:	48021f16 	blt	r9,zero,800c9c0 <___vfiprintf_internal_r+0x1230>
 800c144:	480d883a 	mov	r6,r9
 800c148:	000b883a 	mov	r5,zero
 800c14c:	da012a15 	stw	r8,1192(sp)
 800c150:	da412b15 	stw	r9,1196(sp)
 800c154:	80099d80 	call	80099d8 <memchr>
 800c158:	da012a17 	ldw	r8,1192(sp)
 800c15c:	da412b17 	ldw	r9,1196(sp)
 800c160:	10024726 	beq	r2,zero,800ca80 <___vfiprintf_internal_r+0x12f0>
 800c164:	d8c12417 	ldw	r3,1168(sp)
 800c168:	10e3c83a 	sub	r17,r2,r3
 800c16c:	4c41f616 	blt	r9,r17,800c948 <___vfiprintf_internal_r+0x11b8>
 800c170:	db011d83 	ldbu	r12,1142(sp)
 800c174:	dd812115 	stw	r22,1156(sp)
 800c178:	0013883a 	mov	r9,zero
 800c17c:	003e8006 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c180:	d9811d85 	stb	r6,1142(sp)
 800c184:	a880080c 	andi	r2,r21,32
 800c188:	d8c12117 	ldw	r3,1156(sp)
 800c18c:	103fb51e 	bne	r2,zero,800c064 <__alt_data_end+0xfc00c064>
 800c190:	a880040c 	andi	r2,r21,16
 800c194:	10015e1e 	bne	r2,zero,800c710 <___vfiprintf_internal_r+0xf80>
 800c198:	a880100c 	andi	r2,r21,64
 800c19c:	10015c26 	beq	r2,zero,800c710 <___vfiprintf_internal_r+0xf80>
 800c1a0:	1c80000f 	ldh	r18,0(r3)
 800c1a4:	da812117 	ldw	r10,1156(sp)
 800c1a8:	902dd7fa 	srai	r22,r18,31
 800c1ac:	52800104 	addi	r10,r10,4
 800c1b0:	da812115 	stw	r10,1156(sp)
 800c1b4:	b005883a 	mov	r2,r22
 800c1b8:	003fb006 	br	800c07c <__alt_data_end+0xfc00c07c>
 800c1bc:	da812117 	ldw	r10,1156(sp)
 800c1c0:	00800c04 	movi	r2,48
 800c1c4:	02c200b4 	movhi	r11,2050
 800c1c8:	54800017 	ldw	r18,0(r10)
 800c1cc:	d8811d05 	stb	r2,1140(sp)
 800c1d0:	52800104 	addi	r10,r10,4
 800c1d4:	00801e04 	movi	r2,120
 800c1d8:	5af5dd04 	addi	r11,r11,-10380
 800c1dc:	d8811d45 	stb	r2,1141(sp)
 800c1e0:	002d883a 	mov	r22,zero
 800c1e4:	ad400094 	ori	r21,r21,2
 800c1e8:	da812115 	stw	r10,1156(sp)
 800c1ec:	dac12615 	stw	r11,1176(sp)
 800c1f0:	00800084 	movi	r2,2
 800c1f4:	9009883a 	mov	r4,r18
 800c1f8:	003e4406 	br	800bb0c <__alt_data_end+0xfc00bb0c>
 800c1fc:	ad400814 	ori	r21,r21,32
 800c200:	80c00007 	ldb	r3,0(r16)
 800c204:	003dc106 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c208:	ad401014 	ori	r21,r21,64
 800c20c:	80c00007 	ldb	r3,0(r16)
 800c210:	003dbe06 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c214:	80c00007 	ldb	r3,0(r16)
 800c218:	19c1de26 	beq	r3,r7,800c994 <___vfiprintf_internal_r+0x1204>
 800c21c:	ad400414 	ori	r21,r21,16
 800c220:	003dba06 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c224:	008200b4 	movhi	r2,2050
 800c228:	10b5dd04 	addi	r2,r2,-10380
 800c22c:	d8812615 	stw	r2,1176(sp)
 800c230:	d9811d85 	stb	r6,1142(sp)
 800c234:	a900080c 	andi	r4,r21,32
 800c238:	d8812117 	ldw	r2,1156(sp)
 800c23c:	203f5b1e 	bne	r4,zero,800bfac <__alt_data_end+0xfc00bfac>
 800c240:	a900040c 	andi	r4,r21,16
 800c244:	2001a826 	beq	r4,zero,800c8e8 <___vfiprintf_internal_r+0x1158>
 800c248:	dac12117 	ldw	r11,1156(sp)
 800c24c:	14800017 	ldw	r18,0(r2)
 800c250:	002d883a 	mov	r22,zero
 800c254:	5ac00104 	addi	r11,r11,4
 800c258:	dac12115 	stw	r11,1156(sp)
 800c25c:	003f5806 	br	800bfc0 <__alt_data_end+0xfc00bfc0>
 800c260:	da812117 	ldw	r10,1156(sp)
 800c264:	54c00017 	ldw	r19,0(r10)
 800c268:	50800104 	addi	r2,r10,4
 800c26c:	983f2f16 	blt	r19,zero,800bf2c <__alt_data_end+0xfc00bf2c>
 800c270:	d8812115 	stw	r2,1156(sp)
 800c274:	80c00007 	ldb	r3,0(r16)
 800c278:	003da406 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c27c:	01800ac4 	movi	r6,43
 800c280:	80c00007 	ldb	r3,0(r16)
 800c284:	003da106 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c288:	ad400054 	ori	r21,r21,1
 800c28c:	80c00007 	ldb	r3,0(r16)
 800c290:	003d9e06 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c294:	d9811d85 	stb	r6,1142(sp)
 800c298:	18007126 	beq	r3,zero,800c460 <___vfiprintf_internal_r+0xcd0>
 800c29c:	04800044 	movi	r18,1
 800c2a0:	d8c10005 	stb	r3,1024(sp)
 800c2a4:	d8c10004 	addi	r3,sp,1024
 800c2a8:	d8011d85 	stb	zero,1142(sp)
 800c2ac:	9023883a 	mov	r17,r18
 800c2b0:	d8c12415 	stw	r3,1168(sp)
 800c2b4:	003f5606 	br	800c010 <__alt_data_end+0xfc00c010>
 800c2b8:	dac12117 	ldw	r11,1156(sp)
 800c2bc:	002d883a 	mov	r22,zero
 800c2c0:	00800044 	movi	r2,1
 800c2c4:	5c800017 	ldw	r18,0(r11)
 800c2c8:	5ac00104 	addi	r11,r11,4
 800c2cc:	dac12115 	stw	r11,1156(sp)
 800c2d0:	9009883a 	mov	r4,r18
 800c2d4:	003e0d06 	br	800bb0c <__alt_data_end+0xfc00bb0c>
 800c2d8:	dac12117 	ldw	r11,1156(sp)
 800c2dc:	002d883a 	mov	r22,zero
 800c2e0:	0005883a 	mov	r2,zero
 800c2e4:	5c800017 	ldw	r18,0(r11)
 800c2e8:	5ac00104 	addi	r11,r11,4
 800c2ec:	dac12115 	stw	r11,1156(sp)
 800c2f0:	9009883a 	mov	r4,r18
 800c2f4:	003e0506 	br	800bb0c <__alt_data_end+0xfc00bb0c>
 800c2f8:	d9012017 	ldw	r4,1152(sp)
 800c2fc:	a00b883a 	mov	r5,r20
 800c300:	d9811a04 	addi	r6,sp,1128
 800c304:	d8c12a15 	stw	r3,1192(sp)
 800c308:	db012b15 	stw	r12,1196(sp)
 800c30c:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c310:	d8c12a17 	ldw	r3,1192(sp)
 800c314:	db012b17 	ldw	r12,1196(sp)
 800c318:	1000571e 	bne	r2,zero,800c478 <___vfiprintf_internal_r+0xce8>
 800c31c:	d9811b17 	ldw	r6,1132(sp)
 800c320:	d8811c17 	ldw	r2,1136(sp)
 800c324:	d811883a 	mov	r8,sp
 800c328:	31400044 	addi	r5,r6,1
 800c32c:	003e3306 	br	800bbfc <__alt_data_end+0xfc00bbfc>
 800c330:	d9411b17 	ldw	r5,1132(sp)
 800c334:	d8c11c17 	ldw	r3,1136(sp)
 800c338:	28800044 	addi	r2,r5,1
 800c33c:	d9011d87 	ldb	r4,1142(sp)
 800c340:	203e4d26 	beq	r4,zero,800bc78 <__alt_data_end+0xfc00bc78>
 800c344:	01000044 	movi	r4,1
 800c348:	d9411d84 	addi	r5,sp,1142
 800c34c:	1907883a 	add	r3,r3,r4
 800c350:	41400015 	stw	r5,0(r8)
 800c354:	41000115 	stw	r4,4(r8)
 800c358:	d8c11c15 	stw	r3,1136(sp)
 800c35c:	d8811b15 	stw	r2,1132(sp)
 800c360:	014001c4 	movi	r5,7
 800c364:	2880aa16 	blt	r5,r2,800c610 <___vfiprintf_internal_r+0xe80>
 800c368:	100b883a 	mov	r5,r2
 800c36c:	42000204 	addi	r8,r8,8
 800c370:	10800044 	addi	r2,r2,1
 800c374:	003e4006 	br	800bc78 <__alt_data_end+0xfc00bc78>
 800c378:	d9012017 	ldw	r4,1152(sp)
 800c37c:	a00b883a 	mov	r5,r20
 800c380:	d9811a04 	addi	r6,sp,1128
 800c384:	d9c12a15 	stw	r7,1192(sp)
 800c388:	db012b15 	stw	r12,1196(sp)
 800c38c:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c390:	d9c12a17 	ldw	r7,1192(sp)
 800c394:	db012b17 	ldw	r12,1196(sp)
 800c398:	1000371e 	bne	r2,zero,800c478 <___vfiprintf_internal_r+0xce8>
 800c39c:	d9411b17 	ldw	r5,1132(sp)
 800c3a0:	d8c11c17 	ldw	r3,1136(sp)
 800c3a4:	d811883a 	mov	r8,sp
 800c3a8:	28800044 	addi	r2,r5,1
 800c3ac:	003e4d06 	br	800bce4 <__alt_data_end+0xfc00bce4>
 800c3b0:	10803fcc 	andi	r2,r2,255
 800c3b4:	00c00044 	movi	r3,1
 800c3b8:	10fddf1e 	bne	r2,r3,800bb38 <__alt_data_end+0xfc00bb38>
 800c3bc:	b000021e 	bne	r22,zero,800c3c8 <___vfiprintf_internal_r+0xc38>
 800c3c0:	00800244 	movi	r2,9
 800c3c4:	1480202e 	bgeu	r2,r18,800c448 <___vfiprintf_internal_r+0xcb8>
 800c3c8:	dc012515 	stw	r16,1172(sp)
 800c3cc:	dc410a04 	addi	r17,sp,1064
 800c3d0:	9021883a 	mov	r16,r18
 800c3d4:	da012415 	stw	r8,1168(sp)
 800c3d8:	b025883a 	mov	r18,r22
 800c3dc:	da412315 	stw	r9,1164(sp)
 800c3e0:	602d883a 	mov	r22,r12
 800c3e4:	8009883a 	mov	r4,r16
 800c3e8:	900b883a 	mov	r5,r18
 800c3ec:	01800284 	movi	r6,10
 800c3f0:	000f883a 	mov	r7,zero
 800c3f4:	800da080 	call	800da08 <__umoddi3>
 800c3f8:	10800c04 	addi	r2,r2,48
 800c3fc:	8c7fffc4 	addi	r17,r17,-1
 800c400:	8009883a 	mov	r4,r16
 800c404:	900b883a 	mov	r5,r18
 800c408:	01800284 	movi	r6,10
 800c40c:	000f883a 	mov	r7,zero
 800c410:	88800005 	stb	r2,0(r17)
 800c414:	800d4480 	call	800d448 <__udivdi3>
 800c418:	1021883a 	mov	r16,r2
 800c41c:	10c4b03a 	or	r2,r2,r3
 800c420:	1825883a 	mov	r18,r3
 800c424:	103fef1e 	bne	r2,zero,800c3e4 <__alt_data_end+0xfc00c3e4>
 800c428:	da811e17 	ldw	r10,1144(sp)
 800c42c:	da012417 	ldw	r8,1168(sp)
 800c430:	da412317 	ldw	r9,1164(sp)
 800c434:	dc412415 	stw	r17,1168(sp)
 800c438:	b019883a 	mov	r12,r22
 800c43c:	dc012517 	ldw	r16,1172(sp)
 800c440:	5463c83a 	sub	r17,r10,r17
 800c444:	003dce06 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c448:	94800c04 	addi	r18,r18,48
 800c44c:	d8c109c4 	addi	r3,sp,1063
 800c450:	dc8109c5 	stb	r18,1063(sp)
 800c454:	dc412717 	ldw	r17,1180(sp)
 800c458:	d8c12415 	stw	r3,1168(sp)
 800c45c:	003dc806 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c460:	d8811c17 	ldw	r2,1136(sp)
 800c464:	10000426 	beq	r2,zero,800c478 <___vfiprintf_internal_r+0xce8>
 800c468:	d9012017 	ldw	r4,1152(sp)
 800c46c:	a00b883a 	mov	r5,r20
 800c470:	d9811a04 	addi	r6,sp,1128
 800c474:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c478:	a080030b 	ldhu	r2,12(r20)
 800c47c:	1080100c 	andi	r2,r2,64
 800c480:	103e9b1e 	bne	r2,zero,800bef0 <__alt_data_end+0xfc00bef0>
 800c484:	d8812217 	ldw	r2,1160(sp)
 800c488:	003e9a06 	br	800bef4 <__alt_data_end+0xfc00bef4>
 800c48c:	d9012017 	ldw	r4,1152(sp)
 800c490:	a00b883a 	mov	r5,r20
 800c494:	d9811a04 	addi	r6,sp,1128
 800c498:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c49c:	103ff61e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c4a0:	d9011b17 	ldw	r4,1132(sp)
 800c4a4:	d8c11c17 	ldw	r3,1136(sp)
 800c4a8:	d811883a 	mov	r8,sp
 800c4ac:	21400044 	addi	r5,r4,1
 800c4b0:	003e4006 	br	800bdb4 <__alt_data_end+0xfc00bdb4>
 800c4b4:	1800d61e 	bne	r3,zero,800c810 <___vfiprintf_internal_r+0x1080>
 800c4b8:	dac12417 	ldw	r11,1168(sp)
 800c4bc:	00800044 	movi	r2,1
 800c4c0:	dc400115 	stw	r17,4(sp)
 800c4c4:	dac00015 	stw	r11,0(sp)
 800c4c8:	dc411c15 	stw	r17,1136(sp)
 800c4cc:	d8811b15 	stw	r2,1132(sp)
 800c4d0:	8807883a 	mov	r3,r17
 800c4d4:	d811883a 	mov	r8,sp
 800c4d8:	42000204 	addi	r8,r8,8
 800c4dc:	aac0010c 	andi	r11,r21,4
 800c4e0:	58000226 	beq	r11,zero,800c4ec <___vfiprintf_internal_r+0xd5c>
 800c4e4:	9ca3c83a 	sub	r17,r19,r18
 800c4e8:	047e2616 	blt	zero,r17,800bd84 <__alt_data_end+0xfc00bd84>
 800c4ec:	94c0010e 	bge	r18,r19,800c4f4 <___vfiprintf_internal_r+0xd64>
 800c4f0:	9825883a 	mov	r18,r19
 800c4f4:	da812217 	ldw	r10,1160(sp)
 800c4f8:	5495883a 	add	r10,r10,r18
 800c4fc:	da812215 	stw	r10,1160(sp)
 800c500:	183e4826 	beq	r3,zero,800be24 <__alt_data_end+0xfc00be24>
 800c504:	d9012017 	ldw	r4,1152(sp)
 800c508:	a00b883a 	mov	r5,r20
 800c50c:	d9811a04 	addi	r6,sp,1128
 800c510:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c514:	103e4326 	beq	r2,zero,800be24 <__alt_data_end+0xfc00be24>
 800c518:	003fd706 	br	800c478 <__alt_data_end+0xfc00c478>
 800c51c:	9cadc83a 	sub	r22,r19,r18
 800c520:	05bde40e 	bge	zero,r22,800bcb4 <__alt_data_end+0xfc00bcb4>
 800c524:	03000404 	movi	r12,16
 800c528:	6581500e 	bge	r12,r22,800ca6c <___vfiprintf_internal_r+0x12dc>
 800c52c:	008200b4 	movhi	r2,2050
 800c530:	10b6de04 	addi	r2,r2,-9352
 800c534:	d8812315 	stw	r2,1164(sp)
 800c538:	8005883a 	mov	r2,r16
 800c53c:	038001c4 	movi	r14,7
 800c540:	b021883a 	mov	r16,r22
 800c544:	da412515 	stw	r9,1172(sp)
 800c548:	102d883a 	mov	r22,r2
 800c54c:	00000506 	br	800c564 <___vfiprintf_internal_r+0xdd4>
 800c550:	29000084 	addi	r4,r5,2
 800c554:	42000204 	addi	r8,r8,8
 800c558:	100b883a 	mov	r5,r2
 800c55c:	843ffc04 	addi	r16,r16,-16
 800c560:	64000d0e 	bge	r12,r16,800c598 <___vfiprintf_internal_r+0xe08>
 800c564:	18c00404 	addi	r3,r3,16
 800c568:	28800044 	addi	r2,r5,1
 800c56c:	45c00015 	stw	r23,0(r8)
 800c570:	43000115 	stw	r12,4(r8)
 800c574:	d8c11c15 	stw	r3,1136(sp)
 800c578:	d8811b15 	stw	r2,1132(sp)
 800c57c:	70bff40e 	bge	r14,r2,800c550 <__alt_data_end+0xfc00c550>
 800c580:	1800151e 	bne	r3,zero,800c5d8 <___vfiprintf_internal_r+0xe48>
 800c584:	843ffc04 	addi	r16,r16,-16
 800c588:	000b883a 	mov	r5,zero
 800c58c:	01000044 	movi	r4,1
 800c590:	d811883a 	mov	r8,sp
 800c594:	643ff316 	blt	r12,r16,800c564 <__alt_data_end+0xfc00c564>
 800c598:	da412517 	ldw	r9,1172(sp)
 800c59c:	b005883a 	mov	r2,r22
 800c5a0:	802d883a 	mov	r22,r16
 800c5a4:	1021883a 	mov	r16,r2
 800c5a8:	da812317 	ldw	r10,1164(sp)
 800c5ac:	1d87883a 	add	r3,r3,r22
 800c5b0:	45800115 	stw	r22,4(r8)
 800c5b4:	42800015 	stw	r10,0(r8)
 800c5b8:	d8c11c15 	stw	r3,1136(sp)
 800c5bc:	d9011b15 	stw	r4,1132(sp)
 800c5c0:	008001c4 	movi	r2,7
 800c5c4:	11008d16 	blt	r2,r4,800c7fc <___vfiprintf_internal_r+0x106c>
 800c5c8:	42000204 	addi	r8,r8,8
 800c5cc:	20800044 	addi	r2,r4,1
 800c5d0:	200b883a 	mov	r5,r4
 800c5d4:	003db706 	br	800bcb4 <__alt_data_end+0xfc00bcb4>
 800c5d8:	d9012017 	ldw	r4,1152(sp)
 800c5dc:	a00b883a 	mov	r5,r20
 800c5e0:	d9811a04 	addi	r6,sp,1128
 800c5e4:	db012b15 	stw	r12,1196(sp)
 800c5e8:	db812a15 	stw	r14,1192(sp)
 800c5ec:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c5f0:	db012b17 	ldw	r12,1196(sp)
 800c5f4:	db812a17 	ldw	r14,1192(sp)
 800c5f8:	103f9f1e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c5fc:	d9411b17 	ldw	r5,1132(sp)
 800c600:	d8c11c17 	ldw	r3,1136(sp)
 800c604:	d811883a 	mov	r8,sp
 800c608:	29000044 	addi	r4,r5,1
 800c60c:	003fd306 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c610:	18006c1e 	bne	r3,zero,800c7c4 <___vfiprintf_internal_r+0x1034>
 800c614:	70004f26 	beq	r14,zero,800c754 <___vfiprintf_internal_r+0xfc4>
 800c618:	d8811d04 	addi	r2,sp,1140
 800c61c:	00c00084 	movi	r3,2
 800c620:	d8800015 	stw	r2,0(sp)
 800c624:	d8c00115 	stw	r3,4(sp)
 800c628:	2005883a 	mov	r2,r4
 800c62c:	d811883a 	mov	r8,sp
 800c630:	003d9b06 	br	800bca0 <__alt_data_end+0xfc00bca0>
 800c634:	1800571e 	bne	r3,zero,800c794 <___vfiprintf_internal_r+0x1004>
 800c638:	000b883a 	mov	r5,zero
 800c63c:	00800044 	movi	r2,1
 800c640:	d811883a 	mov	r8,sp
 800c644:	003d9906 	br	800bcac <__alt_data_end+0xfc00bcac>
 800c648:	10803fcc 	andi	r2,r2,255
 800c64c:	1000251e 	bne	r2,zero,800c6e4 <___vfiprintf_internal_r+0xf54>
 800c650:	a880004c 	andi	r2,r21,1
 800c654:	10007826 	beq	r2,zero,800c838 <___vfiprintf_internal_r+0x10a8>
 800c658:	00800c04 	movi	r2,48
 800c65c:	d8c109c4 	addi	r3,sp,1063
 800c660:	d88109c5 	stb	r2,1063(sp)
 800c664:	dc412717 	ldw	r17,1180(sp)
 800c668:	d8c12415 	stw	r3,1168(sp)
 800c66c:	003d4406 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c670:	d9012617 	ldw	r4,1176(sp)
 800c674:	dc410a04 	addi	r17,sp,1064
 800c678:	908003cc 	andi	r2,r18,15
 800c67c:	b006973a 	slli	r3,r22,28
 800c680:	2085883a 	add	r2,r4,r2
 800c684:	9024d13a 	srli	r18,r18,4
 800c688:	10800003 	ldbu	r2,0(r2)
 800c68c:	b02cd13a 	srli	r22,r22,4
 800c690:	8c7fffc4 	addi	r17,r17,-1
 800c694:	1ca4b03a 	or	r18,r3,r18
 800c698:	88800005 	stb	r2,0(r17)
 800c69c:	9584b03a 	or	r2,r18,r22
 800c6a0:	103ff51e 	bne	r2,zero,800c678 <__alt_data_end+0xfc00c678>
 800c6a4:	dac11e17 	ldw	r11,1144(sp)
 800c6a8:	dc412415 	stw	r17,1168(sp)
 800c6ac:	5c63c83a 	sub	r17,r11,r17
 800c6b0:	003d3306 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c6b4:	1800941e 	bne	r3,zero,800c908 <___vfiprintf_internal_r+0x1178>
 800c6b8:	d8811d87 	ldb	r2,1142(sp)
 800c6bc:	10006b26 	beq	r2,zero,800c86c <___vfiprintf_internal_r+0x10dc>
 800c6c0:	00c00044 	movi	r3,1
 800c6c4:	d9011d84 	addi	r4,sp,1142
 800c6c8:	1805883a 	mov	r2,r3
 800c6cc:	d9000015 	stw	r4,0(sp)
 800c6d0:	d8c00115 	stw	r3,4(sp)
 800c6d4:	d811883a 	mov	r8,sp
 800c6d8:	003f2306 	br	800c368 <__alt_data_end+0xfc00c368>
 800c6dc:	8023883a 	mov	r17,r16
 800c6e0:	003c7d06 	br	800b8d8 <__alt_data_end+0xfc00b8d8>
 800c6e4:	da810a04 	addi	r10,sp,1064
 800c6e8:	da812415 	stw	r10,1168(sp)
 800c6ec:	003d2406 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c6f0:	d9012017 	ldw	r4,1152(sp)
 800c6f4:	a00b883a 	mov	r5,r20
 800c6f8:	d9811a04 	addi	r6,sp,1128
 800c6fc:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c700:	103f5d1e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c704:	d8c11c17 	ldw	r3,1136(sp)
 800c708:	d811883a 	mov	r8,sp
 800c70c:	003f7306 	br	800c4dc <__alt_data_end+0xfc00c4dc>
 800c710:	1c800017 	ldw	r18,0(r3)
 800c714:	dac12117 	ldw	r11,1156(sp)
 800c718:	902dd7fa 	srai	r22,r18,31
 800c71c:	5ac00104 	addi	r11,r11,4
 800c720:	dac12115 	stw	r11,1156(sp)
 800c724:	b005883a 	mov	r2,r22
 800c728:	003e5406 	br	800c07c <__alt_data_end+0xfc00c07c>
 800c72c:	00800084 	movi	r2,2
 800c730:	9588b03a 	or	r4,r18,r22
 800c734:	003cf506 	br	800bb0c <__alt_data_end+0xfc00bb0c>
 800c738:	d9012017 	ldw	r4,1152(sp)
 800c73c:	a00b883a 	mov	r5,r20
 800c740:	d9811a04 	addi	r6,sp,1128
 800c744:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c748:	103f4b1e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c74c:	d811883a 	mov	r8,sp
 800c750:	003cd106 	br	800ba98 <__alt_data_end+0xfc00ba98>
 800c754:	000b883a 	mov	r5,zero
 800c758:	2005883a 	mov	r2,r4
 800c75c:	d811883a 	mov	r8,sp
 800c760:	003d5206 	br	800bcac <__alt_data_end+0xfc00bcac>
 800c764:	10803fcc 	andi	r2,r2,255
 800c768:	1080201c 	xori	r2,r2,128
 800c76c:	10bfe004 	addi	r2,r2,-128
 800c770:	01000c04 	movi	r4,48
 800c774:	11008e26 	beq	r2,r4,800c9b0 <___vfiprintf_internal_r+0x1220>
 800c778:	da812417 	ldw	r10,1168(sp)
 800c77c:	dac11e17 	ldw	r11,1144(sp)
 800c780:	193fffc5 	stb	r4,-1(r3)
 800c784:	52bfffc4 	addi	r10,r10,-1
 800c788:	da812415 	stw	r10,1168(sp)
 800c78c:	5aa3c83a 	sub	r17,r11,r10
 800c790:	003cfb06 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c794:	d9012017 	ldw	r4,1152(sp)
 800c798:	a00b883a 	mov	r5,r20
 800c79c:	d9811a04 	addi	r6,sp,1128
 800c7a0:	da412b15 	stw	r9,1196(sp)
 800c7a4:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c7a8:	da412b17 	ldw	r9,1196(sp)
 800c7ac:	103f321e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c7b0:	d9411b17 	ldw	r5,1132(sp)
 800c7b4:	d8c11c17 	ldw	r3,1136(sp)
 800c7b8:	d811883a 	mov	r8,sp
 800c7bc:	28800044 	addi	r2,r5,1
 800c7c0:	003d3a06 	br	800bcac <__alt_data_end+0xfc00bcac>
 800c7c4:	d9012017 	ldw	r4,1152(sp)
 800c7c8:	a00b883a 	mov	r5,r20
 800c7cc:	d9811a04 	addi	r6,sp,1128
 800c7d0:	da412b15 	stw	r9,1196(sp)
 800c7d4:	db812a15 	stw	r14,1192(sp)
 800c7d8:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c7dc:	da412b17 	ldw	r9,1196(sp)
 800c7e0:	db812a17 	ldw	r14,1192(sp)
 800c7e4:	103f241e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c7e8:	d9411b17 	ldw	r5,1132(sp)
 800c7ec:	d8c11c17 	ldw	r3,1136(sp)
 800c7f0:	d811883a 	mov	r8,sp
 800c7f4:	28800044 	addi	r2,r5,1
 800c7f8:	003d1f06 	br	800bc78 <__alt_data_end+0xfc00bc78>
 800c7fc:	1800781e 	bne	r3,zero,800c9e0 <___vfiprintf_internal_r+0x1250>
 800c800:	000b883a 	mov	r5,zero
 800c804:	00800044 	movi	r2,1
 800c808:	d811883a 	mov	r8,sp
 800c80c:	003d2906 	br	800bcb4 <__alt_data_end+0xfc00bcb4>
 800c810:	d9012017 	ldw	r4,1152(sp)
 800c814:	a00b883a 	mov	r5,r20
 800c818:	d9811a04 	addi	r6,sp,1128
 800c81c:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c820:	103f151e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c824:	d8811b17 	ldw	r2,1132(sp)
 800c828:	d8c11c17 	ldw	r3,1136(sp)
 800c82c:	d811883a 	mov	r8,sp
 800c830:	10800044 	addi	r2,r2,1
 800c834:	003d4406 	br	800bd48 <__alt_data_end+0xfc00bd48>
 800c838:	dac10a04 	addi	r11,sp,1064
 800c83c:	dac12415 	stw	r11,1168(sp)
 800c840:	003ccf06 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c844:	04a5c83a 	sub	r18,zero,r18
 800c848:	9004c03a 	cmpne	r2,r18,zero
 800c84c:	05adc83a 	sub	r22,zero,r22
 800c850:	b0adc83a 	sub	r22,r22,r2
 800c854:	03000b44 	movi	r12,45
 800c858:	db011d85 	stb	r12,1142(sp)
 800c85c:	4823883a 	mov	r17,r9
 800c860:	00800044 	movi	r2,1
 800c864:	9588b03a 	or	r4,r18,r22
 800c868:	003cab06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800c86c:	000b883a 	mov	r5,zero
 800c870:	00800044 	movi	r2,1
 800c874:	d811883a 	mov	r8,sp
 800c878:	703d0c26 	beq	r14,zero,800bcac <__alt_data_end+0xfc00bcac>
 800c87c:	00c00084 	movi	r3,2
 800c880:	d9011d04 	addi	r4,sp,1140
 800c884:	d9000015 	stw	r4,0(sp)
 800c888:	d8c00115 	stw	r3,4(sp)
 800c88c:	003d0406 	br	800bca0 <__alt_data_end+0xfc00bca0>
 800c890:	80c00007 	ldb	r3,0(r16)
 800c894:	003c1d06 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c898:	a880040c 	andi	r2,r21,16
 800c89c:	1000091e 	bne	r2,zero,800c8c4 <___vfiprintf_internal_r+0x1134>
 800c8a0:	aac0100c 	andi	r11,r21,64
 800c8a4:	58000726 	beq	r11,zero,800c8c4 <___vfiprintf_internal_r+0x1134>
 800c8a8:	da812117 	ldw	r10,1156(sp)
 800c8ac:	dac12217 	ldw	r11,1160(sp)
 800c8b0:	50800017 	ldw	r2,0(r10)
 800c8b4:	52800104 	addi	r10,r10,4
 800c8b8:	da812115 	stw	r10,1156(sp)
 800c8bc:	12c0000d 	sth	r11,0(r2)
 800c8c0:	003be806 	br	800b864 <__alt_data_end+0xfc00b864>
 800c8c4:	da812117 	ldw	r10,1156(sp)
 800c8c8:	dac12217 	ldw	r11,1160(sp)
 800c8cc:	50800017 	ldw	r2,0(r10)
 800c8d0:	52800104 	addi	r10,r10,4
 800c8d4:	da812115 	stw	r10,1156(sp)
 800c8d8:	12c00015 	stw	r11,0(r2)
 800c8dc:	003be106 	br	800b864 <__alt_data_end+0xfc00b864>
 800c8e0:	00800084 	movi	r2,2
 800c8e4:	003c8906 	br	800bb0c <__alt_data_end+0xfc00bb0c>
 800c8e8:	a900100c 	andi	r4,r21,64
 800c8ec:	20001f26 	beq	r4,zero,800c96c <___vfiprintf_internal_r+0x11dc>
 800c8f0:	da812117 	ldw	r10,1156(sp)
 800c8f4:	1480000b 	ldhu	r18,0(r2)
 800c8f8:	002d883a 	mov	r22,zero
 800c8fc:	52800104 	addi	r10,r10,4
 800c900:	da812115 	stw	r10,1156(sp)
 800c904:	003dae06 	br	800bfc0 <__alt_data_end+0xfc00bfc0>
 800c908:	d9012017 	ldw	r4,1152(sp)
 800c90c:	a00b883a 	mov	r5,r20
 800c910:	d9811a04 	addi	r6,sp,1128
 800c914:	da412b15 	stw	r9,1196(sp)
 800c918:	db812a15 	stw	r14,1192(sp)
 800c91c:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c920:	da412b17 	ldw	r9,1196(sp)
 800c924:	db812a17 	ldw	r14,1192(sp)
 800c928:	103ed31e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c92c:	d9411b17 	ldw	r5,1132(sp)
 800c930:	d8c11c17 	ldw	r3,1136(sp)
 800c934:	d811883a 	mov	r8,sp
 800c938:	28800044 	addi	r2,r5,1
 800c93c:	003e7f06 	br	800c33c <__alt_data_end+0xfc00c33c>
 800c940:	9825883a 	mov	r18,r19
 800c944:	003d3406 	br	800be18 <__alt_data_end+0xfc00be18>
 800c948:	4823883a 	mov	r17,r9
 800c94c:	003e0806 	br	800c170 <__alt_data_end+0xfc00c170>
 800c950:	d9012017 	ldw	r4,1152(sp)
 800c954:	a00b883a 	mov	r5,r20
 800c958:	d9811a04 	addi	r6,sp,1128
 800c95c:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c960:	103ec51e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c964:	d8c11c17 	ldw	r3,1136(sp)
 800c968:	003ee006 	br	800c4ec <__alt_data_end+0xfc00c4ec>
 800c96c:	dac12117 	ldw	r11,1156(sp)
 800c970:	14800017 	ldw	r18,0(r2)
 800c974:	002d883a 	mov	r22,zero
 800c978:	5ac00104 	addi	r11,r11,4
 800c97c:	dac12115 	stw	r11,1156(sp)
 800c980:	003d8f06 	br	800bfc0 <__alt_data_end+0xfc00bfc0>
 800c984:	02c200b4 	movhi	r11,2050
 800c988:	5af6de04 	addi	r11,r11,-9352
 800c98c:	dac12315 	stw	r11,1164(sp)
 800c990:	003ce306 	br	800bd20 <__alt_data_end+0xfc00bd20>
 800c994:	80c00043 	ldbu	r3,1(r16)
 800c998:	ad400814 	ori	r21,r21,32
 800c99c:	84000044 	addi	r16,r16,1
 800c9a0:	18c03fcc 	andi	r3,r3,255
 800c9a4:	18c0201c 	xori	r3,r3,128
 800c9a8:	18ffe004 	addi	r3,r3,-128
 800c9ac:	003bd706 	br	800b90c <__alt_data_end+0xfc00b90c>
 800c9b0:	dac11e17 	ldw	r11,1144(sp)
 800c9b4:	d8c12417 	ldw	r3,1168(sp)
 800c9b8:	58e3c83a 	sub	r17,r11,r3
 800c9bc:	003c7006 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c9c0:	da012a15 	stw	r8,1192(sp)
 800c9c4:	80041e40 	call	80041e4 <strlen>
 800c9c8:	1023883a 	mov	r17,r2
 800c9cc:	db011d83 	ldbu	r12,1142(sp)
 800c9d0:	dd812115 	stw	r22,1156(sp)
 800c9d4:	0013883a 	mov	r9,zero
 800c9d8:	da012a17 	ldw	r8,1192(sp)
 800c9dc:	003c6806 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800c9e0:	d9012017 	ldw	r4,1152(sp)
 800c9e4:	a00b883a 	mov	r5,r20
 800c9e8:	d9811a04 	addi	r6,sp,1128
 800c9ec:	da412b15 	stw	r9,1196(sp)
 800c9f0:	800b67c0 	call	800b67c <__sprint_r.part.0>
 800c9f4:	da412b17 	ldw	r9,1196(sp)
 800c9f8:	103e9f1e 	bne	r2,zero,800c478 <__alt_data_end+0xfc00c478>
 800c9fc:	d9411b17 	ldw	r5,1132(sp)
 800ca00:	d8c11c17 	ldw	r3,1136(sp)
 800ca04:	d811883a 	mov	r8,sp
 800ca08:	28800044 	addi	r2,r5,1
 800ca0c:	003ca906 	br	800bcb4 <__alt_data_end+0xfc00bcb4>
 800ca10:	d9411b17 	ldw	r5,1132(sp)
 800ca14:	010200b4 	movhi	r4,2050
 800ca18:	2136e204 	addi	r4,r4,-9336
 800ca1c:	d9012315 	stw	r4,1164(sp)
 800ca20:	29400044 	addi	r5,r5,1
 800ca24:	003c8806 	br	800bc48 <__alt_data_end+0xfc00bc48>
 800ca28:	00800184 	movi	r2,6
 800ca2c:	1240012e 	bgeu	r2,r9,800ca34 <___vfiprintf_internal_r+0x12a4>
 800ca30:	1013883a 	mov	r9,r2
 800ca34:	4823883a 	mov	r17,r9
 800ca38:	4825883a 	mov	r18,r9
 800ca3c:	48001516 	blt	r9,zero,800ca94 <___vfiprintf_internal_r+0x1304>
 800ca40:	008200b4 	movhi	r2,2050
 800ca44:	10b5e204 	addi	r2,r2,-10360
 800ca48:	dd812115 	stw	r22,1156(sp)
 800ca4c:	d8812415 	stw	r2,1168(sp)
 800ca50:	003d6f06 	br	800c010 <__alt_data_end+0xfc00c010>
 800ca54:	d9411b17 	ldw	r5,1132(sp)
 800ca58:	02c200b4 	movhi	r11,2050
 800ca5c:	5af6e204 	addi	r11,r11,-9336
 800ca60:	dac12315 	stw	r11,1164(sp)
 800ca64:	29400044 	addi	r5,r5,1
 800ca68:	003ce106 	br	800bdf0 <__alt_data_end+0xfc00bdf0>
 800ca6c:	010200b4 	movhi	r4,2050
 800ca70:	2136de04 	addi	r4,r4,-9352
 800ca74:	d9012315 	stw	r4,1164(sp)
 800ca78:	1009883a 	mov	r4,r2
 800ca7c:	003eca06 	br	800c5a8 <__alt_data_end+0xfc00c5a8>
 800ca80:	4823883a 	mov	r17,r9
 800ca84:	db011d83 	ldbu	r12,1142(sp)
 800ca88:	dd812115 	stw	r22,1156(sp)
 800ca8c:	0013883a 	mov	r9,zero
 800ca90:	003c3b06 	br	800bb80 <__alt_data_end+0xfc00bb80>
 800ca94:	0025883a 	mov	r18,zero
 800ca98:	003fe906 	br	800ca40 <__alt_data_end+0xfc00ca40>
 800ca9c:	dac12117 	ldw	r11,1156(sp)
 800caa0:	8005883a 	mov	r2,r16
 800caa4:	5021883a 	mov	r16,r10
 800caa8:	5a400017 	ldw	r9,0(r11)
 800caac:	58c00104 	addi	r3,r11,4
 800cab0:	d8c12115 	stw	r3,1156(sp)
 800cab4:	48000a16 	blt	r9,zero,800cae0 <___vfiprintf_internal_r+0x1350>
 800cab8:	10c00047 	ldb	r3,1(r2)
 800cabc:	003b9306 	br	800b90c <__alt_data_end+0xfc00b90c>
 800cac0:	043fffc4 	movi	r16,-1
 800cac4:	003d0206 	br	800bed0 <__alt_data_end+0xfc00bed0>
 800cac8:	94c0010e 	bge	r18,r19,800cad0 <___vfiprintf_internal_r+0x1340>
 800cacc:	9825883a 	mov	r18,r19
 800cad0:	da812217 	ldw	r10,1160(sp)
 800cad4:	5495883a 	add	r10,r10,r18
 800cad8:	da812215 	stw	r10,1160(sp)
 800cadc:	003cd106 	br	800be24 <__alt_data_end+0xfc00be24>
 800cae0:	027fffc4 	movi	r9,-1
 800cae4:	10c00047 	ldb	r3,1(r2)
 800cae8:	003b8806 	br	800b90c <__alt_data_end+0xfc00b90c>

0800caec <__vfiprintf_internal>:
 800caec:	2007883a 	mov	r3,r4
 800caf0:	010200b4 	movhi	r4,2050
 800caf4:	213e0b04 	addi	r4,r4,-2004
 800caf8:	21000017 	ldw	r4,0(r4)
 800cafc:	2805883a 	mov	r2,r5
 800cb00:	300f883a 	mov	r7,r6
 800cb04:	180b883a 	mov	r5,r3
 800cb08:	100d883a 	mov	r6,r2
 800cb0c:	800b7901 	jmpi	800b790 <___vfiprintf_internal_r>

0800cb10 <__swbuf_r>:
 800cb10:	defffc04 	addi	sp,sp,-16
 800cb14:	dc800215 	stw	r18,8(sp)
 800cb18:	dc400115 	stw	r17,4(sp)
 800cb1c:	dc000015 	stw	r16,0(sp)
 800cb20:	dfc00315 	stw	ra,12(sp)
 800cb24:	2025883a 	mov	r18,r4
 800cb28:	2823883a 	mov	r17,r5
 800cb2c:	3021883a 	mov	r16,r6
 800cb30:	20000226 	beq	r4,zero,800cb3c <__swbuf_r+0x2c>
 800cb34:	20800e17 	ldw	r2,56(r4)
 800cb38:	10004126 	beq	r2,zero,800cc40 <__swbuf_r+0x130>
 800cb3c:	80c00617 	ldw	r3,24(r16)
 800cb40:	8180030b 	ldhu	r6,12(r16)
 800cb44:	80c00215 	stw	r3,8(r16)
 800cb48:	30c0020c 	andi	r3,r6,8
 800cb4c:	18003526 	beq	r3,zero,800cc24 <__swbuf_r+0x114>
 800cb50:	80c00417 	ldw	r3,16(r16)
 800cb54:	18003326 	beq	r3,zero,800cc24 <__swbuf_r+0x114>
 800cb58:	3088000c 	andi	r2,r6,8192
 800cb5c:	8c403fcc 	andi	r17,r17,255
 800cb60:	10001726 	beq	r2,zero,800cbc0 <__swbuf_r+0xb0>
 800cb64:	80800017 	ldw	r2,0(r16)
 800cb68:	81000517 	ldw	r4,20(r16)
 800cb6c:	10c7c83a 	sub	r3,r2,r3
 800cb70:	19001d0e 	bge	r3,r4,800cbe8 <__swbuf_r+0xd8>
 800cb74:	18c00044 	addi	r3,r3,1
 800cb78:	81400217 	ldw	r5,8(r16)
 800cb7c:	11000044 	addi	r4,r2,1
 800cb80:	81000015 	stw	r4,0(r16)
 800cb84:	297fffc4 	addi	r5,r5,-1
 800cb88:	81400215 	stw	r5,8(r16)
 800cb8c:	14400005 	stb	r17,0(r2)
 800cb90:	80800517 	ldw	r2,20(r16)
 800cb94:	10c01d26 	beq	r2,r3,800cc0c <__swbuf_r+0xfc>
 800cb98:	8080030b 	ldhu	r2,12(r16)
 800cb9c:	1080004c 	andi	r2,r2,1
 800cba0:	1000181e 	bne	r2,zero,800cc04 <__swbuf_r+0xf4>
 800cba4:	8805883a 	mov	r2,r17
 800cba8:	dfc00317 	ldw	ra,12(sp)
 800cbac:	dc800217 	ldw	r18,8(sp)
 800cbb0:	dc400117 	ldw	r17,4(sp)
 800cbb4:	dc000017 	ldw	r16,0(sp)
 800cbb8:	dec00404 	addi	sp,sp,16
 800cbbc:	f800283a 	ret
 800cbc0:	81001917 	ldw	r4,100(r16)
 800cbc4:	00b7ffc4 	movi	r2,-8193
 800cbc8:	31880014 	ori	r6,r6,8192
 800cbcc:	2084703a 	and	r2,r4,r2
 800cbd0:	80801915 	stw	r2,100(r16)
 800cbd4:	80800017 	ldw	r2,0(r16)
 800cbd8:	81000517 	ldw	r4,20(r16)
 800cbdc:	8180030d 	sth	r6,12(r16)
 800cbe0:	10c7c83a 	sub	r3,r2,r3
 800cbe4:	193fe316 	blt	r3,r4,800cb74 <__alt_data_end+0xfc00cb74>
 800cbe8:	9009883a 	mov	r4,r18
 800cbec:	800b883a 	mov	r5,r16
 800cbf0:	8007f780 	call	8007f78 <_fflush_r>
 800cbf4:	1000091e 	bne	r2,zero,800cc1c <__swbuf_r+0x10c>
 800cbf8:	80800017 	ldw	r2,0(r16)
 800cbfc:	00c00044 	movi	r3,1
 800cc00:	003fdd06 	br	800cb78 <__alt_data_end+0xfc00cb78>
 800cc04:	00800284 	movi	r2,10
 800cc08:	88bfe61e 	bne	r17,r2,800cba4 <__alt_data_end+0xfc00cba4>
 800cc0c:	9009883a 	mov	r4,r18
 800cc10:	800b883a 	mov	r5,r16
 800cc14:	8007f780 	call	8007f78 <_fflush_r>
 800cc18:	103fe226 	beq	r2,zero,800cba4 <__alt_data_end+0xfc00cba4>
 800cc1c:	00bfffc4 	movi	r2,-1
 800cc20:	003fe106 	br	800cba8 <__alt_data_end+0xfc00cba8>
 800cc24:	9009883a 	mov	r4,r18
 800cc28:	800b883a 	mov	r5,r16
 800cc2c:	80065200 	call	8006520 <__swsetup_r>
 800cc30:	1000051e 	bne	r2,zero,800cc48 <__swbuf_r+0x138>
 800cc34:	8180030b 	ldhu	r6,12(r16)
 800cc38:	80c00417 	ldw	r3,16(r16)
 800cc3c:	003fc606 	br	800cb58 <__alt_data_end+0xfc00cb58>
 800cc40:	80085200 	call	8008520 <__sinit>
 800cc44:	003fbd06 	br	800cb3c <__alt_data_end+0xfc00cb3c>
 800cc48:	80c0030b 	ldhu	r3,12(r16)
 800cc4c:	00bfffc4 	movi	r2,-1
 800cc50:	18c01014 	ori	r3,r3,64
 800cc54:	80c0030d 	sth	r3,12(r16)
 800cc58:	00c00244 	movi	r3,9
 800cc5c:	90c00015 	stw	r3,0(r18)
 800cc60:	003fd106 	br	800cba8 <__alt_data_end+0xfc00cba8>

0800cc64 <__swbuf>:
 800cc64:	00c200b4 	movhi	r3,2050
 800cc68:	18fe0b04 	addi	r3,r3,-2004
 800cc6c:	2005883a 	mov	r2,r4
 800cc70:	19000017 	ldw	r4,0(r3)
 800cc74:	280d883a 	mov	r6,r5
 800cc78:	100b883a 	mov	r5,r2
 800cc7c:	800cb101 	jmpi	800cb10 <__swbuf_r>

0800cc80 <_write_r>:
 800cc80:	defffd04 	addi	sp,sp,-12
 800cc84:	dc000015 	stw	r16,0(sp)
 800cc88:	040200b4 	movhi	r16,2050
 800cc8c:	dc400115 	stw	r17,4(sp)
 800cc90:	84050904 	addi	r16,r16,5156
 800cc94:	2023883a 	mov	r17,r4
 800cc98:	2809883a 	mov	r4,r5
 800cc9c:	300b883a 	mov	r5,r6
 800cca0:	380d883a 	mov	r6,r7
 800cca4:	dfc00215 	stw	ra,8(sp)
 800cca8:	80000015 	stw	zero,0(r16)
 800ccac:	8010fa00 	call	8010fa0 <write>
 800ccb0:	00ffffc4 	movi	r3,-1
 800ccb4:	10c00526 	beq	r2,r3,800cccc <_write_r+0x4c>
 800ccb8:	dfc00217 	ldw	ra,8(sp)
 800ccbc:	dc400117 	ldw	r17,4(sp)
 800ccc0:	dc000017 	ldw	r16,0(sp)
 800ccc4:	dec00304 	addi	sp,sp,12
 800ccc8:	f800283a 	ret
 800cccc:	80c00017 	ldw	r3,0(r16)
 800ccd0:	183ff926 	beq	r3,zero,800ccb8 <__alt_data_end+0xfc00ccb8>
 800ccd4:	88c00015 	stw	r3,0(r17)
 800ccd8:	003ff706 	br	800ccb8 <__alt_data_end+0xfc00ccb8>

0800ccdc <_close_r>:
 800ccdc:	defffd04 	addi	sp,sp,-12
 800cce0:	dc000015 	stw	r16,0(sp)
 800cce4:	040200b4 	movhi	r16,2050
 800cce8:	dc400115 	stw	r17,4(sp)
 800ccec:	84050904 	addi	r16,r16,5156
 800ccf0:	2023883a 	mov	r17,r4
 800ccf4:	2809883a 	mov	r4,r5
 800ccf8:	dfc00215 	stw	ra,8(sp)
 800ccfc:	80000015 	stw	zero,0(r16)
 800cd00:	80107140 	call	8010714 <close>
 800cd04:	00ffffc4 	movi	r3,-1
 800cd08:	10c00526 	beq	r2,r3,800cd20 <_close_r+0x44>
 800cd0c:	dfc00217 	ldw	ra,8(sp)
 800cd10:	dc400117 	ldw	r17,4(sp)
 800cd14:	dc000017 	ldw	r16,0(sp)
 800cd18:	dec00304 	addi	sp,sp,12
 800cd1c:	f800283a 	ret
 800cd20:	80c00017 	ldw	r3,0(r16)
 800cd24:	183ff926 	beq	r3,zero,800cd0c <__alt_data_end+0xfc00cd0c>
 800cd28:	88c00015 	stw	r3,0(r17)
 800cd2c:	003ff706 	br	800cd0c <__alt_data_end+0xfc00cd0c>

0800cd30 <_calloc_r>:
 800cd30:	298b383a 	mul	r5,r5,r6
 800cd34:	defffe04 	addi	sp,sp,-8
 800cd38:	dc000015 	stw	r16,0(sp)
 800cd3c:	dfc00115 	stw	ra,4(sp)
 800cd40:	80092300 	call	8009230 <_malloc_r>
 800cd44:	1021883a 	mov	r16,r2
 800cd48:	10002826 	beq	r2,zero,800cdec <_calloc_r+0xbc>
 800cd4c:	11bfff17 	ldw	r6,-4(r2)
 800cd50:	00bfff04 	movi	r2,-4
 800cd54:	00c00904 	movi	r3,36
 800cd58:	308c703a 	and	r6,r6,r2
 800cd5c:	308d883a 	add	r6,r6,r2
 800cd60:	19801436 	bltu	r3,r6,800cdb4 <_calloc_r+0x84>
 800cd64:	008004c4 	movi	r2,19
 800cd68:	11800936 	bltu	r2,r6,800cd90 <_calloc_r+0x60>
 800cd6c:	8005883a 	mov	r2,r16
 800cd70:	10000015 	stw	zero,0(r2)
 800cd74:	10000115 	stw	zero,4(r2)
 800cd78:	10000215 	stw	zero,8(r2)
 800cd7c:	8005883a 	mov	r2,r16
 800cd80:	dfc00117 	ldw	ra,4(sp)
 800cd84:	dc000017 	ldw	r16,0(sp)
 800cd88:	dec00204 	addi	sp,sp,8
 800cd8c:	f800283a 	ret
 800cd90:	80000015 	stw	zero,0(r16)
 800cd94:	80000115 	stw	zero,4(r16)
 800cd98:	008006c4 	movi	r2,27
 800cd9c:	11800d2e 	bgeu	r2,r6,800cdd4 <_calloc_r+0xa4>
 800cda0:	80000215 	stw	zero,8(r16)
 800cda4:	80000315 	stw	zero,12(r16)
 800cda8:	30c00c26 	beq	r6,r3,800cddc <_calloc_r+0xac>
 800cdac:	80800404 	addi	r2,r16,16
 800cdb0:	003fef06 	br	800cd70 <__alt_data_end+0xfc00cd70>
 800cdb4:	8009883a 	mov	r4,r16
 800cdb8:	000b883a 	mov	r5,zero
 800cdbc:	8009c1c0 	call	8009c1c <memset>
 800cdc0:	8005883a 	mov	r2,r16
 800cdc4:	dfc00117 	ldw	ra,4(sp)
 800cdc8:	dc000017 	ldw	r16,0(sp)
 800cdcc:	dec00204 	addi	sp,sp,8
 800cdd0:	f800283a 	ret
 800cdd4:	80800204 	addi	r2,r16,8
 800cdd8:	003fe506 	br	800cd70 <__alt_data_end+0xfc00cd70>
 800cddc:	80000415 	stw	zero,16(r16)
 800cde0:	80800604 	addi	r2,r16,24
 800cde4:	80000515 	stw	zero,20(r16)
 800cde8:	003fe106 	br	800cd70 <__alt_data_end+0xfc00cd70>
 800cdec:	0005883a 	mov	r2,zero
 800cdf0:	003fe306 	br	800cd80 <__alt_data_end+0xfc00cd80>

0800cdf4 <_fclose_r>:
 800cdf4:	28003226 	beq	r5,zero,800cec0 <_fclose_r+0xcc>
 800cdf8:	defffc04 	addi	sp,sp,-16
 800cdfc:	dc400115 	stw	r17,4(sp)
 800ce00:	2023883a 	mov	r17,r4
 800ce04:	dc000015 	stw	r16,0(sp)
 800ce08:	dfc00315 	stw	ra,12(sp)
 800ce0c:	dc800215 	stw	r18,8(sp)
 800ce10:	2821883a 	mov	r16,r5
 800ce14:	80085300 	call	8008530 <__sfp_lock_acquire>
 800ce18:	88000226 	beq	r17,zero,800ce24 <_fclose_r+0x30>
 800ce1c:	88800e17 	ldw	r2,56(r17)
 800ce20:	10002926 	beq	r2,zero,800cec8 <_fclose_r+0xd4>
 800ce24:	8080030f 	ldh	r2,12(r16)
 800ce28:	10002226 	beq	r2,zero,800ceb4 <_fclose_r+0xc0>
 800ce2c:	8809883a 	mov	r4,r17
 800ce30:	800b883a 	mov	r5,r16
 800ce34:	8007f780 	call	8007f78 <_fflush_r>
 800ce38:	1025883a 	mov	r18,r2
 800ce3c:	80800b17 	ldw	r2,44(r16)
 800ce40:	10000426 	beq	r2,zero,800ce54 <_fclose_r+0x60>
 800ce44:	81400717 	ldw	r5,28(r16)
 800ce48:	8809883a 	mov	r4,r17
 800ce4c:	103ee83a 	callr	r2
 800ce50:	10002616 	blt	r2,zero,800ceec <_fclose_r+0xf8>
 800ce54:	8080030b 	ldhu	r2,12(r16)
 800ce58:	1080200c 	andi	r2,r2,128
 800ce5c:	10001f1e 	bne	r2,zero,800cedc <_fclose_r+0xe8>
 800ce60:	81400c17 	ldw	r5,48(r16)
 800ce64:	28000526 	beq	r5,zero,800ce7c <_fclose_r+0x88>
 800ce68:	80801004 	addi	r2,r16,64
 800ce6c:	28800226 	beq	r5,r2,800ce78 <_fclose_r+0x84>
 800ce70:	8809883a 	mov	r4,r17
 800ce74:	80086940 	call	8008694 <_free_r>
 800ce78:	80000c15 	stw	zero,48(r16)
 800ce7c:	81401117 	ldw	r5,68(r16)
 800ce80:	28000326 	beq	r5,zero,800ce90 <_fclose_r+0x9c>
 800ce84:	8809883a 	mov	r4,r17
 800ce88:	80086940 	call	8008694 <_free_r>
 800ce8c:	80001115 	stw	zero,68(r16)
 800ce90:	8000030d 	sth	zero,12(r16)
 800ce94:	80085340 	call	8008534 <__sfp_lock_release>
 800ce98:	9005883a 	mov	r2,r18
 800ce9c:	dfc00317 	ldw	ra,12(sp)
 800cea0:	dc800217 	ldw	r18,8(sp)
 800cea4:	dc400117 	ldw	r17,4(sp)
 800cea8:	dc000017 	ldw	r16,0(sp)
 800ceac:	dec00404 	addi	sp,sp,16
 800ceb0:	f800283a 	ret
 800ceb4:	80085340 	call	8008534 <__sfp_lock_release>
 800ceb8:	0005883a 	mov	r2,zero
 800cebc:	003ff706 	br	800ce9c <__alt_data_end+0xfc00ce9c>
 800cec0:	0005883a 	mov	r2,zero
 800cec4:	f800283a 	ret
 800cec8:	8809883a 	mov	r4,r17
 800cecc:	80085200 	call	8008520 <__sinit>
 800ced0:	8080030f 	ldh	r2,12(r16)
 800ced4:	103fd51e 	bne	r2,zero,800ce2c <__alt_data_end+0xfc00ce2c>
 800ced8:	003ff606 	br	800ceb4 <__alt_data_end+0xfc00ceb4>
 800cedc:	81400417 	ldw	r5,16(r16)
 800cee0:	8809883a 	mov	r4,r17
 800cee4:	80086940 	call	8008694 <_free_r>
 800cee8:	003fdd06 	br	800ce60 <__alt_data_end+0xfc00ce60>
 800ceec:	04bfffc4 	movi	r18,-1
 800cef0:	003fd806 	br	800ce54 <__alt_data_end+0xfc00ce54>

0800cef4 <fclose>:
 800cef4:	008200b4 	movhi	r2,2050
 800cef8:	10be0b04 	addi	r2,r2,-2004
 800cefc:	200b883a 	mov	r5,r4
 800cf00:	11000017 	ldw	r4,0(r2)
 800cf04:	800cdf41 	jmpi	800cdf4 <_fclose_r>

0800cf08 <_fputwc_r>:
 800cf08:	3080030b 	ldhu	r2,12(r6)
 800cf0c:	defff804 	addi	sp,sp,-32
 800cf10:	dcc00415 	stw	r19,16(sp)
 800cf14:	dc800315 	stw	r18,12(sp)
 800cf18:	dc000115 	stw	r16,4(sp)
 800cf1c:	dfc00715 	stw	ra,28(sp)
 800cf20:	dd400615 	stw	r21,24(sp)
 800cf24:	dd000515 	stw	r20,20(sp)
 800cf28:	dc400215 	stw	r17,8(sp)
 800cf2c:	10c8000c 	andi	r3,r2,8192
 800cf30:	3021883a 	mov	r16,r6
 800cf34:	2027883a 	mov	r19,r4
 800cf38:	2825883a 	mov	r18,r5
 800cf3c:	1800051e 	bne	r3,zero,800cf54 <_fputwc_r+0x4c>
 800cf40:	30c01917 	ldw	r3,100(r6)
 800cf44:	10880014 	ori	r2,r2,8192
 800cf48:	3080030d 	sth	r2,12(r6)
 800cf4c:	18880014 	ori	r2,r3,8192
 800cf50:	30801915 	stw	r2,100(r6)
 800cf54:	80090200 	call	8009020 <__locale_mb_cur_max>
 800cf58:	00c00044 	movi	r3,1
 800cf5c:	10c03e26 	beq	r2,r3,800d058 <_fputwc_r+0x150>
 800cf60:	9809883a 	mov	r4,r19
 800cf64:	d80b883a 	mov	r5,sp
 800cf68:	900d883a 	mov	r6,r18
 800cf6c:	81c01704 	addi	r7,r16,92
 800cf70:	800d2480 	call	800d248 <_wcrtomb_r>
 800cf74:	1029883a 	mov	r20,r2
 800cf78:	00bfffc4 	movi	r2,-1
 800cf7c:	a0802026 	beq	r20,r2,800d000 <_fputwc_r+0xf8>
 800cf80:	d9400003 	ldbu	r5,0(sp)
 800cf84:	a0001c26 	beq	r20,zero,800cff8 <_fputwc_r+0xf0>
 800cf88:	0023883a 	mov	r17,zero
 800cf8c:	05400284 	movi	r21,10
 800cf90:	00000906 	br	800cfb8 <_fputwc_r+0xb0>
 800cf94:	80800017 	ldw	r2,0(r16)
 800cf98:	11400005 	stb	r5,0(r2)
 800cf9c:	80c00017 	ldw	r3,0(r16)
 800cfa0:	18c00044 	addi	r3,r3,1
 800cfa4:	80c00015 	stw	r3,0(r16)
 800cfa8:	8c400044 	addi	r17,r17,1
 800cfac:	dc45883a 	add	r2,sp,r17
 800cfb0:	8d00112e 	bgeu	r17,r20,800cff8 <_fputwc_r+0xf0>
 800cfb4:	11400003 	ldbu	r5,0(r2)
 800cfb8:	80c00217 	ldw	r3,8(r16)
 800cfbc:	18ffffc4 	addi	r3,r3,-1
 800cfc0:	80c00215 	stw	r3,8(r16)
 800cfc4:	183ff30e 	bge	r3,zero,800cf94 <__alt_data_end+0xfc00cf94>
 800cfc8:	80800617 	ldw	r2,24(r16)
 800cfcc:	18801916 	blt	r3,r2,800d034 <_fputwc_r+0x12c>
 800cfd0:	80800017 	ldw	r2,0(r16)
 800cfd4:	11400005 	stb	r5,0(r2)
 800cfd8:	80800017 	ldw	r2,0(r16)
 800cfdc:	10c00003 	ldbu	r3,0(r2)
 800cfe0:	10800044 	addi	r2,r2,1
 800cfe4:	1d402326 	beq	r3,r21,800d074 <_fputwc_r+0x16c>
 800cfe8:	80800015 	stw	r2,0(r16)
 800cfec:	8c400044 	addi	r17,r17,1
 800cff0:	dc45883a 	add	r2,sp,r17
 800cff4:	8d3fef36 	bltu	r17,r20,800cfb4 <__alt_data_end+0xfc00cfb4>
 800cff8:	9005883a 	mov	r2,r18
 800cffc:	00000406 	br	800d010 <_fputwc_r+0x108>
 800d000:	80c0030b 	ldhu	r3,12(r16)
 800d004:	a005883a 	mov	r2,r20
 800d008:	18c01014 	ori	r3,r3,64
 800d00c:	80c0030d 	sth	r3,12(r16)
 800d010:	dfc00717 	ldw	ra,28(sp)
 800d014:	dd400617 	ldw	r21,24(sp)
 800d018:	dd000517 	ldw	r20,20(sp)
 800d01c:	dcc00417 	ldw	r19,16(sp)
 800d020:	dc800317 	ldw	r18,12(sp)
 800d024:	dc400217 	ldw	r17,8(sp)
 800d028:	dc000117 	ldw	r16,4(sp)
 800d02c:	dec00804 	addi	sp,sp,32
 800d030:	f800283a 	ret
 800d034:	9809883a 	mov	r4,r19
 800d038:	29403fcc 	andi	r5,r5,255
 800d03c:	800d883a 	mov	r6,r16
 800d040:	800cb100 	call	800cb10 <__swbuf_r>
 800d044:	10bfffe0 	cmpeqi	r2,r2,-1
 800d048:	10803fcc 	andi	r2,r2,255
 800d04c:	103fd626 	beq	r2,zero,800cfa8 <__alt_data_end+0xfc00cfa8>
 800d050:	00bfffc4 	movi	r2,-1
 800d054:	003fee06 	br	800d010 <__alt_data_end+0xfc00d010>
 800d058:	90ffffc4 	addi	r3,r18,-1
 800d05c:	01003f84 	movi	r4,254
 800d060:	20ffbf36 	bltu	r4,r3,800cf60 <__alt_data_end+0xfc00cf60>
 800d064:	900b883a 	mov	r5,r18
 800d068:	dc800005 	stb	r18,0(sp)
 800d06c:	1029883a 	mov	r20,r2
 800d070:	003fc506 	br	800cf88 <__alt_data_end+0xfc00cf88>
 800d074:	9809883a 	mov	r4,r19
 800d078:	a80b883a 	mov	r5,r21
 800d07c:	800d883a 	mov	r6,r16
 800d080:	800cb100 	call	800cb10 <__swbuf_r>
 800d084:	10bfffe0 	cmpeqi	r2,r2,-1
 800d088:	003fef06 	br	800d048 <__alt_data_end+0xfc00d048>

0800d08c <fputwc>:
 800d08c:	defffc04 	addi	sp,sp,-16
 800d090:	dc000115 	stw	r16,4(sp)
 800d094:	040200b4 	movhi	r16,2050
 800d098:	843e0b04 	addi	r16,r16,-2004
 800d09c:	dc400215 	stw	r17,8(sp)
 800d0a0:	2023883a 	mov	r17,r4
 800d0a4:	81000017 	ldw	r4,0(r16)
 800d0a8:	dfc00315 	stw	ra,12(sp)
 800d0ac:	280d883a 	mov	r6,r5
 800d0b0:	20000626 	beq	r4,zero,800d0cc <fputwc+0x40>
 800d0b4:	20800e17 	ldw	r2,56(r4)
 800d0b8:	1000041e 	bne	r2,zero,800d0cc <fputwc+0x40>
 800d0bc:	d9400015 	stw	r5,0(sp)
 800d0c0:	80085200 	call	8008520 <__sinit>
 800d0c4:	81000017 	ldw	r4,0(r16)
 800d0c8:	d9800017 	ldw	r6,0(sp)
 800d0cc:	880b883a 	mov	r5,r17
 800d0d0:	dfc00317 	ldw	ra,12(sp)
 800d0d4:	dc400217 	ldw	r17,8(sp)
 800d0d8:	dc000117 	ldw	r16,4(sp)
 800d0dc:	dec00404 	addi	sp,sp,16
 800d0e0:	800cf081 	jmpi	800cf08 <_fputwc_r>

0800d0e4 <_fstat_r>:
 800d0e4:	defffd04 	addi	sp,sp,-12
 800d0e8:	dc000015 	stw	r16,0(sp)
 800d0ec:	040200b4 	movhi	r16,2050
 800d0f0:	dc400115 	stw	r17,4(sp)
 800d0f4:	84050904 	addi	r16,r16,5156
 800d0f8:	2023883a 	mov	r17,r4
 800d0fc:	2809883a 	mov	r4,r5
 800d100:	300b883a 	mov	r5,r6
 800d104:	dfc00215 	stw	ra,8(sp)
 800d108:	80000015 	stw	zero,0(r16)
 800d10c:	80108600 	call	8010860 <fstat>
 800d110:	00ffffc4 	movi	r3,-1
 800d114:	10c00526 	beq	r2,r3,800d12c <_fstat_r+0x48>
 800d118:	dfc00217 	ldw	ra,8(sp)
 800d11c:	dc400117 	ldw	r17,4(sp)
 800d120:	dc000017 	ldw	r16,0(sp)
 800d124:	dec00304 	addi	sp,sp,12
 800d128:	f800283a 	ret
 800d12c:	80c00017 	ldw	r3,0(r16)
 800d130:	183ff926 	beq	r3,zero,800d118 <__alt_data_end+0xfc00d118>
 800d134:	88c00015 	stw	r3,0(r17)
 800d138:	003ff706 	br	800d118 <__alt_data_end+0xfc00d118>

0800d13c <_isatty_r>:
 800d13c:	defffd04 	addi	sp,sp,-12
 800d140:	dc000015 	stw	r16,0(sp)
 800d144:	040200b4 	movhi	r16,2050
 800d148:	dc400115 	stw	r17,4(sp)
 800d14c:	84050904 	addi	r16,r16,5156
 800d150:	2023883a 	mov	r17,r4
 800d154:	2809883a 	mov	r4,r5
 800d158:	dfc00215 	stw	ra,8(sp)
 800d15c:	80000015 	stw	zero,0(r16)
 800d160:	80109600 	call	8010960 <isatty>
 800d164:	00ffffc4 	movi	r3,-1
 800d168:	10c00526 	beq	r2,r3,800d180 <_isatty_r+0x44>
 800d16c:	dfc00217 	ldw	ra,8(sp)
 800d170:	dc400117 	ldw	r17,4(sp)
 800d174:	dc000017 	ldw	r16,0(sp)
 800d178:	dec00304 	addi	sp,sp,12
 800d17c:	f800283a 	ret
 800d180:	80c00017 	ldw	r3,0(r16)
 800d184:	183ff926 	beq	r3,zero,800d16c <__alt_data_end+0xfc00d16c>
 800d188:	88c00015 	stw	r3,0(r17)
 800d18c:	003ff706 	br	800d16c <__alt_data_end+0xfc00d16c>

0800d190 <_lseek_r>:
 800d190:	defffd04 	addi	sp,sp,-12
 800d194:	dc000015 	stw	r16,0(sp)
 800d198:	040200b4 	movhi	r16,2050
 800d19c:	dc400115 	stw	r17,4(sp)
 800d1a0:	84050904 	addi	r16,r16,5156
 800d1a4:	2023883a 	mov	r17,r4
 800d1a8:	2809883a 	mov	r4,r5
 800d1ac:	300b883a 	mov	r5,r6
 800d1b0:	380d883a 	mov	r6,r7
 800d1b4:	dfc00215 	stw	ra,8(sp)
 800d1b8:	80000015 	stw	zero,0(r16)
 800d1bc:	8010b380 	call	8010b38 <lseek>
 800d1c0:	00ffffc4 	movi	r3,-1
 800d1c4:	10c00526 	beq	r2,r3,800d1dc <_lseek_r+0x4c>
 800d1c8:	dfc00217 	ldw	ra,8(sp)
 800d1cc:	dc400117 	ldw	r17,4(sp)
 800d1d0:	dc000017 	ldw	r16,0(sp)
 800d1d4:	dec00304 	addi	sp,sp,12
 800d1d8:	f800283a 	ret
 800d1dc:	80c00017 	ldw	r3,0(r16)
 800d1e0:	183ff926 	beq	r3,zero,800d1c8 <__alt_data_end+0xfc00d1c8>
 800d1e4:	88c00015 	stw	r3,0(r17)
 800d1e8:	003ff706 	br	800d1c8 <__alt_data_end+0xfc00d1c8>

0800d1ec <_read_r>:
 800d1ec:	defffd04 	addi	sp,sp,-12
 800d1f0:	dc000015 	stw	r16,0(sp)
 800d1f4:	040200b4 	movhi	r16,2050
 800d1f8:	dc400115 	stw	r17,4(sp)
 800d1fc:	84050904 	addi	r16,r16,5156
 800d200:	2023883a 	mov	r17,r4
 800d204:	2809883a 	mov	r4,r5
 800d208:	300b883a 	mov	r5,r6
 800d20c:	380d883a 	mov	r6,r7
 800d210:	dfc00215 	stw	ra,8(sp)
 800d214:	80000015 	stw	zero,0(r16)
 800d218:	8010d140 	call	8010d14 <read>
 800d21c:	00ffffc4 	movi	r3,-1
 800d220:	10c00526 	beq	r2,r3,800d238 <_read_r+0x4c>
 800d224:	dfc00217 	ldw	ra,8(sp)
 800d228:	dc400117 	ldw	r17,4(sp)
 800d22c:	dc000017 	ldw	r16,0(sp)
 800d230:	dec00304 	addi	sp,sp,12
 800d234:	f800283a 	ret
 800d238:	80c00017 	ldw	r3,0(r16)
 800d23c:	183ff926 	beq	r3,zero,800d224 <__alt_data_end+0xfc00d224>
 800d240:	88c00015 	stw	r3,0(r17)
 800d244:	003ff706 	br	800d224 <__alt_data_end+0xfc00d224>

0800d248 <_wcrtomb_r>:
 800d248:	defff604 	addi	sp,sp,-40
 800d24c:	008200b4 	movhi	r2,2050
 800d250:	dc800815 	stw	r18,32(sp)
 800d254:	dc400715 	stw	r17,28(sp)
 800d258:	dc000615 	stw	r16,24(sp)
 800d25c:	10be0f04 	addi	r2,r2,-1988
 800d260:	dfc00915 	stw	ra,36(sp)
 800d264:	2021883a 	mov	r16,r4
 800d268:	3823883a 	mov	r17,r7
 800d26c:	14800017 	ldw	r18,0(r2)
 800d270:	28001426 	beq	r5,zero,800d2c4 <_wcrtomb_r+0x7c>
 800d274:	d9400415 	stw	r5,16(sp)
 800d278:	d9800515 	stw	r6,20(sp)
 800d27c:	80090140 	call	8009014 <__locale_charset>
 800d280:	d9400417 	ldw	r5,16(sp)
 800d284:	d9800517 	ldw	r6,20(sp)
 800d288:	8009883a 	mov	r4,r16
 800d28c:	dc400015 	stw	r17,0(sp)
 800d290:	100f883a 	mov	r7,r2
 800d294:	903ee83a 	callr	r18
 800d298:	00ffffc4 	movi	r3,-1
 800d29c:	10c0031e 	bne	r2,r3,800d2ac <_wcrtomb_r+0x64>
 800d2a0:	88000015 	stw	zero,0(r17)
 800d2a4:	00c02284 	movi	r3,138
 800d2a8:	80c00015 	stw	r3,0(r16)
 800d2ac:	dfc00917 	ldw	ra,36(sp)
 800d2b0:	dc800817 	ldw	r18,32(sp)
 800d2b4:	dc400717 	ldw	r17,28(sp)
 800d2b8:	dc000617 	ldw	r16,24(sp)
 800d2bc:	dec00a04 	addi	sp,sp,40
 800d2c0:	f800283a 	ret
 800d2c4:	80090140 	call	8009014 <__locale_charset>
 800d2c8:	8009883a 	mov	r4,r16
 800d2cc:	dc400015 	stw	r17,0(sp)
 800d2d0:	d9400104 	addi	r5,sp,4
 800d2d4:	000d883a 	mov	r6,zero
 800d2d8:	100f883a 	mov	r7,r2
 800d2dc:	903ee83a 	callr	r18
 800d2e0:	003fed06 	br	800d298 <__alt_data_end+0xfc00d298>

0800d2e4 <wcrtomb>:
 800d2e4:	defff504 	addi	sp,sp,-44
 800d2e8:	dc400515 	stw	r17,20(sp)
 800d2ec:	dc000415 	stw	r16,16(sp)
 800d2f0:	dfc00a15 	stw	ra,40(sp)
 800d2f4:	dd400915 	stw	r21,36(sp)
 800d2f8:	dd000815 	stw	r20,32(sp)
 800d2fc:	dcc00715 	stw	r19,28(sp)
 800d300:	dc800615 	stw	r18,24(sp)
 800d304:	2021883a 	mov	r16,r4
 800d308:	3023883a 	mov	r17,r6
 800d30c:	20001d26 	beq	r4,zero,800d384 <wcrtomb+0xa0>
 800d310:	048200b4 	movhi	r18,2050
 800d314:	94be0b04 	addi	r18,r18,-2004
 800d318:	008200b4 	movhi	r2,2050
 800d31c:	95400017 	ldw	r21,0(r18)
 800d320:	10be0f04 	addi	r2,r2,-1988
 800d324:	15000017 	ldw	r20,0(r2)
 800d328:	2827883a 	mov	r19,r5
 800d32c:	80090140 	call	8009014 <__locale_charset>
 800d330:	a809883a 	mov	r4,r21
 800d334:	dc400015 	stw	r17,0(sp)
 800d338:	800b883a 	mov	r5,r16
 800d33c:	980d883a 	mov	r6,r19
 800d340:	100f883a 	mov	r7,r2
 800d344:	a03ee83a 	callr	r20
 800d348:	00ffffc4 	movi	r3,-1
 800d34c:	10c0041e 	bne	r2,r3,800d360 <wcrtomb+0x7c>
 800d350:	90c00017 	ldw	r3,0(r18)
 800d354:	01002284 	movi	r4,138
 800d358:	88000015 	stw	zero,0(r17)
 800d35c:	19000015 	stw	r4,0(r3)
 800d360:	dfc00a17 	ldw	ra,40(sp)
 800d364:	dd400917 	ldw	r21,36(sp)
 800d368:	dd000817 	ldw	r20,32(sp)
 800d36c:	dcc00717 	ldw	r19,28(sp)
 800d370:	dc800617 	ldw	r18,24(sp)
 800d374:	dc400517 	ldw	r17,20(sp)
 800d378:	dc000417 	ldw	r16,16(sp)
 800d37c:	dec00b04 	addi	sp,sp,44
 800d380:	f800283a 	ret
 800d384:	048200b4 	movhi	r18,2050
 800d388:	94be0b04 	addi	r18,r18,-2004
 800d38c:	008200b4 	movhi	r2,2050
 800d390:	94c00017 	ldw	r19,0(r18)
 800d394:	10be0f04 	addi	r2,r2,-1988
 800d398:	14000017 	ldw	r16,0(r2)
 800d39c:	80090140 	call	8009014 <__locale_charset>
 800d3a0:	9809883a 	mov	r4,r19
 800d3a4:	dc400015 	stw	r17,0(sp)
 800d3a8:	d9400104 	addi	r5,sp,4
 800d3ac:	000d883a 	mov	r6,zero
 800d3b0:	100f883a 	mov	r7,r2
 800d3b4:	803ee83a 	callr	r16
 800d3b8:	003fe306 	br	800d348 <__alt_data_end+0xfc00d348>

0800d3bc <__ascii_wctomb>:
 800d3bc:	28000526 	beq	r5,zero,800d3d4 <__ascii_wctomb+0x18>
 800d3c0:	00803fc4 	movi	r2,255
 800d3c4:	11800536 	bltu	r2,r6,800d3dc <__ascii_wctomb+0x20>
 800d3c8:	29800005 	stb	r6,0(r5)
 800d3cc:	00800044 	movi	r2,1
 800d3d0:	f800283a 	ret
 800d3d4:	0005883a 	mov	r2,zero
 800d3d8:	f800283a 	ret
 800d3dc:	00802284 	movi	r2,138
 800d3e0:	20800015 	stw	r2,0(r4)
 800d3e4:	00bfffc4 	movi	r2,-1
 800d3e8:	f800283a 	ret

0800d3ec <_wctomb_r>:
 800d3ec:	008200b4 	movhi	r2,2050
 800d3f0:	defff904 	addi	sp,sp,-28
 800d3f4:	10be0f04 	addi	r2,r2,-1988
 800d3f8:	dfc00615 	stw	ra,24(sp)
 800d3fc:	dc400515 	stw	r17,20(sp)
 800d400:	dc000415 	stw	r16,16(sp)
 800d404:	3823883a 	mov	r17,r7
 800d408:	14000017 	ldw	r16,0(r2)
 800d40c:	d9000115 	stw	r4,4(sp)
 800d410:	d9400215 	stw	r5,8(sp)
 800d414:	d9800315 	stw	r6,12(sp)
 800d418:	80090140 	call	8009014 <__locale_charset>
 800d41c:	d9000117 	ldw	r4,4(sp)
 800d420:	d9400217 	ldw	r5,8(sp)
 800d424:	d9800317 	ldw	r6,12(sp)
 800d428:	dc400015 	stw	r17,0(sp)
 800d42c:	100f883a 	mov	r7,r2
 800d430:	803ee83a 	callr	r16
 800d434:	dfc00617 	ldw	ra,24(sp)
 800d438:	dc400517 	ldw	r17,20(sp)
 800d43c:	dc000417 	ldw	r16,16(sp)
 800d440:	dec00704 	addi	sp,sp,28
 800d444:	f800283a 	ret

0800d448 <__udivdi3>:
 800d448:	defff504 	addi	sp,sp,-44
 800d44c:	dcc00415 	stw	r19,16(sp)
 800d450:	dc000115 	stw	r16,4(sp)
 800d454:	dfc00a15 	stw	ra,40(sp)
 800d458:	df000915 	stw	fp,36(sp)
 800d45c:	ddc00815 	stw	r23,32(sp)
 800d460:	dd800715 	stw	r22,28(sp)
 800d464:	dd400615 	stw	r21,24(sp)
 800d468:	dd000515 	stw	r20,20(sp)
 800d46c:	dc800315 	stw	r18,12(sp)
 800d470:	dc400215 	stw	r17,8(sp)
 800d474:	2027883a 	mov	r19,r4
 800d478:	2821883a 	mov	r16,r5
 800d47c:	3800421e 	bne	r7,zero,800d588 <__udivdi3+0x140>
 800d480:	3025883a 	mov	r18,r6
 800d484:	2023883a 	mov	r17,r4
 800d488:	2980542e 	bgeu	r5,r6,800d5dc <__udivdi3+0x194>
 800d48c:	00bfffd4 	movui	r2,65535
 800d490:	282d883a 	mov	r22,r5
 800d494:	1180a836 	bltu	r2,r6,800d738 <__udivdi3+0x2f0>
 800d498:	00803fc4 	movi	r2,255
 800d49c:	1181422e 	bgeu	r2,r6,800d9a8 <__udivdi3+0x560>
 800d4a0:	00800204 	movi	r2,8
 800d4a4:	1007883a 	mov	r3,r2
 800d4a8:	3084d83a 	srl	r2,r6,r2
 800d4ac:	010200b4 	movhi	r4,2050
 800d4b0:	2136e604 	addi	r4,r4,-9320
 800d4b4:	2085883a 	add	r2,r4,r2
 800d4b8:	10800003 	ldbu	r2,0(r2)
 800d4bc:	10c7883a 	add	r3,r2,r3
 800d4c0:	00800804 	movi	r2,32
 800d4c4:	10c5c83a 	sub	r2,r2,r3
 800d4c8:	10000526 	beq	r2,zero,800d4e0 <__udivdi3+0x98>
 800d4cc:	80a0983a 	sll	r16,r16,r2
 800d4d0:	98c6d83a 	srl	r3,r19,r3
 800d4d4:	30a4983a 	sll	r18,r6,r2
 800d4d8:	98a2983a 	sll	r17,r19,r2
 800d4dc:	80ecb03a 	or	r22,r16,r3
 800d4e0:	902ad43a 	srli	r21,r18,16
 800d4e4:	b009883a 	mov	r4,r22
 800d4e8:	953fffcc 	andi	r20,r18,65535
 800d4ec:	a80b883a 	mov	r5,r21
 800d4f0:	800e0bc0 	call	800e0bc <__umodsi3>
 800d4f4:	b009883a 	mov	r4,r22
 800d4f8:	a80b883a 	mov	r5,r21
 800d4fc:	1027883a 	mov	r19,r2
 800d500:	800e0b40 	call	800e0b4 <__udivsi3>
 800d504:	1021883a 	mov	r16,r2
 800d508:	8806d43a 	srli	r3,r17,16
 800d50c:	9804943a 	slli	r2,r19,16
 800d510:	8527383a 	mul	r19,r16,r20
 800d514:	10c4b03a 	or	r2,r2,r3
 800d518:	14c0052e 	bgeu	r2,r19,800d530 <__udivdi3+0xe8>
 800d51c:	1485883a 	add	r2,r2,r18
 800d520:	80ffffc4 	addi	r3,r16,-1
 800d524:	14800136 	bltu	r2,r18,800d52c <__udivdi3+0xe4>
 800d528:	14c13436 	bltu	r2,r19,800d9fc <__udivdi3+0x5b4>
 800d52c:	1821883a 	mov	r16,r3
 800d530:	14e7c83a 	sub	r19,r2,r19
 800d534:	9809883a 	mov	r4,r19
 800d538:	a80b883a 	mov	r5,r21
 800d53c:	800e0bc0 	call	800e0bc <__umodsi3>
 800d540:	102d883a 	mov	r22,r2
 800d544:	9809883a 	mov	r4,r19
 800d548:	a80b883a 	mov	r5,r21
 800d54c:	800e0b40 	call	800e0b4 <__udivsi3>
 800d550:	b02c943a 	slli	r22,r22,16
 800d554:	1529383a 	mul	r20,r2,r20
 800d558:	8c7fffcc 	andi	r17,r17,65535
 800d55c:	b462b03a 	or	r17,r22,r17
 800d560:	8d00052e 	bgeu	r17,r20,800d578 <__udivdi3+0x130>
 800d564:	8ca3883a 	add	r17,r17,r18
 800d568:	10ffffc4 	addi	r3,r2,-1
 800d56c:	8c80f636 	bltu	r17,r18,800d948 <__udivdi3+0x500>
 800d570:	8d00f52e 	bgeu	r17,r20,800d948 <__udivdi3+0x500>
 800d574:	10bfff84 	addi	r2,r2,-2
 800d578:	8020943a 	slli	r16,r16,16
 800d57c:	0007883a 	mov	r3,zero
 800d580:	1404b03a 	or	r2,r2,r16
 800d584:	00005b06 	br	800d6f4 <__udivdi3+0x2ac>
 800d588:	29c05836 	bltu	r5,r7,800d6ec <__udivdi3+0x2a4>
 800d58c:	00bfffd4 	movui	r2,65535
 800d590:	11c0642e 	bgeu	r2,r7,800d724 <__udivdi3+0x2dc>
 800d594:	00804034 	movhi	r2,256
 800d598:	10bfffc4 	addi	r2,r2,-1
 800d59c:	11c0f32e 	bgeu	r2,r7,800d96c <__udivdi3+0x524>
 800d5a0:	00c00604 	movi	r3,24
 800d5a4:	180b883a 	mov	r5,r3
 800d5a8:	38c6d83a 	srl	r3,r7,r3
 800d5ac:	008200b4 	movhi	r2,2050
 800d5b0:	10b6e604 	addi	r2,r2,-9320
 800d5b4:	10c7883a 	add	r3,r2,r3
 800d5b8:	18c00003 	ldbu	r3,0(r3)
 800d5bc:	01000804 	movi	r4,32
 800d5c0:	1947883a 	add	r3,r3,r5
 800d5c4:	20e5c83a 	sub	r18,r4,r3
 800d5c8:	9000661e 	bne	r18,zero,800d764 <__udivdi3+0x31c>
 800d5cc:	3c00f936 	bltu	r7,r16,800d9b4 <__udivdi3+0x56c>
 800d5d0:	9985403a 	cmpgeu	r2,r19,r6
 800d5d4:	0007883a 	mov	r3,zero
 800d5d8:	00004606 	br	800d6f4 <__udivdi3+0x2ac>
 800d5dc:	3000041e 	bne	r6,zero,800d5f0 <__udivdi3+0x1a8>
 800d5e0:	01000044 	movi	r4,1
 800d5e4:	000b883a 	mov	r5,zero
 800d5e8:	800e0b40 	call	800e0b4 <__udivsi3>
 800d5ec:	1025883a 	mov	r18,r2
 800d5f0:	00bfffd4 	movui	r2,65535
 800d5f4:	1480562e 	bgeu	r2,r18,800d750 <__udivdi3+0x308>
 800d5f8:	00804034 	movhi	r2,256
 800d5fc:	10bfffc4 	addi	r2,r2,-1
 800d600:	1480e32e 	bgeu	r2,r18,800d990 <__udivdi3+0x548>
 800d604:	00800604 	movi	r2,24
 800d608:	1007883a 	mov	r3,r2
 800d60c:	9084d83a 	srl	r2,r18,r2
 800d610:	010200b4 	movhi	r4,2050
 800d614:	2136e604 	addi	r4,r4,-9320
 800d618:	2085883a 	add	r2,r4,r2
 800d61c:	10800003 	ldbu	r2,0(r2)
 800d620:	10c5883a 	add	r2,r2,r3
 800d624:	00c00804 	movi	r3,32
 800d628:	1887c83a 	sub	r3,r3,r2
 800d62c:	1800911e 	bne	r3,zero,800d874 <__udivdi3+0x42c>
 800d630:	9028d43a 	srli	r20,r18,16
 800d634:	84a1c83a 	sub	r16,r16,r18
 800d638:	957fffcc 	andi	r21,r18,65535
 800d63c:	00c00044 	movi	r3,1
 800d640:	8009883a 	mov	r4,r16
 800d644:	a00b883a 	mov	r5,r20
 800d648:	d8c00015 	stw	r3,0(sp)
 800d64c:	800e0bc0 	call	800e0bc <__umodsi3>
 800d650:	8009883a 	mov	r4,r16
 800d654:	a00b883a 	mov	r5,r20
 800d658:	1027883a 	mov	r19,r2
 800d65c:	800e0b40 	call	800e0b4 <__udivsi3>
 800d660:	1021883a 	mov	r16,r2
 800d664:	880cd43a 	srli	r6,r17,16
 800d668:	9804943a 	slli	r2,r19,16
 800d66c:	8567383a 	mul	r19,r16,r21
 800d670:	d8c00017 	ldw	r3,0(sp)
 800d674:	1188b03a 	or	r4,r2,r6
 800d678:	24c0052e 	bgeu	r4,r19,800d690 <__udivdi3+0x248>
 800d67c:	2489883a 	add	r4,r4,r18
 800d680:	80bfffc4 	addi	r2,r16,-1
 800d684:	24800136 	bltu	r4,r18,800d68c <__udivdi3+0x244>
 800d688:	24c0d936 	bltu	r4,r19,800d9f0 <__udivdi3+0x5a8>
 800d68c:	1021883a 	mov	r16,r2
 800d690:	24e7c83a 	sub	r19,r4,r19
 800d694:	9809883a 	mov	r4,r19
 800d698:	a00b883a 	mov	r5,r20
 800d69c:	d8c00015 	stw	r3,0(sp)
 800d6a0:	800e0bc0 	call	800e0bc <__umodsi3>
 800d6a4:	102d883a 	mov	r22,r2
 800d6a8:	9809883a 	mov	r4,r19
 800d6ac:	a00b883a 	mov	r5,r20
 800d6b0:	800e0b40 	call	800e0b4 <__udivsi3>
 800d6b4:	b02c943a 	slli	r22,r22,16
 800d6b8:	156b383a 	mul	r21,r2,r21
 800d6bc:	8c7fffcc 	andi	r17,r17,65535
 800d6c0:	b462b03a 	or	r17,r22,r17
 800d6c4:	d8c00017 	ldw	r3,0(sp)
 800d6c8:	8d40052e 	bgeu	r17,r21,800d6e0 <__udivdi3+0x298>
 800d6cc:	8ca3883a 	add	r17,r17,r18
 800d6d0:	113fffc4 	addi	r4,r2,-1
 800d6d4:	8c809a36 	bltu	r17,r18,800d940 <__udivdi3+0x4f8>
 800d6d8:	8d40992e 	bgeu	r17,r21,800d940 <__udivdi3+0x4f8>
 800d6dc:	10bfff84 	addi	r2,r2,-2
 800d6e0:	8020943a 	slli	r16,r16,16
 800d6e4:	1404b03a 	or	r2,r2,r16
 800d6e8:	00000206 	br	800d6f4 <__udivdi3+0x2ac>
 800d6ec:	0007883a 	mov	r3,zero
 800d6f0:	0005883a 	mov	r2,zero
 800d6f4:	dfc00a17 	ldw	ra,40(sp)
 800d6f8:	df000917 	ldw	fp,36(sp)
 800d6fc:	ddc00817 	ldw	r23,32(sp)
 800d700:	dd800717 	ldw	r22,28(sp)
 800d704:	dd400617 	ldw	r21,24(sp)
 800d708:	dd000517 	ldw	r20,20(sp)
 800d70c:	dcc00417 	ldw	r19,16(sp)
 800d710:	dc800317 	ldw	r18,12(sp)
 800d714:	dc400217 	ldw	r17,8(sp)
 800d718:	dc000117 	ldw	r16,4(sp)
 800d71c:	dec00b04 	addi	sp,sp,44
 800d720:	f800283a 	ret
 800d724:	00803fc4 	movi	r2,255
 800d728:	11c0932e 	bgeu	r2,r7,800d978 <__udivdi3+0x530>
 800d72c:	00c00204 	movi	r3,8
 800d730:	180b883a 	mov	r5,r3
 800d734:	003f9c06 	br	800d5a8 <__alt_data_end+0xfc00d5a8>
 800d738:	00804034 	movhi	r2,256
 800d73c:	10bfffc4 	addi	r2,r2,-1
 800d740:	1180902e 	bgeu	r2,r6,800d984 <__udivdi3+0x53c>
 800d744:	00800604 	movi	r2,24
 800d748:	1007883a 	mov	r3,r2
 800d74c:	003f5606 	br	800d4a8 <__alt_data_end+0xfc00d4a8>
 800d750:	00803fc4 	movi	r2,255
 800d754:	1480912e 	bgeu	r2,r18,800d99c <__udivdi3+0x554>
 800d758:	00800204 	movi	r2,8
 800d75c:	1007883a 	mov	r3,r2
 800d760:	003faa06 	br	800d60c <__alt_data_end+0xfc00d60c>
 800d764:	30eed83a 	srl	r23,r6,r3
 800d768:	3c8e983a 	sll	r7,r7,r18
 800d76c:	80f8d83a 	srl	fp,r16,r3
 800d770:	98c6d83a 	srl	r3,r19,r3
 800d774:	3deeb03a 	or	r23,r7,r23
 800d778:	b828d43a 	srli	r20,r23,16
 800d77c:	84a0983a 	sll	r16,r16,r18
 800d780:	e009883a 	mov	r4,fp
 800d784:	a00b883a 	mov	r5,r20
 800d788:	80e2b03a 	or	r17,r16,r3
 800d78c:	34aa983a 	sll	r21,r6,r18
 800d790:	800e0bc0 	call	800e0bc <__umodsi3>
 800d794:	e009883a 	mov	r4,fp
 800d798:	a00b883a 	mov	r5,r20
 800d79c:	102d883a 	mov	r22,r2
 800d7a0:	800e0b40 	call	800e0b4 <__udivsi3>
 800d7a4:	1021883a 	mov	r16,r2
 800d7a8:	bf3fffcc 	andi	fp,r23,65535
 800d7ac:	b004943a 	slli	r2,r22,16
 800d7b0:	8808d43a 	srli	r4,r17,16
 800d7b4:	872d383a 	mul	r22,r16,fp
 800d7b8:	1104b03a 	or	r2,r2,r4
 800d7bc:	1580042e 	bgeu	r2,r22,800d7d0 <__udivdi3+0x388>
 800d7c0:	15c5883a 	add	r2,r2,r23
 800d7c4:	80ffffc4 	addi	r3,r16,-1
 800d7c8:	15c0812e 	bgeu	r2,r23,800d9d0 <__udivdi3+0x588>
 800d7cc:	1821883a 	mov	r16,r3
 800d7d0:	15adc83a 	sub	r22,r2,r22
 800d7d4:	b009883a 	mov	r4,r22
 800d7d8:	a00b883a 	mov	r5,r20
 800d7dc:	800e0bc0 	call	800e0bc <__umodsi3>
 800d7e0:	a00b883a 	mov	r5,r20
 800d7e4:	b009883a 	mov	r4,r22
 800d7e8:	d8800015 	stw	r2,0(sp)
 800d7ec:	800e0b40 	call	800e0b4 <__udivsi3>
 800d7f0:	d8c00017 	ldw	r3,0(sp)
 800d7f4:	170b383a 	mul	r5,r2,fp
 800d7f8:	8c7fffcc 	andi	r17,r17,65535
 800d7fc:	1806943a 	slli	r3,r3,16
 800d800:	1c46b03a 	or	r3,r3,r17
 800d804:	1940042e 	bgeu	r3,r5,800d818 <__udivdi3+0x3d0>
 800d808:	1dc7883a 	add	r3,r3,r23
 800d80c:	113fffc4 	addi	r4,r2,-1
 800d810:	1dc06b2e 	bgeu	r3,r23,800d9c0 <__udivdi3+0x578>
 800d814:	2005883a 	mov	r2,r4
 800d818:	8020943a 	slli	r16,r16,16
 800d81c:	a9ffffcc 	andi	r7,r21,65535
 800d820:	a82ad43a 	srli	r21,r21,16
 800d824:	1404b03a 	or	r2,r2,r16
 800d828:	113fffcc 	andi	r4,r2,65535
 800d82c:	100cd43a 	srli	r6,r2,16
 800d830:	21d3383a 	mul	r9,r4,r7
 800d834:	2549383a 	mul	r4,r4,r21
 800d838:	31cf383a 	mul	r7,r6,r7
 800d83c:	4810d43a 	srli	r8,r9,16
 800d840:	1947c83a 	sub	r3,r3,r5
 800d844:	3909883a 	add	r4,r7,r4
 800d848:	2209883a 	add	r4,r4,r8
 800d84c:	354d383a 	mul	r6,r6,r21
 800d850:	21c0022e 	bgeu	r4,r7,800d85c <__udivdi3+0x414>
 800d854:	01400074 	movhi	r5,1
 800d858:	314d883a 	add	r6,r6,r5
 800d85c:	202ad43a 	srli	r21,r4,16
 800d860:	354d883a 	add	r6,r6,r21
 800d864:	19803f36 	bltu	r3,r6,800d964 <__udivdi3+0x51c>
 800d868:	19803926 	beq	r3,r6,800d950 <__udivdi3+0x508>
 800d86c:	0007883a 	mov	r3,zero
 800d870:	003fa006 	br	800d6f4 <__alt_data_end+0xfc00d6f4>
 800d874:	90e4983a 	sll	r18,r18,r3
 800d878:	80aad83a 	srl	r21,r16,r2
 800d87c:	80e0983a 	sll	r16,r16,r3
 800d880:	9028d43a 	srli	r20,r18,16
 800d884:	9884d83a 	srl	r2,r19,r2
 800d888:	a809883a 	mov	r4,r21
 800d88c:	a00b883a 	mov	r5,r20
 800d890:	80acb03a 	or	r22,r16,r2
 800d894:	98e2983a 	sll	r17,r19,r3
 800d898:	800e0bc0 	call	800e0bc <__umodsi3>
 800d89c:	a809883a 	mov	r4,r21
 800d8a0:	a00b883a 	mov	r5,r20
 800d8a4:	1021883a 	mov	r16,r2
 800d8a8:	800e0b40 	call	800e0b4 <__udivsi3>
 800d8ac:	957fffcc 	andi	r21,r18,65535
 800d8b0:	8020943a 	slli	r16,r16,16
 800d8b4:	b00ad43a 	srli	r5,r22,16
 800d8b8:	1567383a 	mul	r19,r2,r21
 800d8bc:	102f883a 	mov	r23,r2
 800d8c0:	8148b03a 	or	r4,r16,r5
 800d8c4:	24c0062e 	bgeu	r4,r19,800d8e0 <__udivdi3+0x498>
 800d8c8:	2489883a 	add	r4,r4,r18
 800d8cc:	10bfffc4 	addi	r2,r2,-1
 800d8d0:	24804536 	bltu	r4,r18,800d9e8 <__udivdi3+0x5a0>
 800d8d4:	24c0442e 	bgeu	r4,r19,800d9e8 <__udivdi3+0x5a0>
 800d8d8:	bdffff84 	addi	r23,r23,-2
 800d8dc:	2489883a 	add	r4,r4,r18
 800d8e0:	24e7c83a 	sub	r19,r4,r19
 800d8e4:	9809883a 	mov	r4,r19
 800d8e8:	a00b883a 	mov	r5,r20
 800d8ec:	800e0bc0 	call	800e0bc <__umodsi3>
 800d8f0:	1021883a 	mov	r16,r2
 800d8f4:	9809883a 	mov	r4,r19
 800d8f8:	a00b883a 	mov	r5,r20
 800d8fc:	800e0b40 	call	800e0b4 <__udivsi3>
 800d900:	8020943a 	slli	r16,r16,16
 800d904:	1007883a 	mov	r3,r2
 800d908:	1545383a 	mul	r2,r2,r21
 800d90c:	b13fffcc 	andi	r4,r22,65535
 800d910:	8108b03a 	or	r4,r16,r4
 800d914:	2080062e 	bgeu	r4,r2,800d930 <__udivdi3+0x4e8>
 800d918:	2489883a 	add	r4,r4,r18
 800d91c:	197fffc4 	addi	r5,r3,-1
 800d920:	24802f36 	bltu	r4,r18,800d9e0 <__udivdi3+0x598>
 800d924:	20802e2e 	bgeu	r4,r2,800d9e0 <__udivdi3+0x598>
 800d928:	18ffff84 	addi	r3,r3,-2
 800d92c:	2489883a 	add	r4,r4,r18
 800d930:	b82e943a 	slli	r23,r23,16
 800d934:	20a1c83a 	sub	r16,r4,r2
 800d938:	1dc6b03a 	or	r3,r3,r23
 800d93c:	003f4006 	br	800d640 <__alt_data_end+0xfc00d640>
 800d940:	2005883a 	mov	r2,r4
 800d944:	003f6606 	br	800d6e0 <__alt_data_end+0xfc00d6e0>
 800d948:	1805883a 	mov	r2,r3
 800d94c:	003f0a06 	br	800d578 <__alt_data_end+0xfc00d578>
 800d950:	2006943a 	slli	r3,r4,16
 800d954:	9c88983a 	sll	r4,r19,r18
 800d958:	4a7fffcc 	andi	r9,r9,65535
 800d95c:	1a47883a 	add	r3,r3,r9
 800d960:	20ffc22e 	bgeu	r4,r3,800d86c <__alt_data_end+0xfc00d86c>
 800d964:	10bfffc4 	addi	r2,r2,-1
 800d968:	003fc006 	br	800d86c <__alt_data_end+0xfc00d86c>
 800d96c:	00c00404 	movi	r3,16
 800d970:	180b883a 	mov	r5,r3
 800d974:	003f0c06 	br	800d5a8 <__alt_data_end+0xfc00d5a8>
 800d978:	0007883a 	mov	r3,zero
 800d97c:	000b883a 	mov	r5,zero
 800d980:	003f0906 	br	800d5a8 <__alt_data_end+0xfc00d5a8>
 800d984:	00800404 	movi	r2,16
 800d988:	1007883a 	mov	r3,r2
 800d98c:	003ec606 	br	800d4a8 <__alt_data_end+0xfc00d4a8>
 800d990:	00800404 	movi	r2,16
 800d994:	1007883a 	mov	r3,r2
 800d998:	003f1c06 	br	800d60c <__alt_data_end+0xfc00d60c>
 800d99c:	0005883a 	mov	r2,zero
 800d9a0:	0007883a 	mov	r3,zero
 800d9a4:	003f1906 	br	800d60c <__alt_data_end+0xfc00d60c>
 800d9a8:	0005883a 	mov	r2,zero
 800d9ac:	0007883a 	mov	r3,zero
 800d9b0:	003ebd06 	br	800d4a8 <__alt_data_end+0xfc00d4a8>
 800d9b4:	0007883a 	mov	r3,zero
 800d9b8:	00800044 	movi	r2,1
 800d9bc:	003f4d06 	br	800d6f4 <__alt_data_end+0xfc00d6f4>
 800d9c0:	197f942e 	bgeu	r3,r5,800d814 <__alt_data_end+0xfc00d814>
 800d9c4:	10bfff84 	addi	r2,r2,-2
 800d9c8:	1dc7883a 	add	r3,r3,r23
 800d9cc:	003f9206 	br	800d818 <__alt_data_end+0xfc00d818>
 800d9d0:	15bf7e2e 	bgeu	r2,r22,800d7cc <__alt_data_end+0xfc00d7cc>
 800d9d4:	843fff84 	addi	r16,r16,-2
 800d9d8:	15c5883a 	add	r2,r2,r23
 800d9dc:	003f7c06 	br	800d7d0 <__alt_data_end+0xfc00d7d0>
 800d9e0:	2807883a 	mov	r3,r5
 800d9e4:	003fd206 	br	800d930 <__alt_data_end+0xfc00d930>
 800d9e8:	102f883a 	mov	r23,r2
 800d9ec:	003fbc06 	br	800d8e0 <__alt_data_end+0xfc00d8e0>
 800d9f0:	843fff84 	addi	r16,r16,-2
 800d9f4:	2489883a 	add	r4,r4,r18
 800d9f8:	003f2506 	br	800d690 <__alt_data_end+0xfc00d690>
 800d9fc:	843fff84 	addi	r16,r16,-2
 800da00:	1485883a 	add	r2,r2,r18
 800da04:	003eca06 	br	800d530 <__alt_data_end+0xfc00d530>

0800da08 <__umoddi3>:
 800da08:	defff404 	addi	sp,sp,-48
 800da0c:	ddc00915 	stw	r23,36(sp)
 800da10:	dc400315 	stw	r17,12(sp)
 800da14:	dc000215 	stw	r16,8(sp)
 800da18:	dfc00b15 	stw	ra,44(sp)
 800da1c:	df000a15 	stw	fp,40(sp)
 800da20:	dd800815 	stw	r22,32(sp)
 800da24:	dd400715 	stw	r21,28(sp)
 800da28:	dd000615 	stw	r20,24(sp)
 800da2c:	dcc00515 	stw	r19,20(sp)
 800da30:	dc800415 	stw	r18,16(sp)
 800da34:	2021883a 	mov	r16,r4
 800da38:	2823883a 	mov	r17,r5
 800da3c:	282f883a 	mov	r23,r5
 800da40:	3800381e 	bne	r7,zero,800db24 <__umoddi3+0x11c>
 800da44:	3027883a 	mov	r19,r6
 800da48:	2029883a 	mov	r20,r4
 800da4c:	29804e2e 	bgeu	r5,r6,800db88 <__umoddi3+0x180>
 800da50:	00bfffd4 	movui	r2,65535
 800da54:	11809c36 	bltu	r2,r6,800dcc8 <__umoddi3+0x2c0>
 800da58:	00803fc4 	movi	r2,255
 800da5c:	11813b2e 	bgeu	r2,r6,800df4c <__umoddi3+0x544>
 800da60:	01400204 	movi	r5,8
 800da64:	2805883a 	mov	r2,r5
 800da68:	314ad83a 	srl	r5,r6,r5
 800da6c:	00c200b4 	movhi	r3,2050
 800da70:	18f6e604 	addi	r3,r3,-9320
 800da74:	194b883a 	add	r5,r3,r5
 800da78:	29000003 	ldbu	r4,0(r5)
 800da7c:	2089883a 	add	r4,r4,r2
 800da80:	00800804 	movi	r2,32
 800da84:	1105c83a 	sub	r2,r2,r4
 800da88:	1000ec26 	beq	r2,zero,800de3c <__umoddi3+0x434>
 800da8c:	88a2983a 	sll	r17,r17,r2
 800da90:	8108d83a 	srl	r4,r16,r4
 800da94:	30a6983a 	sll	r19,r6,r2
 800da98:	80a8983a 	sll	r20,r16,r2
 800da9c:	1025883a 	mov	r18,r2
 800daa0:	892eb03a 	or	r23,r17,r4
 800daa4:	982cd43a 	srli	r22,r19,16
 800daa8:	b809883a 	mov	r4,r23
 800daac:	9d7fffcc 	andi	r21,r19,65535
 800dab0:	b00b883a 	mov	r5,r22
 800dab4:	800e0bc0 	call	800e0bc <__umodsi3>
 800dab8:	b809883a 	mov	r4,r23
 800dabc:	b00b883a 	mov	r5,r22
 800dac0:	1021883a 	mov	r16,r2
 800dac4:	800e0b40 	call	800e0b4 <__udivsi3>
 800dac8:	8020943a 	slli	r16,r16,16
 800dacc:	a00cd43a 	srli	r6,r20,16
 800dad0:	1545383a 	mul	r2,r2,r21
 800dad4:	8188b03a 	or	r4,r16,r6
 800dad8:	2080042e 	bgeu	r4,r2,800daec <__umoddi3+0xe4>
 800dadc:	24c9883a 	add	r4,r4,r19
 800dae0:	24c00236 	bltu	r4,r19,800daec <__umoddi3+0xe4>
 800dae4:	2080012e 	bgeu	r4,r2,800daec <__umoddi3+0xe4>
 800dae8:	24c9883a 	add	r4,r4,r19
 800daec:	20a3c83a 	sub	r17,r4,r2
 800daf0:	8809883a 	mov	r4,r17
 800daf4:	b00b883a 	mov	r5,r22
 800daf8:	800e0bc0 	call	800e0bc <__umodsi3>
 800dafc:	8809883a 	mov	r4,r17
 800db00:	b00b883a 	mov	r5,r22
 800db04:	1021883a 	mov	r16,r2
 800db08:	800e0b40 	call	800e0b4 <__udivsi3>
 800db0c:	8006943a 	slli	r3,r16,16
 800db10:	1545383a 	mul	r2,r2,r21
 800db14:	a13fffcc 	andi	r4,r20,65535
 800db18:	1906b03a 	or	r3,r3,r4
 800db1c:	1880532e 	bgeu	r3,r2,800dc6c <__umoddi3+0x264>
 800db20:	00004e06 	br	800dc5c <__umoddi3+0x254>
 800db24:	29c05536 	bltu	r5,r7,800dc7c <__umoddi3+0x274>
 800db28:	00bfffd4 	movui	r2,65535
 800db2c:	11c0612e 	bgeu	r2,r7,800dcb4 <__umoddi3+0x2ac>
 800db30:	00804034 	movhi	r2,256
 800db34:	10bfffc4 	addi	r2,r2,-1
 800db38:	11c0f82e 	bgeu	r2,r7,800df1c <__umoddi3+0x514>
 800db3c:	01400604 	movi	r5,24
 800db40:	282b883a 	mov	r21,r5
 800db44:	394ad83a 	srl	r5,r7,r5
 800db48:	00c200b4 	movhi	r3,2050
 800db4c:	18f6e604 	addi	r3,r3,-9320
 800db50:	194b883a 	add	r5,r3,r5
 800db54:	28800003 	ldbu	r2,0(r5)
 800db58:	00c00804 	movi	r3,32
 800db5c:	156b883a 	add	r21,r2,r21
 800db60:	1d69c83a 	sub	r20,r3,r21
 800db64:	a000631e 	bne	r20,zero,800dcf4 <__umoddi3+0x2ec>
 800db68:	3c400136 	bltu	r7,r17,800db70 <__umoddi3+0x168>
 800db6c:	81810436 	bltu	r16,r6,800df80 <__umoddi3+0x578>
 800db70:	8185c83a 	sub	r2,r16,r6
 800db74:	89e3c83a 	sub	r17,r17,r7
 800db78:	8087803a 	cmpltu	r3,r16,r2
 800db7c:	88efc83a 	sub	r23,r17,r3
 800db80:	b807883a 	mov	r3,r23
 800db84:	00003f06 	br	800dc84 <__umoddi3+0x27c>
 800db88:	3000041e 	bne	r6,zero,800db9c <__umoddi3+0x194>
 800db8c:	01000044 	movi	r4,1
 800db90:	000b883a 	mov	r5,zero
 800db94:	800e0b40 	call	800e0b4 <__udivsi3>
 800db98:	1027883a 	mov	r19,r2
 800db9c:	00bfffd4 	movui	r2,65535
 800dba0:	14c04f2e 	bgeu	r2,r19,800dce0 <__umoddi3+0x2d8>
 800dba4:	00804034 	movhi	r2,256
 800dba8:	10bfffc4 	addi	r2,r2,-1
 800dbac:	14c0e42e 	bgeu	r2,r19,800df40 <__umoddi3+0x538>
 800dbb0:	00800604 	movi	r2,24
 800dbb4:	1007883a 	mov	r3,r2
 800dbb8:	9884d83a 	srl	r2,r19,r2
 800dbbc:	010200b4 	movhi	r4,2050
 800dbc0:	2136e604 	addi	r4,r4,-9320
 800dbc4:	2085883a 	add	r2,r4,r2
 800dbc8:	11000003 	ldbu	r4,0(r2)
 800dbcc:	00800804 	movi	r2,32
 800dbd0:	20c7883a 	add	r3,r4,r3
 800dbd4:	10c5c83a 	sub	r2,r2,r3
 800dbd8:	10009a1e 	bne	r2,zero,800de44 <__umoddi3+0x43c>
 800dbdc:	982cd43a 	srli	r22,r19,16
 800dbe0:	8ce3c83a 	sub	r17,r17,r19
 800dbe4:	9c3fffcc 	andi	r16,r19,65535
 800dbe8:	0025883a 	mov	r18,zero
 800dbec:	8809883a 	mov	r4,r17
 800dbf0:	b00b883a 	mov	r5,r22
 800dbf4:	800e0bc0 	call	800e0bc <__umodsi3>
 800dbf8:	8809883a 	mov	r4,r17
 800dbfc:	b00b883a 	mov	r5,r22
 800dc00:	102b883a 	mov	r21,r2
 800dc04:	800e0b40 	call	800e0b4 <__udivsi3>
 800dc08:	a806943a 	slli	r3,r21,16
 800dc0c:	a008d43a 	srli	r4,r20,16
 800dc10:	1405383a 	mul	r2,r2,r16
 800dc14:	190cb03a 	or	r6,r3,r4
 800dc18:	3080032e 	bgeu	r6,r2,800dc28 <__umoddi3+0x220>
 800dc1c:	34cd883a 	add	r6,r6,r19
 800dc20:	34c00136 	bltu	r6,r19,800dc28 <__umoddi3+0x220>
 800dc24:	3080d436 	bltu	r6,r2,800df78 <__umoddi3+0x570>
 800dc28:	30abc83a 	sub	r21,r6,r2
 800dc2c:	a809883a 	mov	r4,r21
 800dc30:	b00b883a 	mov	r5,r22
 800dc34:	800e0bc0 	call	800e0bc <__umodsi3>
 800dc38:	1023883a 	mov	r17,r2
 800dc3c:	a809883a 	mov	r4,r21
 800dc40:	b00b883a 	mov	r5,r22
 800dc44:	800e0b40 	call	800e0b4 <__udivsi3>
 800dc48:	8822943a 	slli	r17,r17,16
 800dc4c:	1405383a 	mul	r2,r2,r16
 800dc50:	a13fffcc 	andi	r4,r20,65535
 800dc54:	8906b03a 	or	r3,r17,r4
 800dc58:	1880042e 	bgeu	r3,r2,800dc6c <__umoddi3+0x264>
 800dc5c:	1cc7883a 	add	r3,r3,r19
 800dc60:	1cc00236 	bltu	r3,r19,800dc6c <__umoddi3+0x264>
 800dc64:	1880012e 	bgeu	r3,r2,800dc6c <__umoddi3+0x264>
 800dc68:	1cc7883a 	add	r3,r3,r19
 800dc6c:	1887c83a 	sub	r3,r3,r2
 800dc70:	1c84d83a 	srl	r2,r3,r18
 800dc74:	0007883a 	mov	r3,zero
 800dc78:	00000206 	br	800dc84 <__umoddi3+0x27c>
 800dc7c:	2005883a 	mov	r2,r4
 800dc80:	2807883a 	mov	r3,r5
 800dc84:	dfc00b17 	ldw	ra,44(sp)
 800dc88:	df000a17 	ldw	fp,40(sp)
 800dc8c:	ddc00917 	ldw	r23,36(sp)
 800dc90:	dd800817 	ldw	r22,32(sp)
 800dc94:	dd400717 	ldw	r21,28(sp)
 800dc98:	dd000617 	ldw	r20,24(sp)
 800dc9c:	dcc00517 	ldw	r19,20(sp)
 800dca0:	dc800417 	ldw	r18,16(sp)
 800dca4:	dc400317 	ldw	r17,12(sp)
 800dca8:	dc000217 	ldw	r16,8(sp)
 800dcac:	dec00c04 	addi	sp,sp,48
 800dcb0:	f800283a 	ret
 800dcb4:	00803fc4 	movi	r2,255
 800dcb8:	11c0952e 	bgeu	r2,r7,800df10 <__umoddi3+0x508>
 800dcbc:	01400204 	movi	r5,8
 800dcc0:	282b883a 	mov	r21,r5
 800dcc4:	003f9f06 	br	800db44 <__alt_data_end+0xfc00db44>
 800dcc8:	00804034 	movhi	r2,256
 800dccc:	10bfffc4 	addi	r2,r2,-1
 800dcd0:	1180952e 	bgeu	r2,r6,800df28 <__umoddi3+0x520>
 800dcd4:	01400604 	movi	r5,24
 800dcd8:	2805883a 	mov	r2,r5
 800dcdc:	003f6206 	br	800da68 <__alt_data_end+0xfc00da68>
 800dce0:	00803fc4 	movi	r2,255
 800dce4:	14c0932e 	bgeu	r2,r19,800df34 <__umoddi3+0x52c>
 800dce8:	00800204 	movi	r2,8
 800dcec:	1007883a 	mov	r3,r2
 800dcf0:	003fb106 	br	800dbb8 <__alt_data_end+0xfc00dbb8>
 800dcf4:	3548d83a 	srl	r4,r6,r21
 800dcf8:	3d0e983a 	sll	r7,r7,r20
 800dcfc:	8d10983a 	sll	r8,r17,r20
 800dd00:	8d6cd83a 	srl	r22,r17,r21
 800dd04:	3922b03a 	or	r17,r7,r4
 800dd08:	882ed43a 	srli	r23,r17,16
 800dd0c:	8564d83a 	srl	r18,r16,r21
 800dd10:	b009883a 	mov	r4,r22
 800dd14:	b80b883a 	mov	r5,r23
 800dd18:	44a4b03a 	or	r18,r8,r18
 800dd1c:	3526983a 	sll	r19,r6,r20
 800dd20:	800e0bc0 	call	800e0bc <__umodsi3>
 800dd24:	b009883a 	mov	r4,r22
 800dd28:	b80b883a 	mov	r5,r23
 800dd2c:	1039883a 	mov	fp,r2
 800dd30:	800e0b40 	call	800e0b4 <__udivsi3>
 800dd34:	102d883a 	mov	r22,r2
 800dd38:	8a3fffcc 	andi	r8,r17,65535
 800dd3c:	e004943a 	slli	r2,fp,16
 800dd40:	900cd43a 	srli	r6,r18,16
 800dd44:	b239383a 	mul	fp,r22,r8
 800dd48:	8520983a 	sll	r16,r16,r20
 800dd4c:	118ab03a 	or	r5,r2,r6
 800dd50:	2f00042e 	bgeu	r5,fp,800dd64 <__umoddi3+0x35c>
 800dd54:	2c4b883a 	add	r5,r5,r17
 800dd58:	b0bfffc4 	addi	r2,r22,-1
 800dd5c:	2c40822e 	bgeu	r5,r17,800df68 <__umoddi3+0x560>
 800dd60:	102d883a 	mov	r22,r2
 800dd64:	2f39c83a 	sub	fp,r5,fp
 800dd68:	e009883a 	mov	r4,fp
 800dd6c:	b80b883a 	mov	r5,r23
 800dd70:	da000115 	stw	r8,4(sp)
 800dd74:	800e0bc0 	call	800e0bc <__umodsi3>
 800dd78:	e009883a 	mov	r4,fp
 800dd7c:	b80b883a 	mov	r5,r23
 800dd80:	d8800015 	stw	r2,0(sp)
 800dd84:	800e0b40 	call	800e0b4 <__udivsi3>
 800dd88:	d9800017 	ldw	r6,0(sp)
 800dd8c:	da000117 	ldw	r8,4(sp)
 800dd90:	94bfffcc 	andi	r18,r18,65535
 800dd94:	300c943a 	slli	r6,r6,16
 800dd98:	1209383a 	mul	r4,r2,r8
 800dd9c:	3490b03a 	or	r8,r6,r18
 800dda0:	4100042e 	bgeu	r8,r4,800ddb4 <__umoddi3+0x3ac>
 800dda4:	4451883a 	add	r8,r8,r17
 800dda8:	10ffffc4 	addi	r3,r2,-1
 800ddac:	44406a2e 	bgeu	r8,r17,800df58 <__umoddi3+0x550>
 800ddb0:	1805883a 	mov	r2,r3
 800ddb4:	b012943a 	slli	r9,r22,16
 800ddb8:	9abfffcc 	andi	r10,r19,65535
 800ddbc:	980ed43a 	srli	r7,r19,16
 800ddc0:	124ab03a 	or	r5,r2,r9
 800ddc4:	2a7fffcc 	andi	r9,r5,65535
 800ddc8:	280ad43a 	srli	r5,r5,16
 800ddcc:	4a8d383a 	mul	r6,r9,r10
 800ddd0:	49d3383a 	mul	r9,r9,r7
 800ddd4:	2a95383a 	mul	r10,r5,r10
 800ddd8:	3004d43a 	srli	r2,r6,16
 800dddc:	4111c83a 	sub	r8,r8,r4
 800dde0:	5253883a 	add	r9,r10,r9
 800dde4:	4893883a 	add	r9,r9,r2
 800dde8:	29cb383a 	mul	r5,r5,r7
 800ddec:	4a80022e 	bgeu	r9,r10,800ddf8 <__umoddi3+0x3f0>
 800ddf0:	00800074 	movhi	r2,1
 800ddf4:	288b883a 	add	r5,r5,r2
 800ddf8:	4808d43a 	srli	r4,r9,16
 800ddfc:	4812943a 	slli	r9,r9,16
 800de00:	31bfffcc 	andi	r6,r6,65535
 800de04:	290b883a 	add	r5,r5,r4
 800de08:	498d883a 	add	r6,r9,r6
 800de0c:	41403a36 	bltu	r8,r5,800def8 <__umoddi3+0x4f0>
 800de10:	41405d26 	beq	r8,r5,800df88 <__umoddi3+0x580>
 800de14:	4149c83a 	sub	r4,r8,r5
 800de18:	300f883a 	mov	r7,r6
 800de1c:	81cfc83a 	sub	r7,r16,r7
 800de20:	81c7803a 	cmpltu	r3,r16,r7
 800de24:	20c7c83a 	sub	r3,r4,r3
 800de28:	1d44983a 	sll	r2,r3,r21
 800de2c:	3d0ed83a 	srl	r7,r7,r20
 800de30:	1d06d83a 	srl	r3,r3,r20
 800de34:	11c4b03a 	or	r2,r2,r7
 800de38:	003f9206 	br	800dc84 <__alt_data_end+0xfc00dc84>
 800de3c:	0025883a 	mov	r18,zero
 800de40:	003f1806 	br	800daa4 <__alt_data_end+0xfc00daa4>
 800de44:	98a6983a 	sll	r19,r19,r2
 800de48:	88e8d83a 	srl	r20,r17,r3
 800de4c:	80c6d83a 	srl	r3,r16,r3
 800de50:	982cd43a 	srli	r22,r19,16
 800de54:	88a2983a 	sll	r17,r17,r2
 800de58:	a009883a 	mov	r4,r20
 800de5c:	b00b883a 	mov	r5,r22
 800de60:	88eab03a 	or	r21,r17,r3
 800de64:	1025883a 	mov	r18,r2
 800de68:	800e0bc0 	call	800e0bc <__umodsi3>
 800de6c:	a009883a 	mov	r4,r20
 800de70:	b00b883a 	mov	r5,r22
 800de74:	1023883a 	mov	r17,r2
 800de78:	800e0b40 	call	800e0b4 <__udivsi3>
 800de7c:	9f3fffcc 	andi	fp,r19,65535
 800de80:	8822943a 	slli	r17,r17,16
 800de84:	a80ad43a 	srli	r5,r21,16
 800de88:	1705383a 	mul	r2,r2,fp
 800de8c:	84a8983a 	sll	r20,r16,r18
 800de90:	8948b03a 	or	r4,r17,r5
 800de94:	2080042e 	bgeu	r4,r2,800dea8 <__umoddi3+0x4a0>
 800de98:	24c9883a 	add	r4,r4,r19
 800de9c:	24c00236 	bltu	r4,r19,800dea8 <__umoddi3+0x4a0>
 800dea0:	2080012e 	bgeu	r4,r2,800dea8 <__umoddi3+0x4a0>
 800dea4:	24c9883a 	add	r4,r4,r19
 800dea8:	20afc83a 	sub	r23,r4,r2
 800deac:	b809883a 	mov	r4,r23
 800deb0:	b00b883a 	mov	r5,r22
 800deb4:	800e0bc0 	call	800e0bc <__umodsi3>
 800deb8:	1023883a 	mov	r17,r2
 800debc:	b809883a 	mov	r4,r23
 800dec0:	b00b883a 	mov	r5,r22
 800dec4:	800e0b40 	call	800e0b4 <__udivsi3>
 800dec8:	8822943a 	slli	r17,r17,16
 800decc:	1705383a 	mul	r2,r2,fp
 800ded0:	a93fffcc 	andi	r4,r21,65535
 800ded4:	8908b03a 	or	r4,r17,r4
 800ded8:	2080042e 	bgeu	r4,r2,800deec <__umoddi3+0x4e4>
 800dedc:	24c9883a 	add	r4,r4,r19
 800dee0:	24c00236 	bltu	r4,r19,800deec <__umoddi3+0x4e4>
 800dee4:	2080012e 	bgeu	r4,r2,800deec <__umoddi3+0x4e4>
 800dee8:	24c9883a 	add	r4,r4,r19
 800deec:	20a3c83a 	sub	r17,r4,r2
 800def0:	e021883a 	mov	r16,fp
 800def4:	003f3d06 	br	800dbec <__alt_data_end+0xfc00dbec>
 800def8:	34cfc83a 	sub	r7,r6,r19
 800defc:	2c4bc83a 	sub	r5,r5,r17
 800df00:	31cd803a 	cmpltu	r6,r6,r7
 800df04:	298dc83a 	sub	r6,r5,r6
 800df08:	4189c83a 	sub	r4,r8,r6
 800df0c:	003fc306 	br	800de1c <__alt_data_end+0xfc00de1c>
 800df10:	000b883a 	mov	r5,zero
 800df14:	002b883a 	mov	r21,zero
 800df18:	003f0a06 	br	800db44 <__alt_data_end+0xfc00db44>
 800df1c:	01400404 	movi	r5,16
 800df20:	282b883a 	mov	r21,r5
 800df24:	003f0706 	br	800db44 <__alt_data_end+0xfc00db44>
 800df28:	01400404 	movi	r5,16
 800df2c:	2805883a 	mov	r2,r5
 800df30:	003ecd06 	br	800da68 <__alt_data_end+0xfc00da68>
 800df34:	0005883a 	mov	r2,zero
 800df38:	0007883a 	mov	r3,zero
 800df3c:	003f1e06 	br	800dbb8 <__alt_data_end+0xfc00dbb8>
 800df40:	00800404 	movi	r2,16
 800df44:	1007883a 	mov	r3,r2
 800df48:	003f1b06 	br	800dbb8 <__alt_data_end+0xfc00dbb8>
 800df4c:	000b883a 	mov	r5,zero
 800df50:	0005883a 	mov	r2,zero
 800df54:	003ec406 	br	800da68 <__alt_data_end+0xfc00da68>
 800df58:	413f952e 	bgeu	r8,r4,800ddb0 <__alt_data_end+0xfc00ddb0>
 800df5c:	10bfff84 	addi	r2,r2,-2
 800df60:	4451883a 	add	r8,r8,r17
 800df64:	003f9306 	br	800ddb4 <__alt_data_end+0xfc00ddb4>
 800df68:	2f3f7d2e 	bgeu	r5,fp,800dd60 <__alt_data_end+0xfc00dd60>
 800df6c:	b5bfff84 	addi	r22,r22,-2
 800df70:	2c4b883a 	add	r5,r5,r17
 800df74:	003f7b06 	br	800dd64 <__alt_data_end+0xfc00dd64>
 800df78:	34cd883a 	add	r6,r6,r19
 800df7c:	003f2a06 	br	800dc28 <__alt_data_end+0xfc00dc28>
 800df80:	8005883a 	mov	r2,r16
 800df84:	003efe06 	br	800db80 <__alt_data_end+0xfc00db80>
 800df88:	81bfdb36 	bltu	r16,r6,800def8 <__alt_data_end+0xfc00def8>
 800df8c:	300f883a 	mov	r7,r6
 800df90:	0009883a 	mov	r4,zero
 800df94:	003fa106 	br	800de1c <__alt_data_end+0xfc00de1c>

0800df98 <udivmodsi4>:
 800df98:	2900182e 	bgeu	r5,r4,800dffc <udivmodsi4+0x64>
 800df9c:	28001716 	blt	r5,zero,800dffc <udivmodsi4+0x64>
 800dfa0:	00800804 	movi	r2,32
 800dfa4:	00c00044 	movi	r3,1
 800dfa8:	00000206 	br	800dfb4 <udivmodsi4+0x1c>
 800dfac:	10001126 	beq	r2,zero,800dff4 <udivmodsi4+0x5c>
 800dfb0:	28000516 	blt	r5,zero,800dfc8 <udivmodsi4+0x30>
 800dfb4:	294b883a 	add	r5,r5,r5
 800dfb8:	10bfffc4 	addi	r2,r2,-1
 800dfbc:	18c7883a 	add	r3,r3,r3
 800dfc0:	293ffa36 	bltu	r5,r4,800dfac <__alt_data_end+0xfc00dfac>
 800dfc4:	18000b26 	beq	r3,zero,800dff4 <udivmodsi4+0x5c>
 800dfc8:	0005883a 	mov	r2,zero
 800dfcc:	21400236 	bltu	r4,r5,800dfd8 <udivmodsi4+0x40>
 800dfd0:	2149c83a 	sub	r4,r4,r5
 800dfd4:	10c4b03a 	or	r2,r2,r3
 800dfd8:	1806d07a 	srli	r3,r3,1
 800dfdc:	280ad07a 	srli	r5,r5,1
 800dfe0:	183ffa1e 	bne	r3,zero,800dfcc <__alt_data_end+0xfc00dfcc>
 800dfe4:	3000011e 	bne	r6,zero,800dfec <udivmodsi4+0x54>
 800dfe8:	f800283a 	ret
 800dfec:	2005883a 	mov	r2,r4
 800dff0:	f800283a 	ret
 800dff4:	0005883a 	mov	r2,zero
 800dff8:	003ffa06 	br	800dfe4 <__alt_data_end+0xfc00dfe4>
 800dffc:	00c00044 	movi	r3,1
 800e000:	003ff106 	br	800dfc8 <__alt_data_end+0xfc00dfc8>

0800e004 <__divsi3>:
 800e004:	defffe04 	addi	sp,sp,-8
 800e008:	dfc00115 	stw	ra,4(sp)
 800e00c:	dc000015 	stw	r16,0(sp)
 800e010:	20000b16 	blt	r4,zero,800e040 <__divsi3+0x3c>
 800e014:	0021883a 	mov	r16,zero
 800e018:	28000c16 	blt	r5,zero,800e04c <__divsi3+0x48>
 800e01c:	000d883a 	mov	r6,zero
 800e020:	800df980 	call	800df98 <udivmodsi4>
 800e024:	0407c83a 	sub	r3,zero,r16
 800e028:	1884f03a 	xor	r2,r3,r2
 800e02c:	1405883a 	add	r2,r2,r16
 800e030:	dfc00117 	ldw	ra,4(sp)
 800e034:	dc000017 	ldw	r16,0(sp)
 800e038:	dec00204 	addi	sp,sp,8
 800e03c:	f800283a 	ret
 800e040:	0109c83a 	sub	r4,zero,r4
 800e044:	04000044 	movi	r16,1
 800e048:	283ff40e 	bge	r5,zero,800e01c <__alt_data_end+0xfc00e01c>
 800e04c:	014bc83a 	sub	r5,zero,r5
 800e050:	8400005c 	xori	r16,r16,1
 800e054:	003ff106 	br	800e01c <__alt_data_end+0xfc00e01c>

0800e058 <__modsi3>:
 800e058:	defffd04 	addi	sp,sp,-12
 800e05c:	dfc00215 	stw	ra,8(sp)
 800e060:	dc400115 	stw	r17,4(sp)
 800e064:	dc000015 	stw	r16,0(sp)
 800e068:	20000c16 	blt	r4,zero,800e09c <__modsi3+0x44>
 800e06c:	0023883a 	mov	r17,zero
 800e070:	0021883a 	mov	r16,zero
 800e074:	28000d16 	blt	r5,zero,800e0ac <__modsi3+0x54>
 800e078:	01800044 	movi	r6,1
 800e07c:	800df980 	call	800df98 <udivmodsi4>
 800e080:	1404f03a 	xor	r2,r2,r16
 800e084:	8885883a 	add	r2,r17,r2
 800e088:	dfc00217 	ldw	ra,8(sp)
 800e08c:	dc400117 	ldw	r17,4(sp)
 800e090:	dc000017 	ldw	r16,0(sp)
 800e094:	dec00304 	addi	sp,sp,12
 800e098:	f800283a 	ret
 800e09c:	0109c83a 	sub	r4,zero,r4
 800e0a0:	04400044 	movi	r17,1
 800e0a4:	043fffc4 	movi	r16,-1
 800e0a8:	283ff30e 	bge	r5,zero,800e078 <__alt_data_end+0xfc00e078>
 800e0ac:	014bc83a 	sub	r5,zero,r5
 800e0b0:	003ff106 	br	800e078 <__alt_data_end+0xfc00e078>

0800e0b4 <__udivsi3>:
 800e0b4:	000d883a 	mov	r6,zero
 800e0b8:	800df981 	jmpi	800df98 <udivmodsi4>

0800e0bc <__umodsi3>:
 800e0bc:	01800044 	movi	r6,1
 800e0c0:	800df981 	jmpi	800df98 <udivmodsi4>

0800e0c4 <__adddf3>:
 800e0c4:	02000434 	movhi	r8,16
 800e0c8:	423fffc4 	addi	r8,r8,-1
 800e0cc:	defffb04 	addi	sp,sp,-20
 800e0d0:	2a12703a 	and	r9,r5,r8
 800e0d4:	2806d7fa 	srli	r3,r5,31
 800e0d8:	3a10703a 	and	r8,r7,r8
 800e0dc:	3804d53a 	srli	r2,r7,20
 800e0e0:	3014d77a 	srli	r10,r6,29
 800e0e4:	dc000015 	stw	r16,0(sp)
 800e0e8:	481290fa 	slli	r9,r9,3
 800e0ec:	2820d53a 	srli	r16,r5,20
 800e0f0:	401090fa 	slli	r8,r8,3
 800e0f4:	200ad77a 	srli	r5,r4,29
 800e0f8:	380ed7fa 	srli	r7,r7,31
 800e0fc:	dc800215 	stw	r18,8(sp)
 800e100:	dc400115 	stw	r17,4(sp)
 800e104:	dfc00415 	stw	ra,16(sp)
 800e108:	dcc00315 	stw	r19,12(sp)
 800e10c:	1c803fcc 	andi	r18,r3,255
 800e110:	8401ffcc 	andi	r16,r16,2047
 800e114:	494ab03a 	or	r5,r9,r5
 800e118:	202290fa 	slli	r17,r4,3
 800e11c:	1081ffcc 	andi	r2,r2,2047
 800e120:	4290b03a 	or	r8,r8,r10
 800e124:	300c90fa 	slli	r6,r6,3
 800e128:	91c07026 	beq	r18,r7,800e2ec <__adddf3+0x228>
 800e12c:	8087c83a 	sub	r3,r16,r2
 800e130:	00c0b30e 	bge	zero,r3,800e400 <__adddf3+0x33c>
 800e134:	10002a1e 	bne	r2,zero,800e1e0 <__adddf3+0x11c>
 800e138:	4184b03a 	or	r2,r8,r6
 800e13c:	1000991e 	bne	r2,zero,800e3a4 <__adddf3+0x2e0>
 800e140:	888001cc 	andi	r2,r17,7
 800e144:	10005b26 	beq	r2,zero,800e2b4 <__adddf3+0x1f0>
 800e148:	88c003cc 	andi	r3,r17,15
 800e14c:	00800104 	movi	r2,4
 800e150:	18805826 	beq	r3,r2,800e2b4 <__adddf3+0x1f0>
 800e154:	89800104 	addi	r6,r17,4
 800e158:	3463803a 	cmpltu	r17,r6,r17
 800e15c:	2c4b883a 	add	r5,r5,r17
 800e160:	2880202c 	andhi	r2,r5,128
 800e164:	9007883a 	mov	r3,r18
 800e168:	3023883a 	mov	r17,r6
 800e16c:	10005426 	beq	r2,zero,800e2c0 <__adddf3+0x1fc>
 800e170:	84000044 	addi	r16,r16,1
 800e174:	0081ffc4 	movi	r2,2047
 800e178:	8080c126 	beq	r16,r2,800e480 <__adddf3+0x3bc>
 800e17c:	013fe034 	movhi	r4,65408
 800e180:	213fffc4 	addi	r4,r4,-1
 800e184:	290a703a 	and	r5,r5,r4
 800e188:	2804977a 	slli	r2,r5,29
 800e18c:	280a927a 	slli	r5,r5,9
 800e190:	8822d0fa 	srli	r17,r17,3
 800e194:	8401ffcc 	andi	r16,r16,2047
 800e198:	2808d33a 	srli	r4,r5,12
 800e19c:	1444b03a 	or	r2,r2,r17
 800e1a0:	8401ffcc 	andi	r16,r16,2047
 800e1a4:	800a953a 	slli	r5,r16,20
 800e1a8:	18c03fcc 	andi	r3,r3,255
 800e1ac:	04000434 	movhi	r16,16
 800e1b0:	180697fa 	slli	r3,r3,31
 800e1b4:	843fffc4 	addi	r16,r16,-1
 800e1b8:	2420703a 	and	r16,r4,r16
 800e1bc:	8160b03a 	or	r16,r16,r5
 800e1c0:	80c6b03a 	or	r3,r16,r3
 800e1c4:	dfc00417 	ldw	ra,16(sp)
 800e1c8:	dcc00317 	ldw	r19,12(sp)
 800e1cc:	dc800217 	ldw	r18,8(sp)
 800e1d0:	dc400117 	ldw	r17,4(sp)
 800e1d4:	dc000017 	ldw	r16,0(sp)
 800e1d8:	dec00504 	addi	sp,sp,20
 800e1dc:	f800283a 	ret
 800e1e0:	0081ffc4 	movi	r2,2047
 800e1e4:	80bfd626 	beq	r16,r2,800e140 <__alt_data_end+0xfc00e140>
 800e1e8:	42002034 	orhi	r8,r8,128
 800e1ec:	00800e04 	movi	r2,56
 800e1f0:	10c0a616 	blt	r2,r3,800e48c <__adddf3+0x3c8>
 800e1f4:	008007c4 	movi	r2,31
 800e1f8:	10c0c916 	blt	r2,r3,800e520 <__adddf3+0x45c>
 800e1fc:	00800804 	movi	r2,32
 800e200:	10c5c83a 	sub	r2,r2,r3
 800e204:	408e983a 	sll	r7,r8,r2
 800e208:	30c8d83a 	srl	r4,r6,r3
 800e20c:	3084983a 	sll	r2,r6,r2
 800e210:	40c6d83a 	srl	r3,r8,r3
 800e214:	390cb03a 	or	r6,r7,r4
 800e218:	1004c03a 	cmpne	r2,r2,zero
 800e21c:	308cb03a 	or	r6,r6,r2
 800e220:	898dc83a 	sub	r6,r17,r6
 800e224:	89a3803a 	cmpltu	r17,r17,r6
 800e228:	28cbc83a 	sub	r5,r5,r3
 800e22c:	2c4bc83a 	sub	r5,r5,r17
 800e230:	3023883a 	mov	r17,r6
 800e234:	2880202c 	andhi	r2,r5,128
 800e238:	10006d26 	beq	r2,zero,800e3f0 <__adddf3+0x32c>
 800e23c:	04c02034 	movhi	r19,128
 800e240:	9cffffc4 	addi	r19,r19,-1
 800e244:	2ce6703a 	and	r19,r5,r19
 800e248:	98007e26 	beq	r19,zero,800e444 <__adddf3+0x380>
 800e24c:	9809883a 	mov	r4,r19
 800e250:	80106600 	call	8010660 <__clzsi2>
 800e254:	10fffe04 	addi	r3,r2,-8
 800e258:	010007c4 	movi	r4,31
 800e25c:	20c07f16 	blt	r4,r3,800e45c <__adddf3+0x398>
 800e260:	01400a04 	movi	r5,40
 800e264:	2885c83a 	sub	r2,r5,r2
 800e268:	888ad83a 	srl	r5,r17,r2
 800e26c:	98e6983a 	sll	r19,r19,r3
 800e270:	88e2983a 	sll	r17,r17,r3
 800e274:	2ce6b03a 	or	r19,r5,r19
 800e278:	1c007c16 	blt	r3,r16,800e46c <__adddf3+0x3a8>
 800e27c:	1c21c83a 	sub	r16,r3,r16
 800e280:	81400044 	addi	r5,r16,1
 800e284:	00c007c4 	movi	r3,31
 800e288:	19409816 	blt	r3,r5,800e4ec <__adddf3+0x428>
 800e28c:	1c21c83a 	sub	r16,r3,r16
 800e290:	8c08983a 	sll	r4,r17,r16
 800e294:	8946d83a 	srl	r3,r17,r5
 800e298:	9c20983a 	sll	r16,r19,r16
 800e29c:	2008c03a 	cmpne	r4,r4,zero
 800e2a0:	994ad83a 	srl	r5,r19,r5
 800e2a4:	1c06b03a 	or	r3,r3,r16
 800e2a8:	1922b03a 	or	r17,r3,r4
 800e2ac:	0021883a 	mov	r16,zero
 800e2b0:	003fa306 	br	800e140 <__alt_data_end+0xfc00e140>
 800e2b4:	2880202c 	andhi	r2,r5,128
 800e2b8:	9007883a 	mov	r3,r18
 800e2bc:	103fac1e 	bne	r2,zero,800e170 <__alt_data_end+0xfc00e170>
 800e2c0:	2804977a 	slli	r2,r5,29
 800e2c4:	8822d0fa 	srli	r17,r17,3
 800e2c8:	0101ffc4 	movi	r4,2047
 800e2cc:	280ad0fa 	srli	r5,r5,3
 800e2d0:	1444b03a 	or	r2,r2,r17
 800e2d4:	81002c26 	beq	r16,r4,800e388 <__adddf3+0x2c4>
 800e2d8:	8120703a 	and	r16,r16,r4
 800e2dc:	01000434 	movhi	r4,16
 800e2e0:	213fffc4 	addi	r4,r4,-1
 800e2e4:	2908703a 	and	r4,r5,r4
 800e2e8:	003fad06 	br	800e1a0 <__alt_data_end+0xfc00e1a0>
 800e2ec:	8089c83a 	sub	r4,r16,r2
 800e2f0:	01006a0e 	bge	zero,r4,800e49c <__adddf3+0x3d8>
 800e2f4:	10003326 	beq	r2,zero,800e3c4 <__adddf3+0x300>
 800e2f8:	0081ffc4 	movi	r2,2047
 800e2fc:	80bf9026 	beq	r16,r2,800e140 <__alt_data_end+0xfc00e140>
 800e300:	42002034 	orhi	r8,r8,128
 800e304:	00800e04 	movi	r2,56
 800e308:	1100b116 	blt	r2,r4,800e5d0 <__adddf3+0x50c>
 800e30c:	008007c4 	movi	r2,31
 800e310:	1100e216 	blt	r2,r4,800e69c <__adddf3+0x5d8>
 800e314:	00800804 	movi	r2,32
 800e318:	1105c83a 	sub	r2,r2,r4
 800e31c:	4092983a 	sll	r9,r8,r2
 800e320:	310ed83a 	srl	r7,r6,r4
 800e324:	3084983a 	sll	r2,r6,r2
 800e328:	4110d83a 	srl	r8,r8,r4
 800e32c:	49ccb03a 	or	r6,r9,r7
 800e330:	1004c03a 	cmpne	r2,r2,zero
 800e334:	308cb03a 	or	r6,r6,r2
 800e338:	344d883a 	add	r6,r6,r17
 800e33c:	3463803a 	cmpltu	r17,r6,r17
 800e340:	414b883a 	add	r5,r8,r5
 800e344:	2c4b883a 	add	r5,r5,r17
 800e348:	3023883a 	mov	r17,r6
 800e34c:	2880202c 	andhi	r2,r5,128
 800e350:	10002726 	beq	r2,zero,800e3f0 <__adddf3+0x32c>
 800e354:	84000044 	addi	r16,r16,1
 800e358:	0081ffc4 	movi	r2,2047
 800e35c:	8080ae26 	beq	r16,r2,800e618 <__adddf3+0x554>
 800e360:	00bfe034 	movhi	r2,65408
 800e364:	10bfffc4 	addi	r2,r2,-1
 800e368:	288a703a 	and	r5,r5,r2
 800e36c:	880cd07a 	srli	r6,r17,1
 800e370:	280897fa 	slli	r4,r5,31
 800e374:	88c0004c 	andi	r3,r17,1
 800e378:	30e2b03a 	or	r17,r6,r3
 800e37c:	280ad07a 	srli	r5,r5,1
 800e380:	8922b03a 	or	r17,r17,r4
 800e384:	003f6e06 	br	800e140 <__alt_data_end+0xfc00e140>
 800e388:	1148b03a 	or	r4,r2,r5
 800e38c:	20003c26 	beq	r4,zero,800e480 <__adddf3+0x3bc>
 800e390:	29000234 	orhi	r4,r5,8
 800e394:	01400434 	movhi	r5,16
 800e398:	297fffc4 	addi	r5,r5,-1
 800e39c:	2148703a 	and	r4,r4,r5
 800e3a0:	003f7f06 	br	800e1a0 <__alt_data_end+0xfc00e1a0>
 800e3a4:	18ffffc4 	addi	r3,r3,-1
 800e3a8:	18004d1e 	bne	r3,zero,800e4e0 <__adddf3+0x41c>
 800e3ac:	898dc83a 	sub	r6,r17,r6
 800e3b0:	89a3803a 	cmpltu	r17,r17,r6
 800e3b4:	2a0bc83a 	sub	r5,r5,r8
 800e3b8:	2c4bc83a 	sub	r5,r5,r17
 800e3bc:	3023883a 	mov	r17,r6
 800e3c0:	003f9c06 	br	800e234 <__alt_data_end+0xfc00e234>
 800e3c4:	4184b03a 	or	r2,r8,r6
 800e3c8:	103f5d26 	beq	r2,zero,800e140 <__alt_data_end+0xfc00e140>
 800e3cc:	213fffc4 	addi	r4,r4,-1
 800e3d0:	203fd926 	beq	r4,zero,800e338 <__alt_data_end+0xfc00e338>
 800e3d4:	0081ffc4 	movi	r2,2047
 800e3d8:	80bfca1e 	bne	r16,r2,800e304 <__alt_data_end+0xfc00e304>
 800e3dc:	003f5806 	br	800e140 <__alt_data_end+0xfc00e140>
 800e3e0:	10c8b03a 	or	r4,r2,r3
 800e3e4:	20008b26 	beq	r4,zero,800e614 <__adddf3+0x550>
 800e3e8:	100b883a 	mov	r5,r2
 800e3ec:	1823883a 	mov	r17,r3
 800e3f0:	888001cc 	andi	r2,r17,7
 800e3f4:	103f541e 	bne	r2,zero,800e148 <__alt_data_end+0xfc00e148>
 800e3f8:	9007883a 	mov	r3,r18
 800e3fc:	003fb006 	br	800e2c0 <__alt_data_end+0xfc00e2c0>
 800e400:	1800531e 	bne	r3,zero,800e550 <__adddf3+0x48c>
 800e404:	80800044 	addi	r2,r16,1
 800e408:	1081ffcc 	andi	r2,r2,2047
 800e40c:	00c00044 	movi	r3,1
 800e410:	1880990e 	bge	r3,r2,800e678 <__adddf3+0x5b4>
 800e414:	8985c83a 	sub	r2,r17,r6
 800e418:	8887803a 	cmpltu	r3,r17,r2
 800e41c:	2a27c83a 	sub	r19,r5,r8
 800e420:	98e7c83a 	sub	r19,r19,r3
 800e424:	98c0202c 	andhi	r3,r19,128
 800e428:	18006226 	beq	r3,zero,800e5b4 <__adddf3+0x4f0>
 800e42c:	3463c83a 	sub	r17,r6,r17
 800e430:	4151c83a 	sub	r8,r8,r5
 800e434:	344d803a 	cmpltu	r6,r6,r17
 800e438:	41a7c83a 	sub	r19,r8,r6
 800e43c:	3825883a 	mov	r18,r7
 800e440:	983f821e 	bne	r19,zero,800e24c <__alt_data_end+0xfc00e24c>
 800e444:	8809883a 	mov	r4,r17
 800e448:	80106600 	call	8010660 <__clzsi2>
 800e44c:	10800804 	addi	r2,r2,32
 800e450:	10fffe04 	addi	r3,r2,-8
 800e454:	010007c4 	movi	r4,31
 800e458:	20ff810e 	bge	r4,r3,800e260 <__alt_data_end+0xfc00e260>
 800e45c:	14fff604 	addi	r19,r2,-40
 800e460:	8ce6983a 	sll	r19,r17,r19
 800e464:	0023883a 	mov	r17,zero
 800e468:	1c3f840e 	bge	r3,r16,800e27c <__alt_data_end+0xfc00e27c>
 800e46c:	017fe034 	movhi	r5,65408
 800e470:	297fffc4 	addi	r5,r5,-1
 800e474:	80e1c83a 	sub	r16,r16,r3
 800e478:	994a703a 	and	r5,r19,r5
 800e47c:	003f3006 	br	800e140 <__alt_data_end+0xfc00e140>
 800e480:	0009883a 	mov	r4,zero
 800e484:	0005883a 	mov	r2,zero
 800e488:	003f4506 	br	800e1a0 <__alt_data_end+0xfc00e1a0>
 800e48c:	418cb03a 	or	r6,r8,r6
 800e490:	300cc03a 	cmpne	r6,r6,zero
 800e494:	0007883a 	mov	r3,zero
 800e498:	003f6106 	br	800e220 <__alt_data_end+0xfc00e220>
 800e49c:	2000921e 	bne	r4,zero,800e6e8 <__adddf3+0x624>
 800e4a0:	80800044 	addi	r2,r16,1
 800e4a4:	11c1ffcc 	andi	r7,r2,2047
 800e4a8:	01000044 	movi	r4,1
 800e4ac:	21c0610e 	bge	r4,r7,800e634 <__adddf3+0x570>
 800e4b0:	0101ffc4 	movi	r4,2047
 800e4b4:	1100a326 	beq	r2,r4,800e744 <__adddf3+0x680>
 800e4b8:	344d883a 	add	r6,r6,r17
 800e4bc:	3463803a 	cmpltu	r17,r6,r17
 800e4c0:	414b883a 	add	r5,r8,r5
 800e4c4:	2c4b883a 	add	r5,r5,r17
 800e4c8:	282297fa 	slli	r17,r5,31
 800e4cc:	300cd07a 	srli	r6,r6,1
 800e4d0:	280ad07a 	srli	r5,r5,1
 800e4d4:	1021883a 	mov	r16,r2
 800e4d8:	89a2b03a 	or	r17,r17,r6
 800e4dc:	003f1806 	br	800e140 <__alt_data_end+0xfc00e140>
 800e4e0:	0081ffc4 	movi	r2,2047
 800e4e4:	80bf411e 	bne	r16,r2,800e1ec <__alt_data_end+0xfc00e1ec>
 800e4e8:	003f1506 	br	800e140 <__alt_data_end+0xfc00e140>
 800e4ec:	80bff844 	addi	r2,r16,-31
 800e4f0:	00c00804 	movi	r3,32
 800e4f4:	9884d83a 	srl	r2,r19,r2
 800e4f8:	28c04a26 	beq	r5,r3,800e624 <__adddf3+0x560>
 800e4fc:	00c00fc4 	movi	r3,63
 800e500:	1c21c83a 	sub	r16,r3,r16
 800e504:	9c26983a 	sll	r19,r19,r16
 800e508:	9c62b03a 	or	r17,r19,r17
 800e50c:	8822c03a 	cmpne	r17,r17,zero
 800e510:	88a2b03a 	or	r17,r17,r2
 800e514:	000b883a 	mov	r5,zero
 800e518:	0021883a 	mov	r16,zero
 800e51c:	003fb406 	br	800e3f0 <__alt_data_end+0xfc00e3f0>
 800e520:	18bff804 	addi	r2,r3,-32
 800e524:	01000804 	movi	r4,32
 800e528:	4084d83a 	srl	r2,r8,r2
 800e52c:	19003f26 	beq	r3,r4,800e62c <__adddf3+0x568>
 800e530:	01001004 	movi	r4,64
 800e534:	20c7c83a 	sub	r3,r4,r3
 800e538:	40d0983a 	sll	r8,r8,r3
 800e53c:	418cb03a 	or	r6,r8,r6
 800e540:	300cc03a 	cmpne	r6,r6,zero
 800e544:	308cb03a 	or	r6,r6,r2
 800e548:	0007883a 	mov	r3,zero
 800e54c:	003f3406 	br	800e220 <__alt_data_end+0xfc00e220>
 800e550:	80002326 	beq	r16,zero,800e5e0 <__adddf3+0x51c>
 800e554:	0101ffc4 	movi	r4,2047
 800e558:	11005e26 	beq	r2,r4,800e6d4 <__adddf3+0x610>
 800e55c:	00c7c83a 	sub	r3,zero,r3
 800e560:	29402034 	orhi	r5,r5,128
 800e564:	01000e04 	movi	r4,56
 800e568:	20c07216 	blt	r4,r3,800e734 <__adddf3+0x670>
 800e56c:	010007c4 	movi	r4,31
 800e570:	20c0ce16 	blt	r4,r3,800e8ac <__adddf3+0x7e8>
 800e574:	01000804 	movi	r4,32
 800e578:	20c9c83a 	sub	r4,r4,r3
 800e57c:	2914983a 	sll	r10,r5,r4
 800e580:	88d2d83a 	srl	r9,r17,r3
 800e584:	8908983a 	sll	r4,r17,r4
 800e588:	28c6d83a 	srl	r3,r5,r3
 800e58c:	5262b03a 	or	r17,r10,r9
 800e590:	2008c03a 	cmpne	r4,r4,zero
 800e594:	8922b03a 	or	r17,r17,r4
 800e598:	3463c83a 	sub	r17,r6,r17
 800e59c:	40c7c83a 	sub	r3,r8,r3
 800e5a0:	344d803a 	cmpltu	r6,r6,r17
 800e5a4:	198bc83a 	sub	r5,r3,r6
 800e5a8:	1021883a 	mov	r16,r2
 800e5ac:	3825883a 	mov	r18,r7
 800e5b0:	003f2006 	br	800e234 <__alt_data_end+0xfc00e234>
 800e5b4:	9886b03a 	or	r3,r19,r2
 800e5b8:	1800141e 	bne	r3,zero,800e60c <__adddf3+0x548>
 800e5bc:	0007883a 	mov	r3,zero
 800e5c0:	000b883a 	mov	r5,zero
 800e5c4:	0023883a 	mov	r17,zero
 800e5c8:	0021883a 	mov	r16,zero
 800e5cc:	003f3c06 	br	800e2c0 <__alt_data_end+0xfc00e2c0>
 800e5d0:	418cb03a 	or	r6,r8,r6
 800e5d4:	300cc03a 	cmpne	r6,r6,zero
 800e5d8:	0011883a 	mov	r8,zero
 800e5dc:	003f5606 	br	800e338 <__alt_data_end+0xfc00e338>
 800e5e0:	2c48b03a 	or	r4,r5,r17
 800e5e4:	20003b26 	beq	r4,zero,800e6d4 <__adddf3+0x610>
 800e5e8:	00c6303a 	nor	r3,zero,r3
 800e5ec:	1800371e 	bne	r3,zero,800e6cc <__adddf3+0x608>
 800e5f0:	3463c83a 	sub	r17,r6,r17
 800e5f4:	414bc83a 	sub	r5,r8,r5
 800e5f8:	344d803a 	cmpltu	r6,r6,r17
 800e5fc:	298bc83a 	sub	r5,r5,r6
 800e600:	1021883a 	mov	r16,r2
 800e604:	3825883a 	mov	r18,r7
 800e608:	003f0a06 	br	800e234 <__alt_data_end+0xfc00e234>
 800e60c:	1023883a 	mov	r17,r2
 800e610:	003f0d06 	br	800e248 <__alt_data_end+0xfc00e248>
 800e614:	0007883a 	mov	r3,zero
 800e618:	000b883a 	mov	r5,zero
 800e61c:	0023883a 	mov	r17,zero
 800e620:	003f2706 	br	800e2c0 <__alt_data_end+0xfc00e2c0>
 800e624:	0027883a 	mov	r19,zero
 800e628:	003fb706 	br	800e508 <__alt_data_end+0xfc00e508>
 800e62c:	0011883a 	mov	r8,zero
 800e630:	003fc206 	br	800e53c <__alt_data_end+0xfc00e53c>
 800e634:	2c44b03a 	or	r2,r5,r17
 800e638:	8000871e 	bne	r16,zero,800e858 <__adddf3+0x794>
 800e63c:	1000b126 	beq	r2,zero,800e904 <__adddf3+0x840>
 800e640:	4184b03a 	or	r2,r8,r6
 800e644:	103ebe26 	beq	r2,zero,800e140 <__alt_data_end+0xfc00e140>
 800e648:	3445883a 	add	r2,r6,r17
 800e64c:	1463803a 	cmpltu	r17,r2,r17
 800e650:	414b883a 	add	r5,r8,r5
 800e654:	2c4b883a 	add	r5,r5,r17
 800e658:	28c0202c 	andhi	r3,r5,128
 800e65c:	1023883a 	mov	r17,r2
 800e660:	183f6326 	beq	r3,zero,800e3f0 <__alt_data_end+0xfc00e3f0>
 800e664:	00bfe034 	movhi	r2,65408
 800e668:	10bfffc4 	addi	r2,r2,-1
 800e66c:	2021883a 	mov	r16,r4
 800e670:	288a703a 	and	r5,r5,r2
 800e674:	003eb206 	br	800e140 <__alt_data_end+0xfc00e140>
 800e678:	2c44b03a 	or	r2,r5,r17
 800e67c:	8000251e 	bne	r16,zero,800e714 <__adddf3+0x650>
 800e680:	10004b1e 	bne	r2,zero,800e7b0 <__adddf3+0x6ec>
 800e684:	4184b03a 	or	r2,r8,r6
 800e688:	103fe226 	beq	r2,zero,800e614 <__alt_data_end+0xfc00e614>
 800e68c:	400b883a 	mov	r5,r8
 800e690:	3023883a 	mov	r17,r6
 800e694:	3825883a 	mov	r18,r7
 800e698:	003ea906 	br	800e140 <__alt_data_end+0xfc00e140>
 800e69c:	20bff804 	addi	r2,r4,-32
 800e6a0:	01c00804 	movi	r7,32
 800e6a4:	4084d83a 	srl	r2,r8,r2
 800e6a8:	21c07e26 	beq	r4,r7,800e8a4 <__adddf3+0x7e0>
 800e6ac:	01c01004 	movi	r7,64
 800e6b0:	3909c83a 	sub	r4,r7,r4
 800e6b4:	4110983a 	sll	r8,r8,r4
 800e6b8:	418cb03a 	or	r6,r8,r6
 800e6bc:	300cc03a 	cmpne	r6,r6,zero
 800e6c0:	308cb03a 	or	r6,r6,r2
 800e6c4:	0011883a 	mov	r8,zero
 800e6c8:	003f1b06 	br	800e338 <__alt_data_end+0xfc00e338>
 800e6cc:	0101ffc4 	movi	r4,2047
 800e6d0:	113fa41e 	bne	r2,r4,800e564 <__alt_data_end+0xfc00e564>
 800e6d4:	400b883a 	mov	r5,r8
 800e6d8:	3023883a 	mov	r17,r6
 800e6dc:	1021883a 	mov	r16,r2
 800e6e0:	3825883a 	mov	r18,r7
 800e6e4:	003e9606 	br	800e140 <__alt_data_end+0xfc00e140>
 800e6e8:	80001a1e 	bne	r16,zero,800e754 <__adddf3+0x690>
 800e6ec:	2c4eb03a 	or	r7,r5,r17
 800e6f0:	38005526 	beq	r7,zero,800e848 <__adddf3+0x784>
 800e6f4:	0108303a 	nor	r4,zero,r4
 800e6f8:	2000511e 	bne	r4,zero,800e840 <__adddf3+0x77c>
 800e6fc:	89a3883a 	add	r17,r17,r6
 800e700:	414b883a 	add	r5,r8,r5
 800e704:	898d803a 	cmpltu	r6,r17,r6
 800e708:	298b883a 	add	r5,r5,r6
 800e70c:	1021883a 	mov	r16,r2
 800e710:	003f0e06 	br	800e34c <__alt_data_end+0xfc00e34c>
 800e714:	1000341e 	bne	r2,zero,800e7e8 <__adddf3+0x724>
 800e718:	4184b03a 	or	r2,r8,r6
 800e71c:	10006f26 	beq	r2,zero,800e8dc <__adddf3+0x818>
 800e720:	400b883a 	mov	r5,r8
 800e724:	3023883a 	mov	r17,r6
 800e728:	3825883a 	mov	r18,r7
 800e72c:	0401ffc4 	movi	r16,2047
 800e730:	003e8306 	br	800e140 <__alt_data_end+0xfc00e140>
 800e734:	2c62b03a 	or	r17,r5,r17
 800e738:	8822c03a 	cmpne	r17,r17,zero
 800e73c:	0007883a 	mov	r3,zero
 800e740:	003f9506 	br	800e598 <__alt_data_end+0xfc00e598>
 800e744:	1021883a 	mov	r16,r2
 800e748:	000b883a 	mov	r5,zero
 800e74c:	0023883a 	mov	r17,zero
 800e750:	003edb06 	br	800e2c0 <__alt_data_end+0xfc00e2c0>
 800e754:	01c1ffc4 	movi	r7,2047
 800e758:	11c03b26 	beq	r2,r7,800e848 <__adddf3+0x784>
 800e75c:	0109c83a 	sub	r4,zero,r4
 800e760:	29402034 	orhi	r5,r5,128
 800e764:	01c00e04 	movi	r7,56
 800e768:	39006216 	blt	r7,r4,800e8f4 <__adddf3+0x830>
 800e76c:	01c007c4 	movi	r7,31
 800e770:	39006b16 	blt	r7,r4,800e920 <__adddf3+0x85c>
 800e774:	01c00804 	movi	r7,32
 800e778:	390fc83a 	sub	r7,r7,r4
 800e77c:	29d4983a 	sll	r10,r5,r7
 800e780:	8912d83a 	srl	r9,r17,r4
 800e784:	89ce983a 	sll	r7,r17,r7
 800e788:	2908d83a 	srl	r4,r5,r4
 800e78c:	5262b03a 	or	r17,r10,r9
 800e790:	380ac03a 	cmpne	r5,r7,zero
 800e794:	8962b03a 	or	r17,r17,r5
 800e798:	89a3883a 	add	r17,r17,r6
 800e79c:	2211883a 	add	r8,r4,r8
 800e7a0:	898d803a 	cmpltu	r6,r17,r6
 800e7a4:	418b883a 	add	r5,r8,r6
 800e7a8:	1021883a 	mov	r16,r2
 800e7ac:	003ee706 	br	800e34c <__alt_data_end+0xfc00e34c>
 800e7b0:	4184b03a 	or	r2,r8,r6
 800e7b4:	103e6226 	beq	r2,zero,800e140 <__alt_data_end+0xfc00e140>
 800e7b8:	8987c83a 	sub	r3,r17,r6
 800e7bc:	88c9803a 	cmpltu	r4,r17,r3
 800e7c0:	2a05c83a 	sub	r2,r5,r8
 800e7c4:	1105c83a 	sub	r2,r2,r4
 800e7c8:	1100202c 	andhi	r4,r2,128
 800e7cc:	203f0426 	beq	r4,zero,800e3e0 <__alt_data_end+0xfc00e3e0>
 800e7d0:	3463c83a 	sub	r17,r6,r17
 800e7d4:	414bc83a 	sub	r5,r8,r5
 800e7d8:	344d803a 	cmpltu	r6,r6,r17
 800e7dc:	298bc83a 	sub	r5,r5,r6
 800e7e0:	3825883a 	mov	r18,r7
 800e7e4:	003e5606 	br	800e140 <__alt_data_end+0xfc00e140>
 800e7e8:	4184b03a 	or	r2,r8,r6
 800e7ec:	10002b26 	beq	r2,zero,800e89c <__adddf3+0x7d8>
 800e7f0:	2804d0fa 	srli	r2,r5,3
 800e7f4:	8822d0fa 	srli	r17,r17,3
 800e7f8:	280a977a 	slli	r5,r5,29
 800e7fc:	10c0022c 	andhi	r3,r2,8
 800e800:	2c62b03a 	or	r17,r5,r17
 800e804:	18000826 	beq	r3,zero,800e828 <__adddf3+0x764>
 800e808:	4008d0fa 	srli	r4,r8,3
 800e80c:	20c0022c 	andhi	r3,r4,8
 800e810:	1800051e 	bne	r3,zero,800e828 <__adddf3+0x764>
 800e814:	300cd0fa 	srli	r6,r6,3
 800e818:	4010977a 	slli	r8,r8,29
 800e81c:	2005883a 	mov	r2,r4
 800e820:	3825883a 	mov	r18,r7
 800e824:	41a2b03a 	or	r17,r8,r6
 800e828:	880ad77a 	srli	r5,r17,29
 800e82c:	100490fa 	slli	r2,r2,3
 800e830:	882290fa 	slli	r17,r17,3
 800e834:	0401ffc4 	movi	r16,2047
 800e838:	288ab03a 	or	r5,r5,r2
 800e83c:	003e4006 	br	800e140 <__alt_data_end+0xfc00e140>
 800e840:	01c1ffc4 	movi	r7,2047
 800e844:	11ffc71e 	bne	r2,r7,800e764 <__alt_data_end+0xfc00e764>
 800e848:	400b883a 	mov	r5,r8
 800e84c:	3023883a 	mov	r17,r6
 800e850:	1021883a 	mov	r16,r2
 800e854:	003e3a06 	br	800e140 <__alt_data_end+0xfc00e140>
 800e858:	10002d26 	beq	r2,zero,800e910 <__adddf3+0x84c>
 800e85c:	4184b03a 	or	r2,r8,r6
 800e860:	10000e26 	beq	r2,zero,800e89c <__adddf3+0x7d8>
 800e864:	2804d0fa 	srli	r2,r5,3
 800e868:	8822d0fa 	srli	r17,r17,3
 800e86c:	280a977a 	slli	r5,r5,29
 800e870:	10c0022c 	andhi	r3,r2,8
 800e874:	2c62b03a 	or	r17,r5,r17
 800e878:	183feb26 	beq	r3,zero,800e828 <__alt_data_end+0xfc00e828>
 800e87c:	4008d0fa 	srli	r4,r8,3
 800e880:	20c0022c 	andhi	r3,r4,8
 800e884:	183fe81e 	bne	r3,zero,800e828 <__alt_data_end+0xfc00e828>
 800e888:	300cd0fa 	srli	r6,r6,3
 800e88c:	4010977a 	slli	r8,r8,29
 800e890:	2005883a 	mov	r2,r4
 800e894:	41a2b03a 	or	r17,r8,r6
 800e898:	003fe306 	br	800e828 <__alt_data_end+0xfc00e828>
 800e89c:	0401ffc4 	movi	r16,2047
 800e8a0:	003e2706 	br	800e140 <__alt_data_end+0xfc00e140>
 800e8a4:	0011883a 	mov	r8,zero
 800e8a8:	003f8306 	br	800e6b8 <__alt_data_end+0xfc00e6b8>
 800e8ac:	193ff804 	addi	r4,r3,-32
 800e8b0:	02400804 	movi	r9,32
 800e8b4:	2908d83a 	srl	r4,r5,r4
 800e8b8:	1a402526 	beq	r3,r9,800e950 <__adddf3+0x88c>
 800e8bc:	02401004 	movi	r9,64
 800e8c0:	48c7c83a 	sub	r3,r9,r3
 800e8c4:	28ca983a 	sll	r5,r5,r3
 800e8c8:	2c62b03a 	or	r17,r5,r17
 800e8cc:	8822c03a 	cmpne	r17,r17,zero
 800e8d0:	8922b03a 	or	r17,r17,r4
 800e8d4:	0007883a 	mov	r3,zero
 800e8d8:	003f2f06 	br	800e598 <__alt_data_end+0xfc00e598>
 800e8dc:	01402034 	movhi	r5,128
 800e8e0:	0007883a 	mov	r3,zero
 800e8e4:	297fffc4 	addi	r5,r5,-1
 800e8e8:	047ffe04 	movi	r17,-8
 800e8ec:	0401ffc4 	movi	r16,2047
 800e8f0:	003e7306 	br	800e2c0 <__alt_data_end+0xfc00e2c0>
 800e8f4:	2c62b03a 	or	r17,r5,r17
 800e8f8:	8822c03a 	cmpne	r17,r17,zero
 800e8fc:	0009883a 	mov	r4,zero
 800e900:	003fa506 	br	800e798 <__alt_data_end+0xfc00e798>
 800e904:	400b883a 	mov	r5,r8
 800e908:	3023883a 	mov	r17,r6
 800e90c:	003e0c06 	br	800e140 <__alt_data_end+0xfc00e140>
 800e910:	400b883a 	mov	r5,r8
 800e914:	3023883a 	mov	r17,r6
 800e918:	0401ffc4 	movi	r16,2047
 800e91c:	003e0806 	br	800e140 <__alt_data_end+0xfc00e140>
 800e920:	21fff804 	addi	r7,r4,-32
 800e924:	02400804 	movi	r9,32
 800e928:	29ced83a 	srl	r7,r5,r7
 800e92c:	22400a26 	beq	r4,r9,800e958 <__adddf3+0x894>
 800e930:	02401004 	movi	r9,64
 800e934:	4909c83a 	sub	r4,r9,r4
 800e938:	290a983a 	sll	r5,r5,r4
 800e93c:	2c62b03a 	or	r17,r5,r17
 800e940:	8822c03a 	cmpne	r17,r17,zero
 800e944:	89e2b03a 	or	r17,r17,r7
 800e948:	0009883a 	mov	r4,zero
 800e94c:	003f9206 	br	800e798 <__alt_data_end+0xfc00e798>
 800e950:	000b883a 	mov	r5,zero
 800e954:	003fdc06 	br	800e8c8 <__alt_data_end+0xfc00e8c8>
 800e958:	000b883a 	mov	r5,zero
 800e95c:	003ff706 	br	800e93c <__alt_data_end+0xfc00e93c>

0800e960 <__divdf3>:
 800e960:	defff204 	addi	sp,sp,-56
 800e964:	dd000815 	stw	r20,32(sp)
 800e968:	2828d53a 	srli	r20,r5,20
 800e96c:	dd800a15 	stw	r22,40(sp)
 800e970:	282cd7fa 	srli	r22,r5,31
 800e974:	dc000415 	stw	r16,16(sp)
 800e978:	04000434 	movhi	r16,16
 800e97c:	df000c15 	stw	fp,48(sp)
 800e980:	dcc00715 	stw	r19,28(sp)
 800e984:	dc800615 	stw	r18,24(sp)
 800e988:	dc400515 	stw	r17,20(sp)
 800e98c:	843fffc4 	addi	r16,r16,-1
 800e990:	dfc00d15 	stw	ra,52(sp)
 800e994:	ddc00b15 	stw	r23,44(sp)
 800e998:	dd400915 	stw	r21,36(sp)
 800e99c:	a501ffcc 	andi	r20,r20,2047
 800e9a0:	2025883a 	mov	r18,r4
 800e9a4:	2027883a 	mov	r19,r4
 800e9a8:	2c22703a 	and	r17,r5,r16
 800e9ac:	b7003fcc 	andi	fp,r22,255
 800e9b0:	a0005e26 	beq	r20,zero,800eb2c <__divdf3+0x1cc>
 800e9b4:	0081ffc4 	movi	r2,2047
 800e9b8:	a0803526 	beq	r20,r2,800ea90 <__divdf3+0x130>
 800e9bc:	8c000434 	orhi	r16,r17,16
 800e9c0:	2004d77a 	srli	r2,r4,29
 800e9c4:	802090fa 	slli	r16,r16,3
 800e9c8:	202690fa 	slli	r19,r4,3
 800e9cc:	a53f0044 	addi	r20,r20,-1023
 800e9d0:	80a2b03a 	or	r17,r16,r2
 800e9d4:	0025883a 	mov	r18,zero
 800e9d8:	0011883a 	mov	r8,zero
 800e9dc:	380ad53a 	srli	r5,r7,20
 800e9e0:	382ed7fa 	srli	r23,r7,31
 800e9e4:	04000434 	movhi	r16,16
 800e9e8:	843fffc4 	addi	r16,r16,-1
 800e9ec:	2941ffcc 	andi	r5,r5,2047
 800e9f0:	302b883a 	mov	r21,r6
 800e9f4:	3c20703a 	and	r16,r7,r16
 800e9f8:	ba403fcc 	andi	r9,r23,255
 800e9fc:	28006726 	beq	r5,zero,800eb9c <__divdf3+0x23c>
 800ea00:	0081ffc4 	movi	r2,2047
 800ea04:	28805f26 	beq	r5,r2,800eb84 <__divdf3+0x224>
 800ea08:	84000434 	orhi	r16,r16,16
 800ea0c:	3004d77a 	srli	r2,r6,29
 800ea10:	802090fa 	slli	r16,r16,3
 800ea14:	302a90fa 	slli	r21,r6,3
 800ea18:	297f0044 	addi	r5,r5,-1023
 800ea1c:	80a0b03a 	or	r16,r16,r2
 800ea20:	000f883a 	mov	r7,zero
 800ea24:	3c86b03a 	or	r3,r7,r18
 800ea28:	180690ba 	slli	r3,r3,2
 800ea2c:	00820074 	movhi	r2,2049
 800ea30:	10ba9404 	addi	r2,r2,-5552
 800ea34:	1887883a 	add	r3,r3,r2
 800ea38:	18c00017 	ldw	r3,0(r3)
 800ea3c:	b5c8f03a 	xor	r4,r22,r23
 800ea40:	200d883a 	mov	r6,r4
 800ea44:	24803fcc 	andi	r18,r4,255
 800ea48:	a169c83a 	sub	r20,r20,r5
 800ea4c:	1800683a 	jmp	r3
 800ea50:	0800ec98 	cmpnei	zero,at,946
 800ea54:	0800eac8 	cmpgei	zero,at,939
 800ea58:	0800ec5c 	xori	zero,at,945
 800ea5c:	0800eaac 	andhi	zero,at,938
 800ea60:	0800ec5c 	xori	zero,at,945
 800ea64:	0800ec30 	cmpltui	zero,at,944
 800ea68:	0800ec5c 	xori	zero,at,945
 800ea6c:	0800eaac 	andhi	zero,at,938
 800ea70:	0800eac8 	cmpgei	zero,at,939
 800ea74:	0800eac8 	cmpgei	zero,at,939
 800ea78:	0800ec30 	cmpltui	zero,at,944
 800ea7c:	0800eaac 	andhi	zero,at,938
 800ea80:	0800eabc 	xorhi	zero,at,938
 800ea84:	0800eabc 	xorhi	zero,at,938
 800ea88:	0800eabc 	xorhi	zero,at,938
 800ea8c:	0800ec6c 	andhi	zero,at,945
 800ea90:	8904b03a 	or	r2,r17,r4
 800ea94:	1000631e 	bne	r2,zero,800ec24 <__divdf3+0x2c4>
 800ea98:	04800204 	movi	r18,8
 800ea9c:	0023883a 	mov	r17,zero
 800eaa0:	0027883a 	mov	r19,zero
 800eaa4:	02000084 	movi	r8,2
 800eaa8:	003fcc06 	br	800e9dc <__alt_data_end+0xfc00e9dc>
 800eaac:	8023883a 	mov	r17,r16
 800eab0:	a827883a 	mov	r19,r21
 800eab4:	4839883a 	mov	fp,r9
 800eab8:	3811883a 	mov	r8,r7
 800eabc:	00800084 	movi	r2,2
 800eac0:	40812a1e 	bne	r8,r2,800ef6c <__divdf3+0x60c>
 800eac4:	e025883a 	mov	r18,fp
 800eac8:	9180004c 	andi	r6,r18,1
 800eacc:	0101ffc4 	movi	r4,2047
 800ead0:	000b883a 	mov	r5,zero
 800ead4:	0027883a 	mov	r19,zero
 800ead8:	2008953a 	slli	r4,r4,20
 800eadc:	30c03fcc 	andi	r3,r6,255
 800eae0:	04000434 	movhi	r16,16
 800eae4:	180697fa 	slli	r3,r3,31
 800eae8:	843fffc4 	addi	r16,r16,-1
 800eaec:	2c20703a 	and	r16,r5,r16
 800eaf0:	8120b03a 	or	r16,r16,r4
 800eaf4:	80c6b03a 	or	r3,r16,r3
 800eaf8:	9805883a 	mov	r2,r19
 800eafc:	dfc00d17 	ldw	ra,52(sp)
 800eb00:	df000c17 	ldw	fp,48(sp)
 800eb04:	ddc00b17 	ldw	r23,44(sp)
 800eb08:	dd800a17 	ldw	r22,40(sp)
 800eb0c:	dd400917 	ldw	r21,36(sp)
 800eb10:	dd000817 	ldw	r20,32(sp)
 800eb14:	dcc00717 	ldw	r19,28(sp)
 800eb18:	dc800617 	ldw	r18,24(sp)
 800eb1c:	dc400517 	ldw	r17,20(sp)
 800eb20:	dc000417 	ldw	r16,16(sp)
 800eb24:	dec00e04 	addi	sp,sp,56
 800eb28:	f800283a 	ret
 800eb2c:	8904b03a 	or	r2,r17,r4
 800eb30:	10003726 	beq	r2,zero,800ec10 <__divdf3+0x2b0>
 800eb34:	88011c26 	beq	r17,zero,800efa8 <__divdf3+0x648>
 800eb38:	8809883a 	mov	r4,r17
 800eb3c:	d9800315 	stw	r6,12(sp)
 800eb40:	d9c00115 	stw	r7,4(sp)
 800eb44:	80106600 	call	8010660 <__clzsi2>
 800eb48:	d9800317 	ldw	r6,12(sp)
 800eb4c:	d9c00117 	ldw	r7,4(sp)
 800eb50:	1007883a 	mov	r3,r2
 800eb54:	01000a04 	movi	r4,40
 800eb58:	1cfffe04 	addi	r19,r3,-8
 800eb5c:	20c9c83a 	sub	r4,r4,r3
 800eb60:	8cca983a 	sll	r5,r17,r19
 800eb64:	9108d83a 	srl	r4,r18,r4
 800eb68:	94e6983a 	sll	r19,r18,r19
 800eb6c:	2162b03a 	or	r17,r4,r5
 800eb70:	053f0344 	movi	r20,-1011
 800eb74:	a0e9c83a 	sub	r20,r20,r3
 800eb78:	0025883a 	mov	r18,zero
 800eb7c:	0011883a 	mov	r8,zero
 800eb80:	003f9606 	br	800e9dc <__alt_data_end+0xfc00e9dc>
 800eb84:	8184b03a 	or	r2,r16,r6
 800eb88:	10001f1e 	bne	r2,zero,800ec08 <__divdf3+0x2a8>
 800eb8c:	0021883a 	mov	r16,zero
 800eb90:	002b883a 	mov	r21,zero
 800eb94:	01c00084 	movi	r7,2
 800eb98:	003fa206 	br	800ea24 <__alt_data_end+0xfc00ea24>
 800eb9c:	8184b03a 	or	r2,r16,r6
 800eba0:	10001526 	beq	r2,zero,800ebf8 <__divdf3+0x298>
 800eba4:	80010c26 	beq	r16,zero,800efd8 <__divdf3+0x678>
 800eba8:	8009883a 	mov	r4,r16
 800ebac:	d9800315 	stw	r6,12(sp)
 800ebb0:	da000215 	stw	r8,8(sp)
 800ebb4:	da400015 	stw	r9,0(sp)
 800ebb8:	80106600 	call	8010660 <__clzsi2>
 800ebbc:	d9800317 	ldw	r6,12(sp)
 800ebc0:	da000217 	ldw	r8,8(sp)
 800ebc4:	da400017 	ldw	r9,0(sp)
 800ebc8:	1007883a 	mov	r3,r2
 800ebcc:	01000a04 	movi	r4,40
 800ebd0:	1d7ffe04 	addi	r21,r3,-8
 800ebd4:	20c9c83a 	sub	r4,r4,r3
 800ebd8:	8560983a 	sll	r16,r16,r21
 800ebdc:	3108d83a 	srl	r4,r6,r4
 800ebe0:	356a983a 	sll	r21,r6,r21
 800ebe4:	2420b03a 	or	r16,r4,r16
 800ebe8:	017f0344 	movi	r5,-1011
 800ebec:	28cbc83a 	sub	r5,r5,r3
 800ebf0:	000f883a 	mov	r7,zero
 800ebf4:	003f8b06 	br	800ea24 <__alt_data_end+0xfc00ea24>
 800ebf8:	0021883a 	mov	r16,zero
 800ebfc:	002b883a 	mov	r21,zero
 800ec00:	01c00044 	movi	r7,1
 800ec04:	003f8706 	br	800ea24 <__alt_data_end+0xfc00ea24>
 800ec08:	01c000c4 	movi	r7,3
 800ec0c:	003f8506 	br	800ea24 <__alt_data_end+0xfc00ea24>
 800ec10:	04800104 	movi	r18,4
 800ec14:	0023883a 	mov	r17,zero
 800ec18:	0027883a 	mov	r19,zero
 800ec1c:	02000044 	movi	r8,1
 800ec20:	003f6e06 	br	800e9dc <__alt_data_end+0xfc00e9dc>
 800ec24:	04800304 	movi	r18,12
 800ec28:	020000c4 	movi	r8,3
 800ec2c:	003f6b06 	br	800e9dc <__alt_data_end+0xfc00e9dc>
 800ec30:	01400434 	movhi	r5,16
 800ec34:	000d883a 	mov	r6,zero
 800ec38:	297fffc4 	addi	r5,r5,-1
 800ec3c:	04ffffc4 	movi	r19,-1
 800ec40:	0101ffc4 	movi	r4,2047
 800ec44:	003fa406 	br	800ead8 <__alt_data_end+0xfc00ead8>
 800ec48:	043f0084 	movi	r16,-1022
 800ec4c:	8521c83a 	sub	r16,r16,r20
 800ec50:	00800e04 	movi	r2,56
 800ec54:	1401200e 	bge	r2,r16,800f0d8 <__divdf3+0x778>
 800ec58:	9180004c 	andi	r6,r18,1
 800ec5c:	0009883a 	mov	r4,zero
 800ec60:	000b883a 	mov	r5,zero
 800ec64:	0027883a 	mov	r19,zero
 800ec68:	003f9b06 	br	800ead8 <__alt_data_end+0xfc00ead8>
 800ec6c:	8880022c 	andhi	r2,r17,8
 800ec70:	1000c726 	beq	r2,zero,800ef90 <__divdf3+0x630>
 800ec74:	8080022c 	andhi	r2,r16,8
 800ec78:	1000c51e 	bne	r2,zero,800ef90 <__divdf3+0x630>
 800ec7c:	00800434 	movhi	r2,16
 800ec80:	81400234 	orhi	r5,r16,8
 800ec84:	10bfffc4 	addi	r2,r2,-1
 800ec88:	b80d883a 	mov	r6,r23
 800ec8c:	288a703a 	and	r5,r5,r2
 800ec90:	a827883a 	mov	r19,r21
 800ec94:	003fea06 	br	800ec40 <__alt_data_end+0xfc00ec40>
 800ec98:	8440ea36 	bltu	r16,r17,800f044 <__divdf3+0x6e4>
 800ec9c:	8c00e826 	beq	r17,r16,800f040 <__divdf3+0x6e0>
 800eca0:	a53fffc4 	addi	r20,r20,-1
 800eca4:	882d883a 	mov	r22,r17
 800eca8:	000d883a 	mov	r6,zero
 800ecac:	a804d63a 	srli	r2,r21,24
 800ecb0:	8020923a 	slli	r16,r16,8
 800ecb4:	b009883a 	mov	r4,r22
 800ecb8:	d9800315 	stw	r6,12(sp)
 800ecbc:	1420b03a 	or	r16,r2,r16
 800ecc0:	802ed43a 	srli	r23,r16,16
 800ecc4:	873fffcc 	andi	fp,r16,65535
 800ecc8:	a82a923a 	slli	r21,r21,8
 800eccc:	b80b883a 	mov	r5,r23
 800ecd0:	800e0b40 	call	800e0b4 <__udivsi3>
 800ecd4:	b009883a 	mov	r4,r22
 800ecd8:	b80b883a 	mov	r5,r23
 800ecdc:	1023883a 	mov	r17,r2
 800ece0:	800e0bc0 	call	800e0bc <__umodsi3>
 800ece4:	1004943a 	slli	r2,r2,16
 800ece8:	9808d43a 	srli	r4,r19,16
 800ecec:	8f2d383a 	mul	r22,r17,fp
 800ecf0:	d9800317 	ldw	r6,12(sp)
 800ecf4:	1106b03a 	or	r3,r2,r4
 800ecf8:	1d80062e 	bgeu	r3,r22,800ed14 <__divdf3+0x3b4>
 800ecfc:	1c07883a 	add	r3,r3,r16
 800ed00:	88bfffc4 	addi	r2,r17,-1
 800ed04:	1c00dc36 	bltu	r3,r16,800f078 <__divdf3+0x718>
 800ed08:	1d80db2e 	bgeu	r3,r22,800f078 <__divdf3+0x718>
 800ed0c:	8c7fff84 	addi	r17,r17,-2
 800ed10:	1c07883a 	add	r3,r3,r16
 800ed14:	1dadc83a 	sub	r22,r3,r22
 800ed18:	b009883a 	mov	r4,r22
 800ed1c:	b80b883a 	mov	r5,r23
 800ed20:	d9800315 	stw	r6,12(sp)
 800ed24:	800e0b40 	call	800e0b4 <__udivsi3>
 800ed28:	b009883a 	mov	r4,r22
 800ed2c:	b80b883a 	mov	r5,r23
 800ed30:	d8800015 	stw	r2,0(sp)
 800ed34:	800e0bc0 	call	800e0bc <__umodsi3>
 800ed38:	da400017 	ldw	r9,0(sp)
 800ed3c:	1004943a 	slli	r2,r2,16
 800ed40:	9cffffcc 	andi	r19,r19,65535
 800ed44:	4f07383a 	mul	r3,r9,fp
 800ed48:	14c8b03a 	or	r4,r2,r19
 800ed4c:	d9800317 	ldw	r6,12(sp)
 800ed50:	20c0062e 	bgeu	r4,r3,800ed6c <__divdf3+0x40c>
 800ed54:	2409883a 	add	r4,r4,r16
 800ed58:	48bfffc4 	addi	r2,r9,-1
 800ed5c:	2400c436 	bltu	r4,r16,800f070 <__divdf3+0x710>
 800ed60:	20c0c32e 	bgeu	r4,r3,800f070 <__divdf3+0x710>
 800ed64:	4a7fff84 	addi	r9,r9,-2
 800ed68:	2409883a 	add	r4,r4,r16
 800ed6c:	8822943a 	slli	r17,r17,16
 800ed70:	a80ed43a 	srli	r7,r21,16
 800ed74:	aa3fffcc 	andi	r8,r21,65535
 800ed78:	4c62b03a 	or	r17,r9,r17
 800ed7c:	8816d43a 	srli	r11,r17,16
 800ed80:	897fffcc 	andi	r5,r17,65535
 800ed84:	2a15383a 	mul	r10,r5,r8
 800ed88:	5a19383a 	mul	r12,r11,r8
 800ed8c:	29cb383a 	mul	r5,r5,r7
 800ed90:	5012d43a 	srli	r9,r10,16
 800ed94:	20c5c83a 	sub	r2,r4,r3
 800ed98:	614b883a 	add	r5,r12,r5
 800ed9c:	2a4b883a 	add	r5,r5,r9
 800eda0:	59c7383a 	mul	r3,r11,r7
 800eda4:	2b00022e 	bgeu	r5,r12,800edb0 <__divdf3+0x450>
 800eda8:	01000074 	movhi	r4,1
 800edac:	1907883a 	add	r3,r3,r4
 800edb0:	2808d43a 	srli	r4,r5,16
 800edb4:	280a943a 	slli	r5,r5,16
 800edb8:	54ffffcc 	andi	r19,r10,65535
 800edbc:	1907883a 	add	r3,r3,r4
 800edc0:	2ccb883a 	add	r5,r5,r19
 800edc4:	10c09336 	bltu	r2,r3,800f014 <__divdf3+0x6b4>
 800edc8:	10c0ad26 	beq	r2,r3,800f080 <__divdf3+0x720>
 800edcc:	10c7c83a 	sub	r3,r2,r3
 800edd0:	3167c83a 	sub	r19,r6,r5
 800edd4:	34ed803a 	cmpltu	r22,r6,r19
 800edd8:	1dadc83a 	sub	r22,r3,r22
 800eddc:	b400b226 	beq	r22,r16,800f0a8 <__divdf3+0x748>
 800ede0:	b009883a 	mov	r4,r22
 800ede4:	b80b883a 	mov	r5,r23
 800ede8:	d9c00115 	stw	r7,4(sp)
 800edec:	da000215 	stw	r8,8(sp)
 800edf0:	800e0b40 	call	800e0b4 <__udivsi3>
 800edf4:	b009883a 	mov	r4,r22
 800edf8:	b80b883a 	mov	r5,r23
 800edfc:	d8800315 	stw	r2,12(sp)
 800ee00:	800e0bc0 	call	800e0bc <__umodsi3>
 800ee04:	d9800317 	ldw	r6,12(sp)
 800ee08:	1004943a 	slli	r2,r2,16
 800ee0c:	9808d43a 	srli	r4,r19,16
 800ee10:	372d383a 	mul	r22,r6,fp
 800ee14:	d9c00117 	ldw	r7,4(sp)
 800ee18:	1106b03a 	or	r3,r2,r4
 800ee1c:	da000217 	ldw	r8,8(sp)
 800ee20:	1d80062e 	bgeu	r3,r22,800ee3c <__divdf3+0x4dc>
 800ee24:	1c07883a 	add	r3,r3,r16
 800ee28:	30bfffc4 	addi	r2,r6,-1
 800ee2c:	1c00a036 	bltu	r3,r16,800f0b0 <__divdf3+0x750>
 800ee30:	1d809f2e 	bgeu	r3,r22,800f0b0 <__divdf3+0x750>
 800ee34:	31bfff84 	addi	r6,r6,-2
 800ee38:	1c07883a 	add	r3,r3,r16
 800ee3c:	1dadc83a 	sub	r22,r3,r22
 800ee40:	b009883a 	mov	r4,r22
 800ee44:	b80b883a 	mov	r5,r23
 800ee48:	d9800315 	stw	r6,12(sp)
 800ee4c:	d9c00115 	stw	r7,4(sp)
 800ee50:	da000215 	stw	r8,8(sp)
 800ee54:	800e0b40 	call	800e0b4 <__udivsi3>
 800ee58:	b009883a 	mov	r4,r22
 800ee5c:	b80b883a 	mov	r5,r23
 800ee60:	d8800015 	stw	r2,0(sp)
 800ee64:	800e0bc0 	call	800e0bc <__umodsi3>
 800ee68:	da400017 	ldw	r9,0(sp)
 800ee6c:	1004943a 	slli	r2,r2,16
 800ee70:	993fffcc 	andi	r4,r19,65535
 800ee74:	4f39383a 	mul	fp,r9,fp
 800ee78:	1106b03a 	or	r3,r2,r4
 800ee7c:	d9800317 	ldw	r6,12(sp)
 800ee80:	d9c00117 	ldw	r7,4(sp)
 800ee84:	da000217 	ldw	r8,8(sp)
 800ee88:	1f00062e 	bgeu	r3,fp,800eea4 <__divdf3+0x544>
 800ee8c:	1c07883a 	add	r3,r3,r16
 800ee90:	48bfffc4 	addi	r2,r9,-1
 800ee94:	1c008836 	bltu	r3,r16,800f0b8 <__divdf3+0x758>
 800ee98:	1f00872e 	bgeu	r3,fp,800f0b8 <__divdf3+0x758>
 800ee9c:	4a7fff84 	addi	r9,r9,-2
 800eea0:	1c07883a 	add	r3,r3,r16
 800eea4:	3008943a 	slli	r4,r6,16
 800eea8:	1f07c83a 	sub	r3,r3,fp
 800eeac:	4926b03a 	or	r19,r9,r4
 800eeb0:	993fffcc 	andi	r4,r19,65535
 800eeb4:	980cd43a 	srli	r6,r19,16
 800eeb8:	220b383a 	mul	r5,r4,r8
 800eebc:	21c5383a 	mul	r2,r4,r7
 800eec0:	3211383a 	mul	r8,r6,r8
 800eec4:	2808d43a 	srli	r4,r5,16
 800eec8:	31cf383a 	mul	r7,r6,r7
 800eecc:	4085883a 	add	r2,r8,r2
 800eed0:	1105883a 	add	r2,r2,r4
 800eed4:	1200022e 	bgeu	r2,r8,800eee0 <__divdf3+0x580>
 800eed8:	01000074 	movhi	r4,1
 800eedc:	390f883a 	add	r7,r7,r4
 800eee0:	1008d43a 	srli	r4,r2,16
 800eee4:	1004943a 	slli	r2,r2,16
 800eee8:	297fffcc 	andi	r5,r5,65535
 800eeec:	390f883a 	add	r7,r7,r4
 800eef0:	1145883a 	add	r2,r2,r5
 800eef4:	19c06536 	bltu	r3,r7,800f08c <__divdf3+0x72c>
 800eef8:	19c09f26 	beq	r3,r7,800f178 <__divdf3+0x818>
 800eefc:	9cc00054 	ori	r19,r19,1
 800ef00:	a100ffc4 	addi	r4,r20,1023
 800ef04:	013f500e 	bge	zero,r4,800ec48 <__alt_data_end+0xfc00ec48>
 800ef08:	988001cc 	andi	r2,r19,7
 800ef0c:	10000726 	beq	r2,zero,800ef2c <__divdf3+0x5cc>
 800ef10:	98c003cc 	andi	r3,r19,15
 800ef14:	00800104 	movi	r2,4
 800ef18:	18800426 	beq	r3,r2,800ef2c <__divdf3+0x5cc>
 800ef1c:	9885883a 	add	r2,r19,r2
 800ef20:	14e1803a 	cmpltu	r16,r2,r19
 800ef24:	8c23883a 	add	r17,r17,r16
 800ef28:	1027883a 	mov	r19,r2
 800ef2c:	8880402c 	andhi	r2,r17,256
 800ef30:	10000426 	beq	r2,zero,800ef44 <__divdf3+0x5e4>
 800ef34:	00bfc034 	movhi	r2,65280
 800ef38:	10bfffc4 	addi	r2,r2,-1
 800ef3c:	a1010004 	addi	r4,r20,1024
 800ef40:	88a2703a 	and	r17,r17,r2
 800ef44:	0081ff84 	movi	r2,2046
 800ef48:	113edf16 	blt	r2,r4,800eac8 <__alt_data_end+0xfc00eac8>
 800ef4c:	9826d0fa 	srli	r19,r19,3
 800ef50:	8804977a 	slli	r2,r17,29
 800ef54:	8820927a 	slli	r16,r17,9
 800ef58:	2101ffcc 	andi	r4,r4,2047
 800ef5c:	14e6b03a 	or	r19,r2,r19
 800ef60:	800ad33a 	srli	r5,r16,12
 800ef64:	9180004c 	andi	r6,r18,1
 800ef68:	003edb06 	br	800ead8 <__alt_data_end+0xfc00ead8>
 800ef6c:	008000c4 	movi	r2,3
 800ef70:	4080a826 	beq	r8,r2,800f214 <__divdf3+0x8b4>
 800ef74:	00800044 	movi	r2,1
 800ef78:	4080551e 	bne	r8,r2,800f0d0 <__divdf3+0x770>
 800ef7c:	e00d883a 	mov	r6,fp
 800ef80:	0009883a 	mov	r4,zero
 800ef84:	000b883a 	mov	r5,zero
 800ef88:	0027883a 	mov	r19,zero
 800ef8c:	003ed206 	br	800ead8 <__alt_data_end+0xfc00ead8>
 800ef90:	00800434 	movhi	r2,16
 800ef94:	89400234 	orhi	r5,r17,8
 800ef98:	10bfffc4 	addi	r2,r2,-1
 800ef9c:	b00d883a 	mov	r6,r22
 800efa0:	288a703a 	and	r5,r5,r2
 800efa4:	003f2606 	br	800ec40 <__alt_data_end+0xfc00ec40>
 800efa8:	d9800315 	stw	r6,12(sp)
 800efac:	d9c00115 	stw	r7,4(sp)
 800efb0:	80106600 	call	8010660 <__clzsi2>
 800efb4:	10c00804 	addi	r3,r2,32
 800efb8:	010009c4 	movi	r4,39
 800efbc:	d9800317 	ldw	r6,12(sp)
 800efc0:	d9c00117 	ldw	r7,4(sp)
 800efc4:	20fee30e 	bge	r4,r3,800eb54 <__alt_data_end+0xfc00eb54>
 800efc8:	117ffe04 	addi	r5,r2,-8
 800efcc:	9162983a 	sll	r17,r18,r5
 800efd0:	0027883a 	mov	r19,zero
 800efd4:	003ee606 	br	800eb70 <__alt_data_end+0xfc00eb70>
 800efd8:	3009883a 	mov	r4,r6
 800efdc:	d9800315 	stw	r6,12(sp)
 800efe0:	da000215 	stw	r8,8(sp)
 800efe4:	da400015 	stw	r9,0(sp)
 800efe8:	80106600 	call	8010660 <__clzsi2>
 800efec:	10c00804 	addi	r3,r2,32
 800eff0:	010009c4 	movi	r4,39
 800eff4:	d9800317 	ldw	r6,12(sp)
 800eff8:	da000217 	ldw	r8,8(sp)
 800effc:	da400017 	ldw	r9,0(sp)
 800f000:	20fef20e 	bge	r4,r3,800ebcc <__alt_data_end+0xfc00ebcc>
 800f004:	10bffe04 	addi	r2,r2,-8
 800f008:	a8a0983a 	sll	r16,r21,r2
 800f00c:	002b883a 	mov	r21,zero
 800f010:	003ef506 	br	800ebe8 <__alt_data_end+0xfc00ebe8>
 800f014:	354d883a 	add	r6,r6,r21
 800f018:	3549803a 	cmpltu	r4,r6,r21
 800f01c:	2409883a 	add	r4,r4,r16
 800f020:	2089883a 	add	r4,r4,r2
 800f024:	88bfffc4 	addi	r2,r17,-1
 800f028:	81000c2e 	bgeu	r16,r4,800f05c <__divdf3+0x6fc>
 800f02c:	20c04436 	bltu	r4,r3,800f140 <__divdf3+0x7e0>
 800f030:	19006f26 	beq	r3,r4,800f1f0 <__divdf3+0x890>
 800f034:	20c7c83a 	sub	r3,r4,r3
 800f038:	1023883a 	mov	r17,r2
 800f03c:	003f6406 	br	800edd0 <__alt_data_end+0xfc00edd0>
 800f040:	9d7f1736 	bltu	r19,r21,800eca0 <__alt_data_end+0xfc00eca0>
 800f044:	9806d07a 	srli	r3,r19,1
 800f048:	880497fa 	slli	r2,r17,31
 800f04c:	980c97fa 	slli	r6,r19,31
 800f050:	882cd07a 	srli	r22,r17,1
 800f054:	18a6b03a 	or	r19,r3,r2
 800f058:	003f1406 	br	800ecac <__alt_data_end+0xfc00ecac>
 800f05c:	243ff51e 	bne	r4,r16,800f034 <__alt_data_end+0xfc00f034>
 800f060:	357ff22e 	bgeu	r6,r21,800f02c <__alt_data_end+0xfc00f02c>
 800f064:	80c7c83a 	sub	r3,r16,r3
 800f068:	1023883a 	mov	r17,r2
 800f06c:	003f5806 	br	800edd0 <__alt_data_end+0xfc00edd0>
 800f070:	1013883a 	mov	r9,r2
 800f074:	003f3d06 	br	800ed6c <__alt_data_end+0xfc00ed6c>
 800f078:	1023883a 	mov	r17,r2
 800f07c:	003f2506 	br	800ed14 <__alt_data_end+0xfc00ed14>
 800f080:	317fe436 	bltu	r6,r5,800f014 <__alt_data_end+0xfc00f014>
 800f084:	0007883a 	mov	r3,zero
 800f088:	003f5106 	br	800edd0 <__alt_data_end+0xfc00edd0>
 800f08c:	1c07883a 	add	r3,r3,r16
 800f090:	993fffc4 	addi	r4,r19,-1
 800f094:	1c000a2e 	bgeu	r3,r16,800f0c0 <__divdf3+0x760>
 800f098:	2027883a 	mov	r19,r4
 800f09c:	19ff971e 	bne	r3,r7,800eefc <__alt_data_end+0xfc00eefc>
 800f0a0:	a8bf961e 	bne	r21,r2,800eefc <__alt_data_end+0xfc00eefc>
 800f0a4:	003f9606 	br	800ef00 <__alt_data_end+0xfc00ef00>
 800f0a8:	04ffffc4 	movi	r19,-1
 800f0ac:	003f9406 	br	800ef00 <__alt_data_end+0xfc00ef00>
 800f0b0:	100d883a 	mov	r6,r2
 800f0b4:	003f6106 	br	800ee3c <__alt_data_end+0xfc00ee3c>
 800f0b8:	1013883a 	mov	r9,r2
 800f0bc:	003f7906 	br	800eea4 <__alt_data_end+0xfc00eea4>
 800f0c0:	19c02636 	bltu	r3,r7,800f15c <__divdf3+0x7fc>
 800f0c4:	38c04d26 	beq	r7,r3,800f1fc <__divdf3+0x89c>
 800f0c8:	2027883a 	mov	r19,r4
 800f0cc:	003f8b06 	br	800eefc <__alt_data_end+0xfc00eefc>
 800f0d0:	e025883a 	mov	r18,fp
 800f0d4:	003f8a06 	br	800ef00 <__alt_data_end+0xfc00ef00>
 800f0d8:	008007c4 	movi	r2,31
 800f0dc:	14002a16 	blt	r2,r16,800f188 <__divdf3+0x828>
 800f0e0:	a5010784 	addi	r20,r20,1054
 800f0e4:	8d04983a 	sll	r2,r17,r20
 800f0e8:	9c06d83a 	srl	r3,r19,r16
 800f0ec:	9d28983a 	sll	r20,r19,r20
 800f0f0:	8c20d83a 	srl	r16,r17,r16
 800f0f4:	1886b03a 	or	r3,r3,r2
 800f0f8:	a004c03a 	cmpne	r2,r20,zero
 800f0fc:	1884b03a 	or	r2,r3,r2
 800f100:	10c001cc 	andi	r3,r2,7
 800f104:	18000726 	beq	r3,zero,800f124 <__divdf3+0x7c4>
 800f108:	110003cc 	andi	r4,r2,15
 800f10c:	00c00104 	movi	r3,4
 800f110:	20c00426 	beq	r4,r3,800f124 <__divdf3+0x7c4>
 800f114:	10c00104 	addi	r3,r2,4
 800f118:	1885803a 	cmpltu	r2,r3,r2
 800f11c:	80a1883a 	add	r16,r16,r2
 800f120:	1805883a 	mov	r2,r3
 800f124:	80c0202c 	andhi	r3,r16,128
 800f128:	18002d26 	beq	r3,zero,800f1e0 <__divdf3+0x880>
 800f12c:	9180004c 	andi	r6,r18,1
 800f130:	01000044 	movi	r4,1
 800f134:	000b883a 	mov	r5,zero
 800f138:	0027883a 	mov	r19,zero
 800f13c:	003e6606 	br	800ead8 <__alt_data_end+0xfc00ead8>
 800f140:	354d883a 	add	r6,r6,r21
 800f144:	356d803a 	cmpltu	r22,r6,r21
 800f148:	b42d883a 	add	r22,r22,r16
 800f14c:	b12d883a 	add	r22,r22,r4
 800f150:	8c7fff84 	addi	r17,r17,-2
 800f154:	b0c7c83a 	sub	r3,r22,r3
 800f158:	003f1d06 	br	800edd0 <__alt_data_end+0xfc00edd0>
 800f15c:	ad4b883a 	add	r5,r21,r21
 800f160:	2d6b803a 	cmpltu	r21,r5,r21
 800f164:	ac2b883a 	add	r21,r21,r16
 800f168:	1d47883a 	add	r3,r3,r21
 800f16c:	993fff84 	addi	r4,r19,-2
 800f170:	282b883a 	mov	r21,r5
 800f174:	003fc806 	br	800f098 <__alt_data_end+0xfc00f098>
 800f178:	103fc41e 	bne	r2,zero,800f08c <__alt_data_end+0xfc00f08c>
 800f17c:	002b883a 	mov	r21,zero
 800f180:	a8bf5e1e 	bne	r21,r2,800eefc <__alt_data_end+0xfc00eefc>
 800f184:	003f5e06 	br	800ef00 <__alt_data_end+0xfc00ef00>
 800f188:	00bef884 	movi	r2,-1054
 800f18c:	1505c83a 	sub	r2,r2,r20
 800f190:	00c00804 	movi	r3,32
 800f194:	8884d83a 	srl	r2,r17,r2
 800f198:	80c01c26 	beq	r16,r3,800f20c <__divdf3+0x8ac>
 800f19c:	a0c10f84 	addi	r3,r20,1086
 800f1a0:	88c6983a 	sll	r3,r17,r3
 800f1a4:	1cc6b03a 	or	r3,r3,r19
 800f1a8:	1806c03a 	cmpne	r3,r3,zero
 800f1ac:	1884b03a 	or	r2,r3,r2
 800f1b0:	140001cc 	andi	r16,r2,7
 800f1b4:	8000061e 	bne	r16,zero,800f1d0 <__divdf3+0x870>
 800f1b8:	000b883a 	mov	r5,zero
 800f1bc:	1004d0fa 	srli	r2,r2,3
 800f1c0:	9180004c 	andi	r6,r18,1
 800f1c4:	0009883a 	mov	r4,zero
 800f1c8:	1426b03a 	or	r19,r2,r16
 800f1cc:	003e4206 	br	800ead8 <__alt_data_end+0xfc00ead8>
 800f1d0:	110003cc 	andi	r4,r2,15
 800f1d4:	00c00104 	movi	r3,4
 800f1d8:	0021883a 	mov	r16,zero
 800f1dc:	20ffcd1e 	bne	r4,r3,800f114 <__alt_data_end+0xfc00f114>
 800f1e0:	800a927a 	slli	r5,r16,9
 800f1e4:	8020977a 	slli	r16,r16,29
 800f1e8:	280ad33a 	srli	r5,r5,12
 800f1ec:	003ff306 	br	800f1bc <__alt_data_end+0xfc00f1bc>
 800f1f0:	317fd336 	bltu	r6,r5,800f140 <__alt_data_end+0xfc00f140>
 800f1f4:	1023883a 	mov	r17,r2
 800f1f8:	003fa206 	br	800f084 <__alt_data_end+0xfc00f084>
 800f1fc:	a8bfd736 	bltu	r21,r2,800f15c <__alt_data_end+0xfc00f15c>
 800f200:	2027883a 	mov	r19,r4
 800f204:	a8bf3d1e 	bne	r21,r2,800eefc <__alt_data_end+0xfc00eefc>
 800f208:	003f3d06 	br	800ef00 <__alt_data_end+0xfc00ef00>
 800f20c:	0007883a 	mov	r3,zero
 800f210:	003fe406 	br	800f1a4 <__alt_data_end+0xfc00f1a4>
 800f214:	00800434 	movhi	r2,16
 800f218:	89400234 	orhi	r5,r17,8
 800f21c:	10bfffc4 	addi	r2,r2,-1
 800f220:	e00d883a 	mov	r6,fp
 800f224:	288a703a 	and	r5,r5,r2
 800f228:	003e8506 	br	800ec40 <__alt_data_end+0xfc00ec40>

0800f22c <__eqdf2>:
 800f22c:	2804d53a 	srli	r2,r5,20
 800f230:	3806d53a 	srli	r3,r7,20
 800f234:	02000434 	movhi	r8,16
 800f238:	423fffc4 	addi	r8,r8,-1
 800f23c:	1081ffcc 	andi	r2,r2,2047
 800f240:	0241ffc4 	movi	r9,2047
 800f244:	2a14703a 	and	r10,r5,r8
 800f248:	18c1ffcc 	andi	r3,r3,2047
 800f24c:	3a10703a 	and	r8,r7,r8
 800f250:	280ad7fa 	srli	r5,r5,31
 800f254:	380ed7fa 	srli	r7,r7,31
 800f258:	12400f26 	beq	r2,r9,800f298 <__eqdf2+0x6c>
 800f25c:	0241ffc4 	movi	r9,2047
 800f260:	1a400326 	beq	r3,r9,800f270 <__eqdf2+0x44>
 800f264:	10c00526 	beq	r2,r3,800f27c <__eqdf2+0x50>
 800f268:	00800044 	movi	r2,1
 800f26c:	f800283a 	ret
 800f270:	4192b03a 	or	r9,r8,r6
 800f274:	483ffc1e 	bne	r9,zero,800f268 <__alt_data_end+0xfc00f268>
 800f278:	10fffb1e 	bne	r2,r3,800f268 <__alt_data_end+0xfc00f268>
 800f27c:	523ffa1e 	bne	r10,r8,800f268 <__alt_data_end+0xfc00f268>
 800f280:	21bff91e 	bne	r4,r6,800f268 <__alt_data_end+0xfc00f268>
 800f284:	29c00826 	beq	r5,r7,800f2a8 <__eqdf2+0x7c>
 800f288:	103ff71e 	bne	r2,zero,800f268 <__alt_data_end+0xfc00f268>
 800f28c:	5104b03a 	or	r2,r10,r4
 800f290:	1004c03a 	cmpne	r2,r2,zero
 800f294:	f800283a 	ret
 800f298:	5112b03a 	or	r9,r10,r4
 800f29c:	483fef26 	beq	r9,zero,800f25c <__alt_data_end+0xfc00f25c>
 800f2a0:	00800044 	movi	r2,1
 800f2a4:	f800283a 	ret
 800f2a8:	0005883a 	mov	r2,zero
 800f2ac:	f800283a 	ret

0800f2b0 <__gedf2>:
 800f2b0:	2804d53a 	srli	r2,r5,20
 800f2b4:	3806d53a 	srli	r3,r7,20
 800f2b8:	02000434 	movhi	r8,16
 800f2bc:	423fffc4 	addi	r8,r8,-1
 800f2c0:	0241ffc4 	movi	r9,2047
 800f2c4:	1081ffcc 	andi	r2,r2,2047
 800f2c8:	2a14703a 	and	r10,r5,r8
 800f2cc:	1a46703a 	and	r3,r3,r9
 800f2d0:	3a10703a 	and	r8,r7,r8
 800f2d4:	280ad7fa 	srli	r5,r5,31
 800f2d8:	380ed7fa 	srli	r7,r7,31
 800f2dc:	12400b26 	beq	r2,r9,800f30c <__gedf2+0x5c>
 800f2e0:	1a401626 	beq	r3,r9,800f33c <__gedf2+0x8c>
 800f2e4:	10000c1e 	bne	r2,zero,800f318 <__gedf2+0x68>
 800f2e8:	5112b03a 	or	r9,r10,r4
 800f2ec:	4813003a 	cmpeq	r9,r9,zero
 800f2f0:	4817883a 	mov	r11,r9
 800f2f4:	18000c1e 	bne	r3,zero,800f328 <__gedf2+0x78>
 800f2f8:	4198b03a 	or	r12,r8,r6
 800f2fc:	60000a1e 	bne	r12,zero,800f328 <__gedf2+0x78>
 800f300:	48001326 	beq	r9,zero,800f350 <__gedf2+0xa0>
 800f304:	0005883a 	mov	r2,zero
 800f308:	f800283a 	ret
 800f30c:	5112b03a 	or	r9,r10,r4
 800f310:	4800191e 	bne	r9,zero,800f378 <__gedf2+0xc8>
 800f314:	18800926 	beq	r3,r2,800f33c <__gedf2+0x8c>
 800f318:	18000b1e 	bne	r3,zero,800f348 <__gedf2+0x98>
 800f31c:	4192b03a 	or	r9,r8,r6
 800f320:	0017883a 	mov	r11,zero
 800f324:	48000a26 	beq	r9,zero,800f350 <__gedf2+0xa0>
 800f328:	39c03fcc 	andi	r7,r7,255
 800f32c:	58000726 	beq	r11,zero,800f34c <__gedf2+0x9c>
 800f330:	3800081e 	bne	r7,zero,800f354 <__gedf2+0xa4>
 800f334:	00bfffc4 	movi	r2,-1
 800f338:	f800283a 	ret
 800f33c:	4192b03a 	or	r9,r8,r6
 800f340:	48000d1e 	bne	r9,zero,800f378 <__gedf2+0xc8>
 800f344:	103fe826 	beq	r2,zero,800f2e8 <__alt_data_end+0xfc00f2e8>
 800f348:	39c03fcc 	andi	r7,r7,255
 800f34c:	29c00326 	beq	r5,r7,800f35c <__gedf2+0xac>
 800f350:	283ff81e 	bne	r5,zero,800f334 <__alt_data_end+0xfc00f334>
 800f354:	00800044 	movi	r2,1
 800f358:	f800283a 	ret
 800f35c:	18bffc16 	blt	r3,r2,800f350 <__alt_data_end+0xfc00f350>
 800f360:	10c00316 	blt	r2,r3,800f370 <__gedf2+0xc0>
 800f364:	42bffa36 	bltu	r8,r10,800f350 <__alt_data_end+0xfc00f350>
 800f368:	52000526 	beq	r10,r8,800f380 <__gedf2+0xd0>
 800f36c:	523fe52e 	bgeu	r10,r8,800f304 <__alt_data_end+0xfc00f304>
 800f370:	283ff026 	beq	r5,zero,800f334 <__alt_data_end+0xfc00f334>
 800f374:	003ff706 	br	800f354 <__alt_data_end+0xfc00f354>
 800f378:	00bfff84 	movi	r2,-2
 800f37c:	f800283a 	ret
 800f380:	313ff336 	bltu	r6,r4,800f350 <__alt_data_end+0xfc00f350>
 800f384:	21bfdf2e 	bgeu	r4,r6,800f304 <__alt_data_end+0xfc00f304>
 800f388:	283fea26 	beq	r5,zero,800f334 <__alt_data_end+0xfc00f334>
 800f38c:	003ff106 	br	800f354 <__alt_data_end+0xfc00f354>

0800f390 <__ledf2>:
 800f390:	2804d53a 	srli	r2,r5,20
 800f394:	3810d53a 	srli	r8,r7,20
 800f398:	00c00434 	movhi	r3,16
 800f39c:	18ffffc4 	addi	r3,r3,-1
 800f3a0:	0241ffc4 	movi	r9,2047
 800f3a4:	1081ffcc 	andi	r2,r2,2047
 800f3a8:	28d4703a 	and	r10,r5,r3
 800f3ac:	4250703a 	and	r8,r8,r9
 800f3b0:	38c6703a 	and	r3,r7,r3
 800f3b4:	280ad7fa 	srli	r5,r5,31
 800f3b8:	380ed7fa 	srli	r7,r7,31
 800f3bc:	12400b26 	beq	r2,r9,800f3ec <__ledf2+0x5c>
 800f3c0:	42401926 	beq	r8,r9,800f428 <__ledf2+0x98>
 800f3c4:	10000c1e 	bne	r2,zero,800f3f8 <__ledf2+0x68>
 800f3c8:	5112b03a 	or	r9,r10,r4
 800f3cc:	4813003a 	cmpeq	r9,r9,zero
 800f3d0:	4817883a 	mov	r11,r9
 800f3d4:	40000f26 	beq	r8,zero,800f414 <__ledf2+0x84>
 800f3d8:	39c03fcc 	andi	r7,r7,255
 800f3dc:	58001826 	beq	r11,zero,800f440 <__ledf2+0xb0>
 800f3e0:	38000a1e 	bne	r7,zero,800f40c <__ledf2+0x7c>
 800f3e4:	00bfffc4 	movi	r2,-1
 800f3e8:	f800283a 	ret
 800f3ec:	5112b03a 	or	r9,r10,r4
 800f3f0:	48000f1e 	bne	r9,zero,800f430 <__ledf2+0xa0>
 800f3f4:	40800c26 	beq	r8,r2,800f428 <__ledf2+0x98>
 800f3f8:	4000101e 	bne	r8,zero,800f43c <__ledf2+0xac>
 800f3fc:	1992b03a 	or	r9,r3,r6
 800f400:	0017883a 	mov	r11,zero
 800f404:	483ff41e 	bne	r9,zero,800f3d8 <__alt_data_end+0xfc00f3d8>
 800f408:	283ff61e 	bne	r5,zero,800f3e4 <__alt_data_end+0xfc00f3e4>
 800f40c:	00800044 	movi	r2,1
 800f410:	f800283a 	ret
 800f414:	1998b03a 	or	r12,r3,r6
 800f418:	603fef1e 	bne	r12,zero,800f3d8 <__alt_data_end+0xfc00f3d8>
 800f41c:	483ffa26 	beq	r9,zero,800f408 <__alt_data_end+0xfc00f408>
 800f420:	0005883a 	mov	r2,zero
 800f424:	f800283a 	ret
 800f428:	1992b03a 	or	r9,r3,r6
 800f42c:	48000226 	beq	r9,zero,800f438 <__ledf2+0xa8>
 800f430:	00800084 	movi	r2,2
 800f434:	f800283a 	ret
 800f438:	103fe326 	beq	r2,zero,800f3c8 <__alt_data_end+0xfc00f3c8>
 800f43c:	39c03fcc 	andi	r7,r7,255
 800f440:	29fff11e 	bne	r5,r7,800f408 <__alt_data_end+0xfc00f408>
 800f444:	40bff016 	blt	r8,r2,800f408 <__alt_data_end+0xfc00f408>
 800f448:	12000316 	blt	r2,r8,800f458 <__ledf2+0xc8>
 800f44c:	1abfee36 	bltu	r3,r10,800f408 <__alt_data_end+0xfc00f408>
 800f450:	50c00326 	beq	r10,r3,800f460 <__ledf2+0xd0>
 800f454:	50fff22e 	bgeu	r10,r3,800f420 <__alt_data_end+0xfc00f420>
 800f458:	283fe226 	beq	r5,zero,800f3e4 <__alt_data_end+0xfc00f3e4>
 800f45c:	003feb06 	br	800f40c <__alt_data_end+0xfc00f40c>
 800f460:	313fe936 	bltu	r6,r4,800f408 <__alt_data_end+0xfc00f408>
 800f464:	21bfee2e 	bgeu	r4,r6,800f420 <__alt_data_end+0xfc00f420>
 800f468:	283fde26 	beq	r5,zero,800f3e4 <__alt_data_end+0xfc00f3e4>
 800f46c:	003fe706 	br	800f40c <__alt_data_end+0xfc00f40c>

0800f470 <__muldf3>:
 800f470:	defff204 	addi	sp,sp,-56
 800f474:	2804d53a 	srli	r2,r5,20
 800f478:	dd800a15 	stw	r22,40(sp)
 800f47c:	282cd7fa 	srli	r22,r5,31
 800f480:	dc000415 	stw	r16,16(sp)
 800f484:	04000434 	movhi	r16,16
 800f488:	df000c15 	stw	fp,48(sp)
 800f48c:	dd000815 	stw	r20,32(sp)
 800f490:	dcc00715 	stw	r19,28(sp)
 800f494:	dc800615 	stw	r18,24(sp)
 800f498:	dc400515 	stw	r17,20(sp)
 800f49c:	843fffc4 	addi	r16,r16,-1
 800f4a0:	dfc00d15 	stw	ra,52(sp)
 800f4a4:	ddc00b15 	stw	r23,44(sp)
 800f4a8:	dd400915 	stw	r21,36(sp)
 800f4ac:	1501ffcc 	andi	r20,r2,2047
 800f4b0:	2023883a 	mov	r17,r4
 800f4b4:	2025883a 	mov	r18,r4
 800f4b8:	2c20703a 	and	r16,r5,r16
 800f4bc:	b027883a 	mov	r19,r22
 800f4c0:	b7003fcc 	andi	fp,r22,255
 800f4c4:	a0005926 	beq	r20,zero,800f62c <__muldf3+0x1bc>
 800f4c8:	0081ffc4 	movi	r2,2047
 800f4cc:	a0803426 	beq	r20,r2,800f5a0 <__muldf3+0x130>
 800f4d0:	84000434 	orhi	r16,r16,16
 800f4d4:	2004d77a 	srli	r2,r4,29
 800f4d8:	802090fa 	slli	r16,r16,3
 800f4dc:	202490fa 	slli	r18,r4,3
 800f4e0:	a53f0044 	addi	r20,r20,-1023
 800f4e4:	80a0b03a 	or	r16,r16,r2
 800f4e8:	002b883a 	mov	r21,zero
 800f4ec:	0015883a 	mov	r10,zero
 800f4f0:	3812d53a 	srli	r9,r7,20
 800f4f4:	3806d7fa 	srli	r3,r7,31
 800f4f8:	02000434 	movhi	r8,16
 800f4fc:	423fffc4 	addi	r8,r8,-1
 800f500:	4941ffcc 	andi	r5,r9,2047
 800f504:	302f883a 	mov	r23,r6
 800f508:	3a22703a 	and	r17,r7,r8
 800f50c:	1ac03fcc 	andi	r11,r3,255
 800f510:	28006226 	beq	r5,zero,800f69c <__muldf3+0x22c>
 800f514:	0081ffc4 	movi	r2,2047
 800f518:	28805a26 	beq	r5,r2,800f684 <__muldf3+0x214>
 800f51c:	8a000434 	orhi	r8,r17,16
 800f520:	3004d77a 	srli	r2,r6,29
 800f524:	401090fa 	slli	r8,r8,3
 800f528:	302e90fa 	slli	r23,r6,3
 800f52c:	297f0044 	addi	r5,r5,-1023
 800f530:	40a2b03a 	or	r17,r8,r2
 800f534:	0013883a 	mov	r9,zero
 800f538:	4d4cb03a 	or	r6,r9,r21
 800f53c:	300c90ba 	slli	r6,r6,2
 800f540:	02020074 	movhi	r8,2049
 800f544:	423d5804 	addi	r8,r8,-2720
 800f548:	320d883a 	add	r6,r6,r8
 800f54c:	31800017 	ldw	r6,0(r6)
 800f550:	a14b883a 	add	r5,r20,r5
 800f554:	1dacf03a 	xor	r22,r3,r22
 800f558:	2b000044 	addi	r12,r5,1
 800f55c:	3000683a 	jmp	r6
 800f560:	0800f79c 	xori	zero,at,990
 800f564:	0800f788 	cmpgei	zero,at,990
 800f568:	0800f788 	cmpgei	zero,at,990
 800f56c:	0800f774 	orhi	zero,at,989
 800f570:	0800f5bc 	xorhi	zero,at,982
 800f574:	0800f5bc 	xorhi	zero,at,982
 800f578:	0800f75c 	xori	zero,at,989
 800f57c:	0800f774 	orhi	zero,at,989
 800f580:	0800f5bc 	xorhi	zero,at,982
 800f584:	0800f75c 	xori	zero,at,989
 800f588:	0800f5bc 	xorhi	zero,at,982
 800f58c:	0800f774 	orhi	zero,at,989
 800f590:	0800f5c0 	call	800f5c <__alt_mem_sdram-0x77ff0a4>
 800f594:	0800f5c0 	call	800f5c <__alt_mem_sdram-0x77ff0a4>
 800f598:	0800f5c0 	call	800f5c <__alt_mem_sdram-0x77ff0a4>
 800f59c:	0800f998 	cmpnei	zero,at,998
 800f5a0:	8104b03a 	or	r2,r16,r4
 800f5a4:	10006a1e 	bne	r2,zero,800f750 <__muldf3+0x2e0>
 800f5a8:	05400204 	movi	r21,8
 800f5ac:	0021883a 	mov	r16,zero
 800f5b0:	0025883a 	mov	r18,zero
 800f5b4:	02800084 	movi	r10,2
 800f5b8:	003fcd06 	br	800f4f0 <__alt_data_end+0xfc00f4f0>
 800f5bc:	b039883a 	mov	fp,r22
 800f5c0:	00800084 	movi	r2,2
 800f5c4:	50804e1e 	bne	r10,r2,800f700 <__muldf3+0x290>
 800f5c8:	e4c0004c 	andi	r19,fp,1
 800f5cc:	0101ffc4 	movi	r4,2047
 800f5d0:	0021883a 	mov	r16,zero
 800f5d4:	0025883a 	mov	r18,zero
 800f5d8:	2008953a 	slli	r4,r4,20
 800f5dc:	98c03fcc 	andi	r3,r19,255
 800f5e0:	01400434 	movhi	r5,16
 800f5e4:	297fffc4 	addi	r5,r5,-1
 800f5e8:	180697fa 	slli	r3,r3,31
 800f5ec:	8160703a 	and	r16,r16,r5
 800f5f0:	8120b03a 	or	r16,r16,r4
 800f5f4:	80c6b03a 	or	r3,r16,r3
 800f5f8:	9005883a 	mov	r2,r18
 800f5fc:	dfc00d17 	ldw	ra,52(sp)
 800f600:	df000c17 	ldw	fp,48(sp)
 800f604:	ddc00b17 	ldw	r23,44(sp)
 800f608:	dd800a17 	ldw	r22,40(sp)
 800f60c:	dd400917 	ldw	r21,36(sp)
 800f610:	dd000817 	ldw	r20,32(sp)
 800f614:	dcc00717 	ldw	r19,28(sp)
 800f618:	dc800617 	ldw	r18,24(sp)
 800f61c:	dc400517 	ldw	r17,20(sp)
 800f620:	dc000417 	ldw	r16,16(sp)
 800f624:	dec00e04 	addi	sp,sp,56
 800f628:	f800283a 	ret
 800f62c:	8104b03a 	or	r2,r16,r4
 800f630:	10004226 	beq	r2,zero,800f73c <__muldf3+0x2cc>
 800f634:	8000f926 	beq	r16,zero,800fa1c <__muldf3+0x5ac>
 800f638:	8009883a 	mov	r4,r16
 800f63c:	d9800315 	stw	r6,12(sp)
 800f640:	d9c00015 	stw	r7,0(sp)
 800f644:	80106600 	call	8010660 <__clzsi2>
 800f648:	d9800317 	ldw	r6,12(sp)
 800f64c:	d9c00017 	ldw	r7,0(sp)
 800f650:	1007883a 	mov	r3,r2
 800f654:	01000a04 	movi	r4,40
 800f658:	18bffe04 	addi	r2,r3,-8
 800f65c:	20c9c83a 	sub	r4,r4,r3
 800f660:	80a0983a 	sll	r16,r16,r2
 800f664:	8908d83a 	srl	r4,r17,r4
 800f668:	88a4983a 	sll	r18,r17,r2
 800f66c:	2420b03a 	or	r16,r4,r16
 800f670:	017f0344 	movi	r5,-1011
 800f674:	28e9c83a 	sub	r20,r5,r3
 800f678:	002b883a 	mov	r21,zero
 800f67c:	0015883a 	mov	r10,zero
 800f680:	003f9b06 	br	800f4f0 <__alt_data_end+0xfc00f4f0>
 800f684:	8984b03a 	or	r2,r17,r6
 800f688:	10002a1e 	bne	r2,zero,800f734 <__muldf3+0x2c4>
 800f68c:	0023883a 	mov	r17,zero
 800f690:	002f883a 	mov	r23,zero
 800f694:	02400084 	movi	r9,2
 800f698:	003fa706 	br	800f538 <__alt_data_end+0xfc00f538>
 800f69c:	8984b03a 	or	r2,r17,r6
 800f6a0:	10002026 	beq	r2,zero,800f724 <__muldf3+0x2b4>
 800f6a4:	8800cc26 	beq	r17,zero,800f9d8 <__muldf3+0x568>
 800f6a8:	8809883a 	mov	r4,r17
 800f6ac:	d8c00215 	stw	r3,8(sp)
 800f6b0:	d9800315 	stw	r6,12(sp)
 800f6b4:	da800015 	stw	r10,0(sp)
 800f6b8:	dac00115 	stw	r11,4(sp)
 800f6bc:	80106600 	call	8010660 <__clzsi2>
 800f6c0:	d8c00217 	ldw	r3,8(sp)
 800f6c4:	d9800317 	ldw	r6,12(sp)
 800f6c8:	da800017 	ldw	r10,0(sp)
 800f6cc:	dac00117 	ldw	r11,4(sp)
 800f6d0:	1009883a 	mov	r4,r2
 800f6d4:	01400a04 	movi	r5,40
 800f6d8:	25fffe04 	addi	r23,r4,-8
 800f6dc:	290bc83a 	sub	r5,r5,r4
 800f6e0:	8dd0983a 	sll	r8,r17,r23
 800f6e4:	314ad83a 	srl	r5,r6,r5
 800f6e8:	35ee983a 	sll	r23,r6,r23
 800f6ec:	2a22b03a 	or	r17,r5,r8
 800f6f0:	017f0344 	movi	r5,-1011
 800f6f4:	290bc83a 	sub	r5,r5,r4
 800f6f8:	0013883a 	mov	r9,zero
 800f6fc:	003f8e06 	br	800f538 <__alt_data_end+0xfc00f538>
 800f700:	008000c4 	movi	r2,3
 800f704:	50811d26 	beq	r10,r2,800fb7c <__muldf3+0x70c>
 800f708:	00800044 	movi	r2,1
 800f70c:	5080e01e 	bne	r10,r2,800fa90 <__muldf3+0x620>
 800f710:	e0a6703a 	and	r19,fp,r2
 800f714:	0009883a 	mov	r4,zero
 800f718:	0021883a 	mov	r16,zero
 800f71c:	0025883a 	mov	r18,zero
 800f720:	003fad06 	br	800f5d8 <__alt_data_end+0xfc00f5d8>
 800f724:	0023883a 	mov	r17,zero
 800f728:	002f883a 	mov	r23,zero
 800f72c:	02400044 	movi	r9,1
 800f730:	003f8106 	br	800f538 <__alt_data_end+0xfc00f538>
 800f734:	024000c4 	movi	r9,3
 800f738:	003f7f06 	br	800f538 <__alt_data_end+0xfc00f538>
 800f73c:	05400104 	movi	r21,4
 800f740:	0021883a 	mov	r16,zero
 800f744:	0025883a 	mov	r18,zero
 800f748:	02800044 	movi	r10,1
 800f74c:	003f6806 	br	800f4f0 <__alt_data_end+0xfc00f4f0>
 800f750:	05400304 	movi	r21,12
 800f754:	028000c4 	movi	r10,3
 800f758:	003f6506 	br	800f4f0 <__alt_data_end+0xfc00f4f0>
 800f75c:	04000434 	movhi	r16,16
 800f760:	0027883a 	mov	r19,zero
 800f764:	843fffc4 	addi	r16,r16,-1
 800f768:	04bfffc4 	movi	r18,-1
 800f76c:	0101ffc4 	movi	r4,2047
 800f770:	003f9906 	br	800f5d8 <__alt_data_end+0xfc00f5d8>
 800f774:	8821883a 	mov	r16,r17
 800f778:	b825883a 	mov	r18,r23
 800f77c:	5839883a 	mov	fp,r11
 800f780:	4815883a 	mov	r10,r9
 800f784:	003f8e06 	br	800f5c0 <__alt_data_end+0xfc00f5c0>
 800f788:	8821883a 	mov	r16,r17
 800f78c:	b825883a 	mov	r18,r23
 800f790:	b039883a 	mov	fp,r22
 800f794:	4815883a 	mov	r10,r9
 800f798:	003f8906 	br	800f5c0 <__alt_data_end+0xfc00f5c0>
 800f79c:	b80cd43a 	srli	r6,r23,16
 800f7a0:	9006d43a 	srli	r3,r18,16
 800f7a4:	90bfffcc 	andi	r2,r18,65535
 800f7a8:	bdffffcc 	andi	r23,r23,65535
 800f7ac:	b891383a 	mul	r8,r23,r2
 800f7b0:	b8c9383a 	mul	r4,r23,r3
 800f7b4:	309b383a 	mul	r13,r6,r2
 800f7b8:	400ed43a 	srli	r7,r8,16
 800f7bc:	30df383a 	mul	r15,r6,r3
 800f7c0:	235b883a 	add	r13,r4,r13
 800f7c4:	69db883a 	add	r13,r13,r7
 800f7c8:	6900022e 	bgeu	r13,r4,800f7d4 <__muldf3+0x364>
 800f7cc:	01000074 	movhi	r4,1
 800f7d0:	791f883a 	add	r15,r15,r4
 800f7d4:	8828d43a 	srli	r20,r17,16
 800f7d8:	8c7fffcc 	andi	r17,r17,65535
 800f7dc:	888f383a 	mul	r7,r17,r2
 800f7e0:	88d3383a 	mul	r9,r17,r3
 800f7e4:	a0a5383a 	mul	r18,r20,r2
 800f7e8:	3816d43a 	srli	r11,r7,16
 800f7ec:	6814943a 	slli	r10,r13,16
 800f7f0:	4ca5883a 	add	r18,r9,r18
 800f7f4:	423fffcc 	andi	r8,r8,65535
 800f7f8:	92e5883a 	add	r18,r18,r11
 800f7fc:	6808d43a 	srli	r4,r13,16
 800f800:	5215883a 	add	r10,r10,r8
 800f804:	a0c7383a 	mul	r3,r20,r3
 800f808:	9240022e 	bgeu	r18,r9,800f814 <__muldf3+0x3a4>
 800f80c:	00800074 	movhi	r2,1
 800f810:	1887883a 	add	r3,r3,r2
 800f814:	802ad43a 	srli	r21,r16,16
 800f818:	80bfffcc 	andi	r2,r16,65535
 800f81c:	b893383a 	mul	r9,r23,r2
 800f820:	3091383a 	mul	r8,r6,r2
 800f824:	bd6f383a 	mul	r23,r23,r21
 800f828:	9026943a 	slli	r19,r18,16
 800f82c:	481ad43a 	srli	r13,r9,16
 800f830:	9024d43a 	srli	r18,r18,16
 800f834:	39ffffcc 	andi	r7,r7,65535
 800f838:	ba11883a 	add	r8,r23,r8
 800f83c:	99e7883a 	add	r19,r19,r7
 800f840:	4351883a 	add	r8,r8,r13
 800f844:	1c97883a 	add	r11,r3,r18
 800f848:	354d383a 	mul	r6,r6,r21
 800f84c:	9925883a 	add	r18,r19,r4
 800f850:	45c0022e 	bgeu	r8,r23,800f85c <__muldf3+0x3ec>
 800f854:	00c00074 	movhi	r3,1
 800f858:	30cd883a 	add	r6,r6,r3
 800f85c:	8889383a 	mul	r4,r17,r2
 800f860:	8d63383a 	mul	r17,r17,r21
 800f864:	a085383a 	mul	r2,r20,r2
 800f868:	200ed43a 	srli	r7,r4,16
 800f86c:	401cd43a 	srli	r14,r8,16
 800f870:	401a943a 	slli	r13,r8,16
 800f874:	8885883a 	add	r2,r17,r2
 800f878:	4a3fffcc 	andi	r8,r9,65535
 800f87c:	11c5883a 	add	r2,r2,r7
 800f880:	339d883a 	add	r14,r6,r14
 800f884:	6a11883a 	add	r8,r13,r8
 800f888:	a561383a 	mul	r16,r20,r21
 800f88c:	1440022e 	bgeu	r2,r17,800f898 <__muldf3+0x428>
 800f890:	00c00074 	movhi	r3,1
 800f894:	80e1883a 	add	r16,r16,r3
 800f898:	1006943a 	slli	r3,r2,16
 800f89c:	213fffcc 	andi	r4,r4,65535
 800f8a0:	93db883a 	add	r13,r18,r15
 800f8a4:	1909883a 	add	r4,r3,r4
 800f8a8:	22c7883a 	add	r3,r4,r11
 800f8ac:	6cd3803a 	cmpltu	r9,r13,r19
 800f8b0:	6a09883a 	add	r4,r13,r8
 800f8b4:	1a5b883a 	add	r13,r3,r9
 800f8b8:	2211803a 	cmpltu	r8,r4,r8
 800f8bc:	734d883a 	add	r6,r14,r13
 800f8c0:	100ed43a 	srli	r7,r2,16
 800f8c4:	6a53803a 	cmpltu	r9,r13,r9
 800f8c8:	3205883a 	add	r2,r6,r8
 800f8cc:	1ac7803a 	cmpltu	r3,r3,r11
 800f8d0:	1211803a 	cmpltu	r8,r2,r8
 800f8d4:	48c6b03a 	or	r3,r9,r3
 800f8d8:	338d803a 	cmpltu	r6,r6,r14
 800f8dc:	19c7883a 	add	r3,r3,r7
 800f8e0:	418cb03a 	or	r6,r8,r6
 800f8e4:	1987883a 	add	r3,r3,r6
 800f8e8:	2024927a 	slli	r18,r4,9
 800f8ec:	1c07883a 	add	r3,r3,r16
 800f8f0:	1806927a 	slli	r3,r3,9
 800f8f4:	1020d5fa 	srli	r16,r2,23
 800f8f8:	2008d5fa 	srli	r4,r4,23
 800f8fc:	9294b03a 	or	r10,r18,r10
 800f900:	1004927a 	slli	r2,r2,9
 800f904:	5024c03a 	cmpne	r18,r10,zero
 800f908:	1c20b03a 	or	r16,r3,r16
 800f90c:	9108b03a 	or	r4,r18,r4
 800f910:	80c0402c 	andhi	r3,r16,256
 800f914:	20a4b03a 	or	r18,r4,r2
 800f918:	18000726 	beq	r3,zero,800f938 <__muldf3+0x4c8>
 800f91c:	9006d07a 	srli	r3,r18,1
 800f920:	800897fa 	slli	r4,r16,31
 800f924:	9080004c 	andi	r2,r18,1
 800f928:	8020d07a 	srli	r16,r16,1
 800f92c:	10c4b03a 	or	r2,r2,r3
 800f930:	1124b03a 	or	r18,r2,r4
 800f934:	600b883a 	mov	r5,r12
 800f938:	2900ffc4 	addi	r4,r5,1023
 800f93c:	01004b0e 	bge	zero,r4,800fa6c <__muldf3+0x5fc>
 800f940:	908001cc 	andi	r2,r18,7
 800f944:	10000726 	beq	r2,zero,800f964 <__muldf3+0x4f4>
 800f948:	90c003cc 	andi	r3,r18,15
 800f94c:	00800104 	movi	r2,4
 800f950:	18800426 	beq	r3,r2,800f964 <__muldf3+0x4f4>
 800f954:	9087883a 	add	r3,r18,r2
 800f958:	1c85803a 	cmpltu	r2,r3,r18
 800f95c:	80a1883a 	add	r16,r16,r2
 800f960:	1825883a 	mov	r18,r3
 800f964:	8080402c 	andhi	r2,r16,256
 800f968:	10000426 	beq	r2,zero,800f97c <__muldf3+0x50c>
 800f96c:	00bfc034 	movhi	r2,65280
 800f970:	10bfffc4 	addi	r2,r2,-1
 800f974:	29010004 	addi	r4,r5,1024
 800f978:	80a0703a 	and	r16,r16,r2
 800f97c:	0081ff84 	movi	r2,2046
 800f980:	1100320e 	bge	r2,r4,800fa4c <__muldf3+0x5dc>
 800f984:	b4c0004c 	andi	r19,r22,1
 800f988:	0101ffc4 	movi	r4,2047
 800f98c:	0021883a 	mov	r16,zero
 800f990:	0025883a 	mov	r18,zero
 800f994:	003f1006 	br	800f5d8 <__alt_data_end+0xfc00f5d8>
 800f998:	8080022c 	andhi	r2,r16,8
 800f99c:	10000926 	beq	r2,zero,800f9c4 <__muldf3+0x554>
 800f9a0:	8880022c 	andhi	r2,r17,8
 800f9a4:	1000071e 	bne	r2,zero,800f9c4 <__muldf3+0x554>
 800f9a8:	00800434 	movhi	r2,16
 800f9ac:	8c000234 	orhi	r16,r17,8
 800f9b0:	10bfffc4 	addi	r2,r2,-1
 800f9b4:	1827883a 	mov	r19,r3
 800f9b8:	80a0703a 	and	r16,r16,r2
 800f9bc:	b825883a 	mov	r18,r23
 800f9c0:	003f6a06 	br	800f76c <__alt_data_end+0xfc00f76c>
 800f9c4:	00800434 	movhi	r2,16
 800f9c8:	84000234 	orhi	r16,r16,8
 800f9cc:	10bfffc4 	addi	r2,r2,-1
 800f9d0:	80a0703a 	and	r16,r16,r2
 800f9d4:	003f6506 	br	800f76c <__alt_data_end+0xfc00f76c>
 800f9d8:	3009883a 	mov	r4,r6
 800f9dc:	d8c00215 	stw	r3,8(sp)
 800f9e0:	d9800315 	stw	r6,12(sp)
 800f9e4:	da800015 	stw	r10,0(sp)
 800f9e8:	dac00115 	stw	r11,4(sp)
 800f9ec:	80106600 	call	8010660 <__clzsi2>
 800f9f0:	11000804 	addi	r4,r2,32
 800f9f4:	014009c4 	movi	r5,39
 800f9f8:	d8c00217 	ldw	r3,8(sp)
 800f9fc:	d9800317 	ldw	r6,12(sp)
 800fa00:	da800017 	ldw	r10,0(sp)
 800fa04:	dac00117 	ldw	r11,4(sp)
 800fa08:	293f320e 	bge	r5,r4,800f6d4 <__alt_data_end+0xfc00f6d4>
 800fa0c:	10bffe04 	addi	r2,r2,-8
 800fa10:	b8a2983a 	sll	r17,r23,r2
 800fa14:	002f883a 	mov	r23,zero
 800fa18:	003f3506 	br	800f6f0 <__alt_data_end+0xfc00f6f0>
 800fa1c:	d9800315 	stw	r6,12(sp)
 800fa20:	d9c00015 	stw	r7,0(sp)
 800fa24:	80106600 	call	8010660 <__clzsi2>
 800fa28:	10c00804 	addi	r3,r2,32
 800fa2c:	010009c4 	movi	r4,39
 800fa30:	d9800317 	ldw	r6,12(sp)
 800fa34:	d9c00017 	ldw	r7,0(sp)
 800fa38:	20ff060e 	bge	r4,r3,800f654 <__alt_data_end+0xfc00f654>
 800fa3c:	10bffe04 	addi	r2,r2,-8
 800fa40:	88a0983a 	sll	r16,r17,r2
 800fa44:	0025883a 	mov	r18,zero
 800fa48:	003f0906 	br	800f670 <__alt_data_end+0xfc00f670>
 800fa4c:	9004d0fa 	srli	r2,r18,3
 800fa50:	8024977a 	slli	r18,r16,29
 800fa54:	8020927a 	slli	r16,r16,9
 800fa58:	2101ffcc 	andi	r4,r4,2047
 800fa5c:	90a4b03a 	or	r18,r18,r2
 800fa60:	8020d33a 	srli	r16,r16,12
 800fa64:	b4c0004c 	andi	r19,r22,1
 800fa68:	003edb06 	br	800f5d8 <__alt_data_end+0xfc00f5d8>
 800fa6c:	00ff0084 	movi	r3,-1022
 800fa70:	1947c83a 	sub	r3,r3,r5
 800fa74:	00800e04 	movi	r2,56
 800fa78:	10c0080e 	bge	r2,r3,800fa9c <__muldf3+0x62c>
 800fa7c:	b4c0004c 	andi	r19,r22,1
 800fa80:	0009883a 	mov	r4,zero
 800fa84:	0021883a 	mov	r16,zero
 800fa88:	0025883a 	mov	r18,zero
 800fa8c:	003ed206 	br	800f5d8 <__alt_data_end+0xfc00f5d8>
 800fa90:	600b883a 	mov	r5,r12
 800fa94:	e02d883a 	mov	r22,fp
 800fa98:	003fa706 	br	800f938 <__alt_data_end+0xfc00f938>
 800fa9c:	008007c4 	movi	r2,31
 800faa0:	10c01816 	blt	r2,r3,800fb04 <__muldf3+0x694>
 800faa4:	29410784 	addi	r5,r5,1054
 800faa8:	8144983a 	sll	r2,r16,r5
 800faac:	90c8d83a 	srl	r4,r18,r3
 800fab0:	914a983a 	sll	r5,r18,r5
 800fab4:	80c6d83a 	srl	r3,r16,r3
 800fab8:	2088b03a 	or	r4,r4,r2
 800fabc:	2804c03a 	cmpne	r2,r5,zero
 800fac0:	2084b03a 	or	r2,r4,r2
 800fac4:	110001cc 	andi	r4,r2,7
 800fac8:	20000726 	beq	r4,zero,800fae8 <__muldf3+0x678>
 800facc:	114003cc 	andi	r5,r2,15
 800fad0:	01000104 	movi	r4,4
 800fad4:	29000426 	beq	r5,r4,800fae8 <__muldf3+0x678>
 800fad8:	11000104 	addi	r4,r2,4
 800fadc:	2085803a 	cmpltu	r2,r4,r2
 800fae0:	1887883a 	add	r3,r3,r2
 800fae4:	2005883a 	mov	r2,r4
 800fae8:	1900202c 	andhi	r4,r3,128
 800faec:	20001826 	beq	r4,zero,800fb50 <__muldf3+0x6e0>
 800faf0:	b4c0004c 	andi	r19,r22,1
 800faf4:	01000044 	movi	r4,1
 800faf8:	0021883a 	mov	r16,zero
 800fafc:	0025883a 	mov	r18,zero
 800fb00:	003eb506 	br	800f5d8 <__alt_data_end+0xfc00f5d8>
 800fb04:	00bef884 	movi	r2,-1054
 800fb08:	1145c83a 	sub	r2,r2,r5
 800fb0c:	8088d83a 	srl	r4,r16,r2
 800fb10:	00800804 	movi	r2,32
 800fb14:	18801726 	beq	r3,r2,800fb74 <__muldf3+0x704>
 800fb18:	28810f84 	addi	r2,r5,1086
 800fb1c:	8084983a 	sll	r2,r16,r2
 800fb20:	1484b03a 	or	r2,r2,r18
 800fb24:	1004c03a 	cmpne	r2,r2,zero
 800fb28:	1104b03a 	or	r2,r2,r4
 800fb2c:	10c001cc 	andi	r3,r2,7
 800fb30:	18000b1e 	bne	r3,zero,800fb60 <__muldf3+0x6f0>
 800fb34:	0021883a 	mov	r16,zero
 800fb38:	1004d0fa 	srli	r2,r2,3
 800fb3c:	b4c0004c 	andi	r19,r22,1
 800fb40:	0009883a 	mov	r4,zero
 800fb44:	10e4b03a 	or	r18,r2,r3
 800fb48:	003ea306 	br	800f5d8 <__alt_data_end+0xfc00f5d8>
 800fb4c:	0007883a 	mov	r3,zero
 800fb50:	1820927a 	slli	r16,r3,9
 800fb54:	1806977a 	slli	r3,r3,29
 800fb58:	8020d33a 	srli	r16,r16,12
 800fb5c:	003ff606 	br	800fb38 <__alt_data_end+0xfc00fb38>
 800fb60:	110003cc 	andi	r4,r2,15
 800fb64:	00c00104 	movi	r3,4
 800fb68:	20fff826 	beq	r4,r3,800fb4c <__alt_data_end+0xfc00fb4c>
 800fb6c:	0007883a 	mov	r3,zero
 800fb70:	003fd906 	br	800fad8 <__alt_data_end+0xfc00fad8>
 800fb74:	0005883a 	mov	r2,zero
 800fb78:	003fe906 	br	800fb20 <__alt_data_end+0xfc00fb20>
 800fb7c:	00800434 	movhi	r2,16
 800fb80:	84000234 	orhi	r16,r16,8
 800fb84:	10bfffc4 	addi	r2,r2,-1
 800fb88:	e4c0004c 	andi	r19,fp,1
 800fb8c:	80a0703a 	and	r16,r16,r2
 800fb90:	003ef606 	br	800f76c <__alt_data_end+0xfc00f76c>

0800fb94 <__subdf3>:
 800fb94:	00c00434 	movhi	r3,16
 800fb98:	18ffffc4 	addi	r3,r3,-1
 800fb9c:	defffb04 	addi	sp,sp,-20
 800fba0:	28d2703a 	and	r9,r5,r3
 800fba4:	3814d53a 	srli	r10,r7,20
 800fba8:	38c6703a 	and	r3,r7,r3
 800fbac:	3004d77a 	srli	r2,r6,29
 800fbb0:	dc800215 	stw	r18,8(sp)
 800fbb4:	dc000015 	stw	r16,0(sp)
 800fbb8:	2824d7fa 	srli	r18,r5,31
 800fbbc:	2820d53a 	srli	r16,r5,20
 800fbc0:	481290fa 	slli	r9,r9,3
 800fbc4:	200ad77a 	srli	r5,r4,29
 800fbc8:	180690fa 	slli	r3,r3,3
 800fbcc:	dc400115 	stw	r17,4(sp)
 800fbd0:	dfc00415 	stw	ra,16(sp)
 800fbd4:	202290fa 	slli	r17,r4,3
 800fbd8:	dcc00315 	stw	r19,12(sp)
 800fbdc:	5281ffcc 	andi	r10,r10,2047
 800fbe0:	0101ffc4 	movi	r4,2047
 800fbe4:	9011883a 	mov	r8,r18
 800fbe8:	8401ffcc 	andi	r16,r16,2047
 800fbec:	94803fcc 	andi	r18,r18,255
 800fbf0:	494ab03a 	or	r5,r9,r5
 800fbf4:	380ed7fa 	srli	r7,r7,31
 800fbf8:	1886b03a 	or	r3,r3,r2
 800fbfc:	300c90fa 	slli	r6,r6,3
 800fc00:	51009026 	beq	r10,r4,800fe44 <__subdf3+0x2b0>
 800fc04:	39c0005c 	xori	r7,r7,1
 800fc08:	8285c83a 	sub	r2,r16,r10
 800fc0c:	91c06f26 	beq	r18,r7,800fdcc <__subdf3+0x238>
 800fc10:	0080b10e 	bge	zero,r2,800fed8 <__subdf3+0x344>
 800fc14:	50002a1e 	bne	r10,zero,800fcc0 <__subdf3+0x12c>
 800fc18:	1988b03a 	or	r4,r3,r6
 800fc1c:	2000941e 	bne	r4,zero,800fe70 <__subdf3+0x2dc>
 800fc20:	888001cc 	andi	r2,r17,7
 800fc24:	10005b26 	beq	r2,zero,800fd94 <__subdf3+0x200>
 800fc28:	88c003cc 	andi	r3,r17,15
 800fc2c:	00800104 	movi	r2,4
 800fc30:	18805826 	beq	r3,r2,800fd94 <__subdf3+0x200>
 800fc34:	88c00104 	addi	r3,r17,4
 800fc38:	1c63803a 	cmpltu	r17,r3,r17
 800fc3c:	2c4b883a 	add	r5,r5,r17
 800fc40:	2880202c 	andhi	r2,r5,128
 800fc44:	9200004c 	andi	r8,r18,1
 800fc48:	1823883a 	mov	r17,r3
 800fc4c:	10005426 	beq	r2,zero,800fda0 <__subdf3+0x20c>
 800fc50:	84000044 	addi	r16,r16,1
 800fc54:	0081ffc4 	movi	r2,2047
 800fc58:	8080bf26 	beq	r16,r2,800ff58 <__subdf3+0x3c4>
 800fc5c:	013fe034 	movhi	r4,65408
 800fc60:	213fffc4 	addi	r4,r4,-1
 800fc64:	290a703a 	and	r5,r5,r4
 800fc68:	2804977a 	slli	r2,r5,29
 800fc6c:	280a927a 	slli	r5,r5,9
 800fc70:	8822d0fa 	srli	r17,r17,3
 800fc74:	8401ffcc 	andi	r16,r16,2047
 800fc78:	2808d33a 	srli	r4,r5,12
 800fc7c:	1444b03a 	or	r2,r2,r17
 800fc80:	8401ffcc 	andi	r16,r16,2047
 800fc84:	800a953a 	slli	r5,r16,20
 800fc88:	40c03fcc 	andi	r3,r8,255
 800fc8c:	04000434 	movhi	r16,16
 800fc90:	180697fa 	slli	r3,r3,31
 800fc94:	843fffc4 	addi	r16,r16,-1
 800fc98:	2420703a 	and	r16,r4,r16
 800fc9c:	8160b03a 	or	r16,r16,r5
 800fca0:	80c6b03a 	or	r3,r16,r3
 800fca4:	dfc00417 	ldw	ra,16(sp)
 800fca8:	dcc00317 	ldw	r19,12(sp)
 800fcac:	dc800217 	ldw	r18,8(sp)
 800fcb0:	dc400117 	ldw	r17,4(sp)
 800fcb4:	dc000017 	ldw	r16,0(sp)
 800fcb8:	dec00504 	addi	sp,sp,20
 800fcbc:	f800283a 	ret
 800fcc0:	0101ffc4 	movi	r4,2047
 800fcc4:	813fd626 	beq	r16,r4,800fc20 <__alt_data_end+0xfc00fc20>
 800fcc8:	18c02034 	orhi	r3,r3,128
 800fccc:	01000e04 	movi	r4,56
 800fcd0:	2080a416 	blt	r4,r2,800ff64 <__subdf3+0x3d0>
 800fcd4:	010007c4 	movi	r4,31
 800fcd8:	2080c716 	blt	r4,r2,800fff8 <__subdf3+0x464>
 800fcdc:	01000804 	movi	r4,32
 800fce0:	2089c83a 	sub	r4,r4,r2
 800fce4:	1910983a 	sll	r8,r3,r4
 800fce8:	308ed83a 	srl	r7,r6,r2
 800fcec:	3108983a 	sll	r4,r6,r4
 800fcf0:	1884d83a 	srl	r2,r3,r2
 800fcf4:	41ccb03a 	or	r6,r8,r7
 800fcf8:	2008c03a 	cmpne	r4,r4,zero
 800fcfc:	310cb03a 	or	r6,r6,r4
 800fd00:	898dc83a 	sub	r6,r17,r6
 800fd04:	89a3803a 	cmpltu	r17,r17,r6
 800fd08:	288bc83a 	sub	r5,r5,r2
 800fd0c:	2c4bc83a 	sub	r5,r5,r17
 800fd10:	3023883a 	mov	r17,r6
 800fd14:	2880202c 	andhi	r2,r5,128
 800fd18:	10006b26 	beq	r2,zero,800fec8 <__subdf3+0x334>
 800fd1c:	04c02034 	movhi	r19,128
 800fd20:	9cffffc4 	addi	r19,r19,-1
 800fd24:	2ce6703a 	and	r19,r5,r19
 800fd28:	98007c26 	beq	r19,zero,800ff1c <__subdf3+0x388>
 800fd2c:	9809883a 	mov	r4,r19
 800fd30:	80106600 	call	8010660 <__clzsi2>
 800fd34:	10fffe04 	addi	r3,r2,-8
 800fd38:	010007c4 	movi	r4,31
 800fd3c:	20c07d16 	blt	r4,r3,800ff34 <__subdf3+0x3a0>
 800fd40:	01400a04 	movi	r5,40
 800fd44:	2885c83a 	sub	r2,r5,r2
 800fd48:	888ad83a 	srl	r5,r17,r2
 800fd4c:	98e6983a 	sll	r19,r19,r3
 800fd50:	88e2983a 	sll	r17,r17,r3
 800fd54:	2ce6b03a 	or	r19,r5,r19
 800fd58:	1c007a16 	blt	r3,r16,800ff44 <__subdf3+0x3b0>
 800fd5c:	1c21c83a 	sub	r16,r3,r16
 800fd60:	81400044 	addi	r5,r16,1
 800fd64:	00c007c4 	movi	r3,31
 800fd68:	19409616 	blt	r3,r5,800ffc4 <__subdf3+0x430>
 800fd6c:	1c21c83a 	sub	r16,r3,r16
 800fd70:	8c08983a 	sll	r4,r17,r16
 800fd74:	8946d83a 	srl	r3,r17,r5
 800fd78:	9c20983a 	sll	r16,r19,r16
 800fd7c:	2008c03a 	cmpne	r4,r4,zero
 800fd80:	994ad83a 	srl	r5,r19,r5
 800fd84:	1c06b03a 	or	r3,r3,r16
 800fd88:	1922b03a 	or	r17,r3,r4
 800fd8c:	0021883a 	mov	r16,zero
 800fd90:	003fa306 	br	800fc20 <__alt_data_end+0xfc00fc20>
 800fd94:	2880202c 	andhi	r2,r5,128
 800fd98:	9200004c 	andi	r8,r18,1
 800fd9c:	103fac1e 	bne	r2,zero,800fc50 <__alt_data_end+0xfc00fc50>
 800fda0:	2804977a 	slli	r2,r5,29
 800fda4:	8822d0fa 	srli	r17,r17,3
 800fda8:	00c1ffc4 	movi	r3,2047
 800fdac:	280ad0fa 	srli	r5,r5,3
 800fdb0:	1444b03a 	or	r2,r2,r17
 800fdb4:	80c02726 	beq	r16,r3,800fe54 <__subdf3+0x2c0>
 800fdb8:	01000434 	movhi	r4,16
 800fdbc:	213fffc4 	addi	r4,r4,-1
 800fdc0:	80e0703a 	and	r16,r16,r3
 800fdc4:	2908703a 	and	r4,r5,r4
 800fdc8:	003fad06 	br	800fc80 <__alt_data_end+0xfc00fc80>
 800fdcc:	0080690e 	bge	zero,r2,800ff74 <__subdf3+0x3e0>
 800fdd0:	50002f26 	beq	r10,zero,800fe90 <__subdf3+0x2fc>
 800fdd4:	0101ffc4 	movi	r4,2047
 800fdd8:	813f9126 	beq	r16,r4,800fc20 <__alt_data_end+0xfc00fc20>
 800fddc:	18c02034 	orhi	r3,r3,128
 800fde0:	01000e04 	movi	r4,56
 800fde4:	2080b00e 	bge	r4,r2,80100a8 <__subdf3+0x514>
 800fde8:	198cb03a 	or	r6,r3,r6
 800fdec:	300ec03a 	cmpne	r7,r6,zero
 800fdf0:	0005883a 	mov	r2,zero
 800fdf4:	3c4f883a 	add	r7,r7,r17
 800fdf8:	3c63803a 	cmpltu	r17,r7,r17
 800fdfc:	114b883a 	add	r5,r2,r5
 800fe00:	2c4b883a 	add	r5,r5,r17
 800fe04:	3823883a 	mov	r17,r7
 800fe08:	2880202c 	andhi	r2,r5,128
 800fe0c:	10002e26 	beq	r2,zero,800fec8 <__subdf3+0x334>
 800fe10:	84000044 	addi	r16,r16,1
 800fe14:	0081ffc4 	movi	r2,2047
 800fe18:	8080de26 	beq	r16,r2,8010194 <__subdf3+0x600>
 800fe1c:	00bfe034 	movhi	r2,65408
 800fe20:	10bfffc4 	addi	r2,r2,-1
 800fe24:	288a703a 	and	r5,r5,r2
 800fe28:	880cd07a 	srli	r6,r17,1
 800fe2c:	280897fa 	slli	r4,r5,31
 800fe30:	88c0004c 	andi	r3,r17,1
 800fe34:	30e2b03a 	or	r17,r6,r3
 800fe38:	280ad07a 	srli	r5,r5,1
 800fe3c:	8922b03a 	or	r17,r17,r4
 800fe40:	003f7706 	br	800fc20 <__alt_data_end+0xfc00fc20>
 800fe44:	1984b03a 	or	r2,r3,r6
 800fe48:	103f6e26 	beq	r2,zero,800fc04 <__alt_data_end+0xfc00fc04>
 800fe4c:	39c03fcc 	andi	r7,r7,255
 800fe50:	003f6d06 	br	800fc08 <__alt_data_end+0xfc00fc08>
 800fe54:	1146b03a 	or	r3,r2,r5
 800fe58:	18003f26 	beq	r3,zero,800ff58 <__subdf3+0x3c4>
 800fe5c:	00c00434 	movhi	r3,16
 800fe60:	29000234 	orhi	r4,r5,8
 800fe64:	18ffffc4 	addi	r3,r3,-1
 800fe68:	20c8703a 	and	r4,r4,r3
 800fe6c:	003f8406 	br	800fc80 <__alt_data_end+0xfc00fc80>
 800fe70:	10bfffc4 	addi	r2,r2,-1
 800fe74:	1000501e 	bne	r2,zero,800ffb8 <__subdf3+0x424>
 800fe78:	898fc83a 	sub	r7,r17,r6
 800fe7c:	89e3803a 	cmpltu	r17,r17,r7
 800fe80:	28cbc83a 	sub	r5,r5,r3
 800fe84:	2c4bc83a 	sub	r5,r5,r17
 800fe88:	3823883a 	mov	r17,r7
 800fe8c:	003fa106 	br	800fd14 <__alt_data_end+0xfc00fd14>
 800fe90:	1988b03a 	or	r4,r3,r6
 800fe94:	203f6226 	beq	r4,zero,800fc20 <__alt_data_end+0xfc00fc20>
 800fe98:	10bfffc4 	addi	r2,r2,-1
 800fe9c:	10009b1e 	bne	r2,zero,801010c <__subdf3+0x578>
 800fea0:	344d883a 	add	r6,r6,r17
 800fea4:	3463803a 	cmpltu	r17,r6,r17
 800fea8:	194b883a 	add	r5,r3,r5
 800feac:	2c4b883a 	add	r5,r5,r17
 800feb0:	3023883a 	mov	r17,r6
 800feb4:	003fd406 	br	800fe08 <__alt_data_end+0xfc00fe08>
 800feb8:	1106b03a 	or	r3,r2,r4
 800febc:	1800b426 	beq	r3,zero,8010190 <__subdf3+0x5fc>
 800fec0:	100b883a 	mov	r5,r2
 800fec4:	2023883a 	mov	r17,r4
 800fec8:	888001cc 	andi	r2,r17,7
 800fecc:	103f561e 	bne	r2,zero,800fc28 <__alt_data_end+0xfc00fc28>
 800fed0:	9200004c 	andi	r8,r18,1
 800fed4:	003fb206 	br	800fda0 <__alt_data_end+0xfc00fda0>
 800fed8:	1000531e 	bne	r2,zero,8010028 <__subdf3+0x494>
 800fedc:	80800044 	addi	r2,r16,1
 800fee0:	1081ffcc 	andi	r2,r2,2047
 800fee4:	01000044 	movi	r4,1
 800fee8:	2080a00e 	bge	r4,r2,801016c <__subdf3+0x5d8>
 800feec:	8985c83a 	sub	r2,r17,r6
 800fef0:	8889803a 	cmpltu	r4,r17,r2
 800fef4:	28e7c83a 	sub	r19,r5,r3
 800fef8:	9927c83a 	sub	r19,r19,r4
 800fefc:	9900202c 	andhi	r4,r19,128
 800ff00:	20006226 	beq	r4,zero,801008c <__subdf3+0x4f8>
 800ff04:	3463c83a 	sub	r17,r6,r17
 800ff08:	194bc83a 	sub	r5,r3,r5
 800ff0c:	344d803a 	cmpltu	r6,r6,r17
 800ff10:	29a7c83a 	sub	r19,r5,r6
 800ff14:	3825883a 	mov	r18,r7
 800ff18:	983f841e 	bne	r19,zero,800fd2c <__alt_data_end+0xfc00fd2c>
 800ff1c:	8809883a 	mov	r4,r17
 800ff20:	80106600 	call	8010660 <__clzsi2>
 800ff24:	10800804 	addi	r2,r2,32
 800ff28:	10fffe04 	addi	r3,r2,-8
 800ff2c:	010007c4 	movi	r4,31
 800ff30:	20ff830e 	bge	r4,r3,800fd40 <__alt_data_end+0xfc00fd40>
 800ff34:	14fff604 	addi	r19,r2,-40
 800ff38:	8ce6983a 	sll	r19,r17,r19
 800ff3c:	0023883a 	mov	r17,zero
 800ff40:	1c3f860e 	bge	r3,r16,800fd5c <__alt_data_end+0xfc00fd5c>
 800ff44:	017fe034 	movhi	r5,65408
 800ff48:	297fffc4 	addi	r5,r5,-1
 800ff4c:	80e1c83a 	sub	r16,r16,r3
 800ff50:	994a703a 	and	r5,r19,r5
 800ff54:	003f3206 	br	800fc20 <__alt_data_end+0xfc00fc20>
 800ff58:	0009883a 	mov	r4,zero
 800ff5c:	0005883a 	mov	r2,zero
 800ff60:	003f4706 	br	800fc80 <__alt_data_end+0xfc00fc80>
 800ff64:	198cb03a 	or	r6,r3,r6
 800ff68:	300cc03a 	cmpne	r6,r6,zero
 800ff6c:	0005883a 	mov	r2,zero
 800ff70:	003f6306 	br	800fd00 <__alt_data_end+0xfc00fd00>
 800ff74:	10009d1e 	bne	r2,zero,80101ec <__subdf3+0x658>
 800ff78:	81c00044 	addi	r7,r16,1
 800ff7c:	3881ffcc 	andi	r2,r7,2047
 800ff80:	02400044 	movi	r9,1
 800ff84:	4880680e 	bge	r9,r2,8010128 <__subdf3+0x594>
 800ff88:	0081ffc4 	movi	r2,2047
 800ff8c:	3880ae26 	beq	r7,r2,8010248 <__subdf3+0x6b4>
 800ff90:	344d883a 	add	r6,r6,r17
 800ff94:	3463803a 	cmpltu	r17,r6,r17
 800ff98:	194b883a 	add	r5,r3,r5
 800ff9c:	2c4b883a 	add	r5,r5,r17
 800ffa0:	282297fa 	slli	r17,r5,31
 800ffa4:	300cd07a 	srli	r6,r6,1
 800ffa8:	280ad07a 	srli	r5,r5,1
 800ffac:	3821883a 	mov	r16,r7
 800ffb0:	89a2b03a 	or	r17,r17,r6
 800ffb4:	003f1a06 	br	800fc20 <__alt_data_end+0xfc00fc20>
 800ffb8:	0101ffc4 	movi	r4,2047
 800ffbc:	813f431e 	bne	r16,r4,800fccc <__alt_data_end+0xfc00fccc>
 800ffc0:	003f1706 	br	800fc20 <__alt_data_end+0xfc00fc20>
 800ffc4:	80bff844 	addi	r2,r16,-31
 800ffc8:	00c00804 	movi	r3,32
 800ffcc:	9884d83a 	srl	r2,r19,r2
 800ffd0:	28c05126 	beq	r5,r3,8010118 <__subdf3+0x584>
 800ffd4:	00c00fc4 	movi	r3,63
 800ffd8:	1c21c83a 	sub	r16,r3,r16
 800ffdc:	9c26983a 	sll	r19,r19,r16
 800ffe0:	9c62b03a 	or	r17,r19,r17
 800ffe4:	8822c03a 	cmpne	r17,r17,zero
 800ffe8:	88a2b03a 	or	r17,r17,r2
 800ffec:	000b883a 	mov	r5,zero
 800fff0:	0021883a 	mov	r16,zero
 800fff4:	003fb406 	br	800fec8 <__alt_data_end+0xfc00fec8>
 800fff8:	113ff804 	addi	r4,r2,-32
 800fffc:	01c00804 	movi	r7,32
 8010000:	1908d83a 	srl	r4,r3,r4
 8010004:	11c04626 	beq	r2,r7,8010120 <__subdf3+0x58c>
 8010008:	01c01004 	movi	r7,64
 801000c:	3885c83a 	sub	r2,r7,r2
 8010010:	1884983a 	sll	r2,r3,r2
 8010014:	118cb03a 	or	r6,r2,r6
 8010018:	300cc03a 	cmpne	r6,r6,zero
 801001c:	310cb03a 	or	r6,r6,r4
 8010020:	0005883a 	mov	r2,zero
 8010024:	003f3606 	br	800fd00 <__alt_data_end+0xfc00fd00>
 8010028:	80002b26 	beq	r16,zero,80100d8 <__subdf3+0x544>
 801002c:	0101ffc4 	movi	r4,2047
 8010030:	51006926 	beq	r10,r4,80101d8 <__subdf3+0x644>
 8010034:	0085c83a 	sub	r2,zero,r2
 8010038:	29402034 	orhi	r5,r5,128
 801003c:	01000e04 	movi	r4,56
 8010040:	20807d16 	blt	r4,r2,8010238 <__subdf3+0x6a4>
 8010044:	010007c4 	movi	r4,31
 8010048:	2080d916 	blt	r4,r2,80103b0 <__subdf3+0x81c>
 801004c:	01000804 	movi	r4,32
 8010050:	2089c83a 	sub	r4,r4,r2
 8010054:	2912983a 	sll	r9,r5,r4
 8010058:	8890d83a 	srl	r8,r17,r2
 801005c:	8908983a 	sll	r4,r17,r4
 8010060:	2884d83a 	srl	r2,r5,r2
 8010064:	4a22b03a 	or	r17,r9,r8
 8010068:	2008c03a 	cmpne	r4,r4,zero
 801006c:	8922b03a 	or	r17,r17,r4
 8010070:	3463c83a 	sub	r17,r6,r17
 8010074:	1885c83a 	sub	r2,r3,r2
 8010078:	344d803a 	cmpltu	r6,r6,r17
 801007c:	118bc83a 	sub	r5,r2,r6
 8010080:	5021883a 	mov	r16,r10
 8010084:	3825883a 	mov	r18,r7
 8010088:	003f2206 	br	800fd14 <__alt_data_end+0xfc00fd14>
 801008c:	9886b03a 	or	r3,r19,r2
 8010090:	18001c1e 	bne	r3,zero,8010104 <__subdf3+0x570>
 8010094:	0011883a 	mov	r8,zero
 8010098:	000b883a 	mov	r5,zero
 801009c:	0023883a 	mov	r17,zero
 80100a0:	0021883a 	mov	r16,zero
 80100a4:	003f3e06 	br	800fda0 <__alt_data_end+0xfc00fda0>
 80100a8:	010007c4 	movi	r4,31
 80100ac:	20803c16 	blt	r4,r2,80101a0 <__subdf3+0x60c>
 80100b0:	01000804 	movi	r4,32
 80100b4:	2089c83a 	sub	r4,r4,r2
 80100b8:	1912983a 	sll	r9,r3,r4
 80100bc:	308ed83a 	srl	r7,r6,r2
 80100c0:	3108983a 	sll	r4,r6,r4
 80100c4:	1884d83a 	srl	r2,r3,r2
 80100c8:	49ceb03a 	or	r7,r9,r7
 80100cc:	2008c03a 	cmpne	r4,r4,zero
 80100d0:	390eb03a 	or	r7,r7,r4
 80100d4:	003f4706 	br	800fdf4 <__alt_data_end+0xfc00fdf4>
 80100d8:	2c48b03a 	or	r4,r5,r17
 80100dc:	20003e26 	beq	r4,zero,80101d8 <__subdf3+0x644>
 80100e0:	0084303a 	nor	r2,zero,r2
 80100e4:	10003a1e 	bne	r2,zero,80101d0 <__subdf3+0x63c>
 80100e8:	3463c83a 	sub	r17,r6,r17
 80100ec:	194bc83a 	sub	r5,r3,r5
 80100f0:	344d803a 	cmpltu	r6,r6,r17
 80100f4:	298bc83a 	sub	r5,r5,r6
 80100f8:	5021883a 	mov	r16,r10
 80100fc:	3825883a 	mov	r18,r7
 8010100:	003f0406 	br	800fd14 <__alt_data_end+0xfc00fd14>
 8010104:	1023883a 	mov	r17,r2
 8010108:	003f0706 	br	800fd28 <__alt_data_end+0xfc00fd28>
 801010c:	0101ffc4 	movi	r4,2047
 8010110:	813f331e 	bne	r16,r4,800fde0 <__alt_data_end+0xfc00fde0>
 8010114:	003ec206 	br	800fc20 <__alt_data_end+0xfc00fc20>
 8010118:	0027883a 	mov	r19,zero
 801011c:	003fb006 	br	800ffe0 <__alt_data_end+0xfc00ffe0>
 8010120:	0005883a 	mov	r2,zero
 8010124:	003fbb06 	br	8010014 <__alt_data_end+0xfc010014>
 8010128:	2c44b03a 	or	r2,r5,r17
 801012c:	80008b1e 	bne	r16,zero,801035c <__subdf3+0x7c8>
 8010130:	1000b526 	beq	r2,zero,8010408 <__subdf3+0x874>
 8010134:	1984b03a 	or	r2,r3,r6
 8010138:	103eb926 	beq	r2,zero,800fc20 <__alt_data_end+0xfc00fc20>
 801013c:	3449883a 	add	r4,r6,r17
 8010140:	2463803a 	cmpltu	r17,r4,r17
 8010144:	194b883a 	add	r5,r3,r5
 8010148:	2c4b883a 	add	r5,r5,r17
 801014c:	2880202c 	andhi	r2,r5,128
 8010150:	2023883a 	mov	r17,r4
 8010154:	103f5c26 	beq	r2,zero,800fec8 <__alt_data_end+0xfc00fec8>
 8010158:	00bfe034 	movhi	r2,65408
 801015c:	10bfffc4 	addi	r2,r2,-1
 8010160:	4821883a 	mov	r16,r9
 8010164:	288a703a 	and	r5,r5,r2
 8010168:	003ead06 	br	800fc20 <__alt_data_end+0xfc00fc20>
 801016c:	2c44b03a 	or	r2,r5,r17
 8010170:	8000291e 	bne	r16,zero,8010218 <__subdf3+0x684>
 8010174:	10004f1e 	bne	r2,zero,80102b4 <__subdf3+0x720>
 8010178:	1984b03a 	or	r2,r3,r6
 801017c:	10000426 	beq	r2,zero,8010190 <__subdf3+0x5fc>
 8010180:	180b883a 	mov	r5,r3
 8010184:	3023883a 	mov	r17,r6
 8010188:	3825883a 	mov	r18,r7
 801018c:	003ea406 	br	800fc20 <__alt_data_end+0xfc00fc20>
 8010190:	0011883a 	mov	r8,zero
 8010194:	000b883a 	mov	r5,zero
 8010198:	0023883a 	mov	r17,zero
 801019c:	003f0006 	br	800fda0 <__alt_data_end+0xfc00fda0>
 80101a0:	11fff804 	addi	r7,r2,-32
 80101a4:	19c8d83a 	srl	r4,r3,r7
 80101a8:	01c00804 	movi	r7,32
 80101ac:	11c07e26 	beq	r2,r7,80103a8 <__subdf3+0x814>
 80101b0:	01c01004 	movi	r7,64
 80101b4:	3885c83a 	sub	r2,r7,r2
 80101b8:	1884983a 	sll	r2,r3,r2
 80101bc:	118cb03a 	or	r6,r2,r6
 80101c0:	300ec03a 	cmpne	r7,r6,zero
 80101c4:	390eb03a 	or	r7,r7,r4
 80101c8:	0005883a 	mov	r2,zero
 80101cc:	003f0906 	br	800fdf4 <__alt_data_end+0xfc00fdf4>
 80101d0:	0101ffc4 	movi	r4,2047
 80101d4:	513f991e 	bne	r10,r4,801003c <__alt_data_end+0xfc01003c>
 80101d8:	180b883a 	mov	r5,r3
 80101dc:	3023883a 	mov	r17,r6
 80101e0:	5021883a 	mov	r16,r10
 80101e4:	3825883a 	mov	r18,r7
 80101e8:	003e8d06 	br	800fc20 <__alt_data_end+0xfc00fc20>
 80101ec:	80001a1e 	bne	r16,zero,8010258 <__subdf3+0x6c4>
 80101f0:	2c48b03a 	or	r4,r5,r17
 80101f4:	20005526 	beq	r4,zero,801034c <__subdf3+0x7b8>
 80101f8:	0084303a 	nor	r2,zero,r2
 80101fc:	1000511e 	bne	r2,zero,8010344 <__subdf3+0x7b0>
 8010200:	89a3883a 	add	r17,r17,r6
 8010204:	194b883a 	add	r5,r3,r5
 8010208:	898d803a 	cmpltu	r6,r17,r6
 801020c:	298b883a 	add	r5,r5,r6
 8010210:	5021883a 	mov	r16,r10
 8010214:	003efc06 	br	800fe08 <__alt_data_end+0xfc00fe08>
 8010218:	1000341e 	bne	r2,zero,80102ec <__subdf3+0x758>
 801021c:	1984b03a 	or	r2,r3,r6
 8010220:	10006f26 	beq	r2,zero,80103e0 <__subdf3+0x84c>
 8010224:	180b883a 	mov	r5,r3
 8010228:	3023883a 	mov	r17,r6
 801022c:	3825883a 	mov	r18,r7
 8010230:	0401ffc4 	movi	r16,2047
 8010234:	003e7a06 	br	800fc20 <__alt_data_end+0xfc00fc20>
 8010238:	2c62b03a 	or	r17,r5,r17
 801023c:	8822c03a 	cmpne	r17,r17,zero
 8010240:	0005883a 	mov	r2,zero
 8010244:	003f8a06 	br	8010070 <__alt_data_end+0xfc010070>
 8010248:	3821883a 	mov	r16,r7
 801024c:	000b883a 	mov	r5,zero
 8010250:	0023883a 	mov	r17,zero
 8010254:	003ed206 	br	800fda0 <__alt_data_end+0xfc00fda0>
 8010258:	0101ffc4 	movi	r4,2047
 801025c:	51003b26 	beq	r10,r4,801034c <__subdf3+0x7b8>
 8010260:	0085c83a 	sub	r2,zero,r2
 8010264:	29402034 	orhi	r5,r5,128
 8010268:	01000e04 	movi	r4,56
 801026c:	20806216 	blt	r4,r2,80103f8 <__subdf3+0x864>
 8010270:	010007c4 	movi	r4,31
 8010274:	20806b16 	blt	r4,r2,8010424 <__subdf3+0x890>
 8010278:	01000804 	movi	r4,32
 801027c:	2089c83a 	sub	r4,r4,r2
 8010280:	2912983a 	sll	r9,r5,r4
 8010284:	888ed83a 	srl	r7,r17,r2
 8010288:	8908983a 	sll	r4,r17,r4
 801028c:	2884d83a 	srl	r2,r5,r2
 8010290:	49e2b03a 	or	r17,r9,r7
 8010294:	2008c03a 	cmpne	r4,r4,zero
 8010298:	8922b03a 	or	r17,r17,r4
 801029c:	89a3883a 	add	r17,r17,r6
 80102a0:	10c5883a 	add	r2,r2,r3
 80102a4:	898d803a 	cmpltu	r6,r17,r6
 80102a8:	118b883a 	add	r5,r2,r6
 80102ac:	5021883a 	mov	r16,r10
 80102b0:	003ed506 	br	800fe08 <__alt_data_end+0xfc00fe08>
 80102b4:	1984b03a 	or	r2,r3,r6
 80102b8:	103e5926 	beq	r2,zero,800fc20 <__alt_data_end+0xfc00fc20>
 80102bc:	8989c83a 	sub	r4,r17,r6
 80102c0:	8911803a 	cmpltu	r8,r17,r4
 80102c4:	28c5c83a 	sub	r2,r5,r3
 80102c8:	1205c83a 	sub	r2,r2,r8
 80102cc:	1200202c 	andhi	r8,r2,128
 80102d0:	403ef926 	beq	r8,zero,800feb8 <__alt_data_end+0xfc00feb8>
 80102d4:	3463c83a 	sub	r17,r6,r17
 80102d8:	194bc83a 	sub	r5,r3,r5
 80102dc:	344d803a 	cmpltu	r6,r6,r17
 80102e0:	298bc83a 	sub	r5,r5,r6
 80102e4:	3825883a 	mov	r18,r7
 80102e8:	003e4d06 	br	800fc20 <__alt_data_end+0xfc00fc20>
 80102ec:	1984b03a 	or	r2,r3,r6
 80102f0:	10002b26 	beq	r2,zero,80103a0 <__subdf3+0x80c>
 80102f4:	2808d0fa 	srli	r4,r5,3
 80102f8:	8822d0fa 	srli	r17,r17,3
 80102fc:	280a977a 	slli	r5,r5,29
 8010300:	2080022c 	andhi	r2,r4,8
 8010304:	2c62b03a 	or	r17,r5,r17
 8010308:	10000826 	beq	r2,zero,801032c <__subdf3+0x798>
 801030c:	1810d0fa 	srli	r8,r3,3
 8010310:	4080022c 	andhi	r2,r8,8
 8010314:	1000051e 	bne	r2,zero,801032c <__subdf3+0x798>
 8010318:	300cd0fa 	srli	r6,r6,3
 801031c:	1804977a 	slli	r2,r3,29
 8010320:	4009883a 	mov	r4,r8
 8010324:	3825883a 	mov	r18,r7
 8010328:	11a2b03a 	or	r17,r2,r6
 801032c:	880ad77a 	srli	r5,r17,29
 8010330:	200890fa 	slli	r4,r4,3
 8010334:	882290fa 	slli	r17,r17,3
 8010338:	0401ffc4 	movi	r16,2047
 801033c:	290ab03a 	or	r5,r5,r4
 8010340:	003e3706 	br	800fc20 <__alt_data_end+0xfc00fc20>
 8010344:	0101ffc4 	movi	r4,2047
 8010348:	513fc71e 	bne	r10,r4,8010268 <__alt_data_end+0xfc010268>
 801034c:	180b883a 	mov	r5,r3
 8010350:	3023883a 	mov	r17,r6
 8010354:	5021883a 	mov	r16,r10
 8010358:	003e3106 	br	800fc20 <__alt_data_end+0xfc00fc20>
 801035c:	10002d26 	beq	r2,zero,8010414 <__subdf3+0x880>
 8010360:	1984b03a 	or	r2,r3,r6
 8010364:	10000e26 	beq	r2,zero,80103a0 <__subdf3+0x80c>
 8010368:	2808d0fa 	srli	r4,r5,3
 801036c:	8822d0fa 	srli	r17,r17,3
 8010370:	280a977a 	slli	r5,r5,29
 8010374:	2080022c 	andhi	r2,r4,8
 8010378:	2c62b03a 	or	r17,r5,r17
 801037c:	103feb26 	beq	r2,zero,801032c <__alt_data_end+0xfc01032c>
 8010380:	180ed0fa 	srli	r7,r3,3
 8010384:	3880022c 	andhi	r2,r7,8
 8010388:	103fe81e 	bne	r2,zero,801032c <__alt_data_end+0xfc01032c>
 801038c:	300cd0fa 	srli	r6,r6,3
 8010390:	1804977a 	slli	r2,r3,29
 8010394:	3809883a 	mov	r4,r7
 8010398:	11a2b03a 	or	r17,r2,r6
 801039c:	003fe306 	br	801032c <__alt_data_end+0xfc01032c>
 80103a0:	0401ffc4 	movi	r16,2047
 80103a4:	003e1e06 	br	800fc20 <__alt_data_end+0xfc00fc20>
 80103a8:	0005883a 	mov	r2,zero
 80103ac:	003f8306 	br	80101bc <__alt_data_end+0xfc0101bc>
 80103b0:	113ff804 	addi	r4,r2,-32
 80103b4:	02000804 	movi	r8,32
 80103b8:	2908d83a 	srl	r4,r5,r4
 80103bc:	12002526 	beq	r2,r8,8010454 <__subdf3+0x8c0>
 80103c0:	02001004 	movi	r8,64
 80103c4:	4085c83a 	sub	r2,r8,r2
 80103c8:	288a983a 	sll	r5,r5,r2
 80103cc:	2c62b03a 	or	r17,r5,r17
 80103d0:	8822c03a 	cmpne	r17,r17,zero
 80103d4:	8922b03a 	or	r17,r17,r4
 80103d8:	0005883a 	mov	r2,zero
 80103dc:	003f2406 	br	8010070 <__alt_data_end+0xfc010070>
 80103e0:	01402034 	movhi	r5,128
 80103e4:	0011883a 	mov	r8,zero
 80103e8:	297fffc4 	addi	r5,r5,-1
 80103ec:	047ffe04 	movi	r17,-8
 80103f0:	0401ffc4 	movi	r16,2047
 80103f4:	003e6a06 	br	800fda0 <__alt_data_end+0xfc00fda0>
 80103f8:	2c62b03a 	or	r17,r5,r17
 80103fc:	8822c03a 	cmpne	r17,r17,zero
 8010400:	0005883a 	mov	r2,zero
 8010404:	003fa506 	br	801029c <__alt_data_end+0xfc01029c>
 8010408:	180b883a 	mov	r5,r3
 801040c:	3023883a 	mov	r17,r6
 8010410:	003e0306 	br	800fc20 <__alt_data_end+0xfc00fc20>
 8010414:	180b883a 	mov	r5,r3
 8010418:	3023883a 	mov	r17,r6
 801041c:	0401ffc4 	movi	r16,2047
 8010420:	003dff06 	br	800fc20 <__alt_data_end+0xfc00fc20>
 8010424:	113ff804 	addi	r4,r2,-32
 8010428:	01c00804 	movi	r7,32
 801042c:	2908d83a 	srl	r4,r5,r4
 8010430:	11c00a26 	beq	r2,r7,801045c <__subdf3+0x8c8>
 8010434:	01c01004 	movi	r7,64
 8010438:	3885c83a 	sub	r2,r7,r2
 801043c:	288a983a 	sll	r5,r5,r2
 8010440:	2c62b03a 	or	r17,r5,r17
 8010444:	8822c03a 	cmpne	r17,r17,zero
 8010448:	8922b03a 	or	r17,r17,r4
 801044c:	0005883a 	mov	r2,zero
 8010450:	003f9206 	br	801029c <__alt_data_end+0xfc01029c>
 8010454:	000b883a 	mov	r5,zero
 8010458:	003fdc06 	br	80103cc <__alt_data_end+0xfc0103cc>
 801045c:	000b883a 	mov	r5,zero
 8010460:	003ff706 	br	8010440 <__alt_data_end+0xfc010440>

08010464 <__fixdfsi>:
 8010464:	2806d53a 	srli	r3,r5,20
 8010468:	00800434 	movhi	r2,16
 801046c:	10bfffc4 	addi	r2,r2,-1
 8010470:	18c1ffcc 	andi	r3,r3,2047
 8010474:	0180ff84 	movi	r6,1022
 8010478:	2884703a 	and	r2,r5,r2
 801047c:	280ad7fa 	srli	r5,r5,31
 8010480:	30c0130e 	bge	r6,r3,80104d0 <__fixdfsi+0x6c>
 8010484:	01810744 	movi	r6,1053
 8010488:	30c00d16 	blt	r6,r3,80104c0 <__fixdfsi+0x5c>
 801048c:	01810cc4 	movi	r6,1075
 8010490:	30cdc83a 	sub	r6,r6,r3
 8010494:	01c007c4 	movi	r7,31
 8010498:	10800434 	orhi	r2,r2,16
 801049c:	39800e0e 	bge	r7,r6,80104d8 <__fixdfsi+0x74>
 80104a0:	010104c4 	movi	r4,1043
 80104a4:	20c7c83a 	sub	r3,r4,r3
 80104a8:	10c6d83a 	srl	r3,r2,r3
 80104ac:	29403fcc 	andi	r5,r5,255
 80104b0:	0145c83a 	sub	r2,zero,r5
 80104b4:	1884f03a 	xor	r2,r3,r2
 80104b8:	1145883a 	add	r2,r2,r5
 80104bc:	f800283a 	ret
 80104c0:	00a00034 	movhi	r2,32768
 80104c4:	10bfffc4 	addi	r2,r2,-1
 80104c8:	2885883a 	add	r2,r5,r2
 80104cc:	f800283a 	ret
 80104d0:	0005883a 	mov	r2,zero
 80104d4:	f800283a 	ret
 80104d8:	18fefb44 	addi	r3,r3,-1043
 80104dc:	2188d83a 	srl	r4,r4,r6
 80104e0:	10c6983a 	sll	r3,r2,r3
 80104e4:	20c6b03a 	or	r3,r4,r3
 80104e8:	003ff006 	br	80104ac <__alt_data_end+0xfc0104ac>

080104ec <__floatsidf>:
 80104ec:	defffd04 	addi	sp,sp,-12
 80104f0:	dc400115 	stw	r17,4(sp)
 80104f4:	dfc00215 	stw	ra,8(sp)
 80104f8:	dc000015 	stw	r16,0(sp)
 80104fc:	2023883a 	mov	r17,r4
 8010500:	20001426 	beq	r4,zero,8010554 <__floatsidf+0x68>
 8010504:	2020d7fa 	srli	r16,r4,31
 8010508:	80000126 	beq	r16,zero,8010510 <__floatsidf+0x24>
 801050c:	0123c83a 	sub	r17,zero,r4
 8010510:	8809883a 	mov	r4,r17
 8010514:	80106600 	call	8010660 <__clzsi2>
 8010518:	01410784 	movi	r5,1054
 801051c:	00c00284 	movi	r3,10
 8010520:	288bc83a 	sub	r5,r5,r2
 8010524:	18801c16 	blt	r3,r2,8010598 <__floatsidf+0xac>
 8010528:	00c002c4 	movi	r3,11
 801052c:	1887c83a 	sub	r3,r3,r2
 8010530:	88c8d83a 	srl	r4,r17,r3
 8010534:	00c00434 	movhi	r3,16
 8010538:	18ffffc4 	addi	r3,r3,-1
 801053c:	10800544 	addi	r2,r2,21
 8010540:	20c8703a 	and	r4,r4,r3
 8010544:	8884983a 	sll	r2,r17,r2
 8010548:	28c1ffcc 	andi	r3,r5,2047
 801054c:	800d883a 	mov	r6,r16
 8010550:	00000406 	br	8010564 <__floatsidf+0x78>
 8010554:	000d883a 	mov	r6,zero
 8010558:	0007883a 	mov	r3,zero
 801055c:	0009883a 	mov	r4,zero
 8010560:	0005883a 	mov	r2,zero
 8010564:	180a953a 	slli	r5,r3,20
 8010568:	31803fcc 	andi	r6,r6,255
 801056c:	00c00434 	movhi	r3,16
 8010570:	300c97fa 	slli	r6,r6,31
 8010574:	18ffffc4 	addi	r3,r3,-1
 8010578:	20c6703a 	and	r3,r4,r3
 801057c:	1946b03a 	or	r3,r3,r5
 8010580:	1986b03a 	or	r3,r3,r6
 8010584:	dfc00217 	ldw	ra,8(sp)
 8010588:	dc400117 	ldw	r17,4(sp)
 801058c:	dc000017 	ldw	r16,0(sp)
 8010590:	dec00304 	addi	sp,sp,12
 8010594:	f800283a 	ret
 8010598:	10fffd44 	addi	r3,r2,-11
 801059c:	88c8983a 	sll	r4,r17,r3
 80105a0:	00800434 	movhi	r2,16
 80105a4:	10bfffc4 	addi	r2,r2,-1
 80105a8:	2088703a 	and	r4,r4,r2
 80105ac:	28c1ffcc 	andi	r3,r5,2047
 80105b0:	800d883a 	mov	r6,r16
 80105b4:	0005883a 	mov	r2,zero
 80105b8:	003fea06 	br	8010564 <__alt_data_end+0xfc010564>

080105bc <__floatunsidf>:
 80105bc:	defffe04 	addi	sp,sp,-8
 80105c0:	dc000015 	stw	r16,0(sp)
 80105c4:	dfc00115 	stw	ra,4(sp)
 80105c8:	2021883a 	mov	r16,r4
 80105cc:	20001026 	beq	r4,zero,8010610 <__floatunsidf+0x54>
 80105d0:	80106600 	call	8010660 <__clzsi2>
 80105d4:	01410784 	movi	r5,1054
 80105d8:	100d883a 	mov	r6,r2
 80105dc:	288bc83a 	sub	r5,r5,r2
 80105e0:	00800284 	movi	r2,10
 80105e4:	11801616 	blt	r2,r6,8010640 <__floatunsidf+0x84>
 80105e8:	008002c4 	movi	r2,11
 80105ec:	1185c83a 	sub	r2,r2,r6
 80105f0:	8084d83a 	srl	r2,r16,r2
 80105f4:	00c00434 	movhi	r3,16
 80105f8:	31c00544 	addi	r7,r6,21
 80105fc:	18ffffc4 	addi	r3,r3,-1
 8010600:	81e0983a 	sll	r16,r16,r7
 8010604:	10cc703a 	and	r6,r2,r3
 8010608:	2941ffcc 	andi	r5,r5,2047
 801060c:	00000206 	br	8010618 <__floatunsidf+0x5c>
 8010610:	000b883a 	mov	r5,zero
 8010614:	000d883a 	mov	r6,zero
 8010618:	280a953a 	slli	r5,r5,20
 801061c:	00c00434 	movhi	r3,16
 8010620:	18ffffc4 	addi	r3,r3,-1
 8010624:	30c6703a 	and	r3,r6,r3
 8010628:	8005883a 	mov	r2,r16
 801062c:	1946b03a 	or	r3,r3,r5
 8010630:	dfc00117 	ldw	ra,4(sp)
 8010634:	dc000017 	ldw	r16,0(sp)
 8010638:	dec00204 	addi	sp,sp,8
 801063c:	f800283a 	ret
 8010640:	31bffd44 	addi	r6,r6,-11
 8010644:	818c983a 	sll	r6,r16,r6
 8010648:	00800434 	movhi	r2,16
 801064c:	10bfffc4 	addi	r2,r2,-1
 8010650:	2941ffcc 	andi	r5,r5,2047
 8010654:	0021883a 	mov	r16,zero
 8010658:	308c703a 	and	r6,r6,r2
 801065c:	003fee06 	br	8010618 <__alt_data_end+0xfc010618>

08010660 <__clzsi2>:
 8010660:	00bfffd4 	movui	r2,65535
 8010664:	11000b36 	bltu	r2,r4,8010694 <__clzsi2+0x34>
 8010668:	00803fc4 	movi	r2,255
 801066c:	1100122e 	bgeu	r2,r4,80106b8 <__clzsi2+0x58>
 8010670:	00c00204 	movi	r3,8
 8010674:	01400604 	movi	r5,24
 8010678:	20c8d83a 	srl	r4,r4,r3
 801067c:	008200b4 	movhi	r2,2050
 8010680:	10b6e604 	addi	r2,r2,-9320
 8010684:	1109883a 	add	r4,r2,r4
 8010688:	20800003 	ldbu	r2,0(r4)
 801068c:	2885c83a 	sub	r2,r5,r2
 8010690:	f800283a 	ret
 8010694:	00804034 	movhi	r2,256
 8010698:	10bfffc4 	addi	r2,r2,-1
 801069c:	11000336 	bltu	r2,r4,80106ac <__clzsi2+0x4c>
 80106a0:	00c00404 	movi	r3,16
 80106a4:	180b883a 	mov	r5,r3
 80106a8:	003ff306 	br	8010678 <__alt_data_end+0xfc010678>
 80106ac:	00c00604 	movi	r3,24
 80106b0:	01400204 	movi	r5,8
 80106b4:	003ff006 	br	8010678 <__alt_data_end+0xfc010678>
 80106b8:	0007883a 	mov	r3,zero
 80106bc:	01400804 	movi	r5,32
 80106c0:	003fed06 	br	8010678 <__alt_data_end+0xfc010678>

080106c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80106c4:	defffe04 	addi	sp,sp,-8
 80106c8:	dfc00115 	stw	ra,4(sp)
 80106cc:	df000015 	stw	fp,0(sp)
 80106d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80106d4:	008200b4 	movhi	r2,2050
 80106d8:	10be1504 	addi	r2,r2,-1964
 80106dc:	10800017 	ldw	r2,0(r2)
 80106e0:	10000526 	beq	r2,zero,80106f8 <alt_get_errno+0x34>
 80106e4:	008200b4 	movhi	r2,2050
 80106e8:	10be1504 	addi	r2,r2,-1964
 80106ec:	10800017 	ldw	r2,0(r2)
 80106f0:	103ee83a 	callr	r2
 80106f4:	00000206 	br	8010700 <alt_get_errno+0x3c>
 80106f8:	008200b4 	movhi	r2,2050
 80106fc:	10850904 	addi	r2,r2,5156
}
 8010700:	e037883a 	mov	sp,fp
 8010704:	dfc00117 	ldw	ra,4(sp)
 8010708:	df000017 	ldw	fp,0(sp)
 801070c:	dec00204 	addi	sp,sp,8
 8010710:	f800283a 	ret

08010714 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8010714:	defffb04 	addi	sp,sp,-20
 8010718:	dfc00415 	stw	ra,16(sp)
 801071c:	df000315 	stw	fp,12(sp)
 8010720:	df000304 	addi	fp,sp,12
 8010724:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8010728:	e0bfff17 	ldw	r2,-4(fp)
 801072c:	10000616 	blt	r2,zero,8010748 <close+0x34>
 8010730:	e0bfff17 	ldw	r2,-4(fp)
 8010734:	10c00324 	muli	r3,r2,12
 8010738:	008200b4 	movhi	r2,2050
 801073c:	10b97b04 	addi	r2,r2,-6676
 8010740:	1885883a 	add	r2,r3,r2
 8010744:	00000106 	br	801074c <close+0x38>
 8010748:	0005883a 	mov	r2,zero
 801074c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8010750:	e0bffd17 	ldw	r2,-12(fp)
 8010754:	10001926 	beq	r2,zero,80107bc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8010758:	e0bffd17 	ldw	r2,-12(fp)
 801075c:	10800017 	ldw	r2,0(r2)
 8010760:	10800417 	ldw	r2,16(r2)
 8010764:	10000626 	beq	r2,zero,8010780 <close+0x6c>
 8010768:	e0bffd17 	ldw	r2,-12(fp)
 801076c:	10800017 	ldw	r2,0(r2)
 8010770:	10800417 	ldw	r2,16(r2)
 8010774:	e13ffd17 	ldw	r4,-12(fp)
 8010778:	103ee83a 	callr	r2
 801077c:	00000106 	br	8010784 <close+0x70>
 8010780:	0005883a 	mov	r2,zero
 8010784:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8010788:	e13fff17 	ldw	r4,-4(fp)
 801078c:	8010e100 	call	8010e10 <alt_release_fd>
    if (rval < 0)
 8010790:	e0bffe17 	ldw	r2,-8(fp)
 8010794:	1000070e 	bge	r2,zero,80107b4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8010798:	80106c40 	call	80106c4 <alt_get_errno>
 801079c:	1007883a 	mov	r3,r2
 80107a0:	e0bffe17 	ldw	r2,-8(fp)
 80107a4:	0085c83a 	sub	r2,zero,r2
 80107a8:	18800015 	stw	r2,0(r3)
      return -1;
 80107ac:	00bfffc4 	movi	r2,-1
 80107b0:	00000706 	br	80107d0 <close+0xbc>
    }
    return 0;
 80107b4:	0005883a 	mov	r2,zero
 80107b8:	00000506 	br	80107d0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80107bc:	80106c40 	call	80106c4 <alt_get_errno>
 80107c0:	1007883a 	mov	r3,r2
 80107c4:	00801444 	movi	r2,81
 80107c8:	18800015 	stw	r2,0(r3)
    return -1;
 80107cc:	00bfffc4 	movi	r2,-1
  }
}
 80107d0:	e037883a 	mov	sp,fp
 80107d4:	dfc00117 	ldw	ra,4(sp)
 80107d8:	df000017 	ldw	fp,0(sp)
 80107dc:	dec00204 	addi	sp,sp,8
 80107e0:	f800283a 	ret

080107e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80107e4:	defffc04 	addi	sp,sp,-16
 80107e8:	df000315 	stw	fp,12(sp)
 80107ec:	df000304 	addi	fp,sp,12
 80107f0:	e13ffd15 	stw	r4,-12(fp)
 80107f4:	e17ffe15 	stw	r5,-8(fp)
 80107f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80107fc:	e0bfff17 	ldw	r2,-4(fp)
}
 8010800:	e037883a 	mov	sp,fp
 8010804:	df000017 	ldw	fp,0(sp)
 8010808:	dec00104 	addi	sp,sp,4
 801080c:	f800283a 	ret

08010810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010810:	defffe04 	addi	sp,sp,-8
 8010814:	dfc00115 	stw	ra,4(sp)
 8010818:	df000015 	stw	fp,0(sp)
 801081c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010820:	008200b4 	movhi	r2,2050
 8010824:	10be1504 	addi	r2,r2,-1964
 8010828:	10800017 	ldw	r2,0(r2)
 801082c:	10000526 	beq	r2,zero,8010844 <alt_get_errno+0x34>
 8010830:	008200b4 	movhi	r2,2050
 8010834:	10be1504 	addi	r2,r2,-1964
 8010838:	10800017 	ldw	r2,0(r2)
 801083c:	103ee83a 	callr	r2
 8010840:	00000206 	br	801084c <alt_get_errno+0x3c>
 8010844:	008200b4 	movhi	r2,2050
 8010848:	10850904 	addi	r2,r2,5156
}
 801084c:	e037883a 	mov	sp,fp
 8010850:	dfc00117 	ldw	ra,4(sp)
 8010854:	df000017 	ldw	fp,0(sp)
 8010858:	dec00204 	addi	sp,sp,8
 801085c:	f800283a 	ret

08010860 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8010860:	defffb04 	addi	sp,sp,-20
 8010864:	dfc00415 	stw	ra,16(sp)
 8010868:	df000315 	stw	fp,12(sp)
 801086c:	df000304 	addi	fp,sp,12
 8010870:	e13ffe15 	stw	r4,-8(fp)
 8010874:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010878:	e0bffe17 	ldw	r2,-8(fp)
 801087c:	10000616 	blt	r2,zero,8010898 <fstat+0x38>
 8010880:	e0bffe17 	ldw	r2,-8(fp)
 8010884:	10c00324 	muli	r3,r2,12
 8010888:	008200b4 	movhi	r2,2050
 801088c:	10b97b04 	addi	r2,r2,-6676
 8010890:	1885883a 	add	r2,r3,r2
 8010894:	00000106 	br	801089c <fstat+0x3c>
 8010898:	0005883a 	mov	r2,zero
 801089c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 80108a0:	e0bffd17 	ldw	r2,-12(fp)
 80108a4:	10001026 	beq	r2,zero,80108e8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80108a8:	e0bffd17 	ldw	r2,-12(fp)
 80108ac:	10800017 	ldw	r2,0(r2)
 80108b0:	10800817 	ldw	r2,32(r2)
 80108b4:	10000726 	beq	r2,zero,80108d4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 80108b8:	e0bffd17 	ldw	r2,-12(fp)
 80108bc:	10800017 	ldw	r2,0(r2)
 80108c0:	10800817 	ldw	r2,32(r2)
 80108c4:	e13ffd17 	ldw	r4,-12(fp)
 80108c8:	e17fff17 	ldw	r5,-4(fp)
 80108cc:	103ee83a 	callr	r2
 80108d0:	00000a06 	br	80108fc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80108d4:	e0bfff17 	ldw	r2,-4(fp)
 80108d8:	00c80004 	movi	r3,8192
 80108dc:	10c00115 	stw	r3,4(r2)
      return 0;
 80108e0:	0005883a 	mov	r2,zero
 80108e4:	00000506 	br	80108fc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80108e8:	80108100 	call	8010810 <alt_get_errno>
 80108ec:	1007883a 	mov	r3,r2
 80108f0:	00801444 	movi	r2,81
 80108f4:	18800015 	stw	r2,0(r3)
    return -1;
 80108f8:	00bfffc4 	movi	r2,-1
  }
}
 80108fc:	e037883a 	mov	sp,fp
 8010900:	dfc00117 	ldw	ra,4(sp)
 8010904:	df000017 	ldw	fp,0(sp)
 8010908:	dec00204 	addi	sp,sp,8
 801090c:	f800283a 	ret

08010910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010910:	defffe04 	addi	sp,sp,-8
 8010914:	dfc00115 	stw	ra,4(sp)
 8010918:	df000015 	stw	fp,0(sp)
 801091c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010920:	008200b4 	movhi	r2,2050
 8010924:	10be1504 	addi	r2,r2,-1964
 8010928:	10800017 	ldw	r2,0(r2)
 801092c:	10000526 	beq	r2,zero,8010944 <alt_get_errno+0x34>
 8010930:	008200b4 	movhi	r2,2050
 8010934:	10be1504 	addi	r2,r2,-1964
 8010938:	10800017 	ldw	r2,0(r2)
 801093c:	103ee83a 	callr	r2
 8010940:	00000206 	br	801094c <alt_get_errno+0x3c>
 8010944:	008200b4 	movhi	r2,2050
 8010948:	10850904 	addi	r2,r2,5156
}
 801094c:	e037883a 	mov	sp,fp
 8010950:	dfc00117 	ldw	ra,4(sp)
 8010954:	df000017 	ldw	fp,0(sp)
 8010958:	dec00204 	addi	sp,sp,8
 801095c:	f800283a 	ret

08010960 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8010960:	deffed04 	addi	sp,sp,-76
 8010964:	dfc01215 	stw	ra,72(sp)
 8010968:	df001115 	stw	fp,68(sp)
 801096c:	df001104 	addi	fp,sp,68
 8010970:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010974:	e0bfff17 	ldw	r2,-4(fp)
 8010978:	10000616 	blt	r2,zero,8010994 <isatty+0x34>
 801097c:	e0bfff17 	ldw	r2,-4(fp)
 8010980:	10c00324 	muli	r3,r2,12
 8010984:	008200b4 	movhi	r2,2050
 8010988:	10b97b04 	addi	r2,r2,-6676
 801098c:	1885883a 	add	r2,r3,r2
 8010990:	00000106 	br	8010998 <isatty+0x38>
 8010994:	0005883a 	mov	r2,zero
 8010998:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 801099c:	e0bfef17 	ldw	r2,-68(fp)
 80109a0:	10000e26 	beq	r2,zero,80109dc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80109a4:	e0bfef17 	ldw	r2,-68(fp)
 80109a8:	10800017 	ldw	r2,0(r2)
 80109ac:	10800817 	ldw	r2,32(r2)
 80109b0:	1000021e 	bne	r2,zero,80109bc <isatty+0x5c>
    {
      return 1;
 80109b4:	00800044 	movi	r2,1
 80109b8:	00000d06 	br	80109f0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80109bc:	e0bff004 	addi	r2,fp,-64
 80109c0:	e13fff17 	ldw	r4,-4(fp)
 80109c4:	100b883a 	mov	r5,r2
 80109c8:	80108600 	call	8010860 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80109cc:	e0bff117 	ldw	r2,-60(fp)
 80109d0:	10880020 	cmpeqi	r2,r2,8192
 80109d4:	10803fcc 	andi	r2,r2,255
 80109d8:	00000506 	br	80109f0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80109dc:	80109100 	call	8010910 <alt_get_errno>
 80109e0:	1007883a 	mov	r3,r2
 80109e4:	00801444 	movi	r2,81
 80109e8:	18800015 	stw	r2,0(r3)
    return 0;
 80109ec:	0005883a 	mov	r2,zero
  }
}
 80109f0:	e037883a 	mov	sp,fp
 80109f4:	dfc00117 	ldw	ra,4(sp)
 80109f8:	df000017 	ldw	fp,0(sp)
 80109fc:	dec00204 	addi	sp,sp,8
 8010a00:	f800283a 	ret

08010a04 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8010a04:	defffc04 	addi	sp,sp,-16
 8010a08:	df000315 	stw	fp,12(sp)
 8010a0c:	df000304 	addi	fp,sp,12
 8010a10:	e13ffd15 	stw	r4,-12(fp)
 8010a14:	e17ffe15 	stw	r5,-8(fp)
 8010a18:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8010a1c:	e0fffe17 	ldw	r3,-8(fp)
 8010a20:	e0bffd17 	ldw	r2,-12(fp)
 8010a24:	18800c26 	beq	r3,r2,8010a58 <alt_load_section+0x54>
  {
    while( to != end )
 8010a28:	00000806 	br	8010a4c <alt_load_section+0x48>
    {
      *to++ = *from++;
 8010a2c:	e0bffe17 	ldw	r2,-8(fp)
 8010a30:	10c00104 	addi	r3,r2,4
 8010a34:	e0fffe15 	stw	r3,-8(fp)
 8010a38:	e0fffd17 	ldw	r3,-12(fp)
 8010a3c:	19000104 	addi	r4,r3,4
 8010a40:	e13ffd15 	stw	r4,-12(fp)
 8010a44:	18c00017 	ldw	r3,0(r3)
 8010a48:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8010a4c:	e0fffe17 	ldw	r3,-8(fp)
 8010a50:	e0bfff17 	ldw	r2,-4(fp)
 8010a54:	18bff51e 	bne	r3,r2,8010a2c <__alt_data_end+0xfc010a2c>
    {
      *to++ = *from++;
    }
  }
}
 8010a58:	e037883a 	mov	sp,fp
 8010a5c:	df000017 	ldw	fp,0(sp)
 8010a60:	dec00104 	addi	sp,sp,4
 8010a64:	f800283a 	ret

08010a68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8010a68:	defffe04 	addi	sp,sp,-8
 8010a6c:	dfc00115 	stw	ra,4(sp)
 8010a70:	df000015 	stw	fp,0(sp)
 8010a74:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8010a78:	010200b4 	movhi	r4,2050
 8010a7c:	213e1a04 	addi	r4,r4,-1944
 8010a80:	014200b4 	movhi	r5,2050
 8010a84:	29773304 	addi	r5,r5,-9012
 8010a88:	018200b4 	movhi	r6,2050
 8010a8c:	31be1a04 	addi	r6,r6,-1944
 8010a90:	8010a040 	call	8010a04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8010a94:	01020034 	movhi	r4,2048
 8010a98:	21000804 	addi	r4,r4,32
 8010a9c:	01420034 	movhi	r5,2048
 8010aa0:	29400804 	addi	r5,r5,32
 8010aa4:	01820034 	movhi	r6,2048
 8010aa8:	31806f04 	addi	r6,r6,444
 8010aac:	8010a040 	call	8010a04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8010ab0:	01020074 	movhi	r4,2049
 8010ab4:	210bf104 	addi	r4,r4,12228
 8010ab8:	01420074 	movhi	r5,2049
 8010abc:	294bf104 	addi	r5,r5,12228
 8010ac0:	018200b4 	movhi	r6,2050
 8010ac4:	31b73304 	addi	r6,r6,-9012
 8010ac8:	8010a040 	call	8010a04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8010acc:	8011f0c0 	call	8011f0c <alt_dcache_flush_all>
  alt_icache_flush_all();
 8010ad0:	80120d40 	call	80120d4 <alt_icache_flush_all>
}
 8010ad4:	e037883a 	mov	sp,fp
 8010ad8:	dfc00117 	ldw	ra,4(sp)
 8010adc:	df000017 	ldw	fp,0(sp)
 8010ae0:	dec00204 	addi	sp,sp,8
 8010ae4:	f800283a 	ret

08010ae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010ae8:	defffe04 	addi	sp,sp,-8
 8010aec:	dfc00115 	stw	ra,4(sp)
 8010af0:	df000015 	stw	fp,0(sp)
 8010af4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010af8:	008200b4 	movhi	r2,2050
 8010afc:	10be1504 	addi	r2,r2,-1964
 8010b00:	10800017 	ldw	r2,0(r2)
 8010b04:	10000526 	beq	r2,zero,8010b1c <alt_get_errno+0x34>
 8010b08:	008200b4 	movhi	r2,2050
 8010b0c:	10be1504 	addi	r2,r2,-1964
 8010b10:	10800017 	ldw	r2,0(r2)
 8010b14:	103ee83a 	callr	r2
 8010b18:	00000206 	br	8010b24 <alt_get_errno+0x3c>
 8010b1c:	008200b4 	movhi	r2,2050
 8010b20:	10850904 	addi	r2,r2,5156
}
 8010b24:	e037883a 	mov	sp,fp
 8010b28:	dfc00117 	ldw	ra,4(sp)
 8010b2c:	df000017 	ldw	fp,0(sp)
 8010b30:	dec00204 	addi	sp,sp,8
 8010b34:	f800283a 	ret

08010b38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8010b38:	defff904 	addi	sp,sp,-28
 8010b3c:	dfc00615 	stw	ra,24(sp)
 8010b40:	df000515 	stw	fp,20(sp)
 8010b44:	df000504 	addi	fp,sp,20
 8010b48:	e13ffd15 	stw	r4,-12(fp)
 8010b4c:	e17ffe15 	stw	r5,-8(fp)
 8010b50:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8010b54:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010b58:	e0bffd17 	ldw	r2,-12(fp)
 8010b5c:	10000616 	blt	r2,zero,8010b78 <lseek+0x40>
 8010b60:	e0bffd17 	ldw	r2,-12(fp)
 8010b64:	10c00324 	muli	r3,r2,12
 8010b68:	008200b4 	movhi	r2,2050
 8010b6c:	10b97b04 	addi	r2,r2,-6676
 8010b70:	1885883a 	add	r2,r3,r2
 8010b74:	00000106 	br	8010b7c <lseek+0x44>
 8010b78:	0005883a 	mov	r2,zero
 8010b7c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8010b80:	e0bffc17 	ldw	r2,-16(fp)
 8010b84:	10001026 	beq	r2,zero,8010bc8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8010b88:	e0bffc17 	ldw	r2,-16(fp)
 8010b8c:	10800017 	ldw	r2,0(r2)
 8010b90:	10800717 	ldw	r2,28(r2)
 8010b94:	10000926 	beq	r2,zero,8010bbc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8010b98:	e0bffc17 	ldw	r2,-16(fp)
 8010b9c:	10800017 	ldw	r2,0(r2)
 8010ba0:	10800717 	ldw	r2,28(r2)
 8010ba4:	e13ffc17 	ldw	r4,-16(fp)
 8010ba8:	e17ffe17 	ldw	r5,-8(fp)
 8010bac:	e1bfff17 	ldw	r6,-4(fp)
 8010bb0:	103ee83a 	callr	r2
 8010bb4:	e0bffb15 	stw	r2,-20(fp)
 8010bb8:	00000506 	br	8010bd0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8010bbc:	00bfde84 	movi	r2,-134
 8010bc0:	e0bffb15 	stw	r2,-20(fp)
 8010bc4:	00000206 	br	8010bd0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8010bc8:	00bfebc4 	movi	r2,-81
 8010bcc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8010bd0:	e0bffb17 	ldw	r2,-20(fp)
 8010bd4:	1000070e 	bge	r2,zero,8010bf4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8010bd8:	8010ae80 	call	8010ae8 <alt_get_errno>
 8010bdc:	1007883a 	mov	r3,r2
 8010be0:	e0bffb17 	ldw	r2,-20(fp)
 8010be4:	0085c83a 	sub	r2,zero,r2
 8010be8:	18800015 	stw	r2,0(r3)
    rc = -1;
 8010bec:	00bfffc4 	movi	r2,-1
 8010bf0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8010bf4:	e0bffb17 	ldw	r2,-20(fp)
}
 8010bf8:	e037883a 	mov	sp,fp
 8010bfc:	dfc00117 	ldw	ra,4(sp)
 8010c00:	df000017 	ldw	fp,0(sp)
 8010c04:	dec00204 	addi	sp,sp,8
 8010c08:	f800283a 	ret

08010c0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8010c0c:	defffd04 	addi	sp,sp,-12
 8010c10:	dfc00215 	stw	ra,8(sp)
 8010c14:	df000115 	stw	fp,4(sp)
 8010c18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8010c1c:	0009883a 	mov	r4,zero
 8010c20:	80110d00 	call	80110d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8010c24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8010c28:	80111040 	call	8011104 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8010c2c:	010200b4 	movhi	r4,2050
 8010c30:	21372904 	addi	r4,r4,-9052
 8010c34:	014200b4 	movhi	r5,2050
 8010c38:	29772904 	addi	r5,r5,-9052
 8010c3c:	018200b4 	movhi	r6,2050
 8010c40:	31b72904 	addi	r6,r6,-9052
 8010c44:	80124940 	call	8012494 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8010c48:	801201c0 	call	801201c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8010c4c:	01020074 	movhi	r4,2049
 8010c50:	21081e04 	addi	r4,r4,8312
 8010c54:	8012c200 	call	8012c20 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8010c58:	d1271717 	ldw	r4,-25508(gp)
 8010c5c:	d0e71817 	ldw	r3,-25504(gp)
 8010c60:	d0a71917 	ldw	r2,-25500(gp)
 8010c64:	180b883a 	mov	r5,r3
 8010c68:	100d883a 	mov	r6,r2
 8010c6c:	80033480 	call	8003348 <main>
 8010c70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8010c74:	01000044 	movi	r4,1
 8010c78:	80107140 	call	8010714 <close>
  exit (result);
 8010c7c:	e13fff17 	ldw	r4,-4(fp)
 8010c80:	8012c340 	call	8012c34 <exit>

08010c84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8010c84:	defffe04 	addi	sp,sp,-8
 8010c88:	df000115 	stw	fp,4(sp)
 8010c8c:	df000104 	addi	fp,sp,4
 8010c90:	e13fff15 	stw	r4,-4(fp)
}
 8010c94:	e037883a 	mov	sp,fp
 8010c98:	df000017 	ldw	fp,0(sp)
 8010c9c:	dec00104 	addi	sp,sp,4
 8010ca0:	f800283a 	ret

08010ca4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8010ca4:	defffe04 	addi	sp,sp,-8
 8010ca8:	df000115 	stw	fp,4(sp)
 8010cac:	df000104 	addi	fp,sp,4
 8010cb0:	e13fff15 	stw	r4,-4(fp)
}
 8010cb4:	e037883a 	mov	sp,fp
 8010cb8:	df000017 	ldw	fp,0(sp)
 8010cbc:	dec00104 	addi	sp,sp,4
 8010cc0:	f800283a 	ret

08010cc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010cc4:	defffe04 	addi	sp,sp,-8
 8010cc8:	dfc00115 	stw	ra,4(sp)
 8010ccc:	df000015 	stw	fp,0(sp)
 8010cd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010cd4:	008200b4 	movhi	r2,2050
 8010cd8:	10be1504 	addi	r2,r2,-1964
 8010cdc:	10800017 	ldw	r2,0(r2)
 8010ce0:	10000526 	beq	r2,zero,8010cf8 <alt_get_errno+0x34>
 8010ce4:	008200b4 	movhi	r2,2050
 8010ce8:	10be1504 	addi	r2,r2,-1964
 8010cec:	10800017 	ldw	r2,0(r2)
 8010cf0:	103ee83a 	callr	r2
 8010cf4:	00000206 	br	8010d00 <alt_get_errno+0x3c>
 8010cf8:	008200b4 	movhi	r2,2050
 8010cfc:	10850904 	addi	r2,r2,5156
}
 8010d00:	e037883a 	mov	sp,fp
 8010d04:	dfc00117 	ldw	ra,4(sp)
 8010d08:	df000017 	ldw	fp,0(sp)
 8010d0c:	dec00204 	addi	sp,sp,8
 8010d10:	f800283a 	ret

08010d14 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8010d14:	defff904 	addi	sp,sp,-28
 8010d18:	dfc00615 	stw	ra,24(sp)
 8010d1c:	df000515 	stw	fp,20(sp)
 8010d20:	df000504 	addi	fp,sp,20
 8010d24:	e13ffd15 	stw	r4,-12(fp)
 8010d28:	e17ffe15 	stw	r5,-8(fp)
 8010d2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010d30:	e0bffd17 	ldw	r2,-12(fp)
 8010d34:	10000616 	blt	r2,zero,8010d50 <read+0x3c>
 8010d38:	e0bffd17 	ldw	r2,-12(fp)
 8010d3c:	10c00324 	muli	r3,r2,12
 8010d40:	008200b4 	movhi	r2,2050
 8010d44:	10b97b04 	addi	r2,r2,-6676
 8010d48:	1885883a 	add	r2,r3,r2
 8010d4c:	00000106 	br	8010d54 <read+0x40>
 8010d50:	0005883a 	mov	r2,zero
 8010d54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8010d58:	e0bffb17 	ldw	r2,-20(fp)
 8010d5c:	10002226 	beq	r2,zero,8010de8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8010d60:	e0bffb17 	ldw	r2,-20(fp)
 8010d64:	10800217 	ldw	r2,8(r2)
 8010d68:	108000cc 	andi	r2,r2,3
 8010d6c:	10800060 	cmpeqi	r2,r2,1
 8010d70:	1000181e 	bne	r2,zero,8010dd4 <read+0xc0>
        (fd->dev->read))
 8010d74:	e0bffb17 	ldw	r2,-20(fp)
 8010d78:	10800017 	ldw	r2,0(r2)
 8010d7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8010d80:	10001426 	beq	r2,zero,8010dd4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8010d84:	e0bffb17 	ldw	r2,-20(fp)
 8010d88:	10800017 	ldw	r2,0(r2)
 8010d8c:	10800517 	ldw	r2,20(r2)
 8010d90:	e0ffff17 	ldw	r3,-4(fp)
 8010d94:	e13ffb17 	ldw	r4,-20(fp)
 8010d98:	e17ffe17 	ldw	r5,-8(fp)
 8010d9c:	180d883a 	mov	r6,r3
 8010da0:	103ee83a 	callr	r2
 8010da4:	e0bffc15 	stw	r2,-16(fp)
 8010da8:	e0bffc17 	ldw	r2,-16(fp)
 8010dac:	1000070e 	bge	r2,zero,8010dcc <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8010db0:	8010cc40 	call	8010cc4 <alt_get_errno>
 8010db4:	1007883a 	mov	r3,r2
 8010db8:	e0bffc17 	ldw	r2,-16(fp)
 8010dbc:	0085c83a 	sub	r2,zero,r2
 8010dc0:	18800015 	stw	r2,0(r3)
          return -1;
 8010dc4:	00bfffc4 	movi	r2,-1
 8010dc8:	00000c06 	br	8010dfc <read+0xe8>
        }
        return rval;
 8010dcc:	e0bffc17 	ldw	r2,-16(fp)
 8010dd0:	00000a06 	br	8010dfc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8010dd4:	8010cc40 	call	8010cc4 <alt_get_errno>
 8010dd8:	1007883a 	mov	r3,r2
 8010ddc:	00800344 	movi	r2,13
 8010de0:	18800015 	stw	r2,0(r3)
 8010de4:	00000406 	br	8010df8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8010de8:	8010cc40 	call	8010cc4 <alt_get_errno>
 8010dec:	1007883a 	mov	r3,r2
 8010df0:	00801444 	movi	r2,81
 8010df4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8010df8:	00bfffc4 	movi	r2,-1
}
 8010dfc:	e037883a 	mov	sp,fp
 8010e00:	dfc00117 	ldw	ra,4(sp)
 8010e04:	df000017 	ldw	fp,0(sp)
 8010e08:	dec00204 	addi	sp,sp,8
 8010e0c:	f800283a 	ret

08010e10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8010e10:	defffe04 	addi	sp,sp,-8
 8010e14:	df000115 	stw	fp,4(sp)
 8010e18:	df000104 	addi	fp,sp,4
 8010e1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8010e20:	e0bfff17 	ldw	r2,-4(fp)
 8010e24:	108000d0 	cmplti	r2,r2,3
 8010e28:	10000d1e 	bne	r2,zero,8010e60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8010e2c:	008200b4 	movhi	r2,2050
 8010e30:	10b97b04 	addi	r2,r2,-6676
 8010e34:	e0ffff17 	ldw	r3,-4(fp)
 8010e38:	18c00324 	muli	r3,r3,12
 8010e3c:	10c5883a 	add	r2,r2,r3
 8010e40:	10800204 	addi	r2,r2,8
 8010e44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8010e48:	008200b4 	movhi	r2,2050
 8010e4c:	10b97b04 	addi	r2,r2,-6676
 8010e50:	e0ffff17 	ldw	r3,-4(fp)
 8010e54:	18c00324 	muli	r3,r3,12
 8010e58:	10c5883a 	add	r2,r2,r3
 8010e5c:	10000015 	stw	zero,0(r2)
  }
}
 8010e60:	e037883a 	mov	sp,fp
 8010e64:	df000017 	ldw	fp,0(sp)
 8010e68:	dec00104 	addi	sp,sp,4
 8010e6c:	f800283a 	ret

08010e70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8010e70:	defff904 	addi	sp,sp,-28
 8010e74:	df000615 	stw	fp,24(sp)
 8010e78:	df000604 	addi	fp,sp,24
 8010e7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010e80:	0005303a 	rdctl	r2,status
 8010e84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010e88:	e0fffc17 	ldw	r3,-16(fp)
 8010e8c:	00bfff84 	movi	r2,-2
 8010e90:	1884703a 	and	r2,r3,r2
 8010e94:	1001703a 	wrctl	status,r2
  
  return context;
 8010e98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8010e9c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8010ea0:	d0a02317 	ldw	r2,-32628(gp)
 8010ea4:	10c000c4 	addi	r3,r2,3
 8010ea8:	00bfff04 	movi	r2,-4
 8010eac:	1884703a 	and	r2,r3,r2
 8010eb0:	d0a02315 	stw	r2,-32628(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8010eb4:	d0e02317 	ldw	r3,-32628(gp)
 8010eb8:	e0bfff17 	ldw	r2,-4(fp)
 8010ebc:	1887883a 	add	r3,r3,r2
 8010ec0:	00830034 	movhi	r2,3072
 8010ec4:	10800004 	addi	r2,r2,0
 8010ec8:	10c0062e 	bgeu	r2,r3,8010ee4 <sbrk+0x74>
 8010ecc:	e0bffa17 	ldw	r2,-24(fp)
 8010ed0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010ed4:	e0bffd17 	ldw	r2,-12(fp)
 8010ed8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8010edc:	00bfffc4 	movi	r2,-1
 8010ee0:	00000b06 	br	8010f10 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8010ee4:	d0a02317 	ldw	r2,-32628(gp)
 8010ee8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8010eec:	d0e02317 	ldw	r3,-32628(gp)
 8010ef0:	e0bfff17 	ldw	r2,-4(fp)
 8010ef4:	1885883a 	add	r2,r3,r2
 8010ef8:	d0a02315 	stw	r2,-32628(gp)
 8010efc:	e0bffa17 	ldw	r2,-24(fp)
 8010f00:	e0bffe15 	stw	r2,-8(fp)
 8010f04:	e0bffe17 	ldw	r2,-8(fp)
 8010f08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8010f0c:	e0bffb17 	ldw	r2,-20(fp)
} 
 8010f10:	e037883a 	mov	sp,fp
 8010f14:	df000017 	ldw	fp,0(sp)
 8010f18:	dec00104 	addi	sp,sp,4
 8010f1c:	f800283a 	ret

08010f20 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8010f20:	defffd04 	addi	sp,sp,-12
 8010f24:	dfc00215 	stw	ra,8(sp)
 8010f28:	df000115 	stw	fp,4(sp)
 8010f2c:	df000104 	addi	fp,sp,4
 8010f30:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8010f34:	e13fff17 	ldw	r4,-4(fp)
 8010f38:	8011de40 	call	8011de4 <alt_busy_sleep>
}
 8010f3c:	e037883a 	mov	sp,fp
 8010f40:	dfc00117 	ldw	ra,4(sp)
 8010f44:	df000017 	ldw	fp,0(sp)
 8010f48:	dec00204 	addi	sp,sp,8
 8010f4c:	f800283a 	ret

08010f50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010f50:	defffe04 	addi	sp,sp,-8
 8010f54:	dfc00115 	stw	ra,4(sp)
 8010f58:	df000015 	stw	fp,0(sp)
 8010f5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010f60:	008200b4 	movhi	r2,2050
 8010f64:	10be1504 	addi	r2,r2,-1964
 8010f68:	10800017 	ldw	r2,0(r2)
 8010f6c:	10000526 	beq	r2,zero,8010f84 <alt_get_errno+0x34>
 8010f70:	008200b4 	movhi	r2,2050
 8010f74:	10be1504 	addi	r2,r2,-1964
 8010f78:	10800017 	ldw	r2,0(r2)
 8010f7c:	103ee83a 	callr	r2
 8010f80:	00000206 	br	8010f8c <alt_get_errno+0x3c>
 8010f84:	008200b4 	movhi	r2,2050
 8010f88:	10850904 	addi	r2,r2,5156
}
 8010f8c:	e037883a 	mov	sp,fp
 8010f90:	dfc00117 	ldw	ra,4(sp)
 8010f94:	df000017 	ldw	fp,0(sp)
 8010f98:	dec00204 	addi	sp,sp,8
 8010f9c:	f800283a 	ret

08010fa0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8010fa0:	defff904 	addi	sp,sp,-28
 8010fa4:	dfc00615 	stw	ra,24(sp)
 8010fa8:	df000515 	stw	fp,20(sp)
 8010fac:	df000504 	addi	fp,sp,20
 8010fb0:	e13ffd15 	stw	r4,-12(fp)
 8010fb4:	e17ffe15 	stw	r5,-8(fp)
 8010fb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010fbc:	e0bffd17 	ldw	r2,-12(fp)
 8010fc0:	10000616 	blt	r2,zero,8010fdc <write+0x3c>
 8010fc4:	e0bffd17 	ldw	r2,-12(fp)
 8010fc8:	10c00324 	muli	r3,r2,12
 8010fcc:	008200b4 	movhi	r2,2050
 8010fd0:	10b97b04 	addi	r2,r2,-6676
 8010fd4:	1885883a 	add	r2,r3,r2
 8010fd8:	00000106 	br	8010fe0 <write+0x40>
 8010fdc:	0005883a 	mov	r2,zero
 8010fe0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8010fe4:	e0bffb17 	ldw	r2,-20(fp)
 8010fe8:	10002126 	beq	r2,zero,8011070 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8010fec:	e0bffb17 	ldw	r2,-20(fp)
 8010ff0:	10800217 	ldw	r2,8(r2)
 8010ff4:	108000cc 	andi	r2,r2,3
 8010ff8:	10001826 	beq	r2,zero,801105c <write+0xbc>
 8010ffc:	e0bffb17 	ldw	r2,-20(fp)
 8011000:	10800017 	ldw	r2,0(r2)
 8011004:	10800617 	ldw	r2,24(r2)
 8011008:	10001426 	beq	r2,zero,801105c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 801100c:	e0bffb17 	ldw	r2,-20(fp)
 8011010:	10800017 	ldw	r2,0(r2)
 8011014:	10800617 	ldw	r2,24(r2)
 8011018:	e0ffff17 	ldw	r3,-4(fp)
 801101c:	e13ffb17 	ldw	r4,-20(fp)
 8011020:	e17ffe17 	ldw	r5,-8(fp)
 8011024:	180d883a 	mov	r6,r3
 8011028:	103ee83a 	callr	r2
 801102c:	e0bffc15 	stw	r2,-16(fp)
 8011030:	e0bffc17 	ldw	r2,-16(fp)
 8011034:	1000070e 	bge	r2,zero,8011054 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8011038:	8010f500 	call	8010f50 <alt_get_errno>
 801103c:	1007883a 	mov	r3,r2
 8011040:	e0bffc17 	ldw	r2,-16(fp)
 8011044:	0085c83a 	sub	r2,zero,r2
 8011048:	18800015 	stw	r2,0(r3)
        return -1;
 801104c:	00bfffc4 	movi	r2,-1
 8011050:	00000c06 	br	8011084 <write+0xe4>
      }
      return rval;
 8011054:	e0bffc17 	ldw	r2,-16(fp)
 8011058:	00000a06 	br	8011084 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 801105c:	8010f500 	call	8010f50 <alt_get_errno>
 8011060:	1007883a 	mov	r3,r2
 8011064:	00800344 	movi	r2,13
 8011068:	18800015 	stw	r2,0(r3)
 801106c:	00000406 	br	8011080 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8011070:	8010f500 	call	8010f50 <alt_get_errno>
 8011074:	1007883a 	mov	r3,r2
 8011078:	00801444 	movi	r2,81
 801107c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8011080:	00bfffc4 	movi	r2,-1
}
 8011084:	e037883a 	mov	sp,fp
 8011088:	dfc00117 	ldw	ra,4(sp)
 801108c:	df000017 	ldw	fp,0(sp)
 8011090:	dec00204 	addi	sp,sp,8
 8011094:	f800283a 	ret

08011098 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8011098:	defffd04 	addi	sp,sp,-12
 801109c:	dfc00215 	stw	ra,8(sp)
 80110a0:	df000115 	stw	fp,4(sp)
 80110a4:	df000104 	addi	fp,sp,4
 80110a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80110ac:	e13fff17 	ldw	r4,-4(fp)
 80110b0:	014200b4 	movhi	r5,2050
 80110b4:	297e1204 	addi	r5,r5,-1976
 80110b8:	8011f780 	call	8011f78 <alt_dev_llist_insert>
}
 80110bc:	e037883a 	mov	sp,fp
 80110c0:	dfc00117 	ldw	ra,4(sp)
 80110c4:	df000017 	ldw	fp,0(sp)
 80110c8:	dec00204 	addi	sp,sp,8
 80110cc:	f800283a 	ret

080110d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80110d0:	defffd04 	addi	sp,sp,-12
 80110d4:	dfc00215 	stw	ra,8(sp)
 80110d8:	df000115 	stw	fp,4(sp)
 80110dc:	df000104 	addi	fp,sp,4
 80110e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 80110e4:	801291c0 	call	801291c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80110e8:	00800044 	movi	r2,1
 80110ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80110f0:	e037883a 	mov	sp,fp
 80110f4:	dfc00117 	ldw	ra,4(sp)
 80110f8:	df000017 	ldw	fp,0(sp)
 80110fc:	dec00204 	addi	sp,sp,8
 8011100:	f800283a 	ret

08011104 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8011104:	defffe04 	addi	sp,sp,-8
 8011108:	dfc00115 	stw	ra,4(sp)
 801110c:	df000015 	stw	fp,0(sp)
 8011110:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8011114:	01082004 	movi	r4,8320
 8011118:	000b883a 	mov	r5,zero
 801111c:	01800104 	movi	r6,4
 8011120:	01c0fa04 	movi	r7,1000
 8011124:	8011c1c0 	call	8011c1c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8011128:	010200b4 	movhi	r4,2050
 801112c:	2139e504 	addi	r4,r4,-6252
 8011130:	000b883a 	mov	r5,zero
 8011134:	01800144 	movi	r6,5
 8011138:	80112c00 	call	80112c0 <altera_avalon_jtag_uart_init>
 801113c:	010200b4 	movhi	r4,2050
 8011140:	2139db04 	addi	r4,r4,-6292
 8011144:	80110980 	call	8011098 <alt_dev_reg>
}
 8011148:	e037883a 	mov	sp,fp
 801114c:	dfc00117 	ldw	ra,4(sp)
 8011150:	df000017 	ldw	fp,0(sp)
 8011154:	dec00204 	addi	sp,sp,8
 8011158:	f800283a 	ret

0801115c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801115c:	defffa04 	addi	sp,sp,-24
 8011160:	dfc00515 	stw	ra,20(sp)
 8011164:	df000415 	stw	fp,16(sp)
 8011168:	df000404 	addi	fp,sp,16
 801116c:	e13ffd15 	stw	r4,-12(fp)
 8011170:	e17ffe15 	stw	r5,-8(fp)
 8011174:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8011178:	e0bffd17 	ldw	r2,-12(fp)
 801117c:	10800017 	ldw	r2,0(r2)
 8011180:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8011184:	e0bffc17 	ldw	r2,-16(fp)
 8011188:	10c00a04 	addi	r3,r2,40
 801118c:	e0bffd17 	ldw	r2,-12(fp)
 8011190:	10800217 	ldw	r2,8(r2)
 8011194:	1809883a 	mov	r4,r3
 8011198:	e17ffe17 	ldw	r5,-8(fp)
 801119c:	e1bfff17 	ldw	r6,-4(fp)
 80111a0:	100f883a 	mov	r7,r2
 80111a4:	80117840 	call	8011784 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80111a8:	e037883a 	mov	sp,fp
 80111ac:	dfc00117 	ldw	ra,4(sp)
 80111b0:	df000017 	ldw	fp,0(sp)
 80111b4:	dec00204 	addi	sp,sp,8
 80111b8:	f800283a 	ret

080111bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80111bc:	defffa04 	addi	sp,sp,-24
 80111c0:	dfc00515 	stw	ra,20(sp)
 80111c4:	df000415 	stw	fp,16(sp)
 80111c8:	df000404 	addi	fp,sp,16
 80111cc:	e13ffd15 	stw	r4,-12(fp)
 80111d0:	e17ffe15 	stw	r5,-8(fp)
 80111d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80111d8:	e0bffd17 	ldw	r2,-12(fp)
 80111dc:	10800017 	ldw	r2,0(r2)
 80111e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80111e4:	e0bffc17 	ldw	r2,-16(fp)
 80111e8:	10c00a04 	addi	r3,r2,40
 80111ec:	e0bffd17 	ldw	r2,-12(fp)
 80111f0:	10800217 	ldw	r2,8(r2)
 80111f4:	1809883a 	mov	r4,r3
 80111f8:	e17ffe17 	ldw	r5,-8(fp)
 80111fc:	e1bfff17 	ldw	r6,-4(fp)
 8011200:	100f883a 	mov	r7,r2
 8011204:	80119900 	call	8011990 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8011208:	e037883a 	mov	sp,fp
 801120c:	dfc00117 	ldw	ra,4(sp)
 8011210:	df000017 	ldw	fp,0(sp)
 8011214:	dec00204 	addi	sp,sp,8
 8011218:	f800283a 	ret

0801121c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801121c:	defffc04 	addi	sp,sp,-16
 8011220:	dfc00315 	stw	ra,12(sp)
 8011224:	df000215 	stw	fp,8(sp)
 8011228:	df000204 	addi	fp,sp,8
 801122c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8011230:	e0bfff17 	ldw	r2,-4(fp)
 8011234:	10800017 	ldw	r2,0(r2)
 8011238:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801123c:	e0bffe17 	ldw	r2,-8(fp)
 8011240:	10c00a04 	addi	r3,r2,40
 8011244:	e0bfff17 	ldw	r2,-4(fp)
 8011248:	10800217 	ldw	r2,8(r2)
 801124c:	1809883a 	mov	r4,r3
 8011250:	100b883a 	mov	r5,r2
 8011254:	80116300 	call	8011630 <altera_avalon_jtag_uart_close>
}
 8011258:	e037883a 	mov	sp,fp
 801125c:	dfc00117 	ldw	ra,4(sp)
 8011260:	df000017 	ldw	fp,0(sp)
 8011264:	dec00204 	addi	sp,sp,8
 8011268:	f800283a 	ret

0801126c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 801126c:	defffa04 	addi	sp,sp,-24
 8011270:	dfc00515 	stw	ra,20(sp)
 8011274:	df000415 	stw	fp,16(sp)
 8011278:	df000404 	addi	fp,sp,16
 801127c:	e13ffd15 	stw	r4,-12(fp)
 8011280:	e17ffe15 	stw	r5,-8(fp)
 8011284:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8011288:	e0bffd17 	ldw	r2,-12(fp)
 801128c:	10800017 	ldw	r2,0(r2)
 8011290:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8011294:	e0bffc17 	ldw	r2,-16(fp)
 8011298:	10800a04 	addi	r2,r2,40
 801129c:	1009883a 	mov	r4,r2
 80112a0:	e17ffe17 	ldw	r5,-8(fp)
 80112a4:	e1bfff17 	ldw	r6,-4(fp)
 80112a8:	80116980 	call	8011698 <altera_avalon_jtag_uart_ioctl>
}
 80112ac:	e037883a 	mov	sp,fp
 80112b0:	dfc00117 	ldw	ra,4(sp)
 80112b4:	df000017 	ldw	fp,0(sp)
 80112b8:	dec00204 	addi	sp,sp,8
 80112bc:	f800283a 	ret

080112c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80112c0:	defffa04 	addi	sp,sp,-24
 80112c4:	dfc00515 	stw	ra,20(sp)
 80112c8:	df000415 	stw	fp,16(sp)
 80112cc:	df000404 	addi	fp,sp,16
 80112d0:	e13ffd15 	stw	r4,-12(fp)
 80112d4:	e17ffe15 	stw	r5,-8(fp)
 80112d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80112dc:	e0bffd17 	ldw	r2,-12(fp)
 80112e0:	00c00044 	movi	r3,1
 80112e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80112e8:	e0bffd17 	ldw	r2,-12(fp)
 80112ec:	10800017 	ldw	r2,0(r2)
 80112f0:	10800104 	addi	r2,r2,4
 80112f4:	1007883a 	mov	r3,r2
 80112f8:	e0bffd17 	ldw	r2,-12(fp)
 80112fc:	10800817 	ldw	r2,32(r2)
 8011300:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8011304:	e0fffe17 	ldw	r3,-8(fp)
 8011308:	e0bfff17 	ldw	r2,-4(fp)
 801130c:	d8000015 	stw	zero,0(sp)
 8011310:	1809883a 	mov	r4,r3
 8011314:	100b883a 	mov	r5,r2
 8011318:	01820074 	movhi	r6,2049
 801131c:	3184e104 	addi	r6,r6,4996
 8011320:	e1fffd17 	ldw	r7,-12(fp)
 8011324:	80121040 	call	8012104 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8011328:	e0bffd17 	ldw	r2,-12(fp)
 801132c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8011330:	e0bffd17 	ldw	r2,-12(fp)
 8011334:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8011338:	008200b4 	movhi	r2,2050
 801133c:	10850e04 	addi	r2,r2,5176
 8011340:	10800017 	ldw	r2,0(r2)
 8011344:	1809883a 	mov	r4,r3
 8011348:	100b883a 	mov	r5,r2
 801134c:	01820074 	movhi	r6,2049
 8011350:	31856204 	addi	r6,r6,5512
 8011354:	e1fffd17 	ldw	r7,-12(fp)
 8011358:	8011ca40 	call	8011ca4 <alt_alarm_start>
 801135c:	1000040e 	bge	r2,zero,8011370 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8011360:	e0fffd17 	ldw	r3,-12(fp)
 8011364:	00a00034 	movhi	r2,32768
 8011368:	10bfffc4 	addi	r2,r2,-1
 801136c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8011370:	e037883a 	mov	sp,fp
 8011374:	dfc00117 	ldw	ra,4(sp)
 8011378:	df000017 	ldw	fp,0(sp)
 801137c:	dec00204 	addi	sp,sp,8
 8011380:	f800283a 	ret

08011384 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8011384:	defff804 	addi	sp,sp,-32
 8011388:	df000715 	stw	fp,28(sp)
 801138c:	df000704 	addi	fp,sp,28
 8011390:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8011394:	e0bfff17 	ldw	r2,-4(fp)
 8011398:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801139c:	e0bffb17 	ldw	r2,-20(fp)
 80113a0:	10800017 	ldw	r2,0(r2)
 80113a4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80113a8:	e0bffc17 	ldw	r2,-16(fp)
 80113ac:	10800104 	addi	r2,r2,4
 80113b0:	10800037 	ldwio	r2,0(r2)
 80113b4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80113b8:	e0bffd17 	ldw	r2,-12(fp)
 80113bc:	1080c00c 	andi	r2,r2,768
 80113c0:	1000011e 	bne	r2,zero,80113c8 <altera_avalon_jtag_uart_irq+0x44>
      break;
 80113c4:	00006c06 	br	8011578 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80113c8:	e0bffd17 	ldw	r2,-12(fp)
 80113cc:	1080400c 	andi	r2,r2,256
 80113d0:	10003426 	beq	r2,zero,80114a4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80113d4:	00800074 	movhi	r2,1
 80113d8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80113dc:	e0bffb17 	ldw	r2,-20(fp)
 80113e0:	10800a17 	ldw	r2,40(r2)
 80113e4:	10800044 	addi	r2,r2,1
 80113e8:	1081ffcc 	andi	r2,r2,2047
 80113ec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80113f0:	e0bffb17 	ldw	r2,-20(fp)
 80113f4:	10c00b17 	ldw	r3,44(r2)
 80113f8:	e0bffe17 	ldw	r2,-8(fp)
 80113fc:	1880011e 	bne	r3,r2,8011404 <altera_avalon_jtag_uart_irq+0x80>
          break;
 8011400:	00001606 	br	801145c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8011404:	e0bffc17 	ldw	r2,-16(fp)
 8011408:	10800037 	ldwio	r2,0(r2)
 801140c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8011410:	e0bff917 	ldw	r2,-28(fp)
 8011414:	10a0000c 	andi	r2,r2,32768
 8011418:	1000011e 	bne	r2,zero,8011420 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 801141c:	00000f06 	br	801145c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8011420:	e0bffb17 	ldw	r2,-20(fp)
 8011424:	10800a17 	ldw	r2,40(r2)
 8011428:	e0fff917 	ldw	r3,-28(fp)
 801142c:	1809883a 	mov	r4,r3
 8011430:	e0fffb17 	ldw	r3,-20(fp)
 8011434:	1885883a 	add	r2,r3,r2
 8011438:	10800e04 	addi	r2,r2,56
 801143c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8011440:	e0bffb17 	ldw	r2,-20(fp)
 8011444:	10800a17 	ldw	r2,40(r2)
 8011448:	10800044 	addi	r2,r2,1
 801144c:	10c1ffcc 	andi	r3,r2,2047
 8011450:	e0bffb17 	ldw	r2,-20(fp)
 8011454:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8011458:	003fe006 	br	80113dc <__alt_data_end+0xfc0113dc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801145c:	e0bff917 	ldw	r2,-28(fp)
 8011460:	10bfffec 	andhi	r2,r2,65535
 8011464:	10000f26 	beq	r2,zero,80114a4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8011468:	e0bffb17 	ldw	r2,-20(fp)
 801146c:	10c00817 	ldw	r3,32(r2)
 8011470:	00bfff84 	movi	r2,-2
 8011474:	1886703a 	and	r3,r3,r2
 8011478:	e0bffb17 	ldw	r2,-20(fp)
 801147c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8011480:	e0bffc17 	ldw	r2,-16(fp)
 8011484:	10800104 	addi	r2,r2,4
 8011488:	1007883a 	mov	r3,r2
 801148c:	e0bffb17 	ldw	r2,-20(fp)
 8011490:	10800817 	ldw	r2,32(r2)
 8011494:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8011498:	e0bffc17 	ldw	r2,-16(fp)
 801149c:	10800104 	addi	r2,r2,4
 80114a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80114a4:	e0bffd17 	ldw	r2,-12(fp)
 80114a8:	1080800c 	andi	r2,r2,512
 80114ac:	10003126 	beq	r2,zero,8011574 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80114b0:	e0bffd17 	ldw	r2,-12(fp)
 80114b4:	1004d43a 	srli	r2,r2,16
 80114b8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80114bc:	00001406 	br	8011510 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80114c0:	e0bffc17 	ldw	r2,-16(fp)
 80114c4:	e0fffb17 	ldw	r3,-20(fp)
 80114c8:	18c00d17 	ldw	r3,52(r3)
 80114cc:	e13ffb17 	ldw	r4,-20(fp)
 80114d0:	20c7883a 	add	r3,r4,r3
 80114d4:	18c20e04 	addi	r3,r3,2104
 80114d8:	18c00003 	ldbu	r3,0(r3)
 80114dc:	18c03fcc 	andi	r3,r3,255
 80114e0:	18c0201c 	xori	r3,r3,128
 80114e4:	18ffe004 	addi	r3,r3,-128
 80114e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80114ec:	e0bffb17 	ldw	r2,-20(fp)
 80114f0:	10800d17 	ldw	r2,52(r2)
 80114f4:	10800044 	addi	r2,r2,1
 80114f8:	10c1ffcc 	andi	r3,r2,2047
 80114fc:	e0bffb17 	ldw	r2,-20(fp)
 8011500:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8011504:	e0bffa17 	ldw	r2,-24(fp)
 8011508:	10bfffc4 	addi	r2,r2,-1
 801150c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8011510:	e0bffa17 	ldw	r2,-24(fp)
 8011514:	10000526 	beq	r2,zero,801152c <altera_avalon_jtag_uart_irq+0x1a8>
 8011518:	e0bffb17 	ldw	r2,-20(fp)
 801151c:	10c00d17 	ldw	r3,52(r2)
 8011520:	e0bffb17 	ldw	r2,-20(fp)
 8011524:	10800c17 	ldw	r2,48(r2)
 8011528:	18bfe51e 	bne	r3,r2,80114c0 <__alt_data_end+0xfc0114c0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 801152c:	e0bffa17 	ldw	r2,-24(fp)
 8011530:	10001026 	beq	r2,zero,8011574 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8011534:	e0bffb17 	ldw	r2,-20(fp)
 8011538:	10c00817 	ldw	r3,32(r2)
 801153c:	00bfff44 	movi	r2,-3
 8011540:	1886703a 	and	r3,r3,r2
 8011544:	e0bffb17 	ldw	r2,-20(fp)
 8011548:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801154c:	e0bffb17 	ldw	r2,-20(fp)
 8011550:	10800017 	ldw	r2,0(r2)
 8011554:	10800104 	addi	r2,r2,4
 8011558:	1007883a 	mov	r3,r2
 801155c:	e0bffb17 	ldw	r2,-20(fp)
 8011560:	10800817 	ldw	r2,32(r2)
 8011564:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8011568:	e0bffc17 	ldw	r2,-16(fp)
 801156c:	10800104 	addi	r2,r2,4
 8011570:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8011574:	003f8c06 	br	80113a8 <__alt_data_end+0xfc0113a8>
}
 8011578:	e037883a 	mov	sp,fp
 801157c:	df000017 	ldw	fp,0(sp)
 8011580:	dec00104 	addi	sp,sp,4
 8011584:	f800283a 	ret

08011588 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8011588:	defff804 	addi	sp,sp,-32
 801158c:	df000715 	stw	fp,28(sp)
 8011590:	df000704 	addi	fp,sp,28
 8011594:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8011598:	e0bffb17 	ldw	r2,-20(fp)
 801159c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80115a0:	e0bff917 	ldw	r2,-28(fp)
 80115a4:	10800017 	ldw	r2,0(r2)
 80115a8:	10800104 	addi	r2,r2,4
 80115ac:	10800037 	ldwio	r2,0(r2)
 80115b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80115b4:	e0bffa17 	ldw	r2,-24(fp)
 80115b8:	1081000c 	andi	r2,r2,1024
 80115bc:	10000b26 	beq	r2,zero,80115ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80115c0:	e0bff917 	ldw	r2,-28(fp)
 80115c4:	10800017 	ldw	r2,0(r2)
 80115c8:	10800104 	addi	r2,r2,4
 80115cc:	1007883a 	mov	r3,r2
 80115d0:	e0bff917 	ldw	r2,-28(fp)
 80115d4:	10800817 	ldw	r2,32(r2)
 80115d8:	10810014 	ori	r2,r2,1024
 80115dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80115e0:	e0bff917 	ldw	r2,-28(fp)
 80115e4:	10000915 	stw	zero,36(r2)
 80115e8:	00000a06 	br	8011614 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80115ec:	e0bff917 	ldw	r2,-28(fp)
 80115f0:	10c00917 	ldw	r3,36(r2)
 80115f4:	00a00034 	movhi	r2,32768
 80115f8:	10bfff04 	addi	r2,r2,-4
 80115fc:	10c00536 	bltu	r2,r3,8011614 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8011600:	e0bff917 	ldw	r2,-28(fp)
 8011604:	10800917 	ldw	r2,36(r2)
 8011608:	10c00044 	addi	r3,r2,1
 801160c:	e0bff917 	ldw	r2,-28(fp)
 8011610:	10c00915 	stw	r3,36(r2)
 8011614:	008200b4 	movhi	r2,2050
 8011618:	10850e04 	addi	r2,r2,5176
 801161c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8011620:	e037883a 	mov	sp,fp
 8011624:	df000017 	ldw	fp,0(sp)
 8011628:	dec00104 	addi	sp,sp,4
 801162c:	f800283a 	ret

08011630 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8011630:	defffd04 	addi	sp,sp,-12
 8011634:	df000215 	stw	fp,8(sp)
 8011638:	df000204 	addi	fp,sp,8
 801163c:	e13ffe15 	stw	r4,-8(fp)
 8011640:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8011644:	00000506 	br	801165c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8011648:	e0bfff17 	ldw	r2,-4(fp)
 801164c:	1090000c 	andi	r2,r2,16384
 8011650:	10000226 	beq	r2,zero,801165c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8011654:	00bffd44 	movi	r2,-11
 8011658:	00000b06 	br	8011688 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801165c:	e0bffe17 	ldw	r2,-8(fp)
 8011660:	10c00d17 	ldw	r3,52(r2)
 8011664:	e0bffe17 	ldw	r2,-8(fp)
 8011668:	10800c17 	ldw	r2,48(r2)
 801166c:	18800526 	beq	r3,r2,8011684 <altera_avalon_jtag_uart_close+0x54>
 8011670:	e0bffe17 	ldw	r2,-8(fp)
 8011674:	10c00917 	ldw	r3,36(r2)
 8011678:	e0bffe17 	ldw	r2,-8(fp)
 801167c:	10800117 	ldw	r2,4(r2)
 8011680:	18bff136 	bltu	r3,r2,8011648 <__alt_data_end+0xfc011648>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8011684:	0005883a 	mov	r2,zero
}
 8011688:	e037883a 	mov	sp,fp
 801168c:	df000017 	ldw	fp,0(sp)
 8011690:	dec00104 	addi	sp,sp,4
 8011694:	f800283a 	ret

08011698 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8011698:	defffa04 	addi	sp,sp,-24
 801169c:	df000515 	stw	fp,20(sp)
 80116a0:	df000504 	addi	fp,sp,20
 80116a4:	e13ffd15 	stw	r4,-12(fp)
 80116a8:	e17ffe15 	stw	r5,-8(fp)
 80116ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80116b0:	00bff9c4 	movi	r2,-25
 80116b4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80116b8:	e0bffe17 	ldw	r2,-8(fp)
 80116bc:	10da8060 	cmpeqi	r3,r2,27137
 80116c0:	1800031e 	bne	r3,zero,80116d0 <altera_avalon_jtag_uart_ioctl+0x38>
 80116c4:	109a80a0 	cmpeqi	r2,r2,27138
 80116c8:	1000191e 	bne	r2,zero,8011730 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 80116cc:	00002806 	br	8011770 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80116d0:	e0bffd17 	ldw	r2,-12(fp)
 80116d4:	10c00117 	ldw	r3,4(r2)
 80116d8:	00a00034 	movhi	r2,32768
 80116dc:	10bfffc4 	addi	r2,r2,-1
 80116e0:	18801226 	beq	r3,r2,801172c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 80116e4:	e0bfff17 	ldw	r2,-4(fp)
 80116e8:	10800017 	ldw	r2,0(r2)
 80116ec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80116f0:	e0bffc17 	ldw	r2,-16(fp)
 80116f4:	10800090 	cmplti	r2,r2,2
 80116f8:	1000061e 	bne	r2,zero,8011714 <altera_avalon_jtag_uart_ioctl+0x7c>
 80116fc:	e0fffc17 	ldw	r3,-16(fp)
 8011700:	00a00034 	movhi	r2,32768
 8011704:	10bfffc4 	addi	r2,r2,-1
 8011708:	18800226 	beq	r3,r2,8011714 <altera_avalon_jtag_uart_ioctl+0x7c>
 801170c:	e0bffc17 	ldw	r2,-16(fp)
 8011710:	00000206 	br	801171c <altera_avalon_jtag_uart_ioctl+0x84>
 8011714:	00a00034 	movhi	r2,32768
 8011718:	10bfff84 	addi	r2,r2,-2
 801171c:	e0fffd17 	ldw	r3,-12(fp)
 8011720:	18800115 	stw	r2,4(r3)
      rc = 0;
 8011724:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8011728:	00001106 	br	8011770 <altera_avalon_jtag_uart_ioctl+0xd8>
 801172c:	00001006 	br	8011770 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8011730:	e0bffd17 	ldw	r2,-12(fp)
 8011734:	10c00117 	ldw	r3,4(r2)
 8011738:	00a00034 	movhi	r2,32768
 801173c:	10bfffc4 	addi	r2,r2,-1
 8011740:	18800a26 	beq	r3,r2,801176c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8011744:	e0bffd17 	ldw	r2,-12(fp)
 8011748:	10c00917 	ldw	r3,36(r2)
 801174c:	e0bffd17 	ldw	r2,-12(fp)
 8011750:	10800117 	ldw	r2,4(r2)
 8011754:	1885803a 	cmpltu	r2,r3,r2
 8011758:	10c03fcc 	andi	r3,r2,255
 801175c:	e0bfff17 	ldw	r2,-4(fp)
 8011760:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8011764:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8011768:	00000006 	br	801176c <altera_avalon_jtag_uart_ioctl+0xd4>
 801176c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8011770:	e0bffb17 	ldw	r2,-20(fp)
}
 8011774:	e037883a 	mov	sp,fp
 8011778:	df000017 	ldw	fp,0(sp)
 801177c:	dec00104 	addi	sp,sp,4
 8011780:	f800283a 	ret

08011784 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8011784:	defff304 	addi	sp,sp,-52
 8011788:	dfc00c15 	stw	ra,48(sp)
 801178c:	df000b15 	stw	fp,44(sp)
 8011790:	df000b04 	addi	fp,sp,44
 8011794:	e13ffc15 	stw	r4,-16(fp)
 8011798:	e17ffd15 	stw	r5,-12(fp)
 801179c:	e1bffe15 	stw	r6,-8(fp)
 80117a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80117a4:	e0bffd17 	ldw	r2,-12(fp)
 80117a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80117ac:	00004906 	br	80118d4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80117b0:	e0bffc17 	ldw	r2,-16(fp)
 80117b4:	10800a17 	ldw	r2,40(r2)
 80117b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80117bc:	e0bffc17 	ldw	r2,-16(fp)
 80117c0:	10800b17 	ldw	r2,44(r2)
 80117c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80117c8:	e0fff717 	ldw	r3,-36(fp)
 80117cc:	e0bff817 	ldw	r2,-32(fp)
 80117d0:	18800536 	bltu	r3,r2,80117e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80117d4:	e0fff717 	ldw	r3,-36(fp)
 80117d8:	e0bff817 	ldw	r2,-32(fp)
 80117dc:	1885c83a 	sub	r2,r3,r2
 80117e0:	e0bff615 	stw	r2,-40(fp)
 80117e4:	00000406 	br	80117f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80117e8:	00c20004 	movi	r3,2048
 80117ec:	e0bff817 	ldw	r2,-32(fp)
 80117f0:	1885c83a 	sub	r2,r3,r2
 80117f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80117f8:	e0bff617 	ldw	r2,-40(fp)
 80117fc:	1000011e 	bne	r2,zero,8011804 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8011800:	00001d06 	br	8011878 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8011804:	e0fffe17 	ldw	r3,-8(fp)
 8011808:	e0bff617 	ldw	r2,-40(fp)
 801180c:	1880022e 	bgeu	r3,r2,8011818 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8011810:	e0bffe17 	ldw	r2,-8(fp)
 8011814:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8011818:	e0bff817 	ldw	r2,-32(fp)
 801181c:	10800e04 	addi	r2,r2,56
 8011820:	e0fffc17 	ldw	r3,-16(fp)
 8011824:	1885883a 	add	r2,r3,r2
 8011828:	e13ff517 	ldw	r4,-44(fp)
 801182c:	100b883a 	mov	r5,r2
 8011830:	e1bff617 	ldw	r6,-40(fp)
 8011834:	8003f580 	call	8003f58 <memcpy>
      ptr   += n;
 8011838:	e0fff517 	ldw	r3,-44(fp)
 801183c:	e0bff617 	ldw	r2,-40(fp)
 8011840:	1885883a 	add	r2,r3,r2
 8011844:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8011848:	e0fffe17 	ldw	r3,-8(fp)
 801184c:	e0bff617 	ldw	r2,-40(fp)
 8011850:	1885c83a 	sub	r2,r3,r2
 8011854:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8011858:	e0fff817 	ldw	r3,-32(fp)
 801185c:	e0bff617 	ldw	r2,-40(fp)
 8011860:	1885883a 	add	r2,r3,r2
 8011864:	10c1ffcc 	andi	r3,r2,2047
 8011868:	e0bffc17 	ldw	r2,-16(fp)
 801186c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8011870:	e0bffe17 	ldw	r2,-8(fp)
 8011874:	00bfce16 	blt	zero,r2,80117b0 <__alt_data_end+0xfc0117b0>

    /* If we read any data then return it */
    if (ptr != buffer)
 8011878:	e0fff517 	ldw	r3,-44(fp)
 801187c:	e0bffd17 	ldw	r2,-12(fp)
 8011880:	18800126 	beq	r3,r2,8011888 <altera_avalon_jtag_uart_read+0x104>
      break;
 8011884:	00001506 	br	80118dc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8011888:	e0bfff17 	ldw	r2,-4(fp)
 801188c:	1090000c 	andi	r2,r2,16384
 8011890:	10000126 	beq	r2,zero,8011898 <altera_avalon_jtag_uart_read+0x114>
      break;
 8011894:	00001106 	br	80118dc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8011898:	0001883a 	nop
 801189c:	e0bffc17 	ldw	r2,-16(fp)
 80118a0:	10c00a17 	ldw	r3,40(r2)
 80118a4:	e0bff717 	ldw	r2,-36(fp)
 80118a8:	1880051e 	bne	r3,r2,80118c0 <altera_avalon_jtag_uart_read+0x13c>
 80118ac:	e0bffc17 	ldw	r2,-16(fp)
 80118b0:	10c00917 	ldw	r3,36(r2)
 80118b4:	e0bffc17 	ldw	r2,-16(fp)
 80118b8:	10800117 	ldw	r2,4(r2)
 80118bc:	18bff736 	bltu	r3,r2,801189c <__alt_data_end+0xfc01189c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80118c0:	e0bffc17 	ldw	r2,-16(fp)
 80118c4:	10c00a17 	ldw	r3,40(r2)
 80118c8:	e0bff717 	ldw	r2,-36(fp)
 80118cc:	1880011e 	bne	r3,r2,80118d4 <altera_avalon_jtag_uart_read+0x150>
      break;
 80118d0:	00000206 	br	80118dc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80118d4:	e0bffe17 	ldw	r2,-8(fp)
 80118d8:	00bfb516 	blt	zero,r2,80117b0 <__alt_data_end+0xfc0117b0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80118dc:	e0fff517 	ldw	r3,-44(fp)
 80118e0:	e0bffd17 	ldw	r2,-12(fp)
 80118e4:	18801826 	beq	r3,r2,8011948 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80118e8:	0005303a 	rdctl	r2,status
 80118ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80118f0:	e0fffa17 	ldw	r3,-24(fp)
 80118f4:	00bfff84 	movi	r2,-2
 80118f8:	1884703a 	and	r2,r3,r2
 80118fc:	1001703a 	wrctl	status,r2
  
  return context;
 8011900:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8011904:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8011908:	e0bffc17 	ldw	r2,-16(fp)
 801190c:	10800817 	ldw	r2,32(r2)
 8011910:	10c00054 	ori	r3,r2,1
 8011914:	e0bffc17 	ldw	r2,-16(fp)
 8011918:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801191c:	e0bffc17 	ldw	r2,-16(fp)
 8011920:	10800017 	ldw	r2,0(r2)
 8011924:	10800104 	addi	r2,r2,4
 8011928:	1007883a 	mov	r3,r2
 801192c:	e0bffc17 	ldw	r2,-16(fp)
 8011930:	10800817 	ldw	r2,32(r2)
 8011934:	18800035 	stwio	r2,0(r3)
 8011938:	e0bff917 	ldw	r2,-28(fp)
 801193c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011940:	e0bffb17 	ldw	r2,-20(fp)
 8011944:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8011948:	e0fff517 	ldw	r3,-44(fp)
 801194c:	e0bffd17 	ldw	r2,-12(fp)
 8011950:	18800426 	beq	r3,r2,8011964 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8011954:	e0fff517 	ldw	r3,-44(fp)
 8011958:	e0bffd17 	ldw	r2,-12(fp)
 801195c:	1885c83a 	sub	r2,r3,r2
 8011960:	00000606 	br	801197c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 8011964:	e0bfff17 	ldw	r2,-4(fp)
 8011968:	1090000c 	andi	r2,r2,16384
 801196c:	10000226 	beq	r2,zero,8011978 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8011970:	00bffd44 	movi	r2,-11
 8011974:	00000106 	br	801197c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8011978:	00bffec4 	movi	r2,-5
}
 801197c:	e037883a 	mov	sp,fp
 8011980:	dfc00117 	ldw	ra,4(sp)
 8011984:	df000017 	ldw	fp,0(sp)
 8011988:	dec00204 	addi	sp,sp,8
 801198c:	f800283a 	ret

08011990 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8011990:	defff304 	addi	sp,sp,-52
 8011994:	dfc00c15 	stw	ra,48(sp)
 8011998:	df000b15 	stw	fp,44(sp)
 801199c:	df000b04 	addi	fp,sp,44
 80119a0:	e13ffc15 	stw	r4,-16(fp)
 80119a4:	e17ffd15 	stw	r5,-12(fp)
 80119a8:	e1bffe15 	stw	r6,-8(fp)
 80119ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80119b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80119b4:	e0bffd17 	ldw	r2,-12(fp)
 80119b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80119bc:	00003806 	br	8011aa0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80119c0:	e0bffc17 	ldw	r2,-16(fp)
 80119c4:	10800c17 	ldw	r2,48(r2)
 80119c8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 80119cc:	e0bffc17 	ldw	r2,-16(fp)
 80119d0:	10800d17 	ldw	r2,52(r2)
 80119d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80119d8:	e0fff817 	ldw	r3,-32(fp)
 80119dc:	e0bff517 	ldw	r2,-44(fp)
 80119e0:	1880062e 	bgeu	r3,r2,80119fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80119e4:	e0fff517 	ldw	r3,-44(fp)
 80119e8:	e0bff817 	ldw	r2,-32(fp)
 80119ec:	1885c83a 	sub	r2,r3,r2
 80119f0:	10bfffc4 	addi	r2,r2,-1
 80119f4:	e0bff615 	stw	r2,-40(fp)
 80119f8:	00000b06 	br	8011a28 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80119fc:	e0bff517 	ldw	r2,-44(fp)
 8011a00:	10000526 	beq	r2,zero,8011a18 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8011a04:	00c20004 	movi	r3,2048
 8011a08:	e0bff817 	ldw	r2,-32(fp)
 8011a0c:	1885c83a 	sub	r2,r3,r2
 8011a10:	e0bff615 	stw	r2,-40(fp)
 8011a14:	00000406 	br	8011a28 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8011a18:	00c1ffc4 	movi	r3,2047
 8011a1c:	e0bff817 	ldw	r2,-32(fp)
 8011a20:	1885c83a 	sub	r2,r3,r2
 8011a24:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8011a28:	e0bff617 	ldw	r2,-40(fp)
 8011a2c:	1000011e 	bne	r2,zero,8011a34 <altera_avalon_jtag_uart_write+0xa4>
        break;
 8011a30:	00001d06 	br	8011aa8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 8011a34:	e0fffe17 	ldw	r3,-8(fp)
 8011a38:	e0bff617 	ldw	r2,-40(fp)
 8011a3c:	1880022e 	bgeu	r3,r2,8011a48 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8011a40:	e0bffe17 	ldw	r2,-8(fp)
 8011a44:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8011a48:	e0bff817 	ldw	r2,-32(fp)
 8011a4c:	10820e04 	addi	r2,r2,2104
 8011a50:	e0fffc17 	ldw	r3,-16(fp)
 8011a54:	1885883a 	add	r2,r3,r2
 8011a58:	1009883a 	mov	r4,r2
 8011a5c:	e17ffd17 	ldw	r5,-12(fp)
 8011a60:	e1bff617 	ldw	r6,-40(fp)
 8011a64:	8003f580 	call	8003f58 <memcpy>
      ptr   += n;
 8011a68:	e0fffd17 	ldw	r3,-12(fp)
 8011a6c:	e0bff617 	ldw	r2,-40(fp)
 8011a70:	1885883a 	add	r2,r3,r2
 8011a74:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8011a78:	e0fffe17 	ldw	r3,-8(fp)
 8011a7c:	e0bff617 	ldw	r2,-40(fp)
 8011a80:	1885c83a 	sub	r2,r3,r2
 8011a84:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8011a88:	e0fff817 	ldw	r3,-32(fp)
 8011a8c:	e0bff617 	ldw	r2,-40(fp)
 8011a90:	1885883a 	add	r2,r3,r2
 8011a94:	10c1ffcc 	andi	r3,r2,2047
 8011a98:	e0bffc17 	ldw	r2,-16(fp)
 8011a9c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8011aa0:	e0bffe17 	ldw	r2,-8(fp)
 8011aa4:	00bfc616 	blt	zero,r2,80119c0 <__alt_data_end+0xfc0119c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011aa8:	0005303a 	rdctl	r2,status
 8011aac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011ab0:	e0fffa17 	ldw	r3,-24(fp)
 8011ab4:	00bfff84 	movi	r2,-2
 8011ab8:	1884703a 	and	r2,r3,r2
 8011abc:	1001703a 	wrctl	status,r2
  
  return context;
 8011ac0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8011ac4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8011ac8:	e0bffc17 	ldw	r2,-16(fp)
 8011acc:	10800817 	ldw	r2,32(r2)
 8011ad0:	10c00094 	ori	r3,r2,2
 8011ad4:	e0bffc17 	ldw	r2,-16(fp)
 8011ad8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011adc:	e0bffc17 	ldw	r2,-16(fp)
 8011ae0:	10800017 	ldw	r2,0(r2)
 8011ae4:	10800104 	addi	r2,r2,4
 8011ae8:	1007883a 	mov	r3,r2
 8011aec:	e0bffc17 	ldw	r2,-16(fp)
 8011af0:	10800817 	ldw	r2,32(r2)
 8011af4:	18800035 	stwio	r2,0(r3)
 8011af8:	e0bff917 	ldw	r2,-28(fp)
 8011afc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011b00:	e0bffb17 	ldw	r2,-20(fp)
 8011b04:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8011b08:	e0bffe17 	ldw	r2,-8(fp)
 8011b0c:	0080120e 	bge	zero,r2,8011b58 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8011b10:	e0bfff17 	ldw	r2,-4(fp)
 8011b14:	1090000c 	andi	r2,r2,16384
 8011b18:	10000126 	beq	r2,zero,8011b20 <altera_avalon_jtag_uart_write+0x190>
        break;
 8011b1c:	00001006 	br	8011b60 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8011b20:	0001883a 	nop
 8011b24:	e0bffc17 	ldw	r2,-16(fp)
 8011b28:	10c00d17 	ldw	r3,52(r2)
 8011b2c:	e0bff517 	ldw	r2,-44(fp)
 8011b30:	1880051e 	bne	r3,r2,8011b48 <altera_avalon_jtag_uart_write+0x1b8>
 8011b34:	e0bffc17 	ldw	r2,-16(fp)
 8011b38:	10c00917 	ldw	r3,36(r2)
 8011b3c:	e0bffc17 	ldw	r2,-16(fp)
 8011b40:	10800117 	ldw	r2,4(r2)
 8011b44:	18bff736 	bltu	r3,r2,8011b24 <__alt_data_end+0xfc011b24>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8011b48:	e0bffc17 	ldw	r2,-16(fp)
 8011b4c:	10800917 	ldw	r2,36(r2)
 8011b50:	10000126 	beq	r2,zero,8011b58 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 8011b54:	00000206 	br	8011b60 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8011b58:	e0bffe17 	ldw	r2,-8(fp)
 8011b5c:	00bf9716 	blt	zero,r2,80119bc <__alt_data_end+0xfc0119bc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8011b60:	e0fffd17 	ldw	r3,-12(fp)
 8011b64:	e0bff717 	ldw	r2,-36(fp)
 8011b68:	18800426 	beq	r3,r2,8011b7c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8011b6c:	e0fffd17 	ldw	r3,-12(fp)
 8011b70:	e0bff717 	ldw	r2,-36(fp)
 8011b74:	1885c83a 	sub	r2,r3,r2
 8011b78:	00000606 	br	8011b94 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8011b7c:	e0bfff17 	ldw	r2,-4(fp)
 8011b80:	1090000c 	andi	r2,r2,16384
 8011b84:	10000226 	beq	r2,zero,8011b90 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8011b88:	00bffd44 	movi	r2,-11
 8011b8c:	00000106 	br	8011b94 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8011b90:	00bffec4 	movi	r2,-5
}
 8011b94:	e037883a 	mov	sp,fp
 8011b98:	dfc00117 	ldw	ra,4(sp)
 8011b9c:	df000017 	ldw	fp,0(sp)
 8011ba0:	dec00204 	addi	sp,sp,8
 8011ba4:	f800283a 	ret

08011ba8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8011ba8:	defffa04 	addi	sp,sp,-24
 8011bac:	dfc00515 	stw	ra,20(sp)
 8011bb0:	df000415 	stw	fp,16(sp)
 8011bb4:	df000404 	addi	fp,sp,16
 8011bb8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8011bbc:	0007883a 	mov	r3,zero
 8011bc0:	e0bfff17 	ldw	r2,-4(fp)
 8011bc4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8011bc8:	e0bfff17 	ldw	r2,-4(fp)
 8011bcc:	10800104 	addi	r2,r2,4
 8011bd0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011bd4:	0005303a 	rdctl	r2,status
 8011bd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011bdc:	e0fffd17 	ldw	r3,-12(fp)
 8011be0:	00bfff84 	movi	r2,-2
 8011be4:	1884703a 	and	r2,r3,r2
 8011be8:	1001703a 	wrctl	status,r2
  
  return context;
 8011bec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8011bf0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8011bf4:	80128180 	call	8012818 <alt_tick>
 8011bf8:	e0bffc17 	ldw	r2,-16(fp)
 8011bfc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011c00:	e0bffe17 	ldw	r2,-8(fp)
 8011c04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8011c08:	e037883a 	mov	sp,fp
 8011c0c:	dfc00117 	ldw	ra,4(sp)
 8011c10:	df000017 	ldw	fp,0(sp)
 8011c14:	dec00204 	addi	sp,sp,8
 8011c18:	f800283a 	ret

08011c1c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8011c1c:	defff804 	addi	sp,sp,-32
 8011c20:	dfc00715 	stw	ra,28(sp)
 8011c24:	df000615 	stw	fp,24(sp)
 8011c28:	df000604 	addi	fp,sp,24
 8011c2c:	e13ffc15 	stw	r4,-16(fp)
 8011c30:	e17ffd15 	stw	r5,-12(fp)
 8011c34:	e1bffe15 	stw	r6,-8(fp)
 8011c38:	e1ffff15 	stw	r7,-4(fp)
 8011c3c:	e0bfff17 	ldw	r2,-4(fp)
 8011c40:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8011c44:	008200b4 	movhi	r2,2050
 8011c48:	10850e04 	addi	r2,r2,5176
 8011c4c:	10800017 	ldw	r2,0(r2)
 8011c50:	1000041e 	bne	r2,zero,8011c64 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 8011c54:	008200b4 	movhi	r2,2050
 8011c58:	10850e04 	addi	r2,r2,5176
 8011c5c:	e0fffb17 	ldw	r3,-20(fp)
 8011c60:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8011c64:	e0bffc17 	ldw	r2,-16(fp)
 8011c68:	10800104 	addi	r2,r2,4
 8011c6c:	00c001c4 	movi	r3,7
 8011c70:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8011c74:	d8000015 	stw	zero,0(sp)
 8011c78:	e13ffd17 	ldw	r4,-12(fp)
 8011c7c:	e17ffe17 	ldw	r5,-8(fp)
 8011c80:	01820074 	movhi	r6,2049
 8011c84:	3186ea04 	addi	r6,r6,7080
 8011c88:	e1fffc17 	ldw	r7,-16(fp)
 8011c8c:	80121040 	call	8012104 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8011c90:	e037883a 	mov	sp,fp
 8011c94:	dfc00117 	ldw	ra,4(sp)
 8011c98:	df000017 	ldw	fp,0(sp)
 8011c9c:	dec00204 	addi	sp,sp,8
 8011ca0:	f800283a 	ret

08011ca4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8011ca4:	defff504 	addi	sp,sp,-44
 8011ca8:	df000a15 	stw	fp,40(sp)
 8011cac:	df000a04 	addi	fp,sp,40
 8011cb0:	e13ffc15 	stw	r4,-16(fp)
 8011cb4:	e17ffd15 	stw	r5,-12(fp)
 8011cb8:	e1bffe15 	stw	r6,-8(fp)
 8011cbc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8011cc0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8011cc4:	008200b4 	movhi	r2,2050
 8011cc8:	10850e04 	addi	r2,r2,5176
 8011ccc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8011cd0:	10003f26 	beq	r2,zero,8011dd0 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8011cd4:	e0bffc17 	ldw	r2,-16(fp)
 8011cd8:	10003b26 	beq	r2,zero,8011dc8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8011cdc:	e0bffc17 	ldw	r2,-16(fp)
 8011ce0:	e0fffe17 	ldw	r3,-8(fp)
 8011ce4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8011ce8:	e0bffc17 	ldw	r2,-16(fp)
 8011cec:	e0ffff17 	ldw	r3,-4(fp)
 8011cf0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011cf4:	0005303a 	rdctl	r2,status
 8011cf8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011cfc:	e0fff817 	ldw	r3,-32(fp)
 8011d00:	00bfff84 	movi	r2,-2
 8011d04:	1884703a 	and	r2,r3,r2
 8011d08:	1001703a 	wrctl	status,r2
  
  return context;
 8011d0c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8011d10:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8011d14:	008200b4 	movhi	r2,2050
 8011d18:	10850f04 	addi	r2,r2,5180
 8011d1c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8011d20:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8011d24:	e0fffd17 	ldw	r3,-12(fp)
 8011d28:	e0bff617 	ldw	r2,-40(fp)
 8011d2c:	1885883a 	add	r2,r3,r2
 8011d30:	10c00044 	addi	r3,r2,1
 8011d34:	e0bffc17 	ldw	r2,-16(fp)
 8011d38:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8011d3c:	e0bffc17 	ldw	r2,-16(fp)
 8011d40:	10c00217 	ldw	r3,8(r2)
 8011d44:	e0bff617 	ldw	r2,-40(fp)
 8011d48:	1880042e 	bgeu	r3,r2,8011d5c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8011d4c:	e0bffc17 	ldw	r2,-16(fp)
 8011d50:	00c00044 	movi	r3,1
 8011d54:	10c00405 	stb	r3,16(r2)
 8011d58:	00000206 	br	8011d64 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8011d5c:	e0bffc17 	ldw	r2,-16(fp)
 8011d60:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8011d64:	e0fffc17 	ldw	r3,-16(fp)
 8011d68:	008200b4 	movhi	r2,2050
 8011d6c:	10be1804 	addi	r2,r2,-1952
 8011d70:	e0bff915 	stw	r2,-28(fp)
 8011d74:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8011d78:	e0bffa17 	ldw	r2,-24(fp)
 8011d7c:	e0fff917 	ldw	r3,-28(fp)
 8011d80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8011d84:	e0bff917 	ldw	r2,-28(fp)
 8011d88:	10c00017 	ldw	r3,0(r2)
 8011d8c:	e0bffa17 	ldw	r2,-24(fp)
 8011d90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8011d94:	e0bff917 	ldw	r2,-28(fp)
 8011d98:	10800017 	ldw	r2,0(r2)
 8011d9c:	e0fffa17 	ldw	r3,-24(fp)
 8011da0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011da4:	e0bff917 	ldw	r2,-28(fp)
 8011da8:	e0fffa17 	ldw	r3,-24(fp)
 8011dac:	10c00015 	stw	r3,0(r2)
 8011db0:	e0bff717 	ldw	r2,-36(fp)
 8011db4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011db8:	e0bffb17 	ldw	r2,-20(fp)
 8011dbc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8011dc0:	0005883a 	mov	r2,zero
 8011dc4:	00000306 	br	8011dd4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8011dc8:	00bffa84 	movi	r2,-22
 8011dcc:	00000106 	br	8011dd4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8011dd0:	00bfde84 	movi	r2,-134
  }
}
 8011dd4:	e037883a 	mov	sp,fp
 8011dd8:	df000017 	ldw	fp,0(sp)
 8011ddc:	dec00104 	addi	sp,sp,4
 8011de0:	f800283a 	ret

08011de4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8011de4:	defffb04 	addi	sp,sp,-20
 8011de8:	df000415 	stw	fp,16(sp)
 8011dec:	df000404 	addi	fp,sp,16
 8011df0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8011df4:	008000c4 	movi	r2,3
 8011df8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8011dfc:	e0fffd17 	ldw	r3,-12(fp)
 8011e00:	008003f4 	movhi	r2,15
 8011e04:	10909004 	addi	r2,r2,16960
 8011e08:	1887383a 	mul	r3,r3,r2
 8011e0c:	0080bef4 	movhi	r2,763
 8011e10:	10bc2004 	addi	r2,r2,-3968
 8011e14:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8011e18:	00a00034 	movhi	r2,32768
 8011e1c:	10bfffc4 	addi	r2,r2,-1
 8011e20:	10c5203a 	divu	r2,r2,r3
 8011e24:	e0ffff17 	ldw	r3,-4(fp)
 8011e28:	1885203a 	divu	r2,r3,r2
 8011e2c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8011e30:	e0bffe17 	ldw	r2,-8(fp)
 8011e34:	10002526 	beq	r2,zero,8011ecc <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 8011e38:	e03ffc15 	stw	zero,-16(fp)
 8011e3c:	00001406 	br	8011e90 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8011e40:	00a00034 	movhi	r2,32768
 8011e44:	10bfffc4 	addi	r2,r2,-1
 8011e48:	10bfffc4 	addi	r2,r2,-1
 8011e4c:	103ffe1e 	bne	r2,zero,8011e48 <__alt_data_end+0xfc011e48>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8011e50:	e0fffd17 	ldw	r3,-12(fp)
 8011e54:	008003f4 	movhi	r2,15
 8011e58:	10909004 	addi	r2,r2,16960
 8011e5c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8011e60:	0080bef4 	movhi	r2,763
 8011e64:	10bc2004 	addi	r2,r2,-3968
 8011e68:	10c7203a 	divu	r3,r2,r3
 8011e6c:	00a00034 	movhi	r2,32768
 8011e70:	10bfffc4 	addi	r2,r2,-1
 8011e74:	10c5203a 	divu	r2,r2,r3
 8011e78:	e0ffff17 	ldw	r3,-4(fp)
 8011e7c:	1885c83a 	sub	r2,r3,r2
 8011e80:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8011e84:	e0bffc17 	ldw	r2,-16(fp)
 8011e88:	10800044 	addi	r2,r2,1
 8011e8c:	e0bffc15 	stw	r2,-16(fp)
 8011e90:	e0fffc17 	ldw	r3,-16(fp)
 8011e94:	e0bffe17 	ldw	r2,-8(fp)
 8011e98:	18bfe916 	blt	r3,r2,8011e40 <__alt_data_end+0xfc011e40>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8011e9c:	e0fffd17 	ldw	r3,-12(fp)
 8011ea0:	008003f4 	movhi	r2,15
 8011ea4:	10909004 	addi	r2,r2,16960
 8011ea8:	1887383a 	mul	r3,r3,r2
 8011eac:	0080bef4 	movhi	r2,763
 8011eb0:	10bc2004 	addi	r2,r2,-3968
 8011eb4:	10c7203a 	divu	r3,r2,r3
 8011eb8:	e0bfff17 	ldw	r2,-4(fp)
 8011ebc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8011ec0:	10bfffc4 	addi	r2,r2,-1
 8011ec4:	103ffe1e 	bne	r2,zero,8011ec0 <__alt_data_end+0xfc011ec0>
 8011ec8:	00000b06 	br	8011ef8 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8011ecc:	e0fffd17 	ldw	r3,-12(fp)
 8011ed0:	008003f4 	movhi	r2,15
 8011ed4:	10909004 	addi	r2,r2,16960
 8011ed8:	1887383a 	mul	r3,r3,r2
 8011edc:	0080bef4 	movhi	r2,763
 8011ee0:	10bc2004 	addi	r2,r2,-3968
 8011ee4:	10c7203a 	divu	r3,r2,r3
 8011ee8:	e0bfff17 	ldw	r2,-4(fp)
 8011eec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8011ef0:	10bfffc4 	addi	r2,r2,-1
 8011ef4:	00bffe16 	blt	zero,r2,8011ef0 <__alt_data_end+0xfc011ef0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8011ef8:	0005883a 	mov	r2,zero
}
 8011efc:	e037883a 	mov	sp,fp
 8011f00:	df000017 	ldw	fp,0(sp)
 8011f04:	dec00104 	addi	sp,sp,4
 8011f08:	f800283a 	ret

08011f0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8011f0c:	deffff04 	addi	sp,sp,-4
 8011f10:	df000015 	stw	fp,0(sp)
 8011f14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8011f18:	e037883a 	mov	sp,fp
 8011f1c:	df000017 	ldw	fp,0(sp)
 8011f20:	dec00104 	addi	sp,sp,4
 8011f24:	f800283a 	ret

08011f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011f28:	defffe04 	addi	sp,sp,-8
 8011f2c:	dfc00115 	stw	ra,4(sp)
 8011f30:	df000015 	stw	fp,0(sp)
 8011f34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011f38:	008200b4 	movhi	r2,2050
 8011f3c:	10be1504 	addi	r2,r2,-1964
 8011f40:	10800017 	ldw	r2,0(r2)
 8011f44:	10000526 	beq	r2,zero,8011f5c <alt_get_errno+0x34>
 8011f48:	008200b4 	movhi	r2,2050
 8011f4c:	10be1504 	addi	r2,r2,-1964
 8011f50:	10800017 	ldw	r2,0(r2)
 8011f54:	103ee83a 	callr	r2
 8011f58:	00000206 	br	8011f64 <alt_get_errno+0x3c>
 8011f5c:	008200b4 	movhi	r2,2050
 8011f60:	10850904 	addi	r2,r2,5156
}
 8011f64:	e037883a 	mov	sp,fp
 8011f68:	dfc00117 	ldw	ra,4(sp)
 8011f6c:	df000017 	ldw	fp,0(sp)
 8011f70:	dec00204 	addi	sp,sp,8
 8011f74:	f800283a 	ret

08011f78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8011f78:	defffa04 	addi	sp,sp,-24
 8011f7c:	dfc00515 	stw	ra,20(sp)
 8011f80:	df000415 	stw	fp,16(sp)
 8011f84:	df000404 	addi	fp,sp,16
 8011f88:	e13ffe15 	stw	r4,-8(fp)
 8011f8c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8011f90:	e0bffe17 	ldw	r2,-8(fp)
 8011f94:	10000326 	beq	r2,zero,8011fa4 <alt_dev_llist_insert+0x2c>
 8011f98:	e0bffe17 	ldw	r2,-8(fp)
 8011f9c:	10800217 	ldw	r2,8(r2)
 8011fa0:	1000061e 	bne	r2,zero,8011fbc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8011fa4:	8011f280 	call	8011f28 <alt_get_errno>
 8011fa8:	1007883a 	mov	r3,r2
 8011fac:	00800584 	movi	r2,22
 8011fb0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8011fb4:	00bffa84 	movi	r2,-22
 8011fb8:	00001306 	br	8012008 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8011fbc:	e0bffe17 	ldw	r2,-8(fp)
 8011fc0:	e0ffff17 	ldw	r3,-4(fp)
 8011fc4:	e0fffc15 	stw	r3,-16(fp)
 8011fc8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8011fcc:	e0bffd17 	ldw	r2,-12(fp)
 8011fd0:	e0fffc17 	ldw	r3,-16(fp)
 8011fd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8011fd8:	e0bffc17 	ldw	r2,-16(fp)
 8011fdc:	10c00017 	ldw	r3,0(r2)
 8011fe0:	e0bffd17 	ldw	r2,-12(fp)
 8011fe4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8011fe8:	e0bffc17 	ldw	r2,-16(fp)
 8011fec:	10800017 	ldw	r2,0(r2)
 8011ff0:	e0fffd17 	ldw	r3,-12(fp)
 8011ff4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011ff8:	e0bffc17 	ldw	r2,-16(fp)
 8011ffc:	e0fffd17 	ldw	r3,-12(fp)
 8012000:	10c00015 	stw	r3,0(r2)

  return 0;  
 8012004:	0005883a 	mov	r2,zero
}
 8012008:	e037883a 	mov	sp,fp
 801200c:	dfc00117 	ldw	ra,4(sp)
 8012010:	df000017 	ldw	fp,0(sp)
 8012014:	dec00204 	addi	sp,sp,8
 8012018:	f800283a 	ret

0801201c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 801201c:	defffd04 	addi	sp,sp,-12
 8012020:	dfc00215 	stw	ra,8(sp)
 8012024:	df000115 	stw	fp,4(sp)
 8012028:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801202c:	00820074 	movhi	r2,2049
 8012030:	108bf004 	addi	r2,r2,12224
 8012034:	e0bfff15 	stw	r2,-4(fp)
 8012038:	00000606 	br	8012054 <_do_ctors+0x38>
        (*ctor) (); 
 801203c:	e0bfff17 	ldw	r2,-4(fp)
 8012040:	10800017 	ldw	r2,0(r2)
 8012044:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8012048:	e0bfff17 	ldw	r2,-4(fp)
 801204c:	10bfff04 	addi	r2,r2,-4
 8012050:	e0bfff15 	stw	r2,-4(fp)
 8012054:	e0ffff17 	ldw	r3,-4(fp)
 8012058:	00820074 	movhi	r2,2049
 801205c:	108bf104 	addi	r2,r2,12228
 8012060:	18bff62e 	bgeu	r3,r2,801203c <__alt_data_end+0xfc01203c>
        (*ctor) (); 
}
 8012064:	e037883a 	mov	sp,fp
 8012068:	dfc00117 	ldw	ra,4(sp)
 801206c:	df000017 	ldw	fp,0(sp)
 8012070:	dec00204 	addi	sp,sp,8
 8012074:	f800283a 	ret

08012078 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8012078:	defffd04 	addi	sp,sp,-12
 801207c:	dfc00215 	stw	ra,8(sp)
 8012080:	df000115 	stw	fp,4(sp)
 8012084:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8012088:	00820074 	movhi	r2,2049
 801208c:	108bf004 	addi	r2,r2,12224
 8012090:	e0bfff15 	stw	r2,-4(fp)
 8012094:	00000606 	br	80120b0 <_do_dtors+0x38>
        (*dtor) (); 
 8012098:	e0bfff17 	ldw	r2,-4(fp)
 801209c:	10800017 	ldw	r2,0(r2)
 80120a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80120a4:	e0bfff17 	ldw	r2,-4(fp)
 80120a8:	10bfff04 	addi	r2,r2,-4
 80120ac:	e0bfff15 	stw	r2,-4(fp)
 80120b0:	e0ffff17 	ldw	r3,-4(fp)
 80120b4:	00820074 	movhi	r2,2049
 80120b8:	108bf104 	addi	r2,r2,12228
 80120bc:	18bff62e 	bgeu	r3,r2,8012098 <__alt_data_end+0xfc012098>
        (*dtor) (); 
}
 80120c0:	e037883a 	mov	sp,fp
 80120c4:	dfc00117 	ldw	ra,4(sp)
 80120c8:	df000017 	ldw	fp,0(sp)
 80120cc:	dec00204 	addi	sp,sp,8
 80120d0:	f800283a 	ret

080120d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80120d4:	defffe04 	addi	sp,sp,-8
 80120d8:	dfc00115 	stw	ra,4(sp)
 80120dc:	df000015 	stw	fp,0(sp)
 80120e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80120e4:	0009883a 	mov	r4,zero
 80120e8:	01440004 	movi	r5,4096
 80120ec:	8012b940 	call	8012b94 <alt_icache_flush>
#endif
}
 80120f0:	e037883a 	mov	sp,fp
 80120f4:	dfc00117 	ldw	ra,4(sp)
 80120f8:	df000017 	ldw	fp,0(sp)
 80120fc:	dec00204 	addi	sp,sp,8
 8012100:	f800283a 	ret

08012104 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8012104:	defff904 	addi	sp,sp,-28
 8012108:	dfc00615 	stw	ra,24(sp)
 801210c:	df000515 	stw	fp,20(sp)
 8012110:	df000504 	addi	fp,sp,20
 8012114:	e13ffc15 	stw	r4,-16(fp)
 8012118:	e17ffd15 	stw	r5,-12(fp)
 801211c:	e1bffe15 	stw	r6,-8(fp)
 8012120:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8012124:	e0800217 	ldw	r2,8(fp)
 8012128:	d8800015 	stw	r2,0(sp)
 801212c:	e13ffc17 	ldw	r4,-16(fp)
 8012130:	e17ffd17 	ldw	r5,-12(fp)
 8012134:	e1bffe17 	ldw	r6,-8(fp)
 8012138:	e1ffff17 	ldw	r7,-4(fp)
 801213c:	80122e40 	call	80122e4 <alt_iic_isr_register>
}  
 8012140:	e037883a 	mov	sp,fp
 8012144:	dfc00117 	ldw	ra,4(sp)
 8012148:	df000017 	ldw	fp,0(sp)
 801214c:	dec00204 	addi	sp,sp,8
 8012150:	f800283a 	ret

08012154 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8012154:	defff904 	addi	sp,sp,-28
 8012158:	df000615 	stw	fp,24(sp)
 801215c:	df000604 	addi	fp,sp,24
 8012160:	e13ffe15 	stw	r4,-8(fp)
 8012164:	e17fff15 	stw	r5,-4(fp)
 8012168:	e0bfff17 	ldw	r2,-4(fp)
 801216c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012170:	0005303a 	rdctl	r2,status
 8012174:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012178:	e0fffb17 	ldw	r3,-20(fp)
 801217c:	00bfff84 	movi	r2,-2
 8012180:	1884703a 	and	r2,r3,r2
 8012184:	1001703a 	wrctl	status,r2
  
  return context;
 8012188:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801218c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8012190:	e0bffa17 	ldw	r2,-24(fp)
 8012194:	00c00044 	movi	r3,1
 8012198:	1884983a 	sll	r2,r3,r2
 801219c:	1007883a 	mov	r3,r2
 80121a0:	008200b4 	movhi	r2,2050
 80121a4:	10850d04 	addi	r2,r2,5172
 80121a8:	10800017 	ldw	r2,0(r2)
 80121ac:	1886b03a 	or	r3,r3,r2
 80121b0:	008200b4 	movhi	r2,2050
 80121b4:	10850d04 	addi	r2,r2,5172
 80121b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80121bc:	008200b4 	movhi	r2,2050
 80121c0:	10850d04 	addi	r2,r2,5172
 80121c4:	10800017 	ldw	r2,0(r2)
 80121c8:	100170fa 	wrctl	ienable,r2
 80121cc:	e0bffc17 	ldw	r2,-16(fp)
 80121d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80121d4:	e0bffd17 	ldw	r2,-12(fp)
 80121d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80121dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80121e0:	0001883a 	nop
}
 80121e4:	e037883a 	mov	sp,fp
 80121e8:	df000017 	ldw	fp,0(sp)
 80121ec:	dec00104 	addi	sp,sp,4
 80121f0:	f800283a 	ret

080121f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80121f4:	defff904 	addi	sp,sp,-28
 80121f8:	df000615 	stw	fp,24(sp)
 80121fc:	df000604 	addi	fp,sp,24
 8012200:	e13ffe15 	stw	r4,-8(fp)
 8012204:	e17fff15 	stw	r5,-4(fp)
 8012208:	e0bfff17 	ldw	r2,-4(fp)
 801220c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012210:	0005303a 	rdctl	r2,status
 8012214:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012218:	e0fffb17 	ldw	r3,-20(fp)
 801221c:	00bfff84 	movi	r2,-2
 8012220:	1884703a 	and	r2,r3,r2
 8012224:	1001703a 	wrctl	status,r2
  
  return context;
 8012228:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801222c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8012230:	e0bffa17 	ldw	r2,-24(fp)
 8012234:	00c00044 	movi	r3,1
 8012238:	1884983a 	sll	r2,r3,r2
 801223c:	0084303a 	nor	r2,zero,r2
 8012240:	1007883a 	mov	r3,r2
 8012244:	008200b4 	movhi	r2,2050
 8012248:	10850d04 	addi	r2,r2,5172
 801224c:	10800017 	ldw	r2,0(r2)
 8012250:	1886703a 	and	r3,r3,r2
 8012254:	008200b4 	movhi	r2,2050
 8012258:	10850d04 	addi	r2,r2,5172
 801225c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8012260:	008200b4 	movhi	r2,2050
 8012264:	10850d04 	addi	r2,r2,5172
 8012268:	10800017 	ldw	r2,0(r2)
 801226c:	100170fa 	wrctl	ienable,r2
 8012270:	e0bffc17 	ldw	r2,-16(fp)
 8012274:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012278:	e0bffd17 	ldw	r2,-12(fp)
 801227c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8012280:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8012284:	0001883a 	nop
}
 8012288:	e037883a 	mov	sp,fp
 801228c:	df000017 	ldw	fp,0(sp)
 8012290:	dec00104 	addi	sp,sp,4
 8012294:	f800283a 	ret

08012298 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8012298:	defffc04 	addi	sp,sp,-16
 801229c:	df000315 	stw	fp,12(sp)
 80122a0:	df000304 	addi	fp,sp,12
 80122a4:	e13ffe15 	stw	r4,-8(fp)
 80122a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80122ac:	000530fa 	rdctl	r2,ienable
 80122b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80122b4:	e0bfff17 	ldw	r2,-4(fp)
 80122b8:	00c00044 	movi	r3,1
 80122bc:	1884983a 	sll	r2,r3,r2
 80122c0:	1007883a 	mov	r3,r2
 80122c4:	e0bffd17 	ldw	r2,-12(fp)
 80122c8:	1884703a 	and	r2,r3,r2
 80122cc:	1004c03a 	cmpne	r2,r2,zero
 80122d0:	10803fcc 	andi	r2,r2,255
}
 80122d4:	e037883a 	mov	sp,fp
 80122d8:	df000017 	ldw	fp,0(sp)
 80122dc:	dec00104 	addi	sp,sp,4
 80122e0:	f800283a 	ret

080122e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80122e4:	defff504 	addi	sp,sp,-44
 80122e8:	dfc00a15 	stw	ra,40(sp)
 80122ec:	df000915 	stw	fp,36(sp)
 80122f0:	df000904 	addi	fp,sp,36
 80122f4:	e13ffc15 	stw	r4,-16(fp)
 80122f8:	e17ffd15 	stw	r5,-12(fp)
 80122fc:	e1bffe15 	stw	r6,-8(fp)
 8012300:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8012304:	00bffa84 	movi	r2,-22
 8012308:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801230c:	e0bffd17 	ldw	r2,-12(fp)
 8012310:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8012314:	e0bff817 	ldw	r2,-32(fp)
 8012318:	10800808 	cmpgei	r2,r2,32
 801231c:	1000271e 	bne	r2,zero,80123bc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012320:	0005303a 	rdctl	r2,status
 8012324:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012328:	e0fffa17 	ldw	r3,-24(fp)
 801232c:	00bfff84 	movi	r2,-2
 8012330:	1884703a 	and	r2,r3,r2
 8012334:	1001703a 	wrctl	status,r2
  
  return context;
 8012338:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801233c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8012340:	008200b4 	movhi	r2,2050
 8012344:	10854704 	addi	r2,r2,5404
 8012348:	e0fff817 	ldw	r3,-32(fp)
 801234c:	180690fa 	slli	r3,r3,3
 8012350:	10c5883a 	add	r2,r2,r3
 8012354:	e0fffe17 	ldw	r3,-8(fp)
 8012358:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801235c:	008200b4 	movhi	r2,2050
 8012360:	10854704 	addi	r2,r2,5404
 8012364:	e0fff817 	ldw	r3,-32(fp)
 8012368:	180690fa 	slli	r3,r3,3
 801236c:	10c5883a 	add	r2,r2,r3
 8012370:	10800104 	addi	r2,r2,4
 8012374:	e0ffff17 	ldw	r3,-4(fp)
 8012378:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801237c:	e0bffe17 	ldw	r2,-8(fp)
 8012380:	10000526 	beq	r2,zero,8012398 <alt_iic_isr_register+0xb4>
 8012384:	e0bff817 	ldw	r2,-32(fp)
 8012388:	e13ffc17 	ldw	r4,-16(fp)
 801238c:	100b883a 	mov	r5,r2
 8012390:	80121540 	call	8012154 <alt_ic_irq_enable>
 8012394:	00000406 	br	80123a8 <alt_iic_isr_register+0xc4>
 8012398:	e0bff817 	ldw	r2,-32(fp)
 801239c:	e13ffc17 	ldw	r4,-16(fp)
 80123a0:	100b883a 	mov	r5,r2
 80123a4:	80121f40 	call	80121f4 <alt_ic_irq_disable>
 80123a8:	e0bff715 	stw	r2,-36(fp)
 80123ac:	e0bff917 	ldw	r2,-28(fp)
 80123b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80123b4:	e0bffb17 	ldw	r2,-20(fp)
 80123b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80123bc:	e0bff717 	ldw	r2,-36(fp)
}
 80123c0:	e037883a 	mov	sp,fp
 80123c4:	dfc00117 	ldw	ra,4(sp)
 80123c8:	df000017 	ldw	fp,0(sp)
 80123cc:	dec00204 	addi	sp,sp,8
 80123d0:	f800283a 	ret

080123d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80123d4:	defff904 	addi	sp,sp,-28
 80123d8:	dfc00615 	stw	ra,24(sp)
 80123dc:	df000515 	stw	fp,20(sp)
 80123e0:	df000504 	addi	fp,sp,20
 80123e4:	e13ffc15 	stw	r4,-16(fp)
 80123e8:	e17ffd15 	stw	r5,-12(fp)
 80123ec:	e1bffe15 	stw	r6,-8(fp)
 80123f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 80123f4:	e13ffd17 	ldw	r4,-12(fp)
 80123f8:	e17ffe17 	ldw	r5,-8(fp)
 80123fc:	e1bfff17 	ldw	r6,-4(fp)
 8012400:	80126280 	call	8012628 <open>
 8012404:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8012408:	e0bffb17 	ldw	r2,-20(fp)
 801240c:	10001c16 	blt	r2,zero,8012480 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8012410:	008200b4 	movhi	r2,2050
 8012414:	10b97b04 	addi	r2,r2,-6676
 8012418:	e0fffb17 	ldw	r3,-20(fp)
 801241c:	18c00324 	muli	r3,r3,12
 8012420:	10c5883a 	add	r2,r2,r3
 8012424:	10c00017 	ldw	r3,0(r2)
 8012428:	e0bffc17 	ldw	r2,-16(fp)
 801242c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8012430:	008200b4 	movhi	r2,2050
 8012434:	10b97b04 	addi	r2,r2,-6676
 8012438:	e0fffb17 	ldw	r3,-20(fp)
 801243c:	18c00324 	muli	r3,r3,12
 8012440:	10c5883a 	add	r2,r2,r3
 8012444:	10800104 	addi	r2,r2,4
 8012448:	10c00017 	ldw	r3,0(r2)
 801244c:	e0bffc17 	ldw	r2,-16(fp)
 8012450:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8012454:	008200b4 	movhi	r2,2050
 8012458:	10b97b04 	addi	r2,r2,-6676
 801245c:	e0fffb17 	ldw	r3,-20(fp)
 8012460:	18c00324 	muli	r3,r3,12
 8012464:	10c5883a 	add	r2,r2,r3
 8012468:	10800204 	addi	r2,r2,8
 801246c:	10c00017 	ldw	r3,0(r2)
 8012470:	e0bffc17 	ldw	r2,-16(fp)
 8012474:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8012478:	e13ffb17 	ldw	r4,-20(fp)
 801247c:	8010e100 	call	8010e10 <alt_release_fd>
  }
} 
 8012480:	e037883a 	mov	sp,fp
 8012484:	dfc00117 	ldw	ra,4(sp)
 8012488:	df000017 	ldw	fp,0(sp)
 801248c:	dec00204 	addi	sp,sp,8
 8012490:	f800283a 	ret

08012494 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8012494:	defffb04 	addi	sp,sp,-20
 8012498:	dfc00415 	stw	ra,16(sp)
 801249c:	df000315 	stw	fp,12(sp)
 80124a0:	df000304 	addi	fp,sp,12
 80124a4:	e13ffd15 	stw	r4,-12(fp)
 80124a8:	e17ffe15 	stw	r5,-8(fp)
 80124ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80124b0:	010200b4 	movhi	r4,2050
 80124b4:	21397e04 	addi	r4,r4,-6664
 80124b8:	e17ffd17 	ldw	r5,-12(fp)
 80124bc:	01800044 	movi	r6,1
 80124c0:	01c07fc4 	movi	r7,511
 80124c4:	80123d40 	call	80123d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80124c8:	010200b4 	movhi	r4,2050
 80124cc:	21397b04 	addi	r4,r4,-6676
 80124d0:	e17ffe17 	ldw	r5,-8(fp)
 80124d4:	000d883a 	mov	r6,zero
 80124d8:	01c07fc4 	movi	r7,511
 80124dc:	80123d40 	call	80123d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80124e0:	010200b4 	movhi	r4,2050
 80124e4:	21398104 	addi	r4,r4,-6652
 80124e8:	e17fff17 	ldw	r5,-4(fp)
 80124ec:	01800044 	movi	r6,1
 80124f0:	01c07fc4 	movi	r7,511
 80124f4:	80123d40 	call	80123d4 <alt_open_fd>
}  
 80124f8:	e037883a 	mov	sp,fp
 80124fc:	dfc00117 	ldw	ra,4(sp)
 8012500:	df000017 	ldw	fp,0(sp)
 8012504:	dec00204 	addi	sp,sp,8
 8012508:	f800283a 	ret

0801250c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801250c:	defffe04 	addi	sp,sp,-8
 8012510:	dfc00115 	stw	ra,4(sp)
 8012514:	df000015 	stw	fp,0(sp)
 8012518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801251c:	008200b4 	movhi	r2,2050
 8012520:	10be1504 	addi	r2,r2,-1964
 8012524:	10800017 	ldw	r2,0(r2)
 8012528:	10000526 	beq	r2,zero,8012540 <alt_get_errno+0x34>
 801252c:	008200b4 	movhi	r2,2050
 8012530:	10be1504 	addi	r2,r2,-1964
 8012534:	10800017 	ldw	r2,0(r2)
 8012538:	103ee83a 	callr	r2
 801253c:	00000206 	br	8012548 <alt_get_errno+0x3c>
 8012540:	008200b4 	movhi	r2,2050
 8012544:	10850904 	addi	r2,r2,5156
}
 8012548:	e037883a 	mov	sp,fp
 801254c:	dfc00117 	ldw	ra,4(sp)
 8012550:	df000017 	ldw	fp,0(sp)
 8012554:	dec00204 	addi	sp,sp,8
 8012558:	f800283a 	ret

0801255c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801255c:	defffd04 	addi	sp,sp,-12
 8012560:	df000215 	stw	fp,8(sp)
 8012564:	df000204 	addi	fp,sp,8
 8012568:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801256c:	e0bfff17 	ldw	r2,-4(fp)
 8012570:	10800217 	ldw	r2,8(r2)
 8012574:	10d00034 	orhi	r3,r2,16384
 8012578:	e0bfff17 	ldw	r2,-4(fp)
 801257c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8012580:	e03ffe15 	stw	zero,-8(fp)
 8012584:	00001d06 	br	80125fc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8012588:	008200b4 	movhi	r2,2050
 801258c:	10b97b04 	addi	r2,r2,-6676
 8012590:	e0fffe17 	ldw	r3,-8(fp)
 8012594:	18c00324 	muli	r3,r3,12
 8012598:	10c5883a 	add	r2,r2,r3
 801259c:	10c00017 	ldw	r3,0(r2)
 80125a0:	e0bfff17 	ldw	r2,-4(fp)
 80125a4:	10800017 	ldw	r2,0(r2)
 80125a8:	1880111e 	bne	r3,r2,80125f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80125ac:	008200b4 	movhi	r2,2050
 80125b0:	10b97b04 	addi	r2,r2,-6676
 80125b4:	e0fffe17 	ldw	r3,-8(fp)
 80125b8:	18c00324 	muli	r3,r3,12
 80125bc:	10c5883a 	add	r2,r2,r3
 80125c0:	10800204 	addi	r2,r2,8
 80125c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80125c8:	1000090e 	bge	r2,zero,80125f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80125cc:	e0bffe17 	ldw	r2,-8(fp)
 80125d0:	10c00324 	muli	r3,r2,12
 80125d4:	008200b4 	movhi	r2,2050
 80125d8:	10b97b04 	addi	r2,r2,-6676
 80125dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80125e0:	e0bfff17 	ldw	r2,-4(fp)
 80125e4:	18800226 	beq	r3,r2,80125f0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80125e8:	00bffcc4 	movi	r2,-13
 80125ec:	00000a06 	br	8012618 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80125f0:	e0bffe17 	ldw	r2,-8(fp)
 80125f4:	10800044 	addi	r2,r2,1
 80125f8:	e0bffe15 	stw	r2,-8(fp)
 80125fc:	008200b4 	movhi	r2,2050
 8012600:	10be1404 	addi	r2,r2,-1968
 8012604:	10800017 	ldw	r2,0(r2)
 8012608:	1007883a 	mov	r3,r2
 801260c:	e0bffe17 	ldw	r2,-8(fp)
 8012610:	18bfdd2e 	bgeu	r3,r2,8012588 <__alt_data_end+0xfc012588>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8012614:	0005883a 	mov	r2,zero
}
 8012618:	e037883a 	mov	sp,fp
 801261c:	df000017 	ldw	fp,0(sp)
 8012620:	dec00104 	addi	sp,sp,4
 8012624:	f800283a 	ret

08012628 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8012628:	defff604 	addi	sp,sp,-40
 801262c:	dfc00915 	stw	ra,36(sp)
 8012630:	df000815 	stw	fp,32(sp)
 8012634:	df000804 	addi	fp,sp,32
 8012638:	e13ffd15 	stw	r4,-12(fp)
 801263c:	e17ffe15 	stw	r5,-8(fp)
 8012640:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8012644:	00bfffc4 	movi	r2,-1
 8012648:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 801264c:	00bffb44 	movi	r2,-19
 8012650:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8012654:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8012658:	e13ffd17 	ldw	r4,-12(fp)
 801265c:	014200b4 	movhi	r5,2050
 8012660:	297e1204 	addi	r5,r5,-1976
 8012664:	801293c0 	call	801293c <alt_find_dev>
 8012668:	e0bff815 	stw	r2,-32(fp)
 801266c:	e0bff817 	ldw	r2,-32(fp)
 8012670:	1000051e 	bne	r2,zero,8012688 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8012674:	e13ffd17 	ldw	r4,-12(fp)
 8012678:	80129cc0 	call	80129cc <alt_find_file>
 801267c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8012680:	00800044 	movi	r2,1
 8012684:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8012688:	e0bff817 	ldw	r2,-32(fp)
 801268c:	10002926 	beq	r2,zero,8012734 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8012690:	e13ff817 	ldw	r4,-32(fp)
 8012694:	8012ae00 	call	8012ae0 <alt_get_fd>
 8012698:	e0bff915 	stw	r2,-28(fp)
 801269c:	e0bff917 	ldw	r2,-28(fp)
 80126a0:	1000030e 	bge	r2,zero,80126b0 <open+0x88>
    {
      status = index;
 80126a4:	e0bff917 	ldw	r2,-28(fp)
 80126a8:	e0bffa15 	stw	r2,-24(fp)
 80126ac:	00002306 	br	801273c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 80126b0:	e0bff917 	ldw	r2,-28(fp)
 80126b4:	10c00324 	muli	r3,r2,12
 80126b8:	008200b4 	movhi	r2,2050
 80126bc:	10b97b04 	addi	r2,r2,-6676
 80126c0:	1885883a 	add	r2,r3,r2
 80126c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80126c8:	e0fffe17 	ldw	r3,-8(fp)
 80126cc:	00900034 	movhi	r2,16384
 80126d0:	10bfffc4 	addi	r2,r2,-1
 80126d4:	1886703a 	and	r3,r3,r2
 80126d8:	e0bffc17 	ldw	r2,-16(fp)
 80126dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80126e0:	e0bffb17 	ldw	r2,-20(fp)
 80126e4:	1000051e 	bne	r2,zero,80126fc <open+0xd4>
 80126e8:	e13ffc17 	ldw	r4,-16(fp)
 80126ec:	801255c0 	call	801255c <alt_file_locked>
 80126f0:	e0bffa15 	stw	r2,-24(fp)
 80126f4:	e0bffa17 	ldw	r2,-24(fp)
 80126f8:	10001016 	blt	r2,zero,801273c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80126fc:	e0bff817 	ldw	r2,-32(fp)
 8012700:	10800317 	ldw	r2,12(r2)
 8012704:	10000826 	beq	r2,zero,8012728 <open+0x100>
 8012708:	e0bff817 	ldw	r2,-32(fp)
 801270c:	10800317 	ldw	r2,12(r2)
 8012710:	e13ffc17 	ldw	r4,-16(fp)
 8012714:	e17ffd17 	ldw	r5,-12(fp)
 8012718:	e1bffe17 	ldw	r6,-8(fp)
 801271c:	e1ffff17 	ldw	r7,-4(fp)
 8012720:	103ee83a 	callr	r2
 8012724:	00000106 	br	801272c <open+0x104>
 8012728:	0005883a 	mov	r2,zero
 801272c:	e0bffa15 	stw	r2,-24(fp)
 8012730:	00000206 	br	801273c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8012734:	00bffb44 	movi	r2,-19
 8012738:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801273c:	e0bffa17 	ldw	r2,-24(fp)
 8012740:	1000090e 	bge	r2,zero,8012768 <open+0x140>
  {
    alt_release_fd (index);  
 8012744:	e13ff917 	ldw	r4,-28(fp)
 8012748:	8010e100 	call	8010e10 <alt_release_fd>
    ALT_ERRNO = -status;
 801274c:	801250c0 	call	801250c <alt_get_errno>
 8012750:	1007883a 	mov	r3,r2
 8012754:	e0bffa17 	ldw	r2,-24(fp)
 8012758:	0085c83a 	sub	r2,zero,r2
 801275c:	18800015 	stw	r2,0(r3)
    return -1;
 8012760:	00bfffc4 	movi	r2,-1
 8012764:	00000106 	br	801276c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8012768:	e0bff917 	ldw	r2,-28(fp)
}
 801276c:	e037883a 	mov	sp,fp
 8012770:	dfc00117 	ldw	ra,4(sp)
 8012774:	df000017 	ldw	fp,0(sp)
 8012778:	dec00204 	addi	sp,sp,8
 801277c:	f800283a 	ret

08012780 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8012780:	defffa04 	addi	sp,sp,-24
 8012784:	df000515 	stw	fp,20(sp)
 8012788:	df000504 	addi	fp,sp,20
 801278c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012790:	0005303a 	rdctl	r2,status
 8012794:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012798:	e0fffc17 	ldw	r3,-16(fp)
 801279c:	00bfff84 	movi	r2,-2
 80127a0:	1884703a 	and	r2,r3,r2
 80127a4:	1001703a 	wrctl	status,r2
  
  return context;
 80127a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80127ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80127b0:	e0bfff17 	ldw	r2,-4(fp)
 80127b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80127b8:	e0bffd17 	ldw	r2,-12(fp)
 80127bc:	10800017 	ldw	r2,0(r2)
 80127c0:	e0fffd17 	ldw	r3,-12(fp)
 80127c4:	18c00117 	ldw	r3,4(r3)
 80127c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80127cc:	e0bffd17 	ldw	r2,-12(fp)
 80127d0:	10800117 	ldw	r2,4(r2)
 80127d4:	e0fffd17 	ldw	r3,-12(fp)
 80127d8:	18c00017 	ldw	r3,0(r3)
 80127dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80127e0:	e0bffd17 	ldw	r2,-12(fp)
 80127e4:	e0fffd17 	ldw	r3,-12(fp)
 80127e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80127ec:	e0bffd17 	ldw	r2,-12(fp)
 80127f0:	e0fffd17 	ldw	r3,-12(fp)
 80127f4:	10c00015 	stw	r3,0(r2)
 80127f8:	e0bffb17 	ldw	r2,-20(fp)
 80127fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012800:	e0bffe17 	ldw	r2,-8(fp)
 8012804:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8012808:	e037883a 	mov	sp,fp
 801280c:	df000017 	ldw	fp,0(sp)
 8012810:	dec00104 	addi	sp,sp,4
 8012814:	f800283a 	ret

08012818 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8012818:	defffb04 	addi	sp,sp,-20
 801281c:	dfc00415 	stw	ra,16(sp)
 8012820:	df000315 	stw	fp,12(sp)
 8012824:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8012828:	d0a02517 	ldw	r2,-32620(gp)
 801282c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8012830:	d0a71c17 	ldw	r2,-25488(gp)
 8012834:	10800044 	addi	r2,r2,1
 8012838:	d0a71c15 	stw	r2,-25488(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801283c:	00002e06 	br	80128f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8012840:	e0bffd17 	ldw	r2,-12(fp)
 8012844:	10800017 	ldw	r2,0(r2)
 8012848:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801284c:	e0bffd17 	ldw	r2,-12(fp)
 8012850:	10800403 	ldbu	r2,16(r2)
 8012854:	10803fcc 	andi	r2,r2,255
 8012858:	10000426 	beq	r2,zero,801286c <alt_tick+0x54>
 801285c:	d0a71c17 	ldw	r2,-25488(gp)
 8012860:	1000021e 	bne	r2,zero,801286c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8012864:	e0bffd17 	ldw	r2,-12(fp)
 8012868:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801286c:	e0bffd17 	ldw	r2,-12(fp)
 8012870:	10800217 	ldw	r2,8(r2)
 8012874:	d0e71c17 	ldw	r3,-25488(gp)
 8012878:	18801d36 	bltu	r3,r2,80128f0 <alt_tick+0xd8>
 801287c:	e0bffd17 	ldw	r2,-12(fp)
 8012880:	10800403 	ldbu	r2,16(r2)
 8012884:	10803fcc 	andi	r2,r2,255
 8012888:	1000191e 	bne	r2,zero,80128f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801288c:	e0bffd17 	ldw	r2,-12(fp)
 8012890:	10800317 	ldw	r2,12(r2)
 8012894:	e0fffd17 	ldw	r3,-12(fp)
 8012898:	18c00517 	ldw	r3,20(r3)
 801289c:	1809883a 	mov	r4,r3
 80128a0:	103ee83a 	callr	r2
 80128a4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80128a8:	e0bfff17 	ldw	r2,-4(fp)
 80128ac:	1000031e 	bne	r2,zero,80128bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80128b0:	e13ffd17 	ldw	r4,-12(fp)
 80128b4:	80127800 	call	8012780 <alt_alarm_stop>
 80128b8:	00000d06 	br	80128f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80128bc:	e0bffd17 	ldw	r2,-12(fp)
 80128c0:	10c00217 	ldw	r3,8(r2)
 80128c4:	e0bfff17 	ldw	r2,-4(fp)
 80128c8:	1887883a 	add	r3,r3,r2
 80128cc:	e0bffd17 	ldw	r2,-12(fp)
 80128d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80128d4:	e0bffd17 	ldw	r2,-12(fp)
 80128d8:	10c00217 	ldw	r3,8(r2)
 80128dc:	d0a71c17 	ldw	r2,-25488(gp)
 80128e0:	1880032e 	bgeu	r3,r2,80128f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80128e4:	e0bffd17 	ldw	r2,-12(fp)
 80128e8:	00c00044 	movi	r3,1
 80128ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80128f0:	e0bffe17 	ldw	r2,-8(fp)
 80128f4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80128f8:	e0fffd17 	ldw	r3,-12(fp)
 80128fc:	d0a02504 	addi	r2,gp,-32620
 8012900:	18bfcf1e 	bne	r3,r2,8012840 <__alt_data_end+0xfc012840>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8012904:	0001883a 	nop
}
 8012908:	e037883a 	mov	sp,fp
 801290c:	dfc00117 	ldw	ra,4(sp)
 8012910:	df000017 	ldw	fp,0(sp)
 8012914:	dec00204 	addi	sp,sp,8
 8012918:	f800283a 	ret

0801291c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 801291c:	deffff04 	addi	sp,sp,-4
 8012920:	df000015 	stw	fp,0(sp)
 8012924:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8012928:	000170fa 	wrctl	ienable,zero
}
 801292c:	e037883a 	mov	sp,fp
 8012930:	df000017 	ldw	fp,0(sp)
 8012934:	dec00104 	addi	sp,sp,4
 8012938:	f800283a 	ret

0801293c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801293c:	defffa04 	addi	sp,sp,-24
 8012940:	dfc00515 	stw	ra,20(sp)
 8012944:	df000415 	stw	fp,16(sp)
 8012948:	df000404 	addi	fp,sp,16
 801294c:	e13ffe15 	stw	r4,-8(fp)
 8012950:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8012954:	e0bfff17 	ldw	r2,-4(fp)
 8012958:	10800017 	ldw	r2,0(r2)
 801295c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8012960:	e13ffe17 	ldw	r4,-8(fp)
 8012964:	80041e40 	call	80041e4 <strlen>
 8012968:	10800044 	addi	r2,r2,1
 801296c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8012970:	00000d06 	br	80129a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8012974:	e0bffc17 	ldw	r2,-16(fp)
 8012978:	10c00217 	ldw	r3,8(r2)
 801297c:	e0bffd17 	ldw	r2,-12(fp)
 8012980:	1809883a 	mov	r4,r3
 8012984:	e17ffe17 	ldw	r5,-8(fp)
 8012988:	100d883a 	mov	r6,r2
 801298c:	8012c6c0 	call	8012c6c <memcmp>
 8012990:	1000021e 	bne	r2,zero,801299c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8012994:	e0bffc17 	ldw	r2,-16(fp)
 8012998:	00000706 	br	80129b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801299c:	e0bffc17 	ldw	r2,-16(fp)
 80129a0:	10800017 	ldw	r2,0(r2)
 80129a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80129a8:	e0fffc17 	ldw	r3,-16(fp)
 80129ac:	e0bfff17 	ldw	r2,-4(fp)
 80129b0:	18bff01e 	bne	r3,r2,8012974 <__alt_data_end+0xfc012974>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80129b4:	0005883a 	mov	r2,zero
}
 80129b8:	e037883a 	mov	sp,fp
 80129bc:	dfc00117 	ldw	ra,4(sp)
 80129c0:	df000017 	ldw	fp,0(sp)
 80129c4:	dec00204 	addi	sp,sp,8
 80129c8:	f800283a 	ret

080129cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80129cc:	defffb04 	addi	sp,sp,-20
 80129d0:	dfc00415 	stw	ra,16(sp)
 80129d4:	df000315 	stw	fp,12(sp)
 80129d8:	df000304 	addi	fp,sp,12
 80129dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80129e0:	008200b4 	movhi	r2,2050
 80129e4:	10be1004 	addi	r2,r2,-1984
 80129e8:	10800017 	ldw	r2,0(r2)
 80129ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80129f0:	00003106 	br	8012ab8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 80129f4:	e0bffd17 	ldw	r2,-12(fp)
 80129f8:	10800217 	ldw	r2,8(r2)
 80129fc:	1009883a 	mov	r4,r2
 8012a00:	80041e40 	call	80041e4 <strlen>
 8012a04:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8012a08:	e0bffd17 	ldw	r2,-12(fp)
 8012a0c:	10c00217 	ldw	r3,8(r2)
 8012a10:	e0bffe17 	ldw	r2,-8(fp)
 8012a14:	10bfffc4 	addi	r2,r2,-1
 8012a18:	1885883a 	add	r2,r3,r2
 8012a1c:	10800003 	ldbu	r2,0(r2)
 8012a20:	10803fcc 	andi	r2,r2,255
 8012a24:	1080201c 	xori	r2,r2,128
 8012a28:	10bfe004 	addi	r2,r2,-128
 8012a2c:	10800bd8 	cmpnei	r2,r2,47
 8012a30:	1000031e 	bne	r2,zero,8012a40 <alt_find_file+0x74>
    {
      len -= 1;
 8012a34:	e0bffe17 	ldw	r2,-8(fp)
 8012a38:	10bfffc4 	addi	r2,r2,-1
 8012a3c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8012a40:	e0bffe17 	ldw	r2,-8(fp)
 8012a44:	e0ffff17 	ldw	r3,-4(fp)
 8012a48:	1885883a 	add	r2,r3,r2
 8012a4c:	10800003 	ldbu	r2,0(r2)
 8012a50:	10803fcc 	andi	r2,r2,255
 8012a54:	1080201c 	xori	r2,r2,128
 8012a58:	10bfe004 	addi	r2,r2,-128
 8012a5c:	10800be0 	cmpeqi	r2,r2,47
 8012a60:	1000081e 	bne	r2,zero,8012a84 <alt_find_file+0xb8>
 8012a64:	e0bffe17 	ldw	r2,-8(fp)
 8012a68:	e0ffff17 	ldw	r3,-4(fp)
 8012a6c:	1885883a 	add	r2,r3,r2
 8012a70:	10800003 	ldbu	r2,0(r2)
 8012a74:	10803fcc 	andi	r2,r2,255
 8012a78:	1080201c 	xori	r2,r2,128
 8012a7c:	10bfe004 	addi	r2,r2,-128
 8012a80:	10000a1e 	bne	r2,zero,8012aac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8012a84:	e0bffd17 	ldw	r2,-12(fp)
 8012a88:	10c00217 	ldw	r3,8(r2)
 8012a8c:	e0bffe17 	ldw	r2,-8(fp)
 8012a90:	1809883a 	mov	r4,r3
 8012a94:	e17fff17 	ldw	r5,-4(fp)
 8012a98:	100d883a 	mov	r6,r2
 8012a9c:	8012c6c0 	call	8012c6c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8012aa0:	1000021e 	bne	r2,zero,8012aac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8012aa4:	e0bffd17 	ldw	r2,-12(fp)
 8012aa8:	00000806 	br	8012acc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8012aac:	e0bffd17 	ldw	r2,-12(fp)
 8012ab0:	10800017 	ldw	r2,0(r2)
 8012ab4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8012ab8:	e0fffd17 	ldw	r3,-12(fp)
 8012abc:	008200b4 	movhi	r2,2050
 8012ac0:	10be1004 	addi	r2,r2,-1984
 8012ac4:	18bfcb1e 	bne	r3,r2,80129f4 <__alt_data_end+0xfc0129f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8012ac8:	0005883a 	mov	r2,zero
}
 8012acc:	e037883a 	mov	sp,fp
 8012ad0:	dfc00117 	ldw	ra,4(sp)
 8012ad4:	df000017 	ldw	fp,0(sp)
 8012ad8:	dec00204 	addi	sp,sp,8
 8012adc:	f800283a 	ret

08012ae0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8012ae0:	defffc04 	addi	sp,sp,-16
 8012ae4:	df000315 	stw	fp,12(sp)
 8012ae8:	df000304 	addi	fp,sp,12
 8012aec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8012af0:	00bffa04 	movi	r2,-24
 8012af4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8012af8:	e03ffd15 	stw	zero,-12(fp)
 8012afc:	00001d06 	br	8012b74 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8012b00:	008200b4 	movhi	r2,2050
 8012b04:	10b97b04 	addi	r2,r2,-6676
 8012b08:	e0fffd17 	ldw	r3,-12(fp)
 8012b0c:	18c00324 	muli	r3,r3,12
 8012b10:	10c5883a 	add	r2,r2,r3
 8012b14:	10800017 	ldw	r2,0(r2)
 8012b18:	1000131e 	bne	r2,zero,8012b68 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8012b1c:	008200b4 	movhi	r2,2050
 8012b20:	10b97b04 	addi	r2,r2,-6676
 8012b24:	e0fffd17 	ldw	r3,-12(fp)
 8012b28:	18c00324 	muli	r3,r3,12
 8012b2c:	10c5883a 	add	r2,r2,r3
 8012b30:	e0ffff17 	ldw	r3,-4(fp)
 8012b34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8012b38:	008200b4 	movhi	r2,2050
 8012b3c:	10be1404 	addi	r2,r2,-1968
 8012b40:	10c00017 	ldw	r3,0(r2)
 8012b44:	e0bffd17 	ldw	r2,-12(fp)
 8012b48:	1880040e 	bge	r3,r2,8012b5c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8012b4c:	008200b4 	movhi	r2,2050
 8012b50:	10be1404 	addi	r2,r2,-1968
 8012b54:	e0fffd17 	ldw	r3,-12(fp)
 8012b58:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8012b5c:	e0bffd17 	ldw	r2,-12(fp)
 8012b60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8012b64:	00000606 	br	8012b80 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8012b68:	e0bffd17 	ldw	r2,-12(fp)
 8012b6c:	10800044 	addi	r2,r2,1
 8012b70:	e0bffd15 	stw	r2,-12(fp)
 8012b74:	e0bffd17 	ldw	r2,-12(fp)
 8012b78:	10800810 	cmplti	r2,r2,32
 8012b7c:	103fe01e 	bne	r2,zero,8012b00 <__alt_data_end+0xfc012b00>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8012b80:	e0bffe17 	ldw	r2,-8(fp)
}
 8012b84:	e037883a 	mov	sp,fp
 8012b88:	df000017 	ldw	fp,0(sp)
 8012b8c:	dec00104 	addi	sp,sp,4
 8012b90:	f800283a 	ret

08012b94 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8012b94:	defffb04 	addi	sp,sp,-20
 8012b98:	df000415 	stw	fp,16(sp)
 8012b9c:	df000404 	addi	fp,sp,16
 8012ba0:	e13ffe15 	stw	r4,-8(fp)
 8012ba4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8012ba8:	e0bfff17 	ldw	r2,-4(fp)
 8012bac:	10840070 	cmpltui	r2,r2,4097
 8012bb0:	1000021e 	bne	r2,zero,8012bbc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8012bb4:	00840004 	movi	r2,4096
 8012bb8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8012bbc:	e0fffe17 	ldw	r3,-8(fp)
 8012bc0:	e0bfff17 	ldw	r2,-4(fp)
 8012bc4:	1885883a 	add	r2,r3,r2
 8012bc8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8012bcc:	e0bffe17 	ldw	r2,-8(fp)
 8012bd0:	e0bffc15 	stw	r2,-16(fp)
 8012bd4:	00000506 	br	8012bec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8012bd8:	e0bffc17 	ldw	r2,-16(fp)
 8012bdc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8012be0:	e0bffc17 	ldw	r2,-16(fp)
 8012be4:	10800804 	addi	r2,r2,32
 8012be8:	e0bffc15 	stw	r2,-16(fp)
 8012bec:	e0fffc17 	ldw	r3,-16(fp)
 8012bf0:	e0bffd17 	ldw	r2,-12(fp)
 8012bf4:	18bff836 	bltu	r3,r2,8012bd8 <__alt_data_end+0xfc012bd8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8012bf8:	e0bffe17 	ldw	r2,-8(fp)
 8012bfc:	108007cc 	andi	r2,r2,31
 8012c00:	10000226 	beq	r2,zero,8012c0c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8012c04:	e0bffc17 	ldw	r2,-16(fp)
 8012c08:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8012c0c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8012c10:	e037883a 	mov	sp,fp
 8012c14:	df000017 	ldw	fp,0(sp)
 8012c18:	dec00104 	addi	sp,sp,4
 8012c1c:	f800283a 	ret

08012c20 <atexit>:
 8012c20:	200b883a 	mov	r5,r4
 8012c24:	000d883a 	mov	r6,zero
 8012c28:	0009883a 	mov	r4,zero
 8012c2c:	000f883a 	mov	r7,zero
 8012c30:	8012ce81 	jmpi	8012ce8 <__register_exitproc>

08012c34 <exit>:
 8012c34:	defffe04 	addi	sp,sp,-8
 8012c38:	000b883a 	mov	r5,zero
 8012c3c:	dc000015 	stw	r16,0(sp)
 8012c40:	dfc00115 	stw	ra,4(sp)
 8012c44:	2021883a 	mov	r16,r4
 8012c48:	8012dfc0 	call	8012dfc <__call_exitprocs>
 8012c4c:	008200b4 	movhi	r2,2050
 8012c50:	10be0a04 	addi	r2,r2,-2008
 8012c54:	11000017 	ldw	r4,0(r2)
 8012c58:	20800f17 	ldw	r2,60(r4)
 8012c5c:	10000126 	beq	r2,zero,8012c64 <exit+0x30>
 8012c60:	103ee83a 	callr	r2
 8012c64:	8009883a 	mov	r4,r16
 8012c68:	8012f900 	call	8012f90 <_exit>

08012c6c <memcmp>:
 8012c6c:	01c000c4 	movi	r7,3
 8012c70:	3980192e 	bgeu	r7,r6,8012cd8 <memcmp+0x6c>
 8012c74:	2144b03a 	or	r2,r4,r5
 8012c78:	11c4703a 	and	r2,r2,r7
 8012c7c:	10000f26 	beq	r2,zero,8012cbc <memcmp+0x50>
 8012c80:	20800003 	ldbu	r2,0(r4)
 8012c84:	28c00003 	ldbu	r3,0(r5)
 8012c88:	10c0151e 	bne	r2,r3,8012ce0 <memcmp+0x74>
 8012c8c:	31bfff84 	addi	r6,r6,-2
 8012c90:	01ffffc4 	movi	r7,-1
 8012c94:	00000406 	br	8012ca8 <memcmp+0x3c>
 8012c98:	20800003 	ldbu	r2,0(r4)
 8012c9c:	28c00003 	ldbu	r3,0(r5)
 8012ca0:	31bfffc4 	addi	r6,r6,-1
 8012ca4:	10c00e1e 	bne	r2,r3,8012ce0 <memcmp+0x74>
 8012ca8:	21000044 	addi	r4,r4,1
 8012cac:	29400044 	addi	r5,r5,1
 8012cb0:	31fff91e 	bne	r6,r7,8012c98 <__alt_data_end+0xfc012c98>
 8012cb4:	0005883a 	mov	r2,zero
 8012cb8:	f800283a 	ret
 8012cbc:	20c00017 	ldw	r3,0(r4)
 8012cc0:	28800017 	ldw	r2,0(r5)
 8012cc4:	1880041e 	bne	r3,r2,8012cd8 <memcmp+0x6c>
 8012cc8:	31bfff04 	addi	r6,r6,-4
 8012ccc:	21000104 	addi	r4,r4,4
 8012cd0:	29400104 	addi	r5,r5,4
 8012cd4:	39bff936 	bltu	r7,r6,8012cbc <__alt_data_end+0xfc012cbc>
 8012cd8:	303fe91e 	bne	r6,zero,8012c80 <__alt_data_end+0xfc012c80>
 8012cdc:	003ff506 	br	8012cb4 <__alt_data_end+0xfc012cb4>
 8012ce0:	10c5c83a 	sub	r2,r2,r3
 8012ce4:	f800283a 	ret

08012ce8 <__register_exitproc>:
 8012ce8:	008200b4 	movhi	r2,2050
 8012cec:	defffa04 	addi	sp,sp,-24
 8012cf0:	10be0a04 	addi	r2,r2,-2008
 8012cf4:	dc000315 	stw	r16,12(sp)
 8012cf8:	14000017 	ldw	r16,0(r2)
 8012cfc:	dc400415 	stw	r17,16(sp)
 8012d00:	dfc00515 	stw	ra,20(sp)
 8012d04:	80805217 	ldw	r2,328(r16)
 8012d08:	2023883a 	mov	r17,r4
 8012d0c:	10003626 	beq	r2,zero,8012de8 <__register_exitproc+0x100>
 8012d10:	10c00117 	ldw	r3,4(r2)
 8012d14:	010007c4 	movi	r4,31
 8012d18:	20c00e16 	blt	r4,r3,8012d54 <__register_exitproc+0x6c>
 8012d1c:	1a400044 	addi	r9,r3,1
 8012d20:	8800211e 	bne	r17,zero,8012da8 <__register_exitproc+0xc0>
 8012d24:	18c00084 	addi	r3,r3,2
 8012d28:	18c7883a 	add	r3,r3,r3
 8012d2c:	18c7883a 	add	r3,r3,r3
 8012d30:	12400115 	stw	r9,4(r2)
 8012d34:	10c7883a 	add	r3,r2,r3
 8012d38:	19400015 	stw	r5,0(r3)
 8012d3c:	0005883a 	mov	r2,zero
 8012d40:	dfc00517 	ldw	ra,20(sp)
 8012d44:	dc400417 	ldw	r17,16(sp)
 8012d48:	dc000317 	ldw	r16,12(sp)
 8012d4c:	dec00604 	addi	sp,sp,24
 8012d50:	f800283a 	ret
 8012d54:	00800034 	movhi	r2,0
 8012d58:	10800004 	addi	r2,r2,0
 8012d5c:	10002526 	beq	r2,zero,8012df4 <__register_exitproc+0x10c>
 8012d60:	01006404 	movi	r4,400
 8012d64:	d9400015 	stw	r5,0(sp)
 8012d68:	d9800115 	stw	r6,4(sp)
 8012d6c:	d9c00215 	stw	r7,8(sp)
 8012d70:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8012d74:	d9400017 	ldw	r5,0(sp)
 8012d78:	d9800117 	ldw	r6,4(sp)
 8012d7c:	d9c00217 	ldw	r7,8(sp)
 8012d80:	10001c26 	beq	r2,zero,8012df4 <__register_exitproc+0x10c>
 8012d84:	80c05217 	ldw	r3,328(r16)
 8012d88:	10000115 	stw	zero,4(r2)
 8012d8c:	02400044 	movi	r9,1
 8012d90:	10c00015 	stw	r3,0(r2)
 8012d94:	80805215 	stw	r2,328(r16)
 8012d98:	10006215 	stw	zero,392(r2)
 8012d9c:	10006315 	stw	zero,396(r2)
 8012da0:	0007883a 	mov	r3,zero
 8012da4:	883fdf26 	beq	r17,zero,8012d24 <__alt_data_end+0xfc012d24>
 8012da8:	18d1883a 	add	r8,r3,r3
 8012dac:	4211883a 	add	r8,r8,r8
 8012db0:	1211883a 	add	r8,r2,r8
 8012db4:	41802215 	stw	r6,136(r8)
 8012db8:	01000044 	movi	r4,1
 8012dbc:	11806217 	ldw	r6,392(r2)
 8012dc0:	20c8983a 	sll	r4,r4,r3
 8012dc4:	310cb03a 	or	r6,r6,r4
 8012dc8:	11806215 	stw	r6,392(r2)
 8012dcc:	41c04215 	stw	r7,264(r8)
 8012dd0:	01800084 	movi	r6,2
 8012dd4:	89bfd31e 	bne	r17,r6,8012d24 <__alt_data_end+0xfc012d24>
 8012dd8:	11806317 	ldw	r6,396(r2)
 8012ddc:	3108b03a 	or	r4,r6,r4
 8012de0:	11006315 	stw	r4,396(r2)
 8012de4:	003fcf06 	br	8012d24 <__alt_data_end+0xfc012d24>
 8012de8:	80805304 	addi	r2,r16,332
 8012dec:	80805215 	stw	r2,328(r16)
 8012df0:	003fc706 	br	8012d10 <__alt_data_end+0xfc012d10>
 8012df4:	00bfffc4 	movi	r2,-1
 8012df8:	003fd106 	br	8012d40 <__alt_data_end+0xfc012d40>

08012dfc <__call_exitprocs>:
 8012dfc:	008200b4 	movhi	r2,2050
 8012e00:	10be0a04 	addi	r2,r2,-2008
 8012e04:	10800017 	ldw	r2,0(r2)
 8012e08:	defff404 	addi	sp,sp,-48
 8012e0c:	dd800815 	stw	r22,32(sp)
 8012e10:	d8800015 	stw	r2,0(sp)
 8012e14:	10805204 	addi	r2,r2,328
 8012e18:	dd000615 	stw	r20,24(sp)
 8012e1c:	dc800415 	stw	r18,16(sp)
 8012e20:	dfc00b15 	stw	ra,44(sp)
 8012e24:	df000a15 	stw	fp,40(sp)
 8012e28:	ddc00915 	stw	r23,36(sp)
 8012e2c:	dd400715 	stw	r21,28(sp)
 8012e30:	dcc00515 	stw	r19,20(sp)
 8012e34:	dc400315 	stw	r17,12(sp)
 8012e38:	dc000215 	stw	r16,8(sp)
 8012e3c:	2025883a 	mov	r18,r4
 8012e40:	2829883a 	mov	r20,r5
 8012e44:	d8800115 	stw	r2,4(sp)
 8012e48:	05bfffc4 	movi	r22,-1
 8012e4c:	d8800017 	ldw	r2,0(sp)
 8012e50:	14c05217 	ldw	r19,328(r2)
 8012e54:	98001d26 	beq	r19,zero,8012ecc <__call_exitprocs+0xd0>
 8012e58:	dd400117 	ldw	r21,4(sp)
 8012e5c:	98800117 	ldw	r2,4(r19)
 8012e60:	173fffc4 	addi	fp,r2,-1
 8012e64:	e0000d16 	blt	fp,zero,8012e9c <__call_exitprocs+0xa0>
 8012e68:	14000044 	addi	r16,r2,1
 8012e6c:	8421883a 	add	r16,r16,r16
 8012e70:	8421883a 	add	r16,r16,r16
 8012e74:	84402004 	addi	r17,r16,128
 8012e78:	9c63883a 	add	r17,r19,r17
 8012e7c:	9c21883a 	add	r16,r19,r16
 8012e80:	a0001e26 	beq	r20,zero,8012efc <__call_exitprocs+0x100>
 8012e84:	80804017 	ldw	r2,256(r16)
 8012e88:	15001c26 	beq	r2,r20,8012efc <__call_exitprocs+0x100>
 8012e8c:	e73fffc4 	addi	fp,fp,-1
 8012e90:	843fff04 	addi	r16,r16,-4
 8012e94:	8c7fff04 	addi	r17,r17,-4
 8012e98:	e5bff91e 	bne	fp,r22,8012e80 <__alt_data_end+0xfc012e80>
 8012e9c:	00800034 	movhi	r2,0
 8012ea0:	10800004 	addi	r2,r2,0
 8012ea4:	10000926 	beq	r2,zero,8012ecc <__call_exitprocs+0xd0>
 8012ea8:	98800117 	ldw	r2,4(r19)
 8012eac:	1000311e 	bne	r2,zero,8012f74 <__call_exitprocs+0x178>
 8012eb0:	98800017 	ldw	r2,0(r19)
 8012eb4:	10003426 	beq	r2,zero,8012f88 <__call_exitprocs+0x18c>
 8012eb8:	9809883a 	mov	r4,r19
 8012ebc:	a8800015 	stw	r2,0(r21)
 8012ec0:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8012ec4:	acc00017 	ldw	r19,0(r21)
 8012ec8:	983fe41e 	bne	r19,zero,8012e5c <__alt_data_end+0xfc012e5c>
 8012ecc:	dfc00b17 	ldw	ra,44(sp)
 8012ed0:	df000a17 	ldw	fp,40(sp)
 8012ed4:	ddc00917 	ldw	r23,36(sp)
 8012ed8:	dd800817 	ldw	r22,32(sp)
 8012edc:	dd400717 	ldw	r21,28(sp)
 8012ee0:	dd000617 	ldw	r20,24(sp)
 8012ee4:	dcc00517 	ldw	r19,20(sp)
 8012ee8:	dc800417 	ldw	r18,16(sp)
 8012eec:	dc400317 	ldw	r17,12(sp)
 8012ef0:	dc000217 	ldw	r16,8(sp)
 8012ef4:	dec00c04 	addi	sp,sp,48
 8012ef8:	f800283a 	ret
 8012efc:	98800117 	ldw	r2,4(r19)
 8012f00:	80c00017 	ldw	r3,0(r16)
 8012f04:	10bfffc4 	addi	r2,r2,-1
 8012f08:	17001526 	beq	r2,fp,8012f60 <__call_exitprocs+0x164>
 8012f0c:	80000015 	stw	zero,0(r16)
 8012f10:	183fde26 	beq	r3,zero,8012e8c <__alt_data_end+0xfc012e8c>
 8012f14:	00800044 	movi	r2,1
 8012f18:	1708983a 	sll	r4,r2,fp
 8012f1c:	98806217 	ldw	r2,392(r19)
 8012f20:	9dc00117 	ldw	r23,4(r19)
 8012f24:	2084703a 	and	r2,r4,r2
 8012f28:	1000061e 	bne	r2,zero,8012f44 <__call_exitprocs+0x148>
 8012f2c:	183ee83a 	callr	r3
 8012f30:	98800117 	ldw	r2,4(r19)
 8012f34:	15ffc51e 	bne	r2,r23,8012e4c <__alt_data_end+0xfc012e4c>
 8012f38:	a8800017 	ldw	r2,0(r21)
 8012f3c:	14ffd326 	beq	r2,r19,8012e8c <__alt_data_end+0xfc012e8c>
 8012f40:	003fc206 	br	8012e4c <__alt_data_end+0xfc012e4c>
 8012f44:	98806317 	ldw	r2,396(r19)
 8012f48:	2084703a 	and	r2,r4,r2
 8012f4c:	1000061e 	bne	r2,zero,8012f68 <__call_exitprocs+0x16c>
 8012f50:	89400017 	ldw	r5,0(r17)
 8012f54:	9009883a 	mov	r4,r18
 8012f58:	183ee83a 	callr	r3
 8012f5c:	003ff406 	br	8012f30 <__alt_data_end+0xfc012f30>
 8012f60:	9f000115 	stw	fp,4(r19)
 8012f64:	003fea06 	br	8012f10 <__alt_data_end+0xfc012f10>
 8012f68:	89000017 	ldw	r4,0(r17)
 8012f6c:	183ee83a 	callr	r3
 8012f70:	003fef06 	br	8012f30 <__alt_data_end+0xfc012f30>
 8012f74:	98800017 	ldw	r2,0(r19)
 8012f78:	982b883a 	mov	r21,r19
 8012f7c:	1027883a 	mov	r19,r2
 8012f80:	983fb61e 	bne	r19,zero,8012e5c <__alt_data_end+0xfc012e5c>
 8012f84:	003fd106 	br	8012ecc <__alt_data_end+0xfc012ecc>
 8012f88:	0005883a 	mov	r2,zero
 8012f8c:	003ffa06 	br	8012f78 <__alt_data_end+0xfc012f78>

08012f90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8012f90:	defffd04 	addi	sp,sp,-12
 8012f94:	df000215 	stw	fp,8(sp)
 8012f98:	df000204 	addi	fp,sp,8
 8012f9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8012fa0:	0001883a 	nop
 8012fa4:	e0bfff17 	ldw	r2,-4(fp)
 8012fa8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8012fac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8012fb0:	10000226 	beq	r2,zero,8012fbc <_exit+0x2c>
    ALT_SIM_FAIL();
 8012fb4:	002af070 	cmpltui	zero,zero,43969
 8012fb8:	00000106 	br	8012fc0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8012fbc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8012fc0:	003fff06 	br	8012fc0 <__alt_data_end+0xfc012fc0>
